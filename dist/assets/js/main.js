(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
// This file is autogenerated via the `commonjs` Grunt task. You can require() this file in a CommonJS environment.
require('../../js/transition.js')
require('../../js/alert.js')
require('../../js/button.js')
require('../../js/carousel.js')
require('../../js/collapse.js')
require('../../js/dropdown.js')
require('../../js/modal.js')
require('../../js/tooltip.js')
require('../../js/popover.js')
require('../../js/scrollspy.js')
require('../../js/tab.js')
require('../../js/affix.js')
},{"../../js/affix.js":2,"../../js/alert.js":3,"../../js/button.js":4,"../../js/carousel.js":5,"../../js/collapse.js":6,"../../js/dropdown.js":7,"../../js/modal.js":8,"../../js/popover.js":9,"../../js/scrollspy.js":10,"../../js/tab.js":11,"../../js/tooltip.js":12,"../../js/transition.js":13}],2:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: affix.js v3.4.1
 * https://getbootstrap.com/docs/3.4/javascript/#affix
 * ========================================================================
 * Copyright 2011-2019 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // AFFIX CLASS DEFINITION
  // ======================

  var Affix = function (element, options) {
    this.options = $.extend({}, Affix.DEFAULTS, options)

    var target = this.options.target === Affix.DEFAULTS.target ? $(this.options.target) : $(document).find(this.options.target)

    this.$target = target
      .on('scroll.bs.affix.data-api', $.proxy(this.checkPosition, this))
      .on('click.bs.affix.data-api',  $.proxy(this.checkPositionWithEventLoop, this))

    this.$element     = $(element)
    this.affixed      = null
    this.unpin        = null
    this.pinnedOffset = null

    this.checkPosition()
  }

  Affix.VERSION  = '3.4.1'

  Affix.RESET    = 'affix affix-top affix-bottom'

  Affix.DEFAULTS = {
    offset: 0,
    target: window
  }

  Affix.prototype.getState = function (scrollHeight, height, offsetTop, offsetBottom) {
    var scrollTop    = this.$target.scrollTop()
    var position     = this.$element.offset()
    var targetHeight = this.$target.height()

    if (offsetTop != null && this.affixed == 'top') return scrollTop < offsetTop ? 'top' : false

    if (this.affixed == 'bottom') {
      if (offsetTop != null) return (scrollTop + this.unpin <= position.top) ? false : 'bottom'
      return (scrollTop + targetHeight <= scrollHeight - offsetBottom) ? false : 'bottom'
    }

    var initializing   = this.affixed == null
    var colliderTop    = initializing ? scrollTop : position.top
    var colliderHeight = initializing ? targetHeight : height

    if (offsetTop != null && scrollTop <= offsetTop) return 'top'
    if (offsetBottom != null && (colliderTop + colliderHeight >= scrollHeight - offsetBottom)) return 'bottom'

    return false
  }

  Affix.prototype.getPinnedOffset = function () {
    if (this.pinnedOffset) return this.pinnedOffset
    this.$element.removeClass(Affix.RESET).addClass('affix')
    var scrollTop = this.$target.scrollTop()
    var position  = this.$element.offset()
    return (this.pinnedOffset = position.top - scrollTop)
  }

  Affix.prototype.checkPositionWithEventLoop = function () {
    setTimeout($.proxy(this.checkPosition, this), 1)
  }

  Affix.prototype.checkPosition = function () {
    if (!this.$element.is(':visible')) return

    var height       = this.$element.height()
    var offset       = this.options.offset
    var offsetTop    = offset.top
    var offsetBottom = offset.bottom
    var scrollHeight = Math.max($(document).height(), $(document.body).height())

    if (typeof offset != 'object')         offsetBottom = offsetTop = offset
    if (typeof offsetTop == 'function')    offsetTop    = offset.top(this.$element)
    if (typeof offsetBottom == 'function') offsetBottom = offset.bottom(this.$element)

    var affix = this.getState(scrollHeight, height, offsetTop, offsetBottom)

    if (this.affixed != affix) {
      if (this.unpin != null) this.$element.css('top', '')

      var affixType = 'affix' + (affix ? '-' + affix : '')
      var e         = $.Event(affixType + '.bs.affix')

      this.$element.trigger(e)

      if (e.isDefaultPrevented()) return

      this.affixed = affix
      this.unpin = affix == 'bottom' ? this.getPinnedOffset() : null

      this.$element
        .removeClass(Affix.RESET)
        .addClass(affixType)
        .trigger(affixType.replace('affix', 'affixed') + '.bs.affix')
    }

    if (affix == 'bottom') {
      this.$element.offset({
        top: scrollHeight - height - offsetBottom
      })
    }
  }


  // AFFIX PLUGIN DEFINITION
  // =======================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.affix')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.affix', (data = new Affix(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.affix

  $.fn.affix             = Plugin
  $.fn.affix.Constructor = Affix


  // AFFIX NO CONFLICT
  // =================

  $.fn.affix.noConflict = function () {
    $.fn.affix = old
    return this
  }


  // AFFIX DATA-API
  // ==============

  $(window).on('load', function () {
    $('[data-spy="affix"]').each(function () {
      var $spy = $(this)
      var data = $spy.data()

      data.offset = data.offset || {}

      if (data.offsetBottom != null) data.offset.bottom = data.offsetBottom
      if (data.offsetTop    != null) data.offset.top    = data.offsetTop

      Plugin.call($spy, data)
    })
  })

}(jQuery);

},{}],3:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: alert.js v3.4.1
 * https://getbootstrap.com/docs/3.4/javascript/#alerts
 * ========================================================================
 * Copyright 2011-2019 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // ALERT CLASS DEFINITION
  // ======================

  var dismiss = '[data-dismiss="alert"]'
  var Alert   = function (el) {
    $(el).on('click', dismiss, this.close)
  }

  Alert.VERSION = '3.4.1'

  Alert.TRANSITION_DURATION = 150

  Alert.prototype.close = function (e) {
    var $this    = $(this)
    var selector = $this.attr('data-target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    selector    = selector === '#' ? [] : selector
    var $parent = $(document).find(selector)

    if (e) e.preventDefault()

    if (!$parent.length) {
      $parent = $this.closest('.alert')
    }

    $parent.trigger(e = $.Event('close.bs.alert'))

    if (e.isDefaultPrevented()) return

    $parent.removeClass('in')

    function removeElement() {
      // detach from parent, fire event then clean up data
      $parent.detach().trigger('closed.bs.alert').remove()
    }

    $.support.transition && $parent.hasClass('fade') ?
      $parent
        .one('bsTransitionEnd', removeElement)
        .emulateTransitionEnd(Alert.TRANSITION_DURATION) :
      removeElement()
  }


  // ALERT PLUGIN DEFINITION
  // =======================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.alert')

      if (!data) $this.data('bs.alert', (data = new Alert(this)))
      if (typeof option == 'string') data[option].call($this)
    })
  }

  var old = $.fn.alert

  $.fn.alert             = Plugin
  $.fn.alert.Constructor = Alert


  // ALERT NO CONFLICT
  // =================

  $.fn.alert.noConflict = function () {
    $.fn.alert = old
    return this
  }


  // ALERT DATA-API
  // ==============

  $(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close)

}(jQuery);

},{}],4:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: button.js v3.4.1
 * https://getbootstrap.com/docs/3.4/javascript/#buttons
 * ========================================================================
 * Copyright 2011-2019 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // BUTTON PUBLIC CLASS DEFINITION
  // ==============================

  var Button = function (element, options) {
    this.$element  = $(element)
    this.options   = $.extend({}, Button.DEFAULTS, options)
    this.isLoading = false
  }

  Button.VERSION  = '3.4.1'

  Button.DEFAULTS = {
    loadingText: 'loading...'
  }

  Button.prototype.setState = function (state) {
    var d    = 'disabled'
    var $el  = this.$element
    var val  = $el.is('input') ? 'val' : 'html'
    var data = $el.data()

    state += 'Text'

    if (data.resetText == null) $el.data('resetText', $el[val]())

    // push to event loop to allow forms to submit
    setTimeout($.proxy(function () {
      $el[val](data[state] == null ? this.options[state] : data[state])

      if (state == 'loadingText') {
        this.isLoading = true
        $el.addClass(d).attr(d, d).prop(d, true)
      } else if (this.isLoading) {
        this.isLoading = false
        $el.removeClass(d).removeAttr(d).prop(d, false)
      }
    }, this), 0)
  }

  Button.prototype.toggle = function () {
    var changed = true
    var $parent = this.$element.closest('[data-toggle="buttons"]')

    if ($parent.length) {
      var $input = this.$element.find('input')
      if ($input.prop('type') == 'radio') {
        if ($input.prop('checked')) changed = false
        $parent.find('.active').removeClass('active')
        this.$element.addClass('active')
      } else if ($input.prop('type') == 'checkbox') {
        if (($input.prop('checked')) !== this.$element.hasClass('active')) changed = false
        this.$element.toggleClass('active')
      }
      $input.prop('checked', this.$element.hasClass('active'))
      if (changed) $input.trigger('change')
    } else {
      this.$element.attr('aria-pressed', !this.$element.hasClass('active'))
      this.$element.toggleClass('active')
    }
  }


  // BUTTON PLUGIN DEFINITION
  // ========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.button')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.button', (data = new Button(this, options)))

      if (option == 'toggle') data.toggle()
      else if (option) data.setState(option)
    })
  }

  var old = $.fn.button

  $.fn.button             = Plugin
  $.fn.button.Constructor = Button


  // BUTTON NO CONFLICT
  // ==================

  $.fn.button.noConflict = function () {
    $.fn.button = old
    return this
  }


  // BUTTON DATA-API
  // ===============

  $(document)
    .on('click.bs.button.data-api', '[data-toggle^="button"]', function (e) {
      var $btn = $(e.target).closest('.btn')
      Plugin.call($btn, 'toggle')
      if (!($(e.target).is('input[type="radio"], input[type="checkbox"]'))) {
        // Prevent double click on radios, and the double selections (so cancellation) on checkboxes
        e.preventDefault()
        // The target component still receive the focus
        if ($btn.is('input,button')) $btn.trigger('focus')
        else $btn.find('input:visible,button:visible').first().trigger('focus')
      }
    })
    .on('focus.bs.button.data-api blur.bs.button.data-api', '[data-toggle^="button"]', function (e) {
      $(e.target).closest('.btn').toggleClass('focus', /^focus(in)?$/.test(e.type))
    })

}(jQuery);

},{}],5:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: carousel.js v3.4.1
 * https://getbootstrap.com/docs/3.4/javascript/#carousel
 * ========================================================================
 * Copyright 2011-2019 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // CAROUSEL CLASS DEFINITION
  // =========================

  var Carousel = function (element, options) {
    this.$element    = $(element)
    this.$indicators = this.$element.find('.carousel-indicators')
    this.options     = options
    this.paused      = null
    this.sliding     = null
    this.interval    = null
    this.$active     = null
    this.$items      = null

    this.options.keyboard && this.$element.on('keydown.bs.carousel', $.proxy(this.keydown, this))

    this.options.pause == 'hover' && !('ontouchstart' in document.documentElement) && this.$element
      .on('mouseenter.bs.carousel', $.proxy(this.pause, this))
      .on('mouseleave.bs.carousel', $.proxy(this.cycle, this))
  }

  Carousel.VERSION  = '3.4.1'

  Carousel.TRANSITION_DURATION = 600

  Carousel.DEFAULTS = {
    interval: 5000,
    pause: 'hover',
    wrap: true,
    keyboard: true
  }

  Carousel.prototype.keydown = function (e) {
    if (/input|textarea/i.test(e.target.tagName)) return
    switch (e.which) {
      case 37: this.prev(); break
      case 39: this.next(); break
      default: return
    }

    e.preventDefault()
  }

  Carousel.prototype.cycle = function (e) {
    e || (this.paused = false)

    this.interval && clearInterval(this.interval)

    this.options.interval
      && !this.paused
      && (this.interval = setInterval($.proxy(this.next, this), this.options.interval))

    return this
  }

  Carousel.prototype.getItemIndex = function (item) {
    this.$items = item.parent().children('.item')
    return this.$items.index(item || this.$active)
  }

  Carousel.prototype.getItemForDirection = function (direction, active) {
    var activeIndex = this.getItemIndex(active)
    var willWrap = (direction == 'prev' && activeIndex === 0)
                || (direction == 'next' && activeIndex == (this.$items.length - 1))
    if (willWrap && !this.options.wrap) return active
    var delta = direction == 'prev' ? -1 : 1
    var itemIndex = (activeIndex + delta) % this.$items.length
    return this.$items.eq(itemIndex)
  }

  Carousel.prototype.to = function (pos) {
    var that        = this
    var activeIndex = this.getItemIndex(this.$active = this.$element.find('.item.active'))

    if (pos > (this.$items.length - 1) || pos < 0) return

    if (this.sliding)       return this.$element.one('slid.bs.carousel', function () { that.to(pos) }) // yes, "slid"
    if (activeIndex == pos) return this.pause().cycle()

    return this.slide(pos > activeIndex ? 'next' : 'prev', this.$items.eq(pos))
  }

  Carousel.prototype.pause = function (e) {
    e || (this.paused = true)

    if (this.$element.find('.next, .prev').length && $.support.transition) {
      this.$element.trigger($.support.transition.end)
      this.cycle(true)
    }

    this.interval = clearInterval(this.interval)

    return this
  }

  Carousel.prototype.next = function () {
    if (this.sliding) return
    return this.slide('next')
  }

  Carousel.prototype.prev = function () {
    if (this.sliding) return
    return this.slide('prev')
  }

  Carousel.prototype.slide = function (type, next) {
    var $active   = this.$element.find('.item.active')
    var $next     = next || this.getItemForDirection(type, $active)
    var isCycling = this.interval
    var direction = type == 'next' ? 'left' : 'right'
    var that      = this

    if ($next.hasClass('active')) return (this.sliding = false)

    var relatedTarget = $next[0]
    var slideEvent = $.Event('slide.bs.carousel', {
      relatedTarget: relatedTarget,
      direction: direction
    })
    this.$element.trigger(slideEvent)
    if (slideEvent.isDefaultPrevented()) return

    this.sliding = true

    isCycling && this.pause()

    if (this.$indicators.length) {
      this.$indicators.find('.active').removeClass('active')
      var $nextIndicator = $(this.$indicators.children()[this.getItemIndex($next)])
      $nextIndicator && $nextIndicator.addClass('active')
    }

    var slidEvent = $.Event('slid.bs.carousel', { relatedTarget: relatedTarget, direction: direction }) // yes, "slid"
    if ($.support.transition && this.$element.hasClass('slide')) {
      $next.addClass(type)
      if (typeof $next === 'object' && $next.length) {
        $next[0].offsetWidth // force reflow
      }
      $active.addClass(direction)
      $next.addClass(direction)
      $active
        .one('bsTransitionEnd', function () {
          $next.removeClass([type, direction].join(' ')).addClass('active')
          $active.removeClass(['active', direction].join(' '))
          that.sliding = false
          setTimeout(function () {
            that.$element.trigger(slidEvent)
          }, 0)
        })
        .emulateTransitionEnd(Carousel.TRANSITION_DURATION)
    } else {
      $active.removeClass('active')
      $next.addClass('active')
      this.sliding = false
      this.$element.trigger(slidEvent)
    }

    isCycling && this.cycle()

    return this
  }


  // CAROUSEL PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.carousel')
      var options = $.extend({}, Carousel.DEFAULTS, $this.data(), typeof option == 'object' && option)
      var action  = typeof option == 'string' ? option : options.slide

      if (!data) $this.data('bs.carousel', (data = new Carousel(this, options)))
      if (typeof option == 'number') data.to(option)
      else if (action) data[action]()
      else if (options.interval) data.pause().cycle()
    })
  }

  var old = $.fn.carousel

  $.fn.carousel             = Plugin
  $.fn.carousel.Constructor = Carousel


  // CAROUSEL NO CONFLICT
  // ====================

  $.fn.carousel.noConflict = function () {
    $.fn.carousel = old
    return this
  }


  // CAROUSEL DATA-API
  // =================

  var clickHandler = function (e) {
    var $this   = $(this)
    var href    = $this.attr('href')
    if (href) {
      href = href.replace(/.*(?=#[^\s]+$)/, '') // strip for ie7
    }

    var target  = $this.attr('data-target') || href
    var $target = $(document).find(target)

    if (!$target.hasClass('carousel')) return

    var options = $.extend({}, $target.data(), $this.data())
    var slideIndex = $this.attr('data-slide-to')
    if (slideIndex) options.interval = false

    Plugin.call($target, options)

    if (slideIndex) {
      $target.data('bs.carousel').to(slideIndex)
    }

    e.preventDefault()
  }

  $(document)
    .on('click.bs.carousel.data-api', '[data-slide]', clickHandler)
    .on('click.bs.carousel.data-api', '[data-slide-to]', clickHandler)

  $(window).on('load', function () {
    $('[data-ride="carousel"]').each(function () {
      var $carousel = $(this)
      Plugin.call($carousel, $carousel.data())
    })
  })

}(jQuery);

},{}],6:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: collapse.js v3.4.1
 * https://getbootstrap.com/docs/3.4/javascript/#collapse
 * ========================================================================
 * Copyright 2011-2019 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

/* jshint latedef: false */

+function ($) {
  'use strict';

  // COLLAPSE PUBLIC CLASS DEFINITION
  // ================================

  var Collapse = function (element, options) {
    this.$element      = $(element)
    this.options       = $.extend({}, Collapse.DEFAULTS, options)
    this.$trigger      = $('[data-toggle="collapse"][href="#' + element.id + '"],' +
                           '[data-toggle="collapse"][data-target="#' + element.id + '"]')
    this.transitioning = null

    if (this.options.parent) {
      this.$parent = this.getParent()
    } else {
      this.addAriaAndCollapsedClass(this.$element, this.$trigger)
    }

    if (this.options.toggle) this.toggle()
  }

  Collapse.VERSION  = '3.4.1'

  Collapse.TRANSITION_DURATION = 350

  Collapse.DEFAULTS = {
    toggle: true
  }

  Collapse.prototype.dimension = function () {
    var hasWidth = this.$element.hasClass('width')
    return hasWidth ? 'width' : 'height'
  }

  Collapse.prototype.show = function () {
    if (this.transitioning || this.$element.hasClass('in')) return

    var activesData
    var actives = this.$parent && this.$parent.children('.panel').children('.in, .collapsing')

    if (actives && actives.length) {
      activesData = actives.data('bs.collapse')
      if (activesData && activesData.transitioning) return
    }

    var startEvent = $.Event('show.bs.collapse')
    this.$element.trigger(startEvent)
    if (startEvent.isDefaultPrevented()) return

    if (actives && actives.length) {
      Plugin.call(actives, 'hide')
      activesData || actives.data('bs.collapse', null)
    }

    var dimension = this.dimension()

    this.$element
      .removeClass('collapse')
      .addClass('collapsing')[dimension](0)
      .attr('aria-expanded', true)

    this.$trigger
      .removeClass('collapsed')
      .attr('aria-expanded', true)

    this.transitioning = 1

    var complete = function () {
      this.$element
        .removeClass('collapsing')
        .addClass('collapse in')[dimension]('')
      this.transitioning = 0
      this.$element
        .trigger('shown.bs.collapse')
    }

    if (!$.support.transition) return complete.call(this)

    var scrollSize = $.camelCase(['scroll', dimension].join('-'))

    this.$element
      .one('bsTransitionEnd', $.proxy(complete, this))
      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize])
  }

  Collapse.prototype.hide = function () {
    if (this.transitioning || !this.$element.hasClass('in')) return

    var startEvent = $.Event('hide.bs.collapse')
    this.$element.trigger(startEvent)
    if (startEvent.isDefaultPrevented()) return

    var dimension = this.dimension()

    this.$element[dimension](this.$element[dimension]())[0].offsetHeight

    this.$element
      .addClass('collapsing')
      .removeClass('collapse in')
      .attr('aria-expanded', false)

    this.$trigger
      .addClass('collapsed')
      .attr('aria-expanded', false)

    this.transitioning = 1

    var complete = function () {
      this.transitioning = 0
      this.$element
        .removeClass('collapsing')
        .addClass('collapse')
        .trigger('hidden.bs.collapse')
    }

    if (!$.support.transition) return complete.call(this)

    this.$element
      [dimension](0)
      .one('bsTransitionEnd', $.proxy(complete, this))
      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)
  }

  Collapse.prototype.toggle = function () {
    this[this.$element.hasClass('in') ? 'hide' : 'show']()
  }

  Collapse.prototype.getParent = function () {
    return $(document).find(this.options.parent)
      .find('[data-toggle="collapse"][data-parent="' + this.options.parent + '"]')
      .each($.proxy(function (i, element) {
        var $element = $(element)
        this.addAriaAndCollapsedClass(getTargetFromTrigger($element), $element)
      }, this))
      .end()
  }

  Collapse.prototype.addAriaAndCollapsedClass = function ($element, $trigger) {
    var isOpen = $element.hasClass('in')

    $element.attr('aria-expanded', isOpen)
    $trigger
      .toggleClass('collapsed', !isOpen)
      .attr('aria-expanded', isOpen)
  }

  function getTargetFromTrigger($trigger) {
    var href
    var target = $trigger.attr('data-target')
      || (href = $trigger.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '') // strip for ie7

    return $(document).find(target)
  }


  // COLLAPSE PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.collapse')
      var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == 'object' && option)

      if (!data && options.toggle && /show|hide/.test(option)) options.toggle = false
      if (!data) $this.data('bs.collapse', (data = new Collapse(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.collapse

  $.fn.collapse             = Plugin
  $.fn.collapse.Constructor = Collapse


  // COLLAPSE NO CONFLICT
  // ====================

  $.fn.collapse.noConflict = function () {
    $.fn.collapse = old
    return this
  }


  // COLLAPSE DATA-API
  // =================

  $(document).on('click.bs.collapse.data-api', '[data-toggle="collapse"]', function (e) {
    var $this   = $(this)

    if (!$this.attr('data-target')) e.preventDefault()

    var $target = getTargetFromTrigger($this)
    var data    = $target.data('bs.collapse')
    var option  = data ? 'toggle' : $this.data()

    Plugin.call($target, option)
  })

}(jQuery);

},{}],7:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: dropdown.js v3.4.1
 * https://getbootstrap.com/docs/3.4/javascript/#dropdowns
 * ========================================================================
 * Copyright 2011-2019 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // DROPDOWN CLASS DEFINITION
  // =========================

  var backdrop = '.dropdown-backdrop'
  var toggle   = '[data-toggle="dropdown"]'
  var Dropdown = function (element) {
    $(element).on('click.bs.dropdown', this.toggle)
  }

  Dropdown.VERSION = '3.4.1'

  function getParent($this) {
    var selector = $this.attr('data-target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    var $parent = selector !== '#' ? $(document).find(selector) : null

    return $parent && $parent.length ? $parent : $this.parent()
  }

  function clearMenus(e) {
    if (e && e.which === 3) return
    $(backdrop).remove()
    $(toggle).each(function () {
      var $this         = $(this)
      var $parent       = getParent($this)
      var relatedTarget = { relatedTarget: this }

      if (!$parent.hasClass('open')) return

      if (e && e.type == 'click' && /input|textarea/i.test(e.target.tagName) && $.contains($parent[0], e.target)) return

      $parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget))

      if (e.isDefaultPrevented()) return

      $this.attr('aria-expanded', 'false')
      $parent.removeClass('open').trigger($.Event('hidden.bs.dropdown', relatedTarget))
    })
  }

  Dropdown.prototype.toggle = function (e) {
    var $this = $(this)

    if ($this.is('.disabled, :disabled')) return

    var $parent  = getParent($this)
    var isActive = $parent.hasClass('open')

    clearMenus()

    if (!isActive) {
      if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {
        // if mobile we use a backdrop because click events don't delegate
        $(document.createElement('div'))
          .addClass('dropdown-backdrop')
          .insertAfter($(this))
          .on('click', clearMenus)
      }

      var relatedTarget = { relatedTarget: this }
      $parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget))

      if (e.isDefaultPrevented()) return

      $this
        .trigger('focus')
        .attr('aria-expanded', 'true')

      $parent
        .toggleClass('open')
        .trigger($.Event('shown.bs.dropdown', relatedTarget))
    }

    return false
  }

  Dropdown.prototype.keydown = function (e) {
    if (!/(38|40|27|32)/.test(e.which) || /input|textarea/i.test(e.target.tagName)) return

    var $this = $(this)

    e.preventDefault()
    e.stopPropagation()

    if ($this.is('.disabled, :disabled')) return

    var $parent  = getParent($this)
    var isActive = $parent.hasClass('open')

    if (!isActive && e.which != 27 || isActive && e.which == 27) {
      if (e.which == 27) $parent.find(toggle).trigger('focus')
      return $this.trigger('click')
    }

    var desc = ' li:not(.disabled):visible a'
    var $items = $parent.find('.dropdown-menu' + desc)

    if (!$items.length) return

    var index = $items.index(e.target)

    if (e.which == 38 && index > 0)                 index--         // up
    if (e.which == 40 && index < $items.length - 1) index++         // down
    if (!~index)                                    index = 0

    $items.eq(index).trigger('focus')
  }


  // DROPDOWN PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.dropdown')

      if (!data) $this.data('bs.dropdown', (data = new Dropdown(this)))
      if (typeof option == 'string') data[option].call($this)
    })
  }

  var old = $.fn.dropdown

  $.fn.dropdown             = Plugin
  $.fn.dropdown.Constructor = Dropdown


  // DROPDOWN NO CONFLICT
  // ====================

  $.fn.dropdown.noConflict = function () {
    $.fn.dropdown = old
    return this
  }


  // APPLY TO STANDARD DROPDOWN ELEMENTS
  // ===================================

  $(document)
    .on('click.bs.dropdown.data-api', clearMenus)
    .on('click.bs.dropdown.data-api', '.dropdown form', function (e) { e.stopPropagation() })
    .on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle)
    .on('keydown.bs.dropdown.data-api', toggle, Dropdown.prototype.keydown)
    .on('keydown.bs.dropdown.data-api', '.dropdown-menu', Dropdown.prototype.keydown)

}(jQuery);

},{}],8:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: modal.js v3.4.1
 * https://getbootstrap.com/docs/3.4/javascript/#modals
 * ========================================================================
 * Copyright 2011-2019 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // MODAL CLASS DEFINITION
  // ======================

  var Modal = function (element, options) {
    this.options = options
    this.$body = $(document.body)
    this.$element = $(element)
    this.$dialog = this.$element.find('.modal-dialog')
    this.$backdrop = null
    this.isShown = null
    this.originalBodyPad = null
    this.scrollbarWidth = 0
    this.ignoreBackdropClick = false
    this.fixedContent = '.navbar-fixed-top, .navbar-fixed-bottom'

    if (this.options.remote) {
      this.$element
        .find('.modal-content')
        .load(this.options.remote, $.proxy(function () {
          this.$element.trigger('loaded.bs.modal')
        }, this))
    }
  }

  Modal.VERSION = '3.4.1'

  Modal.TRANSITION_DURATION = 300
  Modal.BACKDROP_TRANSITION_DURATION = 150

  Modal.DEFAULTS = {
    backdrop: true,
    keyboard: true,
    show: true
  }

  Modal.prototype.toggle = function (_relatedTarget) {
    return this.isShown ? this.hide() : this.show(_relatedTarget)
  }

  Modal.prototype.show = function (_relatedTarget) {
    var that = this
    var e = $.Event('show.bs.modal', { relatedTarget: _relatedTarget })

    this.$element.trigger(e)

    if (this.isShown || e.isDefaultPrevented()) return

    this.isShown = true

    this.checkScrollbar()
    this.setScrollbar()
    this.$body.addClass('modal-open')

    this.escape()
    this.resize()

    this.$element.on('click.dismiss.bs.modal', '[data-dismiss="modal"]', $.proxy(this.hide, this))

    this.$dialog.on('mousedown.dismiss.bs.modal', function () {
      that.$element.one('mouseup.dismiss.bs.modal', function (e) {
        if ($(e.target).is(that.$element)) that.ignoreBackdropClick = true
      })
    })

    this.backdrop(function () {
      var transition = $.support.transition && that.$element.hasClass('fade')

      if (!that.$element.parent().length) {
        that.$element.appendTo(that.$body) // don't move modals dom position
      }

      that.$element
        .show()
        .scrollTop(0)

      that.adjustDialog()

      if (transition) {
        that.$element[0].offsetWidth // force reflow
      }

      that.$element.addClass('in')

      that.enforceFocus()

      var e = $.Event('shown.bs.modal', { relatedTarget: _relatedTarget })

      transition ?
        that.$dialog // wait for modal to slide in
          .one('bsTransitionEnd', function () {
            that.$element.trigger('focus').trigger(e)
          })
          .emulateTransitionEnd(Modal.TRANSITION_DURATION) :
        that.$element.trigger('focus').trigger(e)
    })
  }

  Modal.prototype.hide = function (e) {
    if (e) e.preventDefault()

    e = $.Event('hide.bs.modal')

    this.$element.trigger(e)

    if (!this.isShown || e.isDefaultPrevented()) return

    this.isShown = false

    this.escape()
    this.resize()

    $(document).off('focusin.bs.modal')

    this.$element
      .removeClass('in')
      .off('click.dismiss.bs.modal')
      .off('mouseup.dismiss.bs.modal')

    this.$dialog.off('mousedown.dismiss.bs.modal')

    $.support.transition && this.$element.hasClass('fade') ?
      this.$element
        .one('bsTransitionEnd', $.proxy(this.hideModal, this))
        .emulateTransitionEnd(Modal.TRANSITION_DURATION) :
      this.hideModal()
  }

  Modal.prototype.enforceFocus = function () {
    $(document)
      .off('focusin.bs.modal') // guard against infinite focus loop
      .on('focusin.bs.modal', $.proxy(function (e) {
        if (document !== e.target &&
          this.$element[0] !== e.target &&
          !this.$element.has(e.target).length) {
          this.$element.trigger('focus')
        }
      }, this))
  }

  Modal.prototype.escape = function () {
    if (this.isShown && this.options.keyboard) {
      this.$element.on('keydown.dismiss.bs.modal', $.proxy(function (e) {
        e.which == 27 && this.hide()
      }, this))
    } else if (!this.isShown) {
      this.$element.off('keydown.dismiss.bs.modal')
    }
  }

  Modal.prototype.resize = function () {
    if (this.isShown) {
      $(window).on('resize.bs.modal', $.proxy(this.handleUpdate, this))
    } else {
      $(window).off('resize.bs.modal')
    }
  }

  Modal.prototype.hideModal = function () {
    var that = this
    this.$element.hide()
    this.backdrop(function () {
      that.$body.removeClass('modal-open')
      that.resetAdjustments()
      that.resetScrollbar()
      that.$element.trigger('hidden.bs.modal')
    })
  }

  Modal.prototype.removeBackdrop = function () {
    this.$backdrop && this.$backdrop.remove()
    this.$backdrop = null
  }

  Modal.prototype.backdrop = function (callback) {
    var that = this
    var animate = this.$element.hasClass('fade') ? 'fade' : ''

    if (this.isShown && this.options.backdrop) {
      var doAnimate = $.support.transition && animate

      this.$backdrop = $(document.createElement('div'))
        .addClass('modal-backdrop ' + animate)
        .appendTo(this.$body)

      this.$element.on('click.dismiss.bs.modal', $.proxy(function (e) {
        if (this.ignoreBackdropClick) {
          this.ignoreBackdropClick = false
          return
        }
        if (e.target !== e.currentTarget) return
        this.options.backdrop == 'static'
          ? this.$element[0].focus()
          : this.hide()
      }, this))

      if (doAnimate) this.$backdrop[0].offsetWidth // force reflow

      this.$backdrop.addClass('in')

      if (!callback) return

      doAnimate ?
        this.$backdrop
          .one('bsTransitionEnd', callback)
          .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :
        callback()

    } else if (!this.isShown && this.$backdrop) {
      this.$backdrop.removeClass('in')

      var callbackRemove = function () {
        that.removeBackdrop()
        callback && callback()
      }
      $.support.transition && this.$element.hasClass('fade') ?
        this.$backdrop
          .one('bsTransitionEnd', callbackRemove)
          .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :
        callbackRemove()

    } else if (callback) {
      callback()
    }
  }

  // these following methods are used to handle overflowing modals

  Modal.prototype.handleUpdate = function () {
    this.adjustDialog()
  }

  Modal.prototype.adjustDialog = function () {
    var modalIsOverflowing = this.$element[0].scrollHeight > document.documentElement.clientHeight

    this.$element.css({
      paddingLeft: !this.bodyIsOverflowing && modalIsOverflowing ? this.scrollbarWidth : '',
      paddingRight: this.bodyIsOverflowing && !modalIsOverflowing ? this.scrollbarWidth : ''
    })
  }

  Modal.prototype.resetAdjustments = function () {
    this.$element.css({
      paddingLeft: '',
      paddingRight: ''
    })
  }

  Modal.prototype.checkScrollbar = function () {
    var fullWindowWidth = window.innerWidth
    if (!fullWindowWidth) { // workaround for missing window.innerWidth in IE8
      var documentElementRect = document.documentElement.getBoundingClientRect()
      fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left)
    }
    this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth
    this.scrollbarWidth = this.measureScrollbar()
  }

  Modal.prototype.setScrollbar = function () {
    var bodyPad = parseInt((this.$body.css('padding-right') || 0), 10)
    this.originalBodyPad = document.body.style.paddingRight || ''
    var scrollbarWidth = this.scrollbarWidth
    if (this.bodyIsOverflowing) {
      this.$body.css('padding-right', bodyPad + scrollbarWidth)
      $(this.fixedContent).each(function (index, element) {
        var actualPadding = element.style.paddingRight
        var calculatedPadding = $(element).css('padding-right')
        $(element)
          .data('padding-right', actualPadding)
          .css('padding-right', parseFloat(calculatedPadding) + scrollbarWidth + 'px')
      })
    }
  }

  Modal.prototype.resetScrollbar = function () {
    this.$body.css('padding-right', this.originalBodyPad)
    $(this.fixedContent).each(function (index, element) {
      var padding = $(element).data('padding-right')
      $(element).removeData('padding-right')
      element.style.paddingRight = padding ? padding : ''
    })
  }

  Modal.prototype.measureScrollbar = function () { // thx walsh
    var scrollDiv = document.createElement('div')
    scrollDiv.className = 'modal-scrollbar-measure'
    this.$body.append(scrollDiv)
    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth
    this.$body[0].removeChild(scrollDiv)
    return scrollbarWidth
  }


  // MODAL PLUGIN DEFINITION
  // =======================

  function Plugin(option, _relatedTarget) {
    return this.each(function () {
      var $this = $(this)
      var data = $this.data('bs.modal')
      var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == 'object' && option)

      if (!data) $this.data('bs.modal', (data = new Modal(this, options)))
      if (typeof option == 'string') data[option](_relatedTarget)
      else if (options.show) data.show(_relatedTarget)
    })
  }

  var old = $.fn.modal

  $.fn.modal = Plugin
  $.fn.modal.Constructor = Modal


  // MODAL NO CONFLICT
  // =================

  $.fn.modal.noConflict = function () {
    $.fn.modal = old
    return this
  }


  // MODAL DATA-API
  // ==============

  $(document).on('click.bs.modal.data-api', '[data-toggle="modal"]', function (e) {
    var $this = $(this)
    var href = $this.attr('href')
    var target = $this.attr('data-target') ||
      (href && href.replace(/.*(?=#[^\s]+$)/, '')) // strip for ie7

    var $target = $(document).find(target)
    var option = $target.data('bs.modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data())

    if ($this.is('a')) e.preventDefault()

    $target.one('show.bs.modal', function (showEvent) {
      if (showEvent.isDefaultPrevented()) return // only register focus restorer if modal will actually get shown
      $target.one('hidden.bs.modal', function () {
        $this.is(':visible') && $this.trigger('focus')
      })
    })
    Plugin.call($target, option, this)
  })

}(jQuery);

},{}],9:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: popover.js v3.4.1
 * https://getbootstrap.com/docs/3.4/javascript/#popovers
 * ========================================================================
 * Copyright 2011-2019 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // POPOVER PUBLIC CLASS DEFINITION
  // ===============================

  var Popover = function (element, options) {
    this.init('popover', element, options)
  }

  if (!$.fn.tooltip) throw new Error('Popover requires tooltip.js')

  Popover.VERSION  = '3.4.1'

  Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {
    placement: 'right',
    trigger: 'click',
    content: '',
    template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
  })


  // NOTE: POPOVER EXTENDS tooltip.js
  // ================================

  Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype)

  Popover.prototype.constructor = Popover

  Popover.prototype.getDefaults = function () {
    return Popover.DEFAULTS
  }

  Popover.prototype.setContent = function () {
    var $tip    = this.tip()
    var title   = this.getTitle()
    var content = this.getContent()

    if (this.options.html) {
      var typeContent = typeof content

      if (this.options.sanitize) {
        title = this.sanitizeHtml(title)

        if (typeContent === 'string') {
          content = this.sanitizeHtml(content)
        }
      }

      $tip.find('.popover-title').html(title)
      $tip.find('.popover-content').children().detach().end()[
        typeContent === 'string' ? 'html' : 'append'
      ](content)
    } else {
      $tip.find('.popover-title').text(title)
      $tip.find('.popover-content').children().detach().end().text(content)
    }

    $tip.removeClass('fade top bottom left right in')

    // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do
    // this manually by checking the contents.
    if (!$tip.find('.popover-title').html()) $tip.find('.popover-title').hide()
  }

  Popover.prototype.hasContent = function () {
    return this.getTitle() || this.getContent()
  }

  Popover.prototype.getContent = function () {
    var $e = this.$element
    var o  = this.options

    return $e.attr('data-content')
      || (typeof o.content == 'function' ?
        o.content.call($e[0]) :
        o.content)
  }

  Popover.prototype.arrow = function () {
    return (this.$arrow = this.$arrow || this.tip().find('.arrow'))
  }


  // POPOVER PLUGIN DEFINITION
  // =========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.popover')
      var options = typeof option == 'object' && option

      if (!data && /destroy|hide/.test(option)) return
      if (!data) $this.data('bs.popover', (data = new Popover(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.popover

  $.fn.popover             = Plugin
  $.fn.popover.Constructor = Popover


  // POPOVER NO CONFLICT
  // ===================

  $.fn.popover.noConflict = function () {
    $.fn.popover = old
    return this
  }

}(jQuery);

},{}],10:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: scrollspy.js v3.4.1
 * https://getbootstrap.com/docs/3.4/javascript/#scrollspy
 * ========================================================================
 * Copyright 2011-2019 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // SCROLLSPY CLASS DEFINITION
  // ==========================

  function ScrollSpy(element, options) {
    this.$body          = $(document.body)
    this.$scrollElement = $(element).is(document.body) ? $(window) : $(element)
    this.options        = $.extend({}, ScrollSpy.DEFAULTS, options)
    this.selector       = (this.options.target || '') + ' .nav li > a'
    this.offsets        = []
    this.targets        = []
    this.activeTarget   = null
    this.scrollHeight   = 0

    this.$scrollElement.on('scroll.bs.scrollspy', $.proxy(this.process, this))
    this.refresh()
    this.process()
  }

  ScrollSpy.VERSION  = '3.4.1'

  ScrollSpy.DEFAULTS = {
    offset: 10
  }

  ScrollSpy.prototype.getScrollHeight = function () {
    return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight)
  }

  ScrollSpy.prototype.refresh = function () {
    var that          = this
    var offsetMethod  = 'offset'
    var offsetBase    = 0

    this.offsets      = []
    this.targets      = []
    this.scrollHeight = this.getScrollHeight()

    if (!$.isWindow(this.$scrollElement[0])) {
      offsetMethod = 'position'
      offsetBase   = this.$scrollElement.scrollTop()
    }

    this.$body
      .find(this.selector)
      .map(function () {
        var $el   = $(this)
        var href  = $el.data('target') || $el.attr('href')
        var $href = /^#./.test(href) && $(href)

        return ($href
          && $href.length
          && $href.is(':visible')
          && [[$href[offsetMethod]().top + offsetBase, href]]) || null
      })
      .sort(function (a, b) { return a[0] - b[0] })
      .each(function () {
        that.offsets.push(this[0])
        that.targets.push(this[1])
      })
  }

  ScrollSpy.prototype.process = function () {
    var scrollTop    = this.$scrollElement.scrollTop() + this.options.offset
    var scrollHeight = this.getScrollHeight()
    var maxScroll    = this.options.offset + scrollHeight - this.$scrollElement.height()
    var offsets      = this.offsets
    var targets      = this.targets
    var activeTarget = this.activeTarget
    var i

    if (this.scrollHeight != scrollHeight) {
      this.refresh()
    }

    if (scrollTop >= maxScroll) {
      return activeTarget != (i = targets[targets.length - 1]) && this.activate(i)
    }

    if (activeTarget && scrollTop < offsets[0]) {
      this.activeTarget = null
      return this.clear()
    }

    for (i = offsets.length; i--;) {
      activeTarget != targets[i]
        && scrollTop >= offsets[i]
        && (offsets[i + 1] === undefined || scrollTop < offsets[i + 1])
        && this.activate(targets[i])
    }
  }

  ScrollSpy.prototype.activate = function (target) {
    this.activeTarget = target

    this.clear()

    var selector = this.selector +
      '[data-target="' + target + '"],' +
      this.selector + '[href="' + target + '"]'

    var active = $(selector)
      .parents('li')
      .addClass('active')

    if (active.parent('.dropdown-menu').length) {
      active = active
        .closest('li.dropdown')
        .addClass('active')
    }

    active.trigger('activate.bs.scrollspy')
  }

  ScrollSpy.prototype.clear = function () {
    $(this.selector)
      .parentsUntil(this.options.target, '.active')
      .removeClass('active')
  }


  // SCROLLSPY PLUGIN DEFINITION
  // ===========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.scrollspy')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.scrollspy', (data = new ScrollSpy(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.scrollspy

  $.fn.scrollspy             = Plugin
  $.fn.scrollspy.Constructor = ScrollSpy


  // SCROLLSPY NO CONFLICT
  // =====================

  $.fn.scrollspy.noConflict = function () {
    $.fn.scrollspy = old
    return this
  }


  // SCROLLSPY DATA-API
  // ==================

  $(window).on('load.bs.scrollspy.data-api', function () {
    $('[data-spy="scroll"]').each(function () {
      var $spy = $(this)
      Plugin.call($spy, $spy.data())
    })
  })

}(jQuery);

},{}],11:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: tab.js v3.4.1
 * https://getbootstrap.com/docs/3.4/javascript/#tabs
 * ========================================================================
 * Copyright 2011-2019 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // TAB CLASS DEFINITION
  // ====================

  var Tab = function (element) {
    // jscs:disable requireDollarBeforejQueryAssignment
    this.element = $(element)
    // jscs:enable requireDollarBeforejQueryAssignment
  }

  Tab.VERSION = '3.4.1'

  Tab.TRANSITION_DURATION = 150

  Tab.prototype.show = function () {
    var $this    = this.element
    var $ul      = $this.closest('ul:not(.dropdown-menu)')
    var selector = $this.data('target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    if ($this.parent('li').hasClass('active')) return

    var $previous = $ul.find('.active:last a')
    var hideEvent = $.Event('hide.bs.tab', {
      relatedTarget: $this[0]
    })
    var showEvent = $.Event('show.bs.tab', {
      relatedTarget: $previous[0]
    })

    $previous.trigger(hideEvent)
    $this.trigger(showEvent)

    if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) return

    var $target = $(document).find(selector)

    this.activate($this.closest('li'), $ul)
    this.activate($target, $target.parent(), function () {
      $previous.trigger({
        type: 'hidden.bs.tab',
        relatedTarget: $this[0]
      })
      $this.trigger({
        type: 'shown.bs.tab',
        relatedTarget: $previous[0]
      })
    })
  }

  Tab.prototype.activate = function (element, container, callback) {
    var $active    = container.find('> .active')
    var transition = callback
      && $.support.transition
      && ($active.length && $active.hasClass('fade') || !!container.find('> .fade').length)

    function next() {
      $active
        .removeClass('active')
        .find('> .dropdown-menu > .active')
        .removeClass('active')
        .end()
        .find('[data-toggle="tab"]')
        .attr('aria-expanded', false)

      element
        .addClass('active')
        .find('[data-toggle="tab"]')
        .attr('aria-expanded', true)

      if (transition) {
        element[0].offsetWidth // reflow for transition
        element.addClass('in')
      } else {
        element.removeClass('fade')
      }

      if (element.parent('.dropdown-menu').length) {
        element
          .closest('li.dropdown')
          .addClass('active')
          .end()
          .find('[data-toggle="tab"]')
          .attr('aria-expanded', true)
      }

      callback && callback()
    }

    $active.length && transition ?
      $active
        .one('bsTransitionEnd', next)
        .emulateTransitionEnd(Tab.TRANSITION_DURATION) :
      next()

    $active.removeClass('in')
  }


  // TAB PLUGIN DEFINITION
  // =====================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.tab')

      if (!data) $this.data('bs.tab', (data = new Tab(this)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.tab

  $.fn.tab             = Plugin
  $.fn.tab.Constructor = Tab


  // TAB NO CONFLICT
  // ===============

  $.fn.tab.noConflict = function () {
    $.fn.tab = old
    return this
  }


  // TAB DATA-API
  // ============

  var clickHandler = function (e) {
    e.preventDefault()
    Plugin.call($(this), 'show')
  }

  $(document)
    .on('click.bs.tab.data-api', '[data-toggle="tab"]', clickHandler)
    .on('click.bs.tab.data-api', '[data-toggle="pill"]', clickHandler)

}(jQuery);

},{}],12:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: tooltip.js v3.4.1
 * https://getbootstrap.com/docs/3.4/javascript/#tooltip
 * Inspired by the original jQuery.tipsy by Jason Frame
 * ========================================================================
 * Copyright 2011-2019 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

+function ($) {
  'use strict';

  var DISALLOWED_ATTRIBUTES = ['sanitize', 'whiteList', 'sanitizeFn']

  var uriAttrs = [
    'background',
    'cite',
    'href',
    'itemtype',
    'longdesc',
    'poster',
    'src',
    'xlink:href'
  ]

  var ARIA_ATTRIBUTE_PATTERN = /^aria-[\w-]*$/i

  var DefaultWhitelist = {
    // Global attributes allowed on any supplied element below.
    '*': ['class', 'dir', 'id', 'lang', 'role', ARIA_ATTRIBUTE_PATTERN],
    a: ['target', 'href', 'title', 'rel'],
    area: [],
    b: [],
    br: [],
    col: [],
    code: [],
    div: [],
    em: [],
    hr: [],
    h1: [],
    h2: [],
    h3: [],
    h4: [],
    h5: [],
    h6: [],
    i: [],
    img: ['src', 'alt', 'title', 'width', 'height'],
    li: [],
    ol: [],
    p: [],
    pre: [],
    s: [],
    small: [],
    span: [],
    sub: [],
    sup: [],
    strong: [],
    u: [],
    ul: []
  }

  /**
   * A pattern that recognizes a commonly useful subset of URLs that are safe.
   *
   * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts
   */
  var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi

  /**
   * A pattern that matches safe data URLs. Only matches image, video and audio types.
   *
   * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts
   */
  var DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+/]+=*$/i

  function allowedAttribute(attr, allowedAttributeList) {
    var attrName = attr.nodeName.toLowerCase()

    if ($.inArray(attrName, allowedAttributeList) !== -1) {
      if ($.inArray(attrName, uriAttrs) !== -1) {
        return Boolean(attr.nodeValue.match(SAFE_URL_PATTERN) || attr.nodeValue.match(DATA_URL_PATTERN))
      }

      return true
    }

    var regExp = $(allowedAttributeList).filter(function (index, value) {
      return value instanceof RegExp
    })

    // Check if a regular expression validates the attribute.
    for (var i = 0, l = regExp.length; i < l; i++) {
      if (attrName.match(regExp[i])) {
        return true
      }
    }

    return false
  }

  function sanitizeHtml(unsafeHtml, whiteList, sanitizeFn) {
    if (unsafeHtml.length === 0) {
      return unsafeHtml
    }

    if (sanitizeFn && typeof sanitizeFn === 'function') {
      return sanitizeFn(unsafeHtml)
    }

    // IE 8 and below don't support createHTMLDocument
    if (!document.implementation || !document.implementation.createHTMLDocument) {
      return unsafeHtml
    }

    var createdDocument = document.implementation.createHTMLDocument('sanitization')
    createdDocument.body.innerHTML = unsafeHtml

    var whitelistKeys = $.map(whiteList, function (el, i) { return i })
    var elements = $(createdDocument.body).find('*')

    for (var i = 0, len = elements.length; i < len; i++) {
      var el = elements[i]
      var elName = el.nodeName.toLowerCase()

      if ($.inArray(elName, whitelistKeys) === -1) {
        el.parentNode.removeChild(el)

        continue
      }

      var attributeList = $.map(el.attributes, function (el) { return el })
      var whitelistedAttributes = [].concat(whiteList['*'] || [], whiteList[elName] || [])

      for (var j = 0, len2 = attributeList.length; j < len2; j++) {
        if (!allowedAttribute(attributeList[j], whitelistedAttributes)) {
          el.removeAttribute(attributeList[j].nodeName)
        }
      }
    }

    return createdDocument.body.innerHTML
  }

  // TOOLTIP PUBLIC CLASS DEFINITION
  // ===============================

  var Tooltip = function (element, options) {
    this.type       = null
    this.options    = null
    this.enabled    = null
    this.timeout    = null
    this.hoverState = null
    this.$element   = null
    this.inState    = null

    this.init('tooltip', element, options)
  }

  Tooltip.VERSION  = '3.4.1'

  Tooltip.TRANSITION_DURATION = 150

  Tooltip.DEFAULTS = {
    animation: true,
    placement: 'top',
    selector: false,
    template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
    trigger: 'hover focus',
    title: '',
    delay: 0,
    html: false,
    container: false,
    viewport: {
      selector: 'body',
      padding: 0
    },
    sanitize : true,
    sanitizeFn : null,
    whiteList : DefaultWhitelist
  }

  Tooltip.prototype.init = function (type, element, options) {
    this.enabled   = true
    this.type      = type
    this.$element  = $(element)
    this.options   = this.getOptions(options)
    this.$viewport = this.options.viewport && $(document).find($.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : (this.options.viewport.selector || this.options.viewport))
    this.inState   = { click: false, hover: false, focus: false }

    if (this.$element[0] instanceof document.constructor && !this.options.selector) {
      throw new Error('`selector` option must be specified when initializing ' + this.type + ' on the window.document object!')
    }

    var triggers = this.options.trigger.split(' ')

    for (var i = triggers.length; i--;) {
      var trigger = triggers[i]

      if (trigger == 'click') {
        this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))
      } else if (trigger != 'manual') {
        var eventIn  = trigger == 'hover' ? 'mouseenter' : 'focusin'
        var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout'

        this.$element.on(eventIn  + '.' + this.type, this.options.selector, $.proxy(this.enter, this))
        this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))
      }
    }

    this.options.selector ?
      (this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' })) :
      this.fixTitle()
  }

  Tooltip.prototype.getDefaults = function () {
    return Tooltip.DEFAULTS
  }

  Tooltip.prototype.getOptions = function (options) {
    var dataAttributes = this.$element.data()

    for (var dataAttr in dataAttributes) {
      if (dataAttributes.hasOwnProperty(dataAttr) && $.inArray(dataAttr, DISALLOWED_ATTRIBUTES) !== -1) {
        delete dataAttributes[dataAttr]
      }
    }

    options = $.extend({}, this.getDefaults(), dataAttributes, options)

    if (options.delay && typeof options.delay == 'number') {
      options.delay = {
        show: options.delay,
        hide: options.delay
      }
    }

    if (options.sanitize) {
      options.template = sanitizeHtml(options.template, options.whiteList, options.sanitizeFn)
    }

    return options
  }

  Tooltip.prototype.getDelegateOptions = function () {
    var options  = {}
    var defaults = this.getDefaults()

    this._options && $.each(this._options, function (key, value) {
      if (defaults[key] != value) options[key] = value
    })

    return options
  }

  Tooltip.prototype.enter = function (obj) {
    var self = obj instanceof this.constructor ?
      obj : $(obj.currentTarget).data('bs.' + this.type)

    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
      $(obj.currentTarget).data('bs.' + this.type, self)
    }

    if (obj instanceof $.Event) {
      self.inState[obj.type == 'focusin' ? 'focus' : 'hover'] = true
    }

    if (self.tip().hasClass('in') || self.hoverState == 'in') {
      self.hoverState = 'in'
      return
    }

    clearTimeout(self.timeout)

    self.hoverState = 'in'

    if (!self.options.delay || !self.options.delay.show) return self.show()

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'in') self.show()
    }, self.options.delay.show)
  }

  Tooltip.prototype.isInStateTrue = function () {
    for (var key in this.inState) {
      if (this.inState[key]) return true
    }

    return false
  }

  Tooltip.prototype.leave = function (obj) {
    var self = obj instanceof this.constructor ?
      obj : $(obj.currentTarget).data('bs.' + this.type)

    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
      $(obj.currentTarget).data('bs.' + this.type, self)
    }

    if (obj instanceof $.Event) {
      self.inState[obj.type == 'focusout' ? 'focus' : 'hover'] = false
    }

    if (self.isInStateTrue()) return

    clearTimeout(self.timeout)

    self.hoverState = 'out'

    if (!self.options.delay || !self.options.delay.hide) return self.hide()

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'out') self.hide()
    }, self.options.delay.hide)
  }

  Tooltip.prototype.show = function () {
    var e = $.Event('show.bs.' + this.type)

    if (this.hasContent() && this.enabled) {
      this.$element.trigger(e)

      var inDom = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0])
      if (e.isDefaultPrevented() || !inDom) return
      var that = this

      var $tip = this.tip()

      var tipId = this.getUID(this.type)

      this.setContent()
      $tip.attr('id', tipId)
      this.$element.attr('aria-describedby', tipId)

      if (this.options.animation) $tip.addClass('fade')

      var placement = typeof this.options.placement == 'function' ?
        this.options.placement.call(this, $tip[0], this.$element[0]) :
        this.options.placement

      var autoToken = /\s?auto?\s?/i
      var autoPlace = autoToken.test(placement)
      if (autoPlace) placement = placement.replace(autoToken, '') || 'top'

      $tip
        .detach()
        .css({ top: 0, left: 0, display: 'block' })
        .addClass(placement)
        .data('bs.' + this.type, this)

      this.options.container ? $tip.appendTo($(document).find(this.options.container)) : $tip.insertAfter(this.$element)
      this.$element.trigger('inserted.bs.' + this.type)

      var pos          = this.getPosition()
      var actualWidth  = $tip[0].offsetWidth
      var actualHeight = $tip[0].offsetHeight

      if (autoPlace) {
        var orgPlacement = placement
        var viewportDim = this.getPosition(this.$viewport)

        placement = placement == 'bottom' && pos.bottom + actualHeight > viewportDim.bottom ? 'top'    :
                    placement == 'top'    && pos.top    - actualHeight < viewportDim.top    ? 'bottom' :
                    placement == 'right'  && pos.right  + actualWidth  > viewportDim.width  ? 'left'   :
                    placement == 'left'   && pos.left   - actualWidth  < viewportDim.left   ? 'right'  :
                    placement

        $tip
          .removeClass(orgPlacement)
          .addClass(placement)
      }

      var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight)

      this.applyPlacement(calculatedOffset, placement)

      var complete = function () {
        var prevHoverState = that.hoverState
        that.$element.trigger('shown.bs.' + that.type)
        that.hoverState = null

        if (prevHoverState == 'out') that.leave(that)
      }

      $.support.transition && this.$tip.hasClass('fade') ?
        $tip
          .one('bsTransitionEnd', complete)
          .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :
        complete()
    }
  }

  Tooltip.prototype.applyPlacement = function (offset, placement) {
    var $tip   = this.tip()
    var width  = $tip[0].offsetWidth
    var height = $tip[0].offsetHeight

    // manually read margins because getBoundingClientRect includes difference
    var marginTop = parseInt($tip.css('margin-top'), 10)
    var marginLeft = parseInt($tip.css('margin-left'), 10)

    // we must check for NaN for ie 8/9
    if (isNaN(marginTop))  marginTop  = 0
    if (isNaN(marginLeft)) marginLeft = 0

    offset.top  += marginTop
    offset.left += marginLeft

    // $.fn.offset doesn't round pixel values
    // so we use setOffset directly with our own function B-0
    $.offset.setOffset($tip[0], $.extend({
      using: function (props) {
        $tip.css({
          top: Math.round(props.top),
          left: Math.round(props.left)
        })
      }
    }, offset), 0)

    $tip.addClass('in')

    // check to see if placing tip in new offset caused the tip to resize itself
    var actualWidth  = $tip[0].offsetWidth
    var actualHeight = $tip[0].offsetHeight

    if (placement == 'top' && actualHeight != height) {
      offset.top = offset.top + height - actualHeight
    }

    var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight)

    if (delta.left) offset.left += delta.left
    else offset.top += delta.top

    var isVertical          = /top|bottom/.test(placement)
    var arrowDelta          = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight
    var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight'

    $tip.offset(offset)
    this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical)
  }

  Tooltip.prototype.replaceArrow = function (delta, dimension, isVertical) {
    this.arrow()
      .css(isVertical ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')
      .css(isVertical ? 'top' : 'left', '')
  }

  Tooltip.prototype.setContent = function () {
    var $tip  = this.tip()
    var title = this.getTitle()

    if (this.options.html) {
      if (this.options.sanitize) {
        title = sanitizeHtml(title, this.options.whiteList, this.options.sanitizeFn)
      }

      $tip.find('.tooltip-inner').html(title)
    } else {
      $tip.find('.tooltip-inner').text(title)
    }

    $tip.removeClass('fade in top bottom left right')
  }

  Tooltip.prototype.hide = function (callback) {
    var that = this
    var $tip = $(this.$tip)
    var e    = $.Event('hide.bs.' + this.type)

    function complete() {
      if (that.hoverState != 'in') $tip.detach()
      if (that.$element) { // TODO: Check whether guarding this code with this `if` is really necessary.
        that.$element
          .removeAttr('aria-describedby')
          .trigger('hidden.bs.' + that.type)
      }
      callback && callback()
    }

    this.$element.trigger(e)

    if (e.isDefaultPrevented()) return

    $tip.removeClass('in')

    $.support.transition && $tip.hasClass('fade') ?
      $tip
        .one('bsTransitionEnd', complete)
        .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :
      complete()

    this.hoverState = null

    return this
  }

  Tooltip.prototype.fixTitle = function () {
    var $e = this.$element
    if ($e.attr('title') || typeof $e.attr('data-original-title') != 'string') {
      $e.attr('data-original-title', $e.attr('title') || '').attr('title', '')
    }
  }

  Tooltip.prototype.hasContent = function () {
    return this.getTitle()
  }

  Tooltip.prototype.getPosition = function ($element) {
    $element   = $element || this.$element

    var el     = $element[0]
    var isBody = el.tagName == 'BODY'

    var elRect    = el.getBoundingClientRect()
    if (elRect.width == null) {
      // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093
      elRect = $.extend({}, elRect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top })
    }
    var isSvg = window.SVGElement && el instanceof window.SVGElement
    // Avoid using $.offset() on SVGs since it gives incorrect results in jQuery 3.
    // See https://github.com/twbs/bootstrap/issues/20280
    var elOffset  = isBody ? { top: 0, left: 0 } : (isSvg ? null : $element.offset())
    var scroll    = { scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop() }
    var outerDims = isBody ? { width: $(window).width(), height: $(window).height() } : null

    return $.extend({}, elRect, scroll, outerDims, elOffset)
  }

  Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {
    return placement == 'bottom' ? { top: pos.top + pos.height,   left: pos.left + pos.width / 2 - actualWidth / 2 } :
           placement == 'top'    ? { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2 } :
           placement == 'left'   ? { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth } :
        /* placement == 'right' */ { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width }

  }

  Tooltip.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {
    var delta = { top: 0, left: 0 }
    if (!this.$viewport) return delta

    var viewportPadding = this.options.viewport && this.options.viewport.padding || 0
    var viewportDimensions = this.getPosition(this.$viewport)

    if (/right|left/.test(placement)) {
      var topEdgeOffset    = pos.top - viewportPadding - viewportDimensions.scroll
      var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight
      if (topEdgeOffset < viewportDimensions.top) { // top overflow
        delta.top = viewportDimensions.top - topEdgeOffset
      } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow
        delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset
      }
    } else {
      var leftEdgeOffset  = pos.left - viewportPadding
      var rightEdgeOffset = pos.left + viewportPadding + actualWidth
      if (leftEdgeOffset < viewportDimensions.left) { // left overflow
        delta.left = viewportDimensions.left - leftEdgeOffset
      } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow
        delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset
      }
    }

    return delta
  }

  Tooltip.prototype.getTitle = function () {
    var title
    var $e = this.$element
    var o  = this.options

    title = $e.attr('data-original-title')
      || (typeof o.title == 'function' ? o.title.call($e[0]) :  o.title)

    return title
  }

  Tooltip.prototype.getUID = function (prefix) {
    do prefix += ~~(Math.random() * 1000000)
    while (document.getElementById(prefix))
    return prefix
  }

  Tooltip.prototype.tip = function () {
    if (!this.$tip) {
      this.$tip = $(this.options.template)
      if (this.$tip.length != 1) {
        throw new Error(this.type + ' `template` option must consist of exactly 1 top-level element!')
      }
    }
    return this.$tip
  }

  Tooltip.prototype.arrow = function () {
    return (this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow'))
  }

  Tooltip.prototype.enable = function () {
    this.enabled = true
  }

  Tooltip.prototype.disable = function () {
    this.enabled = false
  }

  Tooltip.prototype.toggleEnabled = function () {
    this.enabled = !this.enabled
  }

  Tooltip.prototype.toggle = function (e) {
    var self = this
    if (e) {
      self = $(e.currentTarget).data('bs.' + this.type)
      if (!self) {
        self = new this.constructor(e.currentTarget, this.getDelegateOptions())
        $(e.currentTarget).data('bs.' + this.type, self)
      }
    }

    if (e) {
      self.inState.click = !self.inState.click
      if (self.isInStateTrue()) self.enter(self)
      else self.leave(self)
    } else {
      self.tip().hasClass('in') ? self.leave(self) : self.enter(self)
    }
  }

  Tooltip.prototype.destroy = function () {
    var that = this
    clearTimeout(this.timeout)
    this.hide(function () {
      that.$element.off('.' + that.type).removeData('bs.' + that.type)
      if (that.$tip) {
        that.$tip.detach()
      }
      that.$tip = null
      that.$arrow = null
      that.$viewport = null
      that.$element = null
    })
  }

  Tooltip.prototype.sanitizeHtml = function (unsafeHtml) {
    return sanitizeHtml(unsafeHtml, this.options.whiteList, this.options.sanitizeFn)
  }

  // TOOLTIP PLUGIN DEFINITION
  // =========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.tooltip')
      var options = typeof option == 'object' && option

      if (!data && /destroy|hide/.test(option)) return
      if (!data) $this.data('bs.tooltip', (data = new Tooltip(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.tooltip

  $.fn.tooltip             = Plugin
  $.fn.tooltip.Constructor = Tooltip


  // TOOLTIP NO CONFLICT
  // ===================

  $.fn.tooltip.noConflict = function () {
    $.fn.tooltip = old
    return this
  }

}(jQuery);

},{}],13:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: transition.js v3.4.1
 * https://getbootstrap.com/docs/3.4/javascript/#transitions
 * ========================================================================
 * Copyright 2011-2019 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // CSS TRANSITION SUPPORT (Shoutout: https://modernizr.com/)
  // ============================================================

  function transitionEnd() {
    var el = document.createElement('bootstrap')

    var transEndEventNames = {
      WebkitTransition : 'webkitTransitionEnd',
      MozTransition    : 'transitionend',
      OTransition      : 'oTransitionEnd otransitionend',
      transition       : 'transitionend'
    }

    for (var name in transEndEventNames) {
      if (el.style[name] !== undefined) {
        return { end: transEndEventNames[name] }
      }
    }

    return false // explicit for ie8 (  ._.)
  }

  // https://blog.alexmaccaw.com/css-transitions
  $.fn.emulateTransitionEnd = function (duration) {
    var called = false
    var $el = this
    $(this).one('bsTransitionEnd', function () { called = true })
    var callback = function () { if (!called) $($el).trigger($.support.transition.end) }
    setTimeout(callback, duration)
    return this
  }

  $(function () {
    $.support.transition = transitionEnd()

    if (!$.support.transition) return

    $.event.special.bsTransitionEnd = {
      bindType: $.support.transition.end,
      delegateType: $.support.transition.end,
      handle: function (e) {
        if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments)
      }
    }
  })

}(jQuery);

},{}],14:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],15:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var validateFormat = function validateFormat(format) {};

if (process.env.NODE_ENV !== 'production') {
  validateFormat = function validateFormat(format) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  };
}

function invariant(condition, format, a, b, c, d, e, f) {
  validateFormat(format);

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
}

module.exports = invariant;
}).call(this,require('_process'))
},{"_process":21}],16:[function(require,module,exports){
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

module.exports.Dispatcher = require('./lib/Dispatcher');

},{"./lib/Dispatcher":17}],17:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Dispatcher
 * 
 * @preventMunge
 */

'use strict';

exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var invariant = require('fbjs/lib/invariant');

var _prefix = 'ID_';

/**
 * Dispatcher is used to broadcast payloads to registered callbacks. This is
 * different from generic pub-sub systems in two ways:
 *
 *   1) Callbacks are not subscribed to particular events. Every payload is
 *      dispatched to every registered callback.
 *   2) Callbacks can be deferred in whole or part until other callbacks have
 *      been executed.
 *
 * For example, consider this hypothetical flight destination form, which
 * selects a default city when a country is selected:
 *
 *   var flightDispatcher = new Dispatcher();
 *
 *   // Keeps track of which country is selected
 *   var CountryStore = {country: null};
 *
 *   // Keeps track of which city is selected
 *   var CityStore = {city: null};
 *
 *   // Keeps track of the base flight price of the selected city
 *   var FlightPriceStore = {price: null}
 *
 * When a user changes the selected city, we dispatch the payload:
 *
 *   flightDispatcher.dispatch({
 *     actionType: 'city-update',
 *     selectedCity: 'paris'
 *   });
 *
 * This payload is digested by `CityStore`:
 *
 *   flightDispatcher.register(function(payload) {
 *     if (payload.actionType === 'city-update') {
 *       CityStore.city = payload.selectedCity;
 *     }
 *   });
 *
 * When the user selects a country, we dispatch the payload:
 *
 *   flightDispatcher.dispatch({
 *     actionType: 'country-update',
 *     selectedCountry: 'australia'
 *   });
 *
 * This payload is digested by both stores:
 *
 *   CountryStore.dispatchToken = flightDispatcher.register(function(payload) {
 *     if (payload.actionType === 'country-update') {
 *       CountryStore.country = payload.selectedCountry;
 *     }
 *   });
 *
 * When the callback to update `CountryStore` is registered, we save a reference
 * to the returned token. Using this token with `waitFor()`, we can guarantee
 * that `CountryStore` is updated before the callback that updates `CityStore`
 * needs to query its data.
 *
 *   CityStore.dispatchToken = flightDispatcher.register(function(payload) {
 *     if (payload.actionType === 'country-update') {
 *       // `CountryStore.country` may not be updated.
 *       flightDispatcher.waitFor([CountryStore.dispatchToken]);
 *       // `CountryStore.country` is now guaranteed to be updated.
 *
 *       // Select the default city for the new country
 *       CityStore.city = getDefaultCityForCountry(CountryStore.country);
 *     }
 *   });
 *
 * The usage of `waitFor()` can be chained, for example:
 *
 *   FlightPriceStore.dispatchToken =
 *     flightDispatcher.register(function(payload) {
 *       switch (payload.actionType) {
 *         case 'country-update':
 *         case 'city-update':
 *           flightDispatcher.waitFor([CityStore.dispatchToken]);
 *           FlightPriceStore.price =
 *             getFlightPriceStore(CountryStore.country, CityStore.city);
 *           break;
 *     }
 *   });
 *
 * The `country-update` payload will be guaranteed to invoke the stores'
 * registered callbacks in order: `CountryStore`, `CityStore`, then
 * `FlightPriceStore`.
 */

var Dispatcher = (function () {
  function Dispatcher() {
    _classCallCheck(this, Dispatcher);

    this._callbacks = {};
    this._isDispatching = false;
    this._isHandled = {};
    this._isPending = {};
    this._lastID = 1;
  }

  /**
   * Registers a callback to be invoked with every dispatched payload. Returns
   * a token that can be used with `waitFor()`.
   */

  Dispatcher.prototype.register = function register(callback) {
    var id = _prefix + this._lastID++;
    this._callbacks[id] = callback;
    return id;
  };

  /**
   * Removes a callback based on its token.
   */

  Dispatcher.prototype.unregister = function unregister(id) {
    !this._callbacks[id] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.unregister(...): `%s` does not map to a registered callback.', id) : invariant(false) : undefined;
    delete this._callbacks[id];
  };

  /**
   * Waits for the callbacks specified to be invoked before continuing execution
   * of the current callback. This method should only be used by a callback in
   * response to a dispatched payload.
   */

  Dispatcher.prototype.waitFor = function waitFor(ids) {
    !this._isDispatching ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.waitFor(...): Must be invoked while dispatching.') : invariant(false) : undefined;
    for (var ii = 0; ii < ids.length; ii++) {
      var id = ids[ii];
      if (this._isPending[id]) {
        !this._isHandled[id] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.waitFor(...): Circular dependency detected while ' + 'waiting for `%s`.', id) : invariant(false) : undefined;
        continue;
      }
      !this._callbacks[id] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.waitFor(...): `%s` does not map to a registered callback.', id) : invariant(false) : undefined;
      this._invokeCallback(id);
    }
  };

  /**
   * Dispatches a payload to all registered callbacks.
   */

  Dispatcher.prototype.dispatch = function dispatch(payload) {
    !!this._isDispatching ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatch.dispatch(...): Cannot dispatch in the middle of a dispatch.') : invariant(false) : undefined;
    this._startDispatching(payload);
    try {
      for (var id in this._callbacks) {
        if (this._isPending[id]) {
          continue;
        }
        this._invokeCallback(id);
      }
    } finally {
      this._stopDispatching();
    }
  };

  /**
   * Is this Dispatcher currently dispatching.
   */

  Dispatcher.prototype.isDispatching = function isDispatching() {
    return this._isDispatching;
  };

  /**
   * Call the callback stored with the given id. Also do some internal
   * bookkeeping.
   *
   * @internal
   */

  Dispatcher.prototype._invokeCallback = function _invokeCallback(id) {
    this._isPending[id] = true;
    this._callbacks[id](this._pendingPayload);
    this._isHandled[id] = true;
  };

  /**
   * Set up bookkeeping needed when dispatching.
   *
   * @internal
   */

  Dispatcher.prototype._startDispatching = function _startDispatching(payload) {
    for (var id in this._callbacks) {
      this._isPending[id] = false;
      this._isHandled[id] = false;
    }
    this._pendingPayload = payload;
    this._isDispatching = true;
  };

  /**
   * Clear bookkeeping used for dispatching.
   *
   * @internal
   */

  Dispatcher.prototype._stopDispatching = function _stopDispatching() {
    delete this._pendingPayload;
    this._isDispatching = false;
  };

  return Dispatcher;
})();

module.exports = Dispatcher;
}).call(this,require('_process'))
},{"_process":21,"fbjs/lib/invariant":15}],18:[function(require,module,exports){
var jQuery = require('jquery');

/*!
 * jQuery UI Position 1.10.4
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/position/
 */
(function( $, undefined ) {

$.ui = $.ui || {};

var cachedScrollbarWidth,
	max = Math.max,
	abs = Math.abs,
	round = Math.round,
	rhorizontal = /left|center|right/,
	rvertical = /top|center|bottom/,
	roffset = /[\+\-]\d+(\.[\d]+)?%?/,
	rposition = /^\w+/,
	rpercent = /%$/,
	_position = $.fn.position;

function getOffsets( offsets, width, height ) {
	return [
		parseFloat( offsets[ 0 ] ) * ( rpercent.test( offsets[ 0 ] ) ? width / 100 : 1 ),
		parseFloat( offsets[ 1 ] ) * ( rpercent.test( offsets[ 1 ] ) ? height / 100 : 1 )
	];
}

function parseCss( element, property ) {
	return parseInt( $.css( element, property ), 10 ) || 0;
}

function getDimensions( elem ) {
	var raw = elem[0];
	if ( raw.nodeType === 9 ) {
		return {
			width: elem.width(),
			height: elem.height(),
			offset: { top: 0, left: 0 }
		};
	}
	if ( $.isWindow( raw ) ) {
		return {
			width: elem.width(),
			height: elem.height(),
			offset: { top: elem.scrollTop(), left: elem.scrollLeft() }
		};
	}
	if ( raw.preventDefault ) {
		return {
			width: 0,
			height: 0,
			offset: { top: raw.pageY, left: raw.pageX }
		};
	}
	return {
		width: elem.outerWidth(),
		height: elem.outerHeight(),
		offset: elem.offset()
	};
}

$.position = {
	scrollbarWidth: function() {
		if ( cachedScrollbarWidth !== undefined ) {
			return cachedScrollbarWidth;
		}
		var w1, w2,
			div = $( "<div style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>" ),
			innerDiv = div.children()[0];

		$( "body" ).append( div );
		w1 = innerDiv.offsetWidth;
		div.css( "overflow", "scroll" );

		w2 = innerDiv.offsetWidth;

		if ( w1 === w2 ) {
			w2 = div[0].clientWidth;
		}

		div.remove();

		return (cachedScrollbarWidth = w1 - w2);
	},
	getScrollInfo: function( within ) {
		var overflowX = within.isWindow || within.isDocument ? "" :
				within.element.css( "overflow-x" ),
			overflowY = within.isWindow || within.isDocument ? "" :
				within.element.css( "overflow-y" ),
			hasOverflowX = overflowX === "scroll" ||
				( overflowX === "auto" && within.width < within.element[0].scrollWidth ),
			hasOverflowY = overflowY === "scroll" ||
				( overflowY === "auto" && within.height < within.element[0].scrollHeight );
		return {
			width: hasOverflowY ? $.position.scrollbarWidth() : 0,
			height: hasOverflowX ? $.position.scrollbarWidth() : 0
		};
	},
	getWithinInfo: function( element ) {
		var withinElement = $( element || window ),
			isWindow = $.isWindow( withinElement[0] ),
			isDocument = !!withinElement[ 0 ] && withinElement[ 0 ].nodeType === 9;
		return {
			element: withinElement,
			isWindow: isWindow,
			isDocument: isDocument,
			offset: withinElement.offset() || { left: 0, top: 0 },
			scrollLeft: withinElement.scrollLeft(),
			scrollTop: withinElement.scrollTop(),
			width: isWindow ? withinElement.width() : withinElement.outerWidth(),
			height: isWindow ? withinElement.height() : withinElement.outerHeight()
		};
	}
};

$.fn.position = function( options ) {
	if ( !options || !options.of ) {
		return _position.apply( this, arguments );
	}

	// make a copy, we don't want to modify arguments
	options = $.extend( {}, options );

	var atOffset, targetWidth, targetHeight, targetOffset, basePosition, dimensions,
		target = $( options.of ),
		within = $.position.getWithinInfo( options.within ),
		scrollInfo = $.position.getScrollInfo( within ),
		collision = ( options.collision || "flip" ).split( " " ),
		offsets = {};

	dimensions = getDimensions( target );
	if ( target[0].preventDefault ) {
		// force left top to allow flipping
		options.at = "left top";
	}
	targetWidth = dimensions.width;
	targetHeight = dimensions.height;
	targetOffset = dimensions.offset;
	// clone to reuse original targetOffset later
	basePosition = $.extend( {}, targetOffset );

	// force my and at to have valid horizontal and vertical positions
	// if a value is missing or invalid, it will be converted to center
	$.each( [ "my", "at" ], function() {
		var pos = ( options[ this ] || "" ).split( " " ),
			horizontalOffset,
			verticalOffset;

		if ( pos.length === 1) {
			pos = rhorizontal.test( pos[ 0 ] ) ?
				pos.concat( [ "center" ] ) :
				rvertical.test( pos[ 0 ] ) ?
					[ "center" ].concat( pos ) :
					[ "center", "center" ];
		}
		pos[ 0 ] = rhorizontal.test( pos[ 0 ] ) ? pos[ 0 ] : "center";
		pos[ 1 ] = rvertical.test( pos[ 1 ] ) ? pos[ 1 ] : "center";

		// calculate offsets
		horizontalOffset = roffset.exec( pos[ 0 ] );
		verticalOffset = roffset.exec( pos[ 1 ] );
		offsets[ this ] = [
			horizontalOffset ? horizontalOffset[ 0 ] : 0,
			verticalOffset ? verticalOffset[ 0 ] : 0
		];

		// reduce to just the positions without the offsets
		options[ this ] = [
			rposition.exec( pos[ 0 ] )[ 0 ],
			rposition.exec( pos[ 1 ] )[ 0 ]
		];
	});

	// normalize collision option
	if ( collision.length === 1 ) {
		collision[ 1 ] = collision[ 0 ];
	}

	if ( options.at[ 0 ] === "right" ) {
		basePosition.left += targetWidth;
	} else if ( options.at[ 0 ] === "center" ) {
		basePosition.left += targetWidth / 2;
	}

	if ( options.at[ 1 ] === "bottom" ) {
		basePosition.top += targetHeight;
	} else if ( options.at[ 1 ] === "center" ) {
		basePosition.top += targetHeight / 2;
	}

	atOffset = getOffsets( offsets.at, targetWidth, targetHeight );
	basePosition.left += atOffset[ 0 ];
	basePosition.top += atOffset[ 1 ];

	return this.each(function() {
		var collisionPosition, using,
			elem = $( this ),
			elemWidth = elem.outerWidth(),
			elemHeight = elem.outerHeight(),
			marginLeft = parseCss( this, "marginLeft" ),
			marginTop = parseCss( this, "marginTop" ),
			collisionWidth = elemWidth + marginLeft + parseCss( this, "marginRight" ) + scrollInfo.width,
			collisionHeight = elemHeight + marginTop + parseCss( this, "marginBottom" ) + scrollInfo.height,
			position = $.extend( {}, basePosition ),
			myOffset = getOffsets( offsets.my, elem.outerWidth(), elem.outerHeight() );

		if ( options.my[ 0 ] === "right" ) {
			position.left -= elemWidth;
		} else if ( options.my[ 0 ] === "center" ) {
			position.left -= elemWidth / 2;
		}

		if ( options.my[ 1 ] === "bottom" ) {
			position.top -= elemHeight;
		} else if ( options.my[ 1 ] === "center" ) {
			position.top -= elemHeight / 2;
		}

		position.left += myOffset[ 0 ];
		position.top += myOffset[ 1 ];

		// if the browser doesn't support fractions, then round for consistent results
		if ( !$.support.offsetFractions ) {
			position.left = round( position.left );
			position.top = round( position.top );
		}

		collisionPosition = {
			marginLeft: marginLeft,
			marginTop: marginTop
		};

		$.each( [ "left", "top" ], function( i, dir ) {
			if ( $.ui.position[ collision[ i ] ] ) {
				$.ui.position[ collision[ i ] ][ dir ]( position, {
					targetWidth: targetWidth,
					targetHeight: targetHeight,
					elemWidth: elemWidth,
					elemHeight: elemHeight,
					collisionPosition: collisionPosition,
					collisionWidth: collisionWidth,
					collisionHeight: collisionHeight,
					offset: [ atOffset[ 0 ] + myOffset[ 0 ], atOffset [ 1 ] + myOffset[ 1 ] ],
					my: options.my,
					at: options.at,
					within: within,
					elem : elem
				});
			}
		});

		if ( options.using ) {
			// adds feedback as second argument to using callback, if present
			using = function( props ) {
				var left = targetOffset.left - position.left,
					right = left + targetWidth - elemWidth,
					top = targetOffset.top - position.top,
					bottom = top + targetHeight - elemHeight,
					feedback = {
						target: {
							element: target,
							left: targetOffset.left,
							top: targetOffset.top,
							width: targetWidth,
							height: targetHeight
						},
						element: {
							element: elem,
							left: position.left,
							top: position.top,
							width: elemWidth,
							height: elemHeight
						},
						horizontal: right < 0 ? "left" : left > 0 ? "right" : "center",
						vertical: bottom < 0 ? "top" : top > 0 ? "bottom" : "middle"
					};
				if ( targetWidth < elemWidth && abs( left + right ) < targetWidth ) {
					feedback.horizontal = "center";
				}
				if ( targetHeight < elemHeight && abs( top + bottom ) < targetHeight ) {
					feedback.vertical = "middle";
				}
				if ( max( abs( left ), abs( right ) ) > max( abs( top ), abs( bottom ) ) ) {
					feedback.important = "horizontal";
				} else {
					feedback.important = "vertical";
				}
				options.using.call( this, props, feedback );
			};
		}

		elem.offset( $.extend( position, { using: using } ) );
	});
};

$.ui.position = {
	fit: {
		left: function( position, data ) {
			var within = data.within,
				withinOffset = within.isWindow ? within.scrollLeft : within.offset.left,
				outerWidth = within.width,
				collisionPosLeft = position.left - data.collisionPosition.marginLeft,
				overLeft = withinOffset - collisionPosLeft,
				overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset,
				newOverRight;

			// element is wider than within
			if ( data.collisionWidth > outerWidth ) {
				// element is initially over the left side of within
				if ( overLeft > 0 && overRight <= 0 ) {
					newOverRight = position.left + overLeft + data.collisionWidth - outerWidth - withinOffset;
					position.left += overLeft - newOverRight;
				// element is initially over right side of within
				} else if ( overRight > 0 && overLeft <= 0 ) {
					position.left = withinOffset;
				// element is initially over both left and right sides of within
				} else {
					if ( overLeft > overRight ) {
						position.left = withinOffset + outerWidth - data.collisionWidth;
					} else {
						position.left = withinOffset;
					}
				}
			// too far left -> align with left edge
			} else if ( overLeft > 0 ) {
				position.left += overLeft;
			// too far right -> align with right edge
			} else if ( overRight > 0 ) {
				position.left -= overRight;
			// adjust based on position and margin
			} else {
				position.left = max( position.left - collisionPosLeft, position.left );
			}
		},
		top: function( position, data ) {
			var within = data.within,
				withinOffset = within.isWindow ? within.scrollTop : within.offset.top,
				outerHeight = data.within.height,
				collisionPosTop = position.top - data.collisionPosition.marginTop,
				overTop = withinOffset - collisionPosTop,
				overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset,
				newOverBottom;

			// element is taller than within
			if ( data.collisionHeight > outerHeight ) {
				// element is initially over the top of within
				if ( overTop > 0 && overBottom <= 0 ) {
					newOverBottom = position.top + overTop + data.collisionHeight - outerHeight - withinOffset;
					position.top += overTop - newOverBottom;
				// element is initially over bottom of within
				} else if ( overBottom > 0 && overTop <= 0 ) {
					position.top = withinOffset;
				// element is initially over both top and bottom of within
				} else {
					if ( overTop > overBottom ) {
						position.top = withinOffset + outerHeight - data.collisionHeight;
					} else {
						position.top = withinOffset;
					}
				}
			// too far up -> align with top
			} else if ( overTop > 0 ) {
				position.top += overTop;
			// too far down -> align with bottom edge
			} else if ( overBottom > 0 ) {
				position.top -= overBottom;
			// adjust based on position and margin
			} else {
				position.top = max( position.top - collisionPosTop, position.top );
			}
		}
	},
	flip: {
		left: function( position, data ) {
			var within = data.within,
				withinOffset = within.offset.left + within.scrollLeft,
				outerWidth = within.width,
				offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left,
				collisionPosLeft = position.left - data.collisionPosition.marginLeft,
				overLeft = collisionPosLeft - offsetLeft,
				overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft,
				myOffset = data.my[ 0 ] === "left" ?
					-data.elemWidth :
					data.my[ 0 ] === "right" ?
						data.elemWidth :
						0,
				atOffset = data.at[ 0 ] === "left" ?
					data.targetWidth :
					data.at[ 0 ] === "right" ?
						-data.targetWidth :
						0,
				offset = -2 * data.offset[ 0 ],
				newOverRight,
				newOverLeft;

			if ( overLeft < 0 ) {
				newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth - outerWidth - withinOffset;
				if ( newOverRight < 0 || newOverRight < abs( overLeft ) ) {
					position.left += myOffset + atOffset + offset;
				}
			}
			else if ( overRight > 0 ) {
				newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset + atOffset + offset - offsetLeft;
				if ( newOverLeft > 0 || abs( newOverLeft ) < overRight ) {
					position.left += myOffset + atOffset + offset;
				}
			}
		},
		top: function( position, data ) {
			var within = data.within,
				withinOffset = within.offset.top + within.scrollTop,
				outerHeight = within.height,
				offsetTop = within.isWindow ? within.scrollTop : within.offset.top,
				collisionPosTop = position.top - data.collisionPosition.marginTop,
				overTop = collisionPosTop - offsetTop,
				overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop,
				top = data.my[ 1 ] === "top",
				myOffset = top ?
					-data.elemHeight :
					data.my[ 1 ] === "bottom" ?
						data.elemHeight :
						0,
				atOffset = data.at[ 1 ] === "top" ?
					data.targetHeight :
					data.at[ 1 ] === "bottom" ?
						-data.targetHeight :
						0,
				offset = -2 * data.offset[ 1 ],
				newOverTop,
				newOverBottom;
			if ( overTop < 0 ) {
				newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight - outerHeight - withinOffset;
				if ( ( position.top + myOffset + atOffset + offset) > overTop && ( newOverBottom < 0 || newOverBottom < abs( overTop ) ) ) {
					position.top += myOffset + atOffset + offset;
				}
			}
			else if ( overBottom > 0 ) {
				newOverTop = position.top - data.collisionPosition.marginTop + myOffset + atOffset + offset - offsetTop;
				if ( ( position.top + myOffset + atOffset + offset) > overBottom && ( newOverTop > 0 || abs( newOverTop ) < overBottom ) ) {
					position.top += myOffset + atOffset + offset;
				}
			}
		}
	},
	flipfit: {
		left: function() {
			$.ui.position.flip.left.apply( this, arguments );
			$.ui.position.fit.left.apply( this, arguments );
		},
		top: function() {
			$.ui.position.flip.top.apply( this, arguments );
			$.ui.position.fit.top.apply( this, arguments );
		}
	}
};

// fraction support test
(function () {
	var testElement, testElementParent, testElementStyle, offsetLeft, i,
		body = document.getElementsByTagName( "body" )[ 0 ],
		div = document.createElement( "div" );

	//Create a "fake body" for testing based on method used in jQuery.support
	testElement = document.createElement( body ? "div" : "body" );
	testElementStyle = {
		visibility: "hidden",
		width: 0,
		height: 0,
		border: 0,
		margin: 0,
		background: "none"
	};
	if ( body ) {
		$.extend( testElementStyle, {
			position: "absolute",
			left: "-1000px",
			top: "-1000px"
		});
	}
	for ( i in testElementStyle ) {
		testElement.style[ i ] = testElementStyle[ i ];
	}
	testElement.appendChild( div );
	testElementParent = body || document.documentElement;
	testElementParent.insertBefore( testElement, testElementParent.firstChild );

	div.style.cssText = "position: absolute; left: 10.7432222px;";

	offsetLeft = $( div ).offset().left;
	$.support.offsetFractions = offsetLeft > 10 && offsetLeft < 11;

	testElement.innerHTML = "";
	testElementParent.removeChild( testElement );
})();

}( jQuery ) );

},{"jquery":19}],19:[function(require,module,exports){
/*!
 * jQuery JavaScript Library v2.1.4
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2015-04-28T16:01Z
 */

(function( global, factory ) {

	if ( typeof module === "object" && typeof module.exports === "object" ) {
		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Support: Firefox 18+
// Can't be in strict mode, several libs including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
//

var arr = [];

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var support = {};



var
	// Use the correct document accordingly with window argument (sandbox)
	document = window.document,

	version = "2.1.4",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android<4.1
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {
	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num != null ?

			// Return just the one element from the set
			( num < 0 ? this[ num + this.length ] : this[ num ] ) :

			// Return all the elements in a clean array
			slice.call( this );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray,

	isWindow: function( obj ) {
		return obj != null && obj === obj.window;
	},

	isNumeric: function( obj ) {
		// parseFloat NaNs numeric-cast false positives (null|true|false|"")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		// adding 1 corrects loss of precision from parseFloat (#15100)
		return !jQuery.isArray( obj ) && (obj - parseFloat( obj ) + 1) >= 0;
	},

	isPlainObject: function( obj ) {
		// Not plain objects:
		// - Any object or value whose internal [[Class]] property is not "[object Object]"
		// - DOM nodes
		// - window
		if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		if ( obj.constructor &&
				!hasOwn.call( obj.constructor.prototype, "isPrototypeOf" ) ) {
			return false;
		}

		// If the function hasn't returned already, we're confident that
		// |obj| is a plain object, created by {} or constructed with new Object
		return true;
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}
		// Support: Android<4.0, iOS<6 (functionish RegExp)
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call(obj) ] || "object" :
			typeof obj;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		var script,
			indirect = eval;

		code = jQuery.trim( code );

		if ( code ) {
			// If the code includes a valid, prologue position
			// strict mode pragma, execute code by injecting a
			// script tag into the document.
			if ( code.indexOf("use strict") === 1 ) {
				script = document.createElement("script");
				script.text = code;
				document.head.appendChild( script ).parentNode.removeChild( script );
			} else {
			// Otherwise, avoid the DOM node creation, insertion
			// and removal by using an indirect global eval
				indirect( code );
			}
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Support: IE9-11+
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	// args is for internal usage only
	each: function( obj, callback, args ) {
		var value,
			i = 0,
			length = obj.length,
			isArray = isArraylike( obj );

		if ( args ) {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			}
		}

		return obj;
	},

	// Support: Android<4.1
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArraylike( Object(arr) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value,
			i = 0,
			length = elems.length,
			isArray = isArraylike( elems ),
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var tmp, args, proxy;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: Date.now,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
});

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

function isArraylike( obj ) {

	// Support: iOS 8.2 (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = "length" in obj && obj.length,
		type = jQuery.type( obj );

	if ( type === "function" || jQuery.isWindow( obj ) ) {
		return false;
	}

	if ( obj.nodeType === 1 && length ) {
		return true;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.2.0-pre
 * http://sizzlejs.com/
 *
 * Copyright 2008, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-12-16
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// General-purpose constants
	MAX_NEGATIVE = 1 << 31,

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// http://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding.replace( "w", "w#" ),

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + characterEncoding + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,
	rescape = /'|\\/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	};

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var match, elem, m, nodeType,
		// QSA vars
		i, groups, old, nid, newContext, newSelector;

	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
		setDocument( context );
	}

	context = context || document;
	results = results || [];
	nodeType = context.nodeType;

	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	if ( !seed && documentIsHTML ) {

		// Try to shortcut find operations when possible (e.g., not under DocumentFragment)
		if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document (jQuery #6963)
					if ( elem && elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
						contains( context, elem ) && elem.id === m ) {
						results.push( elem );
						return results;
					}
				}

			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, context.getElementsByTagName( selector ) );
				return results;

			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && support.getElementsByClassName ) {
				push.apply( results, context.getElementsByClassName( m ) );
				return results;
			}
		}

		// QSA path
		if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
			nid = old = expando;
			newContext = context;
			newSelector = nodeType !== 1 && selector;

			// qSA works strangely on Element-rooted queries
			// We can work around this by specifying an extra ID on the root
			// and working up from there (Thanks to Andrew Dupont for the technique)
			// IE 8 doesn't work on object elements
			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
				groups = tokenize( selector );

				if ( (old = context.getAttribute("id")) ) {
					nid = old.replace( rescape, "\\$&" );
				} else {
					context.setAttribute( "id", nid );
				}
				nid = "[id='" + nid + "'] ";

				i = groups.length;
				while ( i-- ) {
					groups[i] = nid + toSelector( groups[i] );
				}
				newContext = rsibling.test( selector ) && testContext( context.parentNode ) || context;
				newSelector = groups.join(",");
			}

			if ( newSelector ) {
				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch(qsaError) {
				} finally {
					if ( !old ) {
						context.removeAttribute("id");
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return !!fn( div );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( div.parentNode ) {
			div.parentNode.removeChild( div );
		}
		// release memory in IE
		div = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = attrs.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			( ~b.sourceIndex || MAX_NEGATIVE ) -
			( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, parent,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// If no document and documentElement is available, return
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Set our document
	document = doc;
	docElem = doc.documentElement;
	parent = doc.defaultView;

	// Support: IE>8
	// If iframe document is assigned to "document" variable and if iframe has been reloaded,
	// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
	// IE6-8 do not support the defaultView property so parent will be undefined
	if ( parent && parent !== parent.top ) {
		// IE11 does not have attachEvent, so all must suffer
		if ( parent.addEventListener ) {
			parent.addEventListener( "unload", unloadHandler, false );
		} else if ( parent.attachEvent ) {
			parent.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Support tests
	---------------------------------------------------------------------- */
	documentIsHTML = !isXML( doc );

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( div ) {
		div.className = "i";
		return !div.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( div ) {
		div.appendChild( doc.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( doc.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( div ) {
		docElem.appendChild( div ).id = expando;
		return !doc.getElementsByName || !doc.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var m = context.getElementById( id );
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [ m ] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];

		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\f]' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( div.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.2+, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.7+
			if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibing-combinator selector` fails
			if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( div ) {
			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = doc.createElement("input");
			input.setAttribute( "type", "hidden" );
			div.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( div.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully does not implement inclusive descendent
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === doc ? -1 :
				b === doc ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return doc;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, outerCache, node, diff, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {
							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || (parent[ expando ] = {});
							cache = outerCache[ type ] || [];
							nodeIndex = cache[0] === dirruns && cache[1];
							diff = cache[0] === dirruns && cache[2];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						// Use previously-cached element index if available
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];

						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
						} else {
							// Use the same loop as above to seek `elem` from the start
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								(diff = nodeIndex = 0) || start.pop()) ) {

								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
									// Cache the index of each encountered element
									if ( useCache ) {
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
									}

									if ( node === elem ) {
										break;
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});
						if ( (oldCache = outerCache[ dir ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							outerCache[ dir ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context !== document && context;
			}

			// Add elements passing elementMatchers directly to results
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is no seed and only one group
	if ( match.length === 1 ) {

		// Take a shortcut and set the context if the root selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				support.getById && context.nodeType === 9 && documentIsHTML &&
				Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( div1 ) {
	// Should return 1, but returns 4 (following)
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( div ) {
	div.innerHTML = "<a href='#'></a>";
	return div.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( div ) {
	div.innerHTML = "<input/>";
	div.firstChild.setAttribute( "value", "" );
	return div.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( div ) {
	return div.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.pseudos;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;



var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = (/^<(\w+)\s*\/?>(?:<\/\1>|)$/);



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			/* jshint -W018 */
			return !!qualifier.call( elem, i, elem ) !== not;
		});

	}

	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		});

	}

	if ( typeof qualifier === "string" ) {
		if ( risSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		qualifier = jQuery.filter( qualifier, elements );
	}

	return jQuery.grep( elements, function( elem ) {
		return ( indexOf.call( qualifier, elem ) >= 0 ) !== not;
	});
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	return elems.length === 1 && elem.nodeType === 1 ?
		jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
		jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		}));
};

jQuery.fn.extend({
	find: function( selector ) {
		var i,
			len = this.length,
			ret = [],
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter(function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			}) );
		}

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = this.selector ? this.selector + " " + selector : selector;
		return ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow(this, selector || [], false) );
	},
	not: function( selector ) {
		return this.pushStack( winnow(this, selector || [], true) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
});


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	init = jQuery.fn.init = function( selector, context ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[0] === "<" && selector[ selector.length - 1 ] === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[1],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {
							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[2] );

					// Support: Blackberry 4.6
					// gEBID returns nodes no longer in the document (#6963)
					if ( elem && elem.parentNode ) {
						// Inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return typeof rootjQuery.ready !== "undefined" ?
				rootjQuery.ready( selector ) :
				// Execute immediately if ready is not present
				selector( jQuery );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,
	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.extend({
	dir: function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;

		while ( (elem = elem[ dir ]) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	},

	sibling: function( n, elem ) {
		var matched = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}

		return matched;
	}
});

jQuery.fn.extend({
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter(function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			for ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {
				// Always skip document fragments
				if ( cur.nodeType < 11 && (pos ?
					pos.index(cur) > -1 :

					// Don't pass non-elements to Sizzle
					cur.nodeType === 1 &&
						jQuery.find.matchesSelector(cur, selectors)) ) {

					matched.push( cur );
					break;
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.unique( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.unique(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter(selector)
		);
	}
});

function sibling( cur, dir ) {
	while ( (cur = cur[dir]) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return elem.contentDocument || jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {
			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.unique( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
});
var rnotwhite = (/\S+/g);



// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
	var object = optionsCache[ options ] = {};
	jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	});
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		( optionsCache[ options ] || createOptions( options ) ) :
		jQuery.extend( {}, options );

	var // Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// Flag to know if list is currently firing
		firing,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = !options.once && [],
		// Fire callbacks
		fire = function( data ) {
			memory = options.memory && data;
			fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( stack ) {
					if ( stack.length ) {
						fire( stack.shift() );
					}
				} else if ( memory ) {
					list = [];
				} else {
					self.disable();
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					// First, we save the current length
					var start = list.length;
					(function add( args ) {
						jQuery.each( args, function( _, arg ) {
							var type = jQuery.type( arg );
							if ( type === "function" ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && type !== "string" ) {
								// Inspect recursively
								add( arg );
							}
						});
					})( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away
					} else if ( memory ) {
						firingStart = start;
						fire( memory );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
							// Handle firing indexes
							if ( firing ) {
								if ( index <= firingLength ) {
									firingLength--;
								}
								if ( index <= firingIndex ) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				firingLength = 0;
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( list && ( !fired || stack ) ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					if ( firing ) {
						stack.push( args );
					} else {
						fire( args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


jQuery.extend({

	Deferred: function( func ) {
		var tuples = [
				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks("memory") ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[1] ](function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.done( newDefer.resolve )
										.fail( newDefer.reject )
										.progress( newDefer.notify );
								} else {
									newDefer[ tuple[ 0 ] + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
								}
							});
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[1] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(function() {
					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[0] ] = function() {
				deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[0] + "With" ] = list.fireWith;
		});

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( values === progressValues ) {
						deferred.notifyWith( contexts, values );
					} else if ( !( --remaining ) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// Add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject )
						.progress( updateFunc( i, progressContexts, progressValues ) );
				} else {
					--remaining;
				}
			}
		}

		// If we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
});


// The deferred used on DOM ready
var readyList;

jQuery.fn.ready = function( fn ) {
	// Add the callback
	jQuery.ready.promise().done( fn );

	return this;
};

jQuery.extend({
	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.triggerHandler ) {
			jQuery( document ).triggerHandler( "ready" );
			jQuery( document ).off( "ready" );
		}
	}
});

/**
 * The ready event handler and self cleanup method
 */
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed, false );
	window.removeEventListener( "load", completed, false );
	jQuery.ready();
}

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called after the browser event has already occurred.
		// We once tried to use readyState "interactive" here, but it caused issues like the one
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			setTimeout( jQuery.ready );

		} else {

			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed, false );
		}
	}
	return readyList.promise( obj );
};

// Kick off the DOM ready check even if the user does not
jQuery.ready.promise();




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = jQuery.access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {
			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
			}
		}
	}

	return chainable ?
		elems :

		// Gets
		bulk ?
			fn.call( elems ) :
			len ? fn( elems[0], key ) : emptyGet;
};


/**
 * Determines whether an object can have data
 */
jQuery.acceptData = function( owner ) {
	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	/* jshint -W018 */
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};


function Data() {
	// Support: Android<4,
	// Old WebKit does not have Object.preventExtensions/freeze method,
	// return new empty object instead with no [[set]] accessor
	Object.defineProperty( this.cache = {}, 0, {
		get: function() {
			return {};
		}
	});

	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;
Data.accepts = jQuery.acceptData;

Data.prototype = {
	key: function( owner ) {
		// We can accept data for non-element nodes in modern browsers,
		// but we should not, see #8335.
		// Always return the key for a frozen object.
		if ( !Data.accepts( owner ) ) {
			return 0;
		}

		var descriptor = {},
			// Check if the owner object already has a cache key
			unlock = owner[ this.expando ];

		// If not, create one
		if ( !unlock ) {
			unlock = Data.uid++;

			// Secure it in a non-enumerable, non-writable property
			try {
				descriptor[ this.expando ] = { value: unlock };
				Object.defineProperties( owner, descriptor );

			// Support: Android<4
			// Fallback to a less secure definition
			} catch ( e ) {
				descriptor[ this.expando ] = unlock;
				jQuery.extend( owner, descriptor );
			}
		}

		// Ensure the cache object
		if ( !this.cache[ unlock ] ) {
			this.cache[ unlock ] = {};
		}

		return unlock;
	},
	set: function( owner, data, value ) {
		var prop,
			// There may be an unlock assigned to this node,
			// if there is no entry for this "owner", create one inline
			// and set the unlock as though an owner entry had always existed
			unlock = this.key( owner ),
			cache = this.cache[ unlock ];

		// Handle: [ owner, key, value ] args
		if ( typeof data === "string" ) {
			cache[ data ] = value;

		// Handle: [ owner, { properties } ] args
		} else {
			// Fresh assignments by object are shallow copied
			if ( jQuery.isEmptyObject( cache ) ) {
				jQuery.extend( this.cache[ unlock ], data );
			// Otherwise, copy the properties one-by-one to the cache object
			} else {
				for ( prop in data ) {
					cache[ prop ] = data[ prop ];
				}
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		// Either a valid cache is found, or will be created.
		// New caches will be created and the unlock returned,
		// allowing direct access to the newly created
		// empty data object. A valid owner object must be provided.
		var cache = this.cache[ this.key( owner ) ];

		return key === undefined ?
			cache : cache[ key ];
	},
	access: function( owner, key, value ) {
		var stored;
		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				((key && typeof key === "string") && value === undefined) ) {

			stored = this.get( owner, key );

			return stored !== undefined ?
				stored : this.get( owner, jQuery.camelCase(key) );
		}

		// [*]When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i, name, camel,
			unlock = this.key( owner ),
			cache = this.cache[ unlock ];

		if ( key === undefined ) {
			this.cache[ unlock ] = {};

		} else {
			// Support array or space separated string of keys
			if ( jQuery.isArray( key ) ) {
				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = key.concat( key.map( jQuery.camelCase ) );
			} else {
				camel = jQuery.camelCase( key );
				// Try the string as a key before any manipulation
				if ( key in cache ) {
					name = [ key, camel ];
				} else {
					// If a key with the spaces exists, use it.
					// Otherwise, create an array by matching non-whitespace
					name = camel;
					name = name in cache ?
						[ name ] : ( name.match( rnotwhite ) || [] );
				}
			}

			i = name.length;
			while ( i-- ) {
				delete cache[ name[ i ] ];
			}
		}
	},
	hasData: function( owner ) {
		return !jQuery.isEmptyObject(
			this.cache[ owner[ this.expando ] ] || {}
		);
	},
	discard: function( owner ) {
		if ( owner[ this.expando ] ) {
			delete this.cache[ owner[ this.expando ] ];
		}
	}
};
var data_priv = new Data();

var data_user = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /([A-Z])/g;

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :
					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
					data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			data_user.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend({
	hasData: function( elem ) {
		return data_user.hasData( elem ) || data_priv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return data_user.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		data_user.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to data_priv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return data_priv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		data_priv.remove( elem, name );
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = data_user.get( elem );

				if ( elem.nodeType === 1 && !data_priv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE11+
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = jQuery.camelCase( name.slice(5) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					data_priv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each(function() {
				data_user.set( this, key );
			});
		}

		return access( this, function( value ) {
			var data,
				camelKey = jQuery.camelCase( key );

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {
				// Attempt to get data from the cache
				// with the key as-is
				data = data_user.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to get data from the cache
				// with the key camelized
				data = data_user.get( elem, camelKey );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, camelKey, undefined );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each(function() {
				// First, attempt to store a copy or reference of any
				// data that might've been store with a camelCased key.
				var data = data_user.get( this, camelKey );

				// For HTML5 data-* attribute interop, we have to
				// store property names with dashes in a camelCase form.
				// This might not apply to all properties...*
				data_user.set( this, camelKey, value );

				// *... In the case of properties that might _actually_
				// have dashes, we need to also store a copy of that
				// unchanged property.
				if ( key.indexOf("-") !== -1 && data !== undefined ) {
					data_user.set( this, key, value );
				}
			});
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each(function() {
			data_user.remove( this, key );
		});
	}
});


jQuery.extend({
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = data_priv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray( data ) ) {
					queue = data_priv.access( elem, type, jQuery.makeArray(data) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return data_priv.get( elem, key ) || data_priv.access( elem, key, {
			empty: jQuery.Callbacks("once memory").add(function() {
				data_priv.remove( elem, [ type + "queue", key ] );
			})
		});
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[0], type );
		}

		return data === undefined ?
			this :
			this.each(function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[0] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = data_priv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
});
var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source;

var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHidden = function( elem, el ) {
		// isHidden might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;
		return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
	};

var rcheckableType = (/^(?:checkbox|radio)$/i);



(function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Safari<=5.1
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Safari<=5.1, Android<4.2
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE<=11+
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
})();
var strundefined = typeof undefined;



support.focusinBubbles = "onfocusin" in window;


var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = data_priv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !(events = elemData.events) ) {
			events = elemData.events = {};
		}
		if ( !(eventHandle = elemData.handle) ) {
			eventHandle = elemData.handle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== strundefined && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !(handlers = events[ type ]) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = data_priv.hasData( elem ) && data_priv.get( elem );

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;
			data_priv.remove( elem, "events" );
		}
	},

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf(".") >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf(":") < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join(".");
		event.namespace_re = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === (elem.ownerDocument || document) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( data_priv.get( cur, "events" ) || {} )[ event.type ] && data_priv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && jQuery.acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&
				jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					elem[ type ]();
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, j, ret, matched, handleObj,
			handlerQueue = [],
			args = slice.call( arguments ),
			handlers = ( data_priv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( (event.result = ret) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, matches, sel, handleObj,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.disabled !== true || event.type !== "click" ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) >= 0 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push({ elem: cur, handlers: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
		}

		return handlerQueue;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var eventDoc, doc, body,
				button = original.button;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: Cordova 2.5 (WebKit) (#13255)
		// All events should have a target; Cordova deviceready doesn't
		if ( !event.target ) {
			event.target = document;
		}

		// Support: Safari 6.0+, Chrome<28
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	special: {
		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {
			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {
			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle, false );
	}
};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&
				// Support: Android<4.0
				src.returnValue === false ?
			returnTrue :
			returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && e.preventDefault ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && e.stopPropagation ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && e.stopImmediatePropagation ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
// Support: Chrome 15+
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// Support: Firefox, Chrome, Safari
// Create "bubbling" focus and blur events
if ( !support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = data_priv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				data_priv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = data_priv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					data_priv.remove( doc, fix );

				} else {
					data_priv.access( doc, fix, attaches );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		var elem = this[0];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
});


var
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	rtagName = /<([\w:]+)/,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style|link)/i,
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /^$|\/(?:java|ecma)script/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

	// We have to close these tags to support XHTML (#13200)
	wrapMap = {

		// Support: IE9
		option: [ 1, "<select multiple='multiple'>", "</select>" ],

		thead: [ 1, "<table>", "</table>" ],
		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		_default: [ 0, "", "" ]
	};

// Support: IE9
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// Support: 1.x compatibility
// Manipulating tables requires a tbody
function manipulationTarget( elem, content ) {
	return jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

		elem.getElementsByTagName("tbody")[0] ||
			elem.appendChild( elem.ownerDocument.createElement("tbody") ) :
		elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );

	if ( match ) {
		elem.type = match[ 1 ];
	} else {
		elem.removeAttribute("type");
	}

	return elem;
}

// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		data_priv.set(
			elems[ i ], "globalEval", !refElements || data_priv.get( refElements[ i ], "globalEval" )
		);
	}
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( data_priv.hasData( src ) ) {
		pdataOld = data_priv.access( src );
		pdataCur = data_priv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( data_user.hasData( src ) ) {
		udataOld = data_user.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		data_user.set( dest, udataCur );
	}
}

function getAll( context, tag ) {
	var ret = context.getElementsByTagName ? context.getElementsByTagName( tag || "*" ) :
			context.querySelectorAll ? context.querySelectorAll( tag || "*" ) :
			[];

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], ret ) :
		ret;
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	buildFragment: function( elems, context, scripts, selection ) {
		var elem, tmp, tag, wrap, contains, j,
			fragment = context.createDocumentFragment(),
			nodes = [],
			i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
					// Support: QtWebKit, PhantomJS
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement("div") );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[ 2 ];

					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Support: QtWebKit, PhantomJS
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, tmp.childNodes );

					// Remember the top-level container
					tmp = fragment.firstChild;

					// Ensure the created nodes are orphaned (#12392)
					tmp.textContent = "";
				}
			}
		}

		// Remove wrapper from fragment
		fragment.textContent = "";

		i = 0;
		while ( (elem = nodes[ i++ ]) ) {

			// #4087 - If origin and destination elements are the same, and this is
			// that element, do not do anything
			if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( (elem = tmp[ j++ ]) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		return fragment;
	},

	cleanData: function( elems ) {
		var data, elem, type, key,
			special = jQuery.event.special,
			i = 0;

		for ( ; (elem = elems[ i ]) !== undefined; i++ ) {
			if ( jQuery.acceptData( elem ) ) {
				key = elem[ data_priv.expando ];

				if ( key && (data = data_priv.cache[ key ]) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}
					if ( data_priv.cache[ key ] ) {
						// Discard any remaining `private` data
						delete data_priv.cache[ key ];
					}
				}
			}
			// Discard any remaining `user` data
			delete data_user.cache[ elem[ data_user.expando ] ];
		}
	}
});

jQuery.fn.extend({
	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each(function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				});
		}, null, value, arguments.length );
	},

	append: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		});
	},

	before: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		});
	},

	after: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		});
	},

	remove: function( selector, keepData /* Internal Use Only */ ) {
		var elem,
			elems = selector ? jQuery.filter( selector, this ) : this,
			i = 0;

		for ( ; (elem = elems[i]) != null; i++ ) {
			if ( !keepData && elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem ) );
			}

			if ( elem.parentNode ) {
				if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
					setGlobalEval( getAll( elem, "script" ) );
				}
				elem.parentNode.removeChild( elem );
			}
		}

		return this;
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map(function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = value.replace( rxhtmlTag, "<$1></$2>" );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var arg = arguments[ 0 ];

		// Make the changes, replacing each context element with the new content
		this.domManip( arguments, function( elem ) {
			arg = this.parentNode;

			jQuery.cleanData( getAll( this ) );

			if ( arg ) {
				arg.replaceChild( elem, this );
			}
		});

		// Force removal if there was no new content (e.g., from empty arguments)
		return arg && (arg.length || arg.nodeType) ? this : this.remove();
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, callback ) {

		// Flatten any nested arrays
		args = concat.apply( [], args );

		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = this.length,
			set = this,
			iNoClone = l - 1,
			value = args[ 0 ],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return this.each(function( index ) {
				var self = set.eq( index );
				if ( isFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				self.domManip( args, callback );
			});
		}

		if ( l ) {
			fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			if ( first ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
							// Support: QtWebKit
							// jQuery.merge because push.apply(_, arraylike) throws
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( this[ i ], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!data_priv.access( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

							if ( node.src ) {
								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );
							}
						}
					}
				}
			}
		}

		return this;
	}
});

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: QtWebKit
			// .get() because push.apply(_, arraylike) throws
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
});


var iframe,
	elemdisplay = {};

/**
 * Retrieve the actual display of a element
 * @param {String} name nodeName of the element
 * @param {Object} doc Document object
 */
// Called only from within defaultDisplay
function actualDisplay( name, doc ) {
	var style,
		elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

		// getDefaultComputedStyle might be reliably used only on attached element
		display = window.getDefaultComputedStyle && ( style = window.getDefaultComputedStyle( elem[ 0 ] ) ) ?

			// Use of this method is a temporary fix (more like optimization) until something better comes along,
			// since it was removed from specification and supported only in FF
			style.display : jQuery.css( elem[ 0 ], "display" );

	// We don't have any data stored on the element,
	// so use "detach" method as fast way to get rid of the element
	elem.detach();

	return display;
}

/**
 * Try to determine the default display value of an element
 * @param {String} nodeName
 */
function defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {

			// Use the already-created iframe if possible
			iframe = (iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" )).appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = iframe[ 0 ].contentDocument;

			// Support: IE
			doc.write();
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}
var rmargin = (/^margin/);

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {
		// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		if ( elem.ownerDocument.defaultView.opener ) {
			return elem.ownerDocument.defaultView.getComputedStyle( elem, null );
		}

		return window.getComputedStyle( elem, null );
	};



function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,
		style = elem.style;

	computed = computed || getStyles( elem );

	// Support: IE9
	// getPropertyValue is only needed for .css('filter') (#12537)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];
	}

	if ( computed ) {

		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// Support: iOS < 6
		// A tribute to the "awesome hack by Dean Edwards"
		// iOS < 6 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
		// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
		if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?
		// Support: IE
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {
	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {
				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return (this.get = hookFn).apply( this, arguments );
		}
	};
}


(function() {
	var pixelPositionVal, boxSizingReliableVal,
		docElem = document.documentElement,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	if ( !div.style ) {
		return;
	}

	// Support: IE9-11+
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	container.style.cssText = "border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;" +
		"position:absolute";
	container.appendChild( div );

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computePixelPositionAndBoxSizingReliable() {
		div.style.cssText =
			// Support: Firefox<29, Android 2.3
			// Vendor-prefix box-sizing
			"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" +
			"box-sizing:border-box;display:block;margin-top:1%;top:1%;" +
			"border:1px;padding:1px;width:4px;position:absolute";
		div.innerHTML = "";
		docElem.appendChild( container );

		var divStyle = window.getComputedStyle( div, null );
		pixelPositionVal = divStyle.top !== "1%";
		boxSizingReliableVal = divStyle.width === "4px";

		docElem.removeChild( container );
	}

	// Support: node.js jsdom
	// Don't assume that getComputedStyle is a property of the global object
	if ( window.getComputedStyle ) {
		jQuery.extend( support, {
			pixelPosition: function() {

				// This test is executed only once but we still do memoizing
				// since we can use the boxSizingReliable pre-computing.
				// No need to check if the test was already performed, though.
				computePixelPositionAndBoxSizingReliable();
				return pixelPositionVal;
			},
			boxSizingReliable: function() {
				if ( boxSizingReliableVal == null ) {
					computePixelPositionAndBoxSizingReliable();
				}
				return boxSizingReliableVal;
			},
			reliableMarginRight: function() {

				// Support: Android 2.3
				// Check if div with explicit width and no margin-right incorrectly
				// gets computed margin-right based on width of container. (#3333)
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				// This support function is only executed once so no memoizing is needed.
				var ret,
					marginDiv = div.appendChild( document.createElement( "div" ) );

				// Reset CSS: box-sizing; display; margin; border; padding
				marginDiv.style.cssText = div.style.cssText =
					// Support: Firefox<29, Android 2.3
					// Vendor-prefix box-sizing
					"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
					"box-sizing:content-box;display:block;margin:0;border:0;padding:0";
				marginDiv.style.marginRight = marginDiv.style.width = "0";
				div.style.width = "1px";
				docElem.appendChild( container );

				ret = !parseFloat( window.getComputedStyle( marginDiv, null ).marginRight );

				docElem.removeChild( container );
				div.removeChild( marginDiv );

				return ret;
			}
		});
	}
})();


// A method for quickly swapping in/out CSS properties to get correct calculations.
jQuery.swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var
	// Swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rnumsplit = new RegExp( "^(" + pnum + ")(.*)$", "i" ),
	rrelNum = new RegExp( "^([+-])=(" + pnum + ")", "i" ),

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];

// Return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

	// Shortcut for names that are not vendor prefixed
	if ( name in style ) {
		return name;
	}

	// Check for vendor prefixed names
	var capName = name[0].toUpperCase() + name.slice(1),
		origName = name,
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in style ) {
			return name;
		}
	}

	return origName;
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?
		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?
		// If we already have the right measurement, avoid augmentation
		4 :
		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {
		// Both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {
			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// At this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {
			// At this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// At this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// Some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {
		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test(val) ) {
			return val;
		}

		// Check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox &&
			( support.boxSizingReliable() || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// Use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = data_priv.get( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {
			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] = data_priv.access( elem, "olddisplay", defaultDisplay(elem.nodeName) );
			}
		} else {
			hidden = isHidden( elem );

			if ( display !== "none" || !hidden ) {
				data_priv.set( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

jQuery.extend({

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		"float": "cssFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// Support: IE9-11+
			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {
				style[ name ] = value;
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
		}
		return val;
	}
});

jQuery.each([ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) && elem.offsetWidth === 0 ?
					jQuery.swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					}) :
					getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var styles = extra && getStyles( elem );
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				) : 0
			);
		}
	};
});

// Support: Android 2.3
jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
	function( elem, computed ) {
		if ( computed ) {
			return jQuery.swap( elem, { "display": "inline-block" },
				curCSS, [ elem, "marginRight" ] );
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
});

jQuery.fn.extend({
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each(function() {
			if ( isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		});
	}
});


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || "swing";
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			if ( tween.elem[ tween.prop ] != null &&
				(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );
			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {
			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE9
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	}
};

jQuery.fx = Tween.prototype.init;

// Back Compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" ),
	rrun = /queueHooks$/,
	animationPrefilters = [ defaultPrefilter ],
	tweeners = {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value ),
				target = tween.cur(),
				parts = rfxnum.exec( value ),
				unit = parts && parts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

				// Starting value computation is required for potential unit mismatches
				start = ( jQuery.cssNumber[ prop ] || unit !== "px" && +target ) &&
					rfxnum.exec( jQuery.css( tween.elem, prop ) ),
				scale = 1,
				maxIterations = 20;

			if ( start && start[ 3 ] !== unit ) {
				// Trust units reported by jQuery.css
				unit = unit || start[ 3 ];

				// Make sure we update the tween properties later on
				parts = parts || [];

				// Iteratively approximate from a nonzero starting point
				start = +target || 1;

				do {
					// If previous iteration zeroed out, double until we get *something*.
					// Use string for doubling so we don't accidentally see scale as unchanged below
					scale = scale || ".5";

					// Adjust and apply
					start = start / scale;
					jQuery.style( tween.elem, prop, start + unit );

				// Update scale, tolerating zero or NaN from tween.cur(),
				// break the loop if scale is unchanged or perfect, or if we've just had enough
				} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
			}

			// Update tween properties
			if ( parts ) {
				start = tween.start = +start || +target || 0;
				tween.unit = unit;
				// If a +=/-= token was provided, we're doing a relative animation
				tween.end = parts[ 1 ] ?
					start + ( parts[ 1 ] + 1 ) * parts[ 2 ] :
					+parts[ 2 ];
			}

			return tween;
		} ]
	};

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout(function() {
		fxNow = undefined;
	});
	return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( (tween = collection[ index ].call( animation, prop, value )) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	/* jshint validthis: true */
	var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHidden( elem ),
		dataShow = data_priv.get( elem, "fxshow" );

	// Handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always(function() {
			// Ensure the complete handler is called before this completes
			anim.always(function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			});
		});
	}

	// Height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE9-10 do not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		display = jQuery.css( elem, "display" );

		// Test default display if display is currently "none"
		checkDisplay = display === "none" ?
			data_priv.get( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

		if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {
			style.display = "inline-block";
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always(function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		});
	}

	// show/hide pass
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

		// Any non-fx value stops us from restoring the original display value
		} else {
			display = undefined;
		}
	}

	if ( !jQuery.isEmptyObject( orig ) ) {
		if ( dataShow ) {
			if ( "hidden" in dataShow ) {
				hidden = dataShow.hidden;
			}
		} else {
			dataShow = data_priv.access( elem, "fxshow", {} );
		}

		// Store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done(function() {
				jQuery( elem ).hide();
			});
		}
		anim.done(function() {
			var prop;

			data_priv.remove( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		});
		for ( prop in orig ) {
			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}

	// If this is a noop like .hide().hide(), restore an overwritten display value
	} else if ( (display === "none" ? defaultDisplay( elem.nodeName ) : display) === "inline" ) {
		style.display = display;
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = animationPrefilters.length,
		deferred = jQuery.Deferred().always( function() {
			// Don't match elem in the :animated selector
			delete tick.elem;
		}),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
				// Support: Android 2.3
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ]);

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise({
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, { specialEasing: {} }, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,
					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		}),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		})
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

jQuery.Animation = jQuery.extend( Animation, {

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.split(" ");
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			tweeners[ prop ] = tweeners[ prop ] || [];
			tweeners[ prop ].unshift( callback );
		}
	},

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			animationPrefilters.unshift( callback );
		} else {
			animationPrefilters.push( callback );
		}
	}
});

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend({
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || data_priv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = data_priv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		});
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each(function() {
			var index,
				data = data_priv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		});
	}
});

jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
});

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx("show"),
	slideUp: genFx("hide"),
	slideToggle: genFx("toggle"),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];
		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	if ( timer() ) {
		jQuery.fx.start();
	} else {
		jQuery.timers.pop();
	}
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,
	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = setTimeout( next, time );
		hooks.stop = function() {
			clearTimeout( timeout );
		};
	});
};


(function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: iOS<=5.1, Android<=4.2+
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE<=11+
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: Android<=2.3
	// Options inside disabled selects are incorrectly marked as disabled
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Support: IE<=11+
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
})();


var nodeHook, boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend({
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	}
});

jQuery.extend({
	attr: function( elem, name, value ) {
		var hooks, ret,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === strundefined ) {
			return jQuery.prop( elem, name, value );
		}

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );

			} else if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, value + "" );
				return value;
			}

		} else if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {
			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( (name = attrNames[i++]) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( jQuery.expr.match.bool.test( name ) ) {
					// Set corresponding property to false
					elem[ propName ] = false;
				}

				elem.removeAttribute( name );
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					jQuery.nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	}
});

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};
jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle;
		if ( !isXML ) {
			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ name ];
			attrHandle[ name ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				name.toLowerCase() :
				null;
			attrHandle[ name ] = handle;
		}
		return ret;
	};
});




var rfocusable = /^(?:input|select|textarea|button)$/i;

jQuery.fn.extend({
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each(function() {
			delete this[ jQuery.propFix[ name ] || name ];
		});
	}
});

jQuery.extend({
	propFix: {
		"for": "htmlFor",
		"class": "className"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			return hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?
				ret :
				( elem[ name ] = value );

		} else {
			return hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ?
				ret :
				elem[ name ];
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				return elem.hasAttribute( "tabindex" ) || rfocusable.test( elem.nodeName ) || elem.href ?
					elem.tabIndex :
					-1;
			}
		}
	}
});

if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {
			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		}
	};
}

jQuery.each([
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
});




var rclass = /[\t\r\n\f]/g;

jQuery.fn.extend({
	addClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			proceed = typeof value === "string" && value,
			i = 0,
			len = this.length;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call( this, j, this.className ) );
			});
		}

		if ( proceed ) {
			// The disjunction here is for better compressibility (see removeClass)
			classes = ( value || "" ).match( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					" "
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( elem.className !== finalValue ) {
						elem.className = finalValue;
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			proceed = arguments.length === 0 || typeof value === "string" && value,
			i = 0,
			len = this.length;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call( this, j, this.className ) );
			});
		}
		if ( proceed ) {
			classes = ( value || "" ).match( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					""
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = value ? jQuery.trim( cur ) : "";
					if ( elem.className !== finalValue ) {
						elem.className = finalValue;
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// Toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					classNames = value.match( rnotwhite ) || [];

				while ( (className = classNames[ i++ ]) ) {
					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( type === strundefined || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					data_priv.set( this, "__className__", this.className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				this.className = this.className || value === false ? "" : data_priv.get( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
				return true;
			}
		}

		return false;
	}
});




var rreturn = /\r/g;

jQuery.fn.extend({
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// Handle most common string cases
					ret.replace(rreturn, "") :
					// Handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :
					// Support: IE10-11+
					// option.text throws exceptions (#14686, #14858)
					jQuery.trim( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// IE6-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&
							// Don't return options that are disabled or in a disabled optgroup
							( support.optDisabled ? !option.disabled : option.getAttribute( "disabled" ) === null ) &&
							( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];
					if ( (option.selected = jQuery.inArray( option.value, values ) >= 0) ) {
						optionSet = true;
					}
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
});

// Radios and checkboxes getter/setter
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute("value") === null ? "on" : elem.value;
		};
	}
});




// Return jQuery for attributes-only inclusion


jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
});

jQuery.fn.extend({
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
	}
});


var nonce = jQuery.now();

var rquery = (/\?/);



// Support: Android 2.3
// Workaround failure to string-cast null input
jQuery.parseJSON = function( data ) {
	return JSON.parse( data + "" );
};


// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml, tmp;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE9
	try {
		tmp = new DOMParser();
		xml = tmp.parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Document location
	ajaxLocation = window.location.href,

	// Segment location into parts
	ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {
			// For each dataType in the dataTypeExpression
			while ( (dataType = dataTypes[i++]) ) {
				// Prepend if requested
				if ( dataType[0] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					(structure[ dataType ] = structure[ dataType ] || []).unshift( func );

				// Otherwise append
				} else {
					(structure[ dataType ] = structure[ dataType ] || []).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		});
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},
		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

		// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {
								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s[ "throws" ] ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: ajaxLocation,
		type: "GET",
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,
			// URL without anti-cache param
			cacheURL,
			// Response headers
			responseHeadersString,
			responseHeaders,
			// timeout handle
			timeoutTimer,
			// Cross-domain detection vars
			parts,
			// To know if global events are to be dispatched
			fireGlobals,
			// Loop variable
			i,
			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks("once memory"),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// The jqXHR state
			state = 0,
			// Default abort message
			strAbort = "canceled",
			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( (match = rheaders.exec( responseHeadersString )) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {
								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {
							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" )
			.replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger("ajaxStart");
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout(function() {
					jqXHR.abort("timeout");
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader("Last-Modified");
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader("etag");
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {
				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger("ajaxStop");
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// Shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		});
	};
});


jQuery._evalUrl = function( url ) {
	return jQuery.ajax({
		url: url,
		type: "GET",
		dataType: "script",
		async: false,
		global: false,
		"throws": true
	});
};


jQuery.fn.extend({
	wrapAll: function( html ) {
		var wrap;

		if ( jQuery.isFunction( html ) ) {
			return this.each(function( i ) {
				jQuery( this ).wrapAll( html.call(this, i) );
			});
		}

		if ( this[ 0 ] ) {

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function( i ) {
				jQuery( this ).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function( i ) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	}
});


jQuery.expr.filters.hidden = function( elem ) {
	// Support: Opera <= 12.12
	// Opera reports offsetWidths and offsetHeights less than zero on some elements
	return elem.offsetWidth <= 0 && elem.offsetHeight <= 0;
};
jQuery.expr.filters.visible = function( elem ) {
	return !jQuery.expr.filters.hidden( elem );
};




var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// Item is non-scalar (array or object), encode its numeric index.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {
		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {
			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		});

	} else {
		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

jQuery.fn.extend({
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map(function() {
			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		})
		.filter(function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		})
		.map(function( i, elem ) {
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});


jQuery.ajaxSettings.xhr = function() {
	try {
		return new XMLHttpRequest();
	} catch( e ) {}
};

var xhrId = 0,
	xhrCallbacks = {},
	xhrSuccessStatus = {
		// file protocol always yields status code 0, assume 200
		0: 200,
		// Support: IE9
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

// Support: IE9
// Open requests must be manually aborted on unload (#5280)
// See https://support.microsoft.com/kb/2856746 for more info
if ( window.attachEvent ) {
	window.attachEvent( "onunload", function() {
		for ( var key in xhrCallbacks ) {
			xhrCallbacks[ key ]();
		}
	});
}

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport(function( options ) {
	var callback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr(),
					id = ++xhrId;

				xhr.open( options.type, options.url, options.async, options.username, options.password );

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers["X-Requested-With"] ) {
					headers["X-Requested-With"] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							delete xhrCallbacks[ id ];
							callback = xhr.onload = xhr.onerror = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {
								complete(
									// file: protocol always yields status 0; see #8605, #14207
									xhr.status,
									xhr.statusText
								);
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,
									// Support: IE9
									// Accessing binary-data responseText throws an exception
									// (#11426)
									typeof xhr.responseText === "string" ? {
										text: xhr.responseText
									} : undefined,
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				xhr.onerror = callback("error");

				// Create the abort callback
				callback = xhrCallbacks[ id ] = callback("abort");

				try {
					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {
					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
});




// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /(?:java|ecma)script/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {
	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery("<script>").prop({
					async: true,
					charset: s.scriptCharset,
					src: s.url
				}).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
});




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always(function() {
			// Restore preexisting value
			window[ callbackName ] = overwritten;

			// Save back as free
			if ( s[ callbackName ] ) {
				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		});

		// Delegate to script
		return "script";
	}
});




// data: string of html
// context (optional): If specified, the fragment will be created in this context, defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}
	context = context || document;

	var parsed = rsingleTag.exec( data ),
		scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[1] ) ];
	}

	parsed = jQuery.buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


// Keep a copy of the old load method
var _load = jQuery.fn.load;

/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, type, response,
		self = this,
		off = url.indexOf(" ");

	if ( off >= 0 ) {
		selector = jQuery.trim( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax({
			url: url,

			// if "type" variable is undefined, then "GET" method will be used
			type: type,
			dataType: "html",
			data: params
		}).done(function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		}).complete( callback && function( jqXHR, status ) {
			self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
		});
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
});




jQuery.expr.filters.animated = function( elem ) {
	return jQuery.grep(jQuery.timers, function( fn ) {
		return elem === fn.elem;
	}).length;
};




var docElem = window.document.documentElement;

/**
 * Gets a window from an element
 */
function getWindow( elem ) {
	return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
}

jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf("auto") > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend({
	offset: function( options ) {
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each(function( i ) {
					jQuery.offset.setOffset( this, options, i );
				});
		}

		var docElem, win,
			elem = this[ 0 ],
			box = { top: 0, left: 0 },
			doc = elem && elem.ownerDocument;

		if ( !doc ) {
			return;
		}

		docElem = doc.documentElement;

		// Make sure it's not a disconnected DOM node
		if ( !jQuery.contains( docElem, elem ) ) {
			return box;
		}

		// Support: BlackBerry 5, iOS 3 (original iPhone)
		// If we don't have gBCR, just use 0,0 rather than error
		if ( typeof elem.getBoundingClientRect !== strundefined ) {
			box = elem.getBoundingClientRect();
		}
		win = getWindow( doc );
		return {
			top: box.top + win.pageYOffset - docElem.clientTop,
			left: box.left + win.pageXOffset - docElem.clientLeft
		};
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {
			// Assume getBoundingClientRect is there when computed position is fixed
			offset = elem.getBoundingClientRect();

		} else {
			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || docElem;

			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position" ) === "static" ) ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || docElem;
		});
	}
});

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : window.pageXOffset,
					top ? val : window.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
});

// Support: Safari<7+, Chrome<37+
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );
				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
});


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	});
});


// The number of elements contained in the matched element set
jQuery.fn.size = function() {
	return this.length;
};

jQuery.fn.andSelf = jQuery.fn.addBack;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	});
}




var
	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( typeof noGlobal === strundefined ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;

}));

},{}],20:[function(require,module,exports){
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

'use strict';
/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

},{}],21:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],22:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

/**
 * ReactLink encapsulates a common pattern in which a component wants to modify
 * a prop received from its parent. ReactLink allows the parent to pass down a
 * value coupled with a callback that, when invoked, expresses an intent to
 * modify that value. For example:
 *
 * React.createClass({
 *   getInitialState: function() {
 *     return {value: ''};
 *   },
 *   render: function() {
 *     var valueLink = new ReactLink(this.state.value, this._handleValueChange);
 *     return <input valueLink={valueLink} />;
 *   },
 *   _handleValueChange: function(newValue) {
 *     this.setState({value: newValue});
 *   }
 * });
 *
 * We have provided some sugary mixins to make the creation and
 * consumption of ReactLink easier; see LinkedValueUtils and LinkedStateMixin.
 */

/**
 * Deprecated: An an easy way to express two-way binding with React.
 * See https://facebook.github.io/react/docs/two-way-binding-helpers.html
 *
 * @param {*} value current value of the link
 * @param {function} requestChange callback to request a change
 */
function ReactLink(value, requestChange) {
  this.value = value;
  this.requestChange = requestChange;
}

var ReactStateSetters = {
  /**
   * Returns a function that calls the provided function, and uses the result
   * of that to set the component's state.
   *
   * @param {ReactCompositeComponent} component
   * @param {function} funcReturningState Returned callback uses this to
   *                                      determine how to update state.
   * @return {function} callback that when invoked uses funcReturningState to
   *                    determined the object literal to setState.
   */
  createStateSetter: function(component, funcReturningState) {
    return function(a, b, c, d, e, f) {
      var partialState = funcReturningState.call(component, a, b, c, d, e, f);
      if (partialState) {
        component.setState(partialState);
      }
    };
  },

  /**
   * Returns a single-argument callback that can be used to update a single
   * key in the component's state.
   *
   * Note: this is memoized function, which makes it inexpensive to call.
   *
   * @param {ReactCompositeComponent} component
   * @param {string} key The key in the state that you should update.
   * @return {function} callback of 1 argument which calls setState() with
   *                    the provided keyName and callback argument.
   */
  createStateKeySetter: function(component, key) {
    // Memoize the setters.
    var cache = component.__keySetters || (component.__keySetters = {});
    return cache[key] || (cache[key] = createStateKeySetter(component, key));
  }
};

function createStateKeySetter(component, key) {
  // Partial state is allocated outside of the function closure so it can be
  // reused with every call, avoiding memory allocation when this function
  // is called.
  var partialState = {};
  return function stateKeySetter(value) {
    partialState[key] = value;
    component.setState(partialState);
  };
}

ReactStateSetters.Mixin = {
  /**
   * Returns a function that calls the provided function, and uses the result
   * of that to set the component's state.
   *
   * For example, these statements are equivalent:
   *
   *   this.setState({x: 1});
   *   this.createStateSetter(function(xValue) {
   *     return {x: xValue};
   *   })(1);
   *
   * @param {function} funcReturningState Returned callback uses this to
   *                                      determine how to update state.
   * @return {function} callback that when invoked uses funcReturningState to
   *                    determined the object literal to setState.
   */
  createStateSetter: function(funcReturningState) {
    return ReactStateSetters.createStateSetter(this, funcReturningState);
  },

  /**
   * Returns a single-argument callback that can be used to update a single
   * key in the component's state.
   *
   * For example, these statements are equivalent:
   *
   *   this.setState({x: 1});
   *   this.createStateKeySetter('x')(1);
   *
   * Note: this is memoized function, which makes it inexpensive to call.
   *
   * @param {string} key The key in the state that you should update.
   * @return {function} callback of 1 argument which calls setState() with
   *                    the provided keyName and callback argument.
   */
  createStateKeySetter: function(key) {
    return ReactStateSetters.createStateKeySetter(this, key);
  }
};

/**
 * A simple mixin around ReactLink.forState().
 * See https://facebook.github.io/react/docs/two-way-binding-helpers.html
 */
var LinkedStateMixin = {
  /**
   * Create a ReactLink that's linked to part of this component's state. The
   * ReactLink will have the current value of this.state[key] and will call
   * setState() when a change is requested.
   *
   * @param {string} key state key to update.
   * @return {ReactLink} ReactLink instance linking to the state.
   */
  linkState: function(key) {
    return new ReactLink(
      this.state[key],
      ReactStateSetters.createStateKeySetter(this, key)
    );
  }
};

module.exports = LinkedStateMixin;

},{}],23:[function(require,module,exports){
'use strict';

module.exports = require('react/lib/ReactDOM');

},{"react/lib/ReactDOM":58}],24:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule AutoFocusUtils
 * @typechecks static-only
 */

'use strict';

var ReactMount = require('./ReactMount');

var findDOMNode = require('./findDOMNode');
var focusNode = require('fbjs/lib/focusNode');

var Mixin = {
  componentDidMount: function () {
    if (this.props.autoFocus) {
      focusNode(findDOMNode(this));
    }
  }
};

var AutoFocusUtils = {
  Mixin: Mixin,

  focusDOMComponent: function () {
    focusNode(ReactMount.getNode(this._rootNodeID));
  }
};

module.exports = AutoFocusUtils;
},{"./ReactMount":88,"./findDOMNode":131,"fbjs/lib/focusNode":161}],25:[function(require,module,exports){
/**
 * Copyright 2013-2015 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule BeforeInputEventPlugin
 * @typechecks static-only
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventPropagators = require('./EventPropagators');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var FallbackCompositionState = require('./FallbackCompositionState');
var SyntheticCompositionEvent = require('./SyntheticCompositionEvent');
var SyntheticInputEvent = require('./SyntheticInputEvent');

var keyOf = require('fbjs/lib/keyOf');

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
var START_KEYCODE = 229;

var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

var documentMode = null;
if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
  documentMode = document.documentMode;
}

// Webkit offers a very useful `textInput` event that can be used to
// directly represent `beforeInput`. The IE `textinput` event is not as
// useful, so we don't use it.
var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. Japanese ideographic
// spaces, for instance (\u3000) are not recorded correctly.
var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

/**
 * Opera <= 12 includes TextEvent in window, but does not fire
 * text input events. Rely on keypress instead.
 */
function isPresto() {
  var opera = window.opera;
  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
}

var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

var topLevelTypes = EventConstants.topLevelTypes;

// Events and their corresponding property names.
var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onBeforeInput: null }),
      captured: keyOf({ onBeforeInputCapture: null })
    },
    dependencies: [topLevelTypes.topCompositionEnd, topLevelTypes.topKeyPress, topLevelTypes.topTextInput, topLevelTypes.topPaste]
  },
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCompositionEnd: null }),
      captured: keyOf({ onCompositionEndCapture: null })
    },
    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCompositionStart: null }),
      captured: keyOf({ onCompositionStartCapture: null })
    },
    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCompositionUpdate: null }),
      captured: keyOf({ onCompositionUpdateCapture: null })
    },
    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
  }
};

// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress = false;

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */
function isKeypressCommand(nativeEvent) {
  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
  !(nativeEvent.ctrlKey && nativeEvent.altKey);
}

/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */
function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case topLevelTypes.topCompositionStart:
      return eventTypes.compositionStart;
    case topLevelTypes.topCompositionEnd:
      return eventTypes.compositionEnd;
    case topLevelTypes.topCompositionUpdate:
      return eventTypes.compositionUpdate;
  }
}

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionStart(topLevelType, nativeEvent) {
  return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;
}

/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case topLevelTypes.topKeyUp:
      // Command keys insert or clear IME input.
      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
    case topLevelTypes.topKeyDown:
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return nativeEvent.keyCode !== START_KEYCODE;
    case topLevelTypes.topKeyPress:
    case topLevelTypes.topMouseDown:
    case topLevelTypes.topBlur:
      // Events are not possible without cancelling IME.
      return true;
    default:
      return false;
  }
}

/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */
function getDataFromCustomEvent(nativeEvent) {
  var detail = nativeEvent.detail;
  if (typeof detail === 'object' && 'data' in detail) {
    return detail.data;
  }
  return null;
}

// Track the current IME composition fallback object, if any.
var currentComposition = null;

/**
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {DOMEventTarget} topLevelTarget The listening component root node.
 * @param {string} topLevelTargetID ID of `topLevelTarget`.
 * @param {object} nativeEvent Native browser event.
 * @return {?object} A SyntheticCompositionEvent.
 */
function extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
  var eventType;
  var fallbackData;

  if (canUseCompositionEvent) {
    eventType = getCompositionEventType(topLevelType);
  } else if (!currentComposition) {
    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionStart;
    }
  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
    eventType = eventTypes.compositionEnd;
  }

  if (!eventType) {
    return null;
  }

  if (useFallbackCompositionData) {
    // The current composition is stored statically and must not be
    // overwritten while composition continues.
    if (!currentComposition && eventType === eventTypes.compositionStart) {
      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);
    } else if (eventType === eventTypes.compositionEnd) {
      if (currentComposition) {
        fallbackData = currentComposition.getData();
      }
    }
  }

  var event = SyntheticCompositionEvent.getPooled(eventType, topLevelTargetID, nativeEvent, nativeEventTarget);

  if (fallbackData) {
    // Inject data generated from fallback path into the synthetic event.
    // This matches the property of native CompositionEventInterface.
    event.data = fallbackData;
  } else {
    var customData = getDataFromCustomEvent(nativeEvent);
    if (customData !== null) {
      event.data = customData;
    }
  }

  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The string corresponding to this `beforeInput` event.
 */
function getNativeBeforeInputChars(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case topLevelTypes.topCompositionEnd:
      return getDataFromCustomEvent(nativeEvent);
    case topLevelTypes.topKeyPress:
      /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */
      var which = nativeEvent.which;
      if (which !== SPACEBAR_CODE) {
        return null;
      }

      hasSpaceKeypress = true;
      return SPACEBAR_CHAR;

    case topLevelTypes.topTextInput:
      // Record the characters to be added to the DOM.
      var chars = nativeEvent.data;

      // If it's a spacebar character, assume that we have already handled
      // it at the keypress level and bail immediately. Android Chrome
      // doesn't give us keycodes, so we need to blacklist it.
      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
        return null;
      }

      return chars;

    default:
      // For other native event types, do nothing.
      return null;
  }
}

/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 *
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The fallback string for this `beforeInput` event.
 */
function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
  // If we are currently composing (IME) and using a fallback to do so,
  // try to extract the composed characters from the fallback object.
  if (currentComposition) {
    if (topLevelType === topLevelTypes.topCompositionEnd || isFallbackCompositionEnd(topLevelType, nativeEvent)) {
      var chars = currentComposition.getData();
      FallbackCompositionState.release(currentComposition);
      currentComposition = null;
      return chars;
    }
    return null;
  }

  switch (topLevelType) {
    case topLevelTypes.topPaste:
      // If a paste event occurs after a keypress, throw out the input
      // chars. Paste events should not lead to BeforeInput events.
      return null;
    case topLevelTypes.topKeyPress:
      /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */
      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
        return String.fromCharCode(nativeEvent.which);
      }
      return null;
    case topLevelTypes.topCompositionEnd:
      return useFallbackCompositionData ? null : nativeEvent.data;
    default:
      return null;
  }
}

/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {DOMEventTarget} topLevelTarget The listening component root node.
 * @param {string} topLevelTargetID ID of `topLevelTarget`.
 * @param {object} nativeEvent Native browser event.
 * @return {?object} A SyntheticInputEvent.
 */
function extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
  var chars;

  if (canUseTextInputEvent) {
    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
  } else {
    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
  }

  // If no characters are being inserted, no BeforeInput event should
  // be fired.
  if (!chars) {
    return null;
  }

  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, topLevelTargetID, nativeEvent, nativeEventTarget);

  event.data = chars;
  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */
var BeforeInputEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
    return [extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget)];
  }
};

module.exports = BeforeInputEventPlugin;
},{"./EventConstants":37,"./EventPropagators":41,"./FallbackCompositionState":42,"./SyntheticCompositionEvent":113,"./SyntheticInputEvent":117,"fbjs/lib/ExecutionEnvironment":153,"fbjs/lib/keyOf":171}],26:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSProperty
 */

'use strict';

/**
 * CSS properties which accept numbers but are not in units of "px".
 */
var isUnitlessNumber = {
  animationIterationCount: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,

  // SVG-related properties
  fillOpacity: true,
  stopOpacity: true,
  strokeDashoffset: true,
  strokeOpacity: true,
  strokeWidth: true
};

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function (prop) {
  prefixes.forEach(function (prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Most style properties can be unset by doing .style[prop] = '' but IE8
 * doesn't like doing that with shorthand properties so for the properties that
 * IE8 breaks on, which are listed here, we instead unset each of the
 * individual properties. See http://bugs.jquery.com/ticket/12385.
 * The 4-value 'clock' properties like margin, padding, border-width seem to
 * behave without any problems. Curiously, list-style works too without any
 * special prodding.
 */
var shorthandPropertyExpansions = {
  background: {
    backgroundAttachment: true,
    backgroundColor: true,
    backgroundImage: true,
    backgroundPositionX: true,
    backgroundPositionY: true,
    backgroundRepeat: true
  },
  backgroundPosition: {
    backgroundPositionX: true,
    backgroundPositionY: true
  },
  border: {
    borderWidth: true,
    borderStyle: true,
    borderColor: true
  },
  borderBottom: {
    borderBottomWidth: true,
    borderBottomStyle: true,
    borderBottomColor: true
  },
  borderLeft: {
    borderLeftWidth: true,
    borderLeftStyle: true,
    borderLeftColor: true
  },
  borderRight: {
    borderRightWidth: true,
    borderRightStyle: true,
    borderRightColor: true
  },
  borderTop: {
    borderTopWidth: true,
    borderTopStyle: true,
    borderTopColor: true
  },
  font: {
    fontStyle: true,
    fontVariant: true,
    fontWeight: true,
    fontSize: true,
    lineHeight: true,
    fontFamily: true
  },
  outline: {
    outlineWidth: true,
    outlineStyle: true,
    outlineColor: true
  }
};

var CSSProperty = {
  isUnitlessNumber: isUnitlessNumber,
  shorthandPropertyExpansions: shorthandPropertyExpansions
};

module.exports = CSSProperty;
},{}],27:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSPropertyOperations
 * @typechecks static-only
 */

'use strict';

var CSSProperty = require('./CSSProperty');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var ReactPerf = require('./ReactPerf');

var camelizeStyleName = require('fbjs/lib/camelizeStyleName');
var dangerousStyleValue = require('./dangerousStyleValue');
var hyphenateStyleName = require('fbjs/lib/hyphenateStyleName');
var memoizeStringOnly = require('fbjs/lib/memoizeStringOnly');
var warning = require('fbjs/lib/warning');

var processStyleName = memoizeStringOnly(function (styleName) {
  return hyphenateStyleName(styleName);
});

var hasShorthandPropertyBug = false;
var styleFloatAccessor = 'cssFloat';
if (ExecutionEnvironment.canUseDOM) {
  var tempStyle = document.createElement('div').style;
  try {
    // IE8 throws "Invalid argument." if resetting shorthand style properties.
    tempStyle.font = '';
  } catch (e) {
    hasShorthandPropertyBug = true;
  }
  // IE8 only supports accessing cssFloat (standard) as styleFloat
  if (document.documentElement.style.cssFloat === undefined) {
    styleFloatAccessor = 'styleFloat';
  }
}

if (process.env.NODE_ENV !== 'production') {
  // 'msTransform' is correct, but the other prefixes should be capitalized
  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

  // style values shouldn't contain a semicolon
  var badStyleValueWithSemicolonPattern = /;\s*$/;

  var warnedStyleNames = {};
  var warnedStyleValues = {};

  var warnHyphenatedStyleName = function (name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?', name, camelizeStyleName(name)) : undefined;
  };

  var warnBadVendoredStyleName = function (name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1)) : undefined;
  };

  var warnStyleValueWithSemicolon = function (name, value) {
    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
      return;
    }

    warnedStyleValues[value] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon. ' + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, '')) : undefined;
  };

  /**
   * @param {string} name
   * @param {*} value
   */
  var warnValidStyle = function (name, value) {
    if (name.indexOf('-') > -1) {
      warnHyphenatedStyleName(name);
    } else if (badVendoredStyleNamePattern.test(name)) {
      warnBadVendoredStyleName(name);
    } else if (badStyleValueWithSemicolonPattern.test(value)) {
      warnStyleValueWithSemicolon(name, value);
    }
  };
}

/**
 * Operations for dealing with CSS properties.
 */
var CSSPropertyOperations = {

  /**
   * Serializes a mapping of style properties for use as inline styles:
   *
   *   > createMarkupForStyles({width: '200px', height: 0})
   *   "width:200px;height:0;"
   *
   * Undefined values are ignored so that declarative programming is easier.
   * The result should be HTML-escaped before insertion into the DOM.
   *
   * @param {object} styles
   * @return {?string}
   */
  createMarkupForStyles: function (styles) {
    var serialized = '';
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      var styleValue = styles[styleName];
      if (process.env.NODE_ENV !== 'production') {
        warnValidStyle(styleName, styleValue);
      }
      if (styleValue != null) {
        serialized += processStyleName(styleName) + ':';
        serialized += dangerousStyleValue(styleName, styleValue) + ';';
      }
    }
    return serialized || null;
  },

  /**
   * Sets the value for multiple styles on a node.  If a value is specified as
   * '' (empty string), the corresponding style property will be unset.
   *
   * @param {DOMElement} node
   * @param {object} styles
   */
  setValueForStyles: function (node, styles) {
    var style = node.style;
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      if (process.env.NODE_ENV !== 'production') {
        warnValidStyle(styleName, styles[styleName]);
      }
      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
      if (styleName === 'float') {
        styleName = styleFloatAccessor;
      }
      if (styleValue) {
        style[styleName] = styleValue;
      } else {
        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
        if (expansion) {
          // Shorthand property that IE8 won't like unsetting, so unset each
          // component to placate it
          for (var individualStyleName in expansion) {
            style[individualStyleName] = '';
          }
        } else {
          style[styleName] = '';
        }
      }
    }
  }

};

ReactPerf.measureMethods(CSSPropertyOperations, 'CSSPropertyOperations', {
  setValueForStyles: 'setValueForStyles'
});

module.exports = CSSPropertyOperations;
}).call(this,require('_process'))
},{"./CSSProperty":26,"./ReactPerf":94,"./dangerousStyleValue":128,"_process":21,"fbjs/lib/ExecutionEnvironment":153,"fbjs/lib/camelizeStyleName":155,"fbjs/lib/hyphenateStyleName":166,"fbjs/lib/memoizeStringOnly":173,"fbjs/lib/warning":178}],28:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CallbackQueue
 */

'use strict';

var PooledClass = require('./PooledClass');

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');

/**
 * A specialized pseudo-event module to help keep track of components waiting to
 * be notified when their DOM representations are available for use.
 *
 * This implements `PooledClass`, so you should never need to instantiate this.
 * Instead, use `CallbackQueue.getPooled()`.
 *
 * @class ReactMountReady
 * @implements PooledClass
 * @internal
 */
function CallbackQueue() {
  this._callbacks = null;
  this._contexts = null;
}

assign(CallbackQueue.prototype, {

  /**
   * Enqueues a callback to be invoked when `notifyAll` is invoked.
   *
   * @param {function} callback Invoked when `notifyAll` is invoked.
   * @param {?object} context Context to call `callback` with.
   * @internal
   */
  enqueue: function (callback, context) {
    this._callbacks = this._callbacks || [];
    this._contexts = this._contexts || [];
    this._callbacks.push(callback);
    this._contexts.push(context);
  },

  /**
   * Invokes all enqueued callbacks and clears the queue. This is invoked after
   * the DOM representation of a component has been created or updated.
   *
   * @internal
   */
  notifyAll: function () {
    var callbacks = this._callbacks;
    var contexts = this._contexts;
    if (callbacks) {
      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : invariant(false) : undefined;
      this._callbacks = null;
      this._contexts = null;
      for (var i = 0; i < callbacks.length; i++) {
        callbacks[i].call(contexts[i]);
      }
      callbacks.length = 0;
      contexts.length = 0;
    }
  },

  /**
   * Resets the internal queue.
   *
   * @internal
   */
  reset: function () {
    this._callbacks = null;
    this._contexts = null;
  },

  /**
   * `PooledClass` looks for this.
   */
  destructor: function () {
    this.reset();
  }

});

PooledClass.addPoolingTo(CallbackQueue);

module.exports = CallbackQueue;
}).call(this,require('_process'))
},{"./Object.assign":45,"./PooledClass":46,"_process":21,"fbjs/lib/invariant":167}],29:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ChangeEventPlugin
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventPluginHub = require('./EventPluginHub');
var EventPropagators = require('./EventPropagators');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var ReactUpdates = require('./ReactUpdates');
var SyntheticEvent = require('./SyntheticEvent');

var getEventTarget = require('./getEventTarget');
var isEventSupported = require('./isEventSupported');
var isTextInputElement = require('./isTextInputElement');
var keyOf = require('fbjs/lib/keyOf');

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  change: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onChange: null }),
      captured: keyOf({ onChangeCapture: null })
    },
    dependencies: [topLevelTypes.topBlur, topLevelTypes.topChange, topLevelTypes.topClick, topLevelTypes.topFocus, topLevelTypes.topInput, topLevelTypes.topKeyDown, topLevelTypes.topKeyUp, topLevelTypes.topSelectionChange]
  }
};

/**
 * For IE shims
 */
var activeElement = null;
var activeElementID = null;
var activeElementValue = null;
var activeElementValueProp = null;

/**
 * SECTION: handle `change` event
 */
function shouldUseChangeEvent(elem) {
  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
}

var doesChangeEventBubble = false;
if (ExecutionEnvironment.canUseDOM) {
  // See `handleChange` comment below
  doesChangeEventBubble = isEventSupported('change') && (!('documentMode' in document) || document.documentMode > 8);
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementID, nativeEvent, getEventTarget(nativeEvent));
  EventPropagators.accumulateTwoPhaseDispatches(event);

  // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.
  ReactUpdates.batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  EventPluginHub.enqueueEvents(event);
  EventPluginHub.processEventQueue(false);
}

function startWatchingForChangeEventIE8(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
}

function stopWatchingForChangeEventIE8() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
  activeElement = null;
  activeElementID = null;
}

function getTargetIDForChangeEvent(topLevelType, topLevelTarget, topLevelTargetID) {
  if (topLevelType === topLevelTypes.topChange) {
    return topLevelTargetID;
  }
}
function handleEventsForChangeEventIE8(topLevelType, topLevelTarget, topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForChangeEventIE8();
    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForChangeEventIE8();
  }
}

/**
 * SECTION: handle `input` event
 */
var isInputEventSupported = false;
if (ExecutionEnvironment.canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events
  isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 9);
}

/**
 * (For old IE.) Replacement getter/setter for the `value` property that gets
 * set on the active element.
 */
var newValueProp = {
  get: function () {
    return activeElementValueProp.get.call(this);
  },
  set: function (val) {
    // Cast to a string so we can do equality checks.
    activeElementValue = '' + val;
    activeElementValueProp.set.call(this, val);
  }
};

/**
 * (For old IE.) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */
function startWatchingForValueChange(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElementValue = target.value;
  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');

  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
  // on DOM elements
  Object.defineProperty(activeElement, 'value', newValueProp);
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}

/**
 * (For old IE.) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */
function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }

  // delete restores the original property definition
  delete activeElement.value;
  activeElement.detachEvent('onpropertychange', handlePropertyChange);

  activeElement = null;
  activeElementID = null;
  activeElementValue = null;
  activeElementValueProp = null;
}

/**
 * (For old IE.) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */
function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }
  var value = nativeEvent.srcElement.value;
  if (value === activeElementValue) {
    return;
  }
  activeElementValue = value;

  manualDispatchChangeEvent(nativeEvent);
}

/**
 * If a `change` event should be fired, returns the target's ID.
 */
function getTargetIDForInputEvent(topLevelType, topLevelTarget, topLevelTargetID) {
  if (topLevelType === topLevelTypes.topInput) {
    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
    // what we want so fall through here and trigger an abstract event
    return topLevelTargetID;
  }
}

// For IE8 and IE9.
function handleEventsForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // In IE8, we can capture almost all .value changes by adding a
    // propertychange handler and looking for events with propertyName
    // equal to 'value'
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForValueChange();
  }
}

// For IE8 and IE9.
function getTargetIDForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
  if (topLevelType === topLevelTypes.topSelectionChange || topLevelType === topLevelTypes.topKeyUp || topLevelType === topLevelTypes.topKeyDown) {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    if (activeElement && activeElement.value !== activeElementValue) {
      activeElementValue = activeElement.value;
      return activeElementID;
    }
  }
}

/**
 * SECTION: handle `click` event
 */
function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
}

function getTargetIDForClickEvent(topLevelType, topLevelTarget, topLevelTargetID) {
  if (topLevelType === topLevelTypes.topClick) {
    return topLevelTargetID;
  }
}

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */
var ChangeEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {

    var getTargetIDFunc, handleEventFunc;
    if (shouldUseChangeEvent(topLevelTarget)) {
      if (doesChangeEventBubble) {
        getTargetIDFunc = getTargetIDForChangeEvent;
      } else {
        handleEventFunc = handleEventsForChangeEventIE8;
      }
    } else if (isTextInputElement(topLevelTarget)) {
      if (isInputEventSupported) {
        getTargetIDFunc = getTargetIDForInputEvent;
      } else {
        getTargetIDFunc = getTargetIDForInputEventIE;
        handleEventFunc = handleEventsForInputEventIE;
      }
    } else if (shouldUseClickEvent(topLevelTarget)) {
      getTargetIDFunc = getTargetIDForClickEvent;
    }

    if (getTargetIDFunc) {
      var targetID = getTargetIDFunc(topLevelType, topLevelTarget, topLevelTargetID);
      if (targetID) {
        var event = SyntheticEvent.getPooled(eventTypes.change, targetID, nativeEvent, nativeEventTarget);
        event.type = 'change';
        EventPropagators.accumulateTwoPhaseDispatches(event);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(topLevelType, topLevelTarget, topLevelTargetID);
    }
  }

};

module.exports = ChangeEventPlugin;
},{"./EventConstants":37,"./EventPluginHub":38,"./EventPropagators":41,"./ReactUpdates":106,"./SyntheticEvent":115,"./getEventTarget":137,"./isEventSupported":142,"./isTextInputElement":143,"fbjs/lib/ExecutionEnvironment":153,"fbjs/lib/keyOf":171}],30:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ClientReactRootIndex
 * @typechecks
 */

'use strict';

var nextReactRootIndex = 0;

var ClientReactRootIndex = {
  createReactRootIndex: function () {
    return nextReactRootIndex++;
  }
};

module.exports = ClientReactRootIndex;
},{}],31:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMChildrenOperations
 * @typechecks static-only
 */

'use strict';

var Danger = require('./Danger');
var ReactMultiChildUpdateTypes = require('./ReactMultiChildUpdateTypes');
var ReactPerf = require('./ReactPerf');

var setInnerHTML = require('./setInnerHTML');
var setTextContent = require('./setTextContent');
var invariant = require('fbjs/lib/invariant');

/**
 * Inserts `childNode` as a child of `parentNode` at the `index`.
 *
 * @param {DOMElement} parentNode Parent node in which to insert.
 * @param {DOMElement} childNode Child node to insert.
 * @param {number} index Index at which to insert the child.
 * @internal
 */
function insertChildAt(parentNode, childNode, index) {
  // By exploiting arrays returning `undefined` for an undefined index, we can
  // rely exclusively on `insertBefore(node, null)` instead of also using
  // `appendChild(node)`. However, using `undefined` is not allowed by all
  // browsers so we must replace it with `null`.

  // fix render order error in safari
  // IE8 will throw error when index out of list size.
  var beforeChild = index >= parentNode.childNodes.length ? null : parentNode.childNodes.item(index);

  parentNode.insertBefore(childNode, beforeChild);
}

/**
 * Operations for updating with DOM children.
 */
var DOMChildrenOperations = {

  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

  updateTextContent: setTextContent,

  /**
   * Updates a component's children by processing a series of updates. The
   * update configurations are each expected to have a `parentNode` property.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markupList List of markup strings.
   * @internal
   */
  processUpdates: function (updates, markupList) {
    var update;
    // Mapping from parent IDs to initial child orderings.
    var initialChildren = null;
    // List of children that will be moved or removed.
    var updatedChildren = null;

    for (var i = 0; i < updates.length; i++) {
      update = updates[i];
      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING || update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
        var updatedIndex = update.fromIndex;
        var updatedChild = update.parentNode.childNodes[updatedIndex];
        var parentID = update.parentID;

        !updatedChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processUpdates(): Unable to find child %s of element. This ' + 'probably means the DOM was unexpectedly mutated (e.g., by the ' + 'browser), usually due to forgetting a <tbody> when using tables, ' + 'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' + 'in an <svg> parent. Try inspecting the child nodes of the element ' + 'with React ID `%s`.', updatedIndex, parentID) : invariant(false) : undefined;

        initialChildren = initialChildren || {};
        initialChildren[parentID] = initialChildren[parentID] || [];
        initialChildren[parentID][updatedIndex] = updatedChild;

        updatedChildren = updatedChildren || [];
        updatedChildren.push(updatedChild);
      }
    }

    var renderedMarkup;
    // markupList is either a list of markup or just a list of elements
    if (markupList.length && typeof markupList[0] === 'string') {
      renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);
    } else {
      renderedMarkup = markupList;
    }

    // Remove updated children first so that `toIndex` is consistent.
    if (updatedChildren) {
      for (var j = 0; j < updatedChildren.length; j++) {
        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
      }
    }

    for (var k = 0; k < updates.length; k++) {
      update = updates[k];
      switch (update.type) {
        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
          insertChildAt(update.parentNode, renderedMarkup[update.markupIndex], update.toIndex);
          break;
        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
          insertChildAt(update.parentNode, initialChildren[update.parentID][update.fromIndex], update.toIndex);
          break;
        case ReactMultiChildUpdateTypes.SET_MARKUP:
          setInnerHTML(update.parentNode, update.content);
          break;
        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
          setTextContent(update.parentNode, update.content);
          break;
        case ReactMultiChildUpdateTypes.REMOVE_NODE:
          // Already removed by the for-loop above.
          break;
      }
    }
  }

};

ReactPerf.measureMethods(DOMChildrenOperations, 'DOMChildrenOperations', {
  updateTextContent: 'updateTextContent'
});

module.exports = DOMChildrenOperations;
}).call(this,require('_process'))
},{"./Danger":34,"./ReactMultiChildUpdateTypes":90,"./ReactPerf":94,"./setInnerHTML":147,"./setTextContent":148,"_process":21,"fbjs/lib/invariant":167}],32:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMProperty
 * @typechecks static-only
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

function checkMask(value, bitmask) {
  return (value & bitmask) === bitmask;
}

var DOMPropertyInjection = {
  /**
   * Mapping from normalized, camelcased property names to a configuration that
   * specifies how the associated DOM property should be accessed or rendered.
   */
  MUST_USE_ATTRIBUTE: 0x1,
  MUST_USE_PROPERTY: 0x2,
  HAS_SIDE_EFFECTS: 0x4,
  HAS_BOOLEAN_VALUE: 0x8,
  HAS_NUMERIC_VALUE: 0x10,
  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

  /**
   * Inject some specialized knowledge about the DOM. This takes a config object
   * with the following properties:
   *
   * isCustomAttribute: function that given an attribute name will return true
   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
   * attributes where it's impossible to enumerate all of the possible
   * attribute names,
   *
   * Properties: object mapping DOM property name to one of the
   * DOMPropertyInjection constants or null. If your attribute isn't in here,
   * it won't get written to the DOM.
   *
   * DOMAttributeNames: object mapping React attribute name to the DOM
   * attribute name. Attribute names not specified use the **lowercase**
   * normalized name.
   *
   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
   * attribute namespace URL. (Attribute names not specified use no namespace.)
   *
   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
   * Property names not specified use the normalized name.
   *
   * DOMMutationMethods: Properties that require special mutation methods. If
   * `value` is undefined, the mutation method should unset the property.
   *
   * @param {object} domPropertyConfig the config as described above.
   */
  injectDOMPropertyConfig: function (domPropertyConfig) {
    var Injection = DOMPropertyInjection;
    var Properties = domPropertyConfig.Properties || {};
    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

    if (domPropertyConfig.isCustomAttribute) {
      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
    }

    for (var propName in Properties) {
      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' + '\'%s\' which has already been injected. You may be accidentally ' + 'injecting the same DOM property config twice, or you may be ' + 'injecting two configs that have conflicting property names.', propName) : invariant(false) : undefined;

      var lowerCased = propName.toLowerCase();
      var propConfig = Properties[propName];

      var propertyInfo = {
        attributeName: lowerCased,
        attributeNamespace: null,
        propertyName: propName,
        mutationMethod: null,

        mustUseAttribute: checkMask(propConfig, Injection.MUST_USE_ATTRIBUTE),
        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
        hasSideEffects: checkMask(propConfig, Injection.HAS_SIDE_EFFECTS),
        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
      };

      !(!propertyInfo.mustUseAttribute || !propertyInfo.mustUseProperty) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Cannot require using both attribute and property: %s', propName) : invariant(false) : undefined;
      !(propertyInfo.mustUseProperty || !propertyInfo.hasSideEffects) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Properties that have side effects must use property: %s', propName) : invariant(false) : undefined;
      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or ' + 'numeric value, but not a combination: %s', propName) : invariant(false) : undefined;

      if (process.env.NODE_ENV !== 'production') {
        DOMProperty.getPossibleStandardName[lowerCased] = propName;
      }

      if (DOMAttributeNames.hasOwnProperty(propName)) {
        var attributeName = DOMAttributeNames[propName];
        propertyInfo.attributeName = attributeName;
        if (process.env.NODE_ENV !== 'production') {
          DOMProperty.getPossibleStandardName[attributeName] = propName;
        }
      }

      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
      }

      if (DOMPropertyNames.hasOwnProperty(propName)) {
        propertyInfo.propertyName = DOMPropertyNames[propName];
      }

      if (DOMMutationMethods.hasOwnProperty(propName)) {
        propertyInfo.mutationMethod = DOMMutationMethods[propName];
      }

      DOMProperty.properties[propName] = propertyInfo;
    }
  }
};
var defaultValueCache = {};

/**
 * DOMProperty exports lookup objects that can be used like functions:
 *
 *   > DOMProperty.isValid['id']
 *   true
 *   > DOMProperty.isValid['foobar']
 *   undefined
 *
 * Although this may be confusing, it performs better in general.
 *
 * @see http://jsperf.com/key-exists
 * @see http://jsperf.com/key-missing
 */
var DOMProperty = {

  ID_ATTRIBUTE_NAME: 'data-reactid',

  /**
   * Map from property "standard name" to an object with info about how to set
   * the property in the DOM. Each object contains:
   *
   * attributeName:
   *   Used when rendering markup or with `*Attribute()`.
   * attributeNamespace
   * propertyName:
   *   Used on DOM node instances. (This includes properties that mutate due to
   *   external factors.)
   * mutationMethod:
   *   If non-null, used instead of the property or `setAttribute()` after
   *   initial render.
   * mustUseAttribute:
   *   Whether the property must be accessed and mutated using `*Attribute()`.
   *   (This includes anything that fails `<propName> in <element>`.)
   * mustUseProperty:
   *   Whether the property must be accessed and mutated as an object property.
   * hasSideEffects:
   *   Whether or not setting a value causes side effects such as triggering
   *   resources to be loaded or text selection changes. If true, we read from
   *   the DOM before updating to ensure that the value is only set if it has
   *   changed.
   * hasBooleanValue:
   *   Whether the property should be removed when set to a falsey value.
   * hasNumericValue:
   *   Whether the property must be numeric or parse as a numeric and should be
   *   removed when set to a falsey value.
   * hasPositiveNumericValue:
   *   Whether the property must be positive numeric or parse as a positive
   *   numeric and should be removed when set to a falsey value.
   * hasOverloadedBooleanValue:
   *   Whether the property can be used as a flag as well as with a value.
   *   Removed when strictly equal to false; present without a value when
   *   strictly equal to true; present with a value otherwise.
   */
  properties: {},

  /**
   * Mapping from lowercase property names to the properly cased version, used
   * to warn in the case of missing properties. Available only in __DEV__.
   * @type {Object}
   */
  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? {} : null,

  /**
   * All of the isCustomAttribute() functions that have been injected.
   */
  _isCustomAttributeFunctions: [],

  /**
   * Checks whether a property name is a custom attribute.
   * @method
   */
  isCustomAttribute: function (attributeName) {
    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
      if (isCustomAttributeFn(attributeName)) {
        return true;
      }
    }
    return false;
  },

  /**
   * Returns the default property value for a DOM property (i.e., not an
   * attribute). Most default values are '' or false, but not all. Worse yet,
   * some (in particular, `type`) vary depending on the type of element.
   *
   * TODO: Is it better to grab all the possible properties when creating an
   * element to avoid having to create the same element twice?
   */
  getDefaultValueForProperty: function (nodeName, prop) {
    var nodeDefaults = defaultValueCache[nodeName];
    var testElement;
    if (!nodeDefaults) {
      defaultValueCache[nodeName] = nodeDefaults = {};
    }
    if (!(prop in nodeDefaults)) {
      testElement = document.createElement(nodeName);
      nodeDefaults[prop] = testElement[prop];
    }
    return nodeDefaults[prop];
  },

  injection: DOMPropertyInjection
};

module.exports = DOMProperty;
}).call(this,require('_process'))
},{"_process":21,"fbjs/lib/invariant":167}],33:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMPropertyOperations
 * @typechecks static-only
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var ReactPerf = require('./ReactPerf');

var quoteAttributeValueForBrowser = require('./quoteAttributeValueForBrowser');
var warning = require('fbjs/lib/warning');

// Simplified subset
var VALID_ATTRIBUTE_NAME_REGEX = /^[a-zA-Z_][\w\.\-]*$/;
var illegalAttributeNameCache = {};
var validatedAttributeNameCache = {};

function isAttributeNameSafe(attributeName) {
  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
    return true;
  }
  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
    return false;
  }
  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
    validatedAttributeNameCache[attributeName] = true;
    return true;
  }
  illegalAttributeNameCache[attributeName] = true;
  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : undefined;
  return false;
}

function shouldIgnoreValue(propertyInfo, value) {
  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
}

if (process.env.NODE_ENV !== 'production') {
  var reactProps = {
    children: true,
    dangerouslySetInnerHTML: true,
    key: true,
    ref: true
  };
  var warnedProperties = {};

  var warnUnknownProperty = function (name) {
    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
      return;
    }

    warnedProperties[name] = true;
    var lowerCasedName = name.toLowerCase();

    // data-* attributes should be lowercase; suggest the lowercase version
    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

    // For now, only warn when we have a suggested correction. This prevents
    // logging too much when using transferPropsTo.
    process.env.NODE_ENV !== 'production' ? warning(standardName == null, 'Unknown DOM property %s. Did you mean %s?', name, standardName) : undefined;
  };
}

/**
 * Operations for dealing with DOM properties.
 */
var DOMPropertyOperations = {

  /**
   * Creates markup for the ID property.
   *
   * @param {string} id Unescaped ID.
   * @return {string} Markup string.
   */
  createMarkupForID: function (id) {
    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
  },

  setAttributeForID: function (node, id) {
    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
  },

  /**
   * Creates markup for a property.
   *
   * @param {string} name
   * @param {*} value
   * @return {?string} Markup string, or null if the property was invalid.
   */
  createMarkupForProperty: function (name, value) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      if (shouldIgnoreValue(propertyInfo, value)) {
        return '';
      }
      var attributeName = propertyInfo.attributeName;
      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
        return attributeName + '=""';
      }
      return attributeName + '=' + quoteAttributeValueForBrowser(value);
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        return '';
      }
      return name + '=' + quoteAttributeValueForBrowser(value);
    } else if (process.env.NODE_ENV !== 'production') {
      warnUnknownProperty(name);
    }
    return null;
  },

  /**
   * Creates markup for a custom property.
   *
   * @param {string} name
   * @param {*} value
   * @return {string} Markup string, or empty string if the property was invalid.
   */
  createMarkupForCustomAttribute: function (name, value) {
    if (!isAttributeNameSafe(name) || value == null) {
      return '';
    }
    return name + '=' + quoteAttributeValueForBrowser(value);
  },

  /**
   * Sets the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   * @param {*} value
   */
  setValueForProperty: function (node, name, value) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      var mutationMethod = propertyInfo.mutationMethod;
      if (mutationMethod) {
        mutationMethod(node, value);
      } else if (shouldIgnoreValue(propertyInfo, value)) {
        this.deleteValueForProperty(node, name);
      } else if (propertyInfo.mustUseAttribute) {
        var attributeName = propertyInfo.attributeName;
        var namespace = propertyInfo.attributeNamespace;
        // `setAttribute` with objects becomes only `[object]` in IE8/9,
        // ('' + value) makes it output the correct toString()-value.
        if (namespace) {
          node.setAttributeNS(namespace, attributeName, '' + value);
        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
          node.setAttribute(attributeName, '');
        } else {
          node.setAttribute(attributeName, '' + value);
        }
      } else {
        var propName = propertyInfo.propertyName;
        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
        // property type before comparing; only `value` does and is string.
        if (!propertyInfo.hasSideEffects || '' + node[propName] !== '' + value) {
          // Contrary to `setAttribute`, object properties are properly
          // `toString`ed by IE8/9.
          node[propName] = value;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      DOMPropertyOperations.setValueForAttribute(node, name, value);
    } else if (process.env.NODE_ENV !== 'production') {
      warnUnknownProperty(name);
    }
  },

  setValueForAttribute: function (node, name, value) {
    if (!isAttributeNameSafe(name)) {
      return;
    }
    if (value == null) {
      node.removeAttribute(name);
    } else {
      node.setAttribute(name, '' + value);
    }
  },

  /**
   * Deletes the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForProperty: function (node, name) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      var mutationMethod = propertyInfo.mutationMethod;
      if (mutationMethod) {
        mutationMethod(node, undefined);
      } else if (propertyInfo.mustUseAttribute) {
        node.removeAttribute(propertyInfo.attributeName);
      } else {
        var propName = propertyInfo.propertyName;
        var defaultValue = DOMProperty.getDefaultValueForProperty(node.nodeName, propName);
        if (!propertyInfo.hasSideEffects || '' + node[propName] !== defaultValue) {
          node[propName] = defaultValue;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      node.removeAttribute(name);
    } else if (process.env.NODE_ENV !== 'production') {
      warnUnknownProperty(name);
    }
  }

};

ReactPerf.measureMethods(DOMPropertyOperations, 'DOMPropertyOperations', {
  setValueForProperty: 'setValueForProperty',
  setValueForAttribute: 'setValueForAttribute',
  deleteValueForProperty: 'deleteValueForProperty'
});

module.exports = DOMPropertyOperations;
}).call(this,require('_process'))
},{"./DOMProperty":32,"./ReactPerf":94,"./quoteAttributeValueForBrowser":145,"_process":21,"fbjs/lib/warning":178}],34:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Danger
 * @typechecks static-only
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var createNodesFromMarkup = require('fbjs/lib/createNodesFromMarkup');
var emptyFunction = require('fbjs/lib/emptyFunction');
var getMarkupWrap = require('fbjs/lib/getMarkupWrap');
var invariant = require('fbjs/lib/invariant');

var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
var RESULT_INDEX_ATTR = 'data-danger-index';

/**
 * Extracts the `nodeName` from a string of markup.
 *
 * NOTE: Extracting the `nodeName` does not require a regular expression match
 * because we make assumptions about React-generated markup (i.e. there are no
 * spaces surrounding the opening tag and there is at least one attribute).
 *
 * @param {string} markup String of markup.
 * @return {string} Node name of the supplied markup.
 * @see http://jsperf.com/extract-nodename
 */
function getNodeName(markup) {
  return markup.substring(1, markup.indexOf(' '));
}

var Danger = {

  /**
   * Renders markup into an array of nodes. The markup is expected to render
   * into a list of root nodes. Also, the length of `resultList` and
   * `markupList` should be the same.
   *
   * @param {array<string>} markupList List of markup strings to render.
   * @return {array<DOMElement>} List of rendered nodes.
   * @internal
   */
  dangerouslyRenderMarkup: function (markupList) {
    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' + 'thread. Make sure `window` and `document` are available globally ' + 'before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString for server rendering.') : invariant(false) : undefined;
    var nodeName;
    var markupByNodeName = {};
    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
    for (var i = 0; i < markupList.length; i++) {
      !markupList[i] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Missing markup.') : invariant(false) : undefined;
      nodeName = getNodeName(markupList[i]);
      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
      markupByNodeName[nodeName][i] = markupList[i];
    }
    var resultList = [];
    var resultListAssignmentCount = 0;
    for (nodeName in markupByNodeName) {
      if (!markupByNodeName.hasOwnProperty(nodeName)) {
        continue;
      }
      var markupListByNodeName = markupByNodeName[nodeName];

      // This for-in loop skips the holes of the sparse array. The order of
      // iteration should follow the order of assignment, which happens to match
      // numerical index order, but we don't rely on that.
      var resultIndex;
      for (resultIndex in markupListByNodeName) {
        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
          var markup = markupListByNodeName[resultIndex];

          // Push the requested markup with an additional RESULT_INDEX_ATTR
          // attribute.  If the markup does not start with a < character, it
          // will be discarded below (with an appropriate console.error).
          markupListByNodeName[resultIndex] = markup.replace(OPEN_TAG_NAME_EXP,
          // This index will be parsed back out below.
          '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" ');
        }
      }

      // Render each group of markup with similar wrapping `nodeName`.
      var renderNodes = createNodesFromMarkup(markupListByNodeName.join(''), emptyFunction // Do nothing special with <script> tags.
      );

      for (var j = 0; j < renderNodes.length; ++j) {
        var renderNode = renderNodes[j];
        if (renderNode.hasAttribute && renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
          renderNode.removeAttribute(RESULT_INDEX_ATTR);

          !!resultList.hasOwnProperty(resultIndex) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Assigning to an already-occupied result index.') : invariant(false) : undefined;

          resultList[resultIndex] = renderNode;

          // This should match resultList.length and markupList.length when
          // we're done.
          resultListAssignmentCount += 1;
        } else if (process.env.NODE_ENV !== 'production') {
          console.error('Danger: Discarding unexpected node:', renderNode);
        }
      }
    }

    // Although resultList was populated out of order, it should now be a dense
    // array.
    !(resultListAssignmentCount === resultList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Did not assign to every index of resultList.') : invariant(false) : undefined;

    !(resultList.length === markupList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Expected markup to render %s nodes, but rendered %s.', markupList.length, resultList.length) : invariant(false) : undefined;

    return resultList;
  },

  /**
   * Replaces a node with a string of markup at its current position within its
   * parent. The markup must render into a single root node.
   *
   * @param {DOMElement} oldChild Child node to replace.
   * @param {string} markup Markup to render in place of the child node.
   * @internal
   */
  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' + 'worker thread. Make sure `window` and `document` are available ' + 'globally before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;
    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(false) : undefined;
    !(oldChild.tagName.toLowerCase() !== 'html') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' + '<html> node. This is because browser quirks make this unreliable ' + 'and/or slow. If you want to render to the root you must use ' + 'server rendering. See ReactDOMServer.renderToString().') : invariant(false) : undefined;

    var newChild;
    if (typeof markup === 'string') {
      newChild = createNodesFromMarkup(markup, emptyFunction)[0];
    } else {
      newChild = markup;
    }
    oldChild.parentNode.replaceChild(newChild, oldChild);
  }

};

module.exports = Danger;
}).call(this,require('_process'))
},{"_process":21,"fbjs/lib/ExecutionEnvironment":153,"fbjs/lib/createNodesFromMarkup":158,"fbjs/lib/emptyFunction":159,"fbjs/lib/getMarkupWrap":163,"fbjs/lib/invariant":167}],35:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DefaultEventPluginOrder
 */

'use strict';

var keyOf = require('fbjs/lib/keyOf');

/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */
var DefaultEventPluginOrder = [keyOf({ ResponderEventPlugin: null }), keyOf({ SimpleEventPlugin: null }), keyOf({ TapEventPlugin: null }), keyOf({ EnterLeaveEventPlugin: null }), keyOf({ ChangeEventPlugin: null }), keyOf({ SelectEventPlugin: null }), keyOf({ BeforeInputEventPlugin: null })];

module.exports = DefaultEventPluginOrder;
},{"fbjs/lib/keyOf":171}],36:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EnterLeaveEventPlugin
 * @typechecks static-only
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventPropagators = require('./EventPropagators');
var SyntheticMouseEvent = require('./SyntheticMouseEvent');

var ReactMount = require('./ReactMount');
var keyOf = require('fbjs/lib/keyOf');

var topLevelTypes = EventConstants.topLevelTypes;
var getFirstReactDOM = ReactMount.getFirstReactDOM;

var eventTypes = {
  mouseEnter: {
    registrationName: keyOf({ onMouseEnter: null }),
    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
  },
  mouseLeave: {
    registrationName: keyOf({ onMouseLeave: null }),
    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
  }
};

var extractedEvents = [null, null];

var EnterLeaveEventPlugin = {

  eventTypes: eventTypes,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
    if (topLevelType === topLevelTypes.topMouseOver && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      return null;
    }
    if (topLevelType !== topLevelTypes.topMouseOut && topLevelType !== topLevelTypes.topMouseOver) {
      // Must not be a mouse in or mouse out - ignoring.
      return null;
    }

    var win;
    if (topLevelTarget.window === topLevelTarget) {
      // `topLevelTarget` is probably a window object.
      win = topLevelTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = topLevelTarget.ownerDocument;
      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from;
    var to;
    var fromID = '';
    var toID = '';
    if (topLevelType === topLevelTypes.topMouseOut) {
      from = topLevelTarget;
      fromID = topLevelTargetID;
      to = getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement);
      if (to) {
        toID = ReactMount.getID(to);
      } else {
        to = win;
      }
      to = to || win;
    } else {
      from = win;
      to = topLevelTarget;
      toID = topLevelTargetID;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, fromID, nativeEvent, nativeEventTarget);
    leave.type = 'mouseleave';
    leave.target = from;
    leave.relatedTarget = to;

    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, toID, nativeEvent, nativeEventTarget);
    enter.type = 'mouseenter';
    enter.target = to;
    enter.relatedTarget = from;

    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

    extractedEvents[0] = leave;
    extractedEvents[1] = enter;

    return extractedEvents;
  }

};

module.exports = EnterLeaveEventPlugin;
},{"./EventConstants":37,"./EventPropagators":41,"./ReactMount":88,"./SyntheticMouseEvent":119,"fbjs/lib/keyOf":171}],37:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventConstants
 */

'use strict';

var keyMirror = require('fbjs/lib/keyMirror');

var PropagationPhases = keyMirror({ bubbled: null, captured: null });

/**
 * Types of raw signals from the browser caught at the top level.
 */
var topLevelTypes = keyMirror({
  topAbort: null,
  topBlur: null,
  topCanPlay: null,
  topCanPlayThrough: null,
  topChange: null,
  topClick: null,
  topCompositionEnd: null,
  topCompositionStart: null,
  topCompositionUpdate: null,
  topContextMenu: null,
  topCopy: null,
  topCut: null,
  topDoubleClick: null,
  topDrag: null,
  topDragEnd: null,
  topDragEnter: null,
  topDragExit: null,
  topDragLeave: null,
  topDragOver: null,
  topDragStart: null,
  topDrop: null,
  topDurationChange: null,
  topEmptied: null,
  topEncrypted: null,
  topEnded: null,
  topError: null,
  topFocus: null,
  topInput: null,
  topKeyDown: null,
  topKeyPress: null,
  topKeyUp: null,
  topLoad: null,
  topLoadedData: null,
  topLoadedMetadata: null,
  topLoadStart: null,
  topMouseDown: null,
  topMouseMove: null,
  topMouseOut: null,
  topMouseOver: null,
  topMouseUp: null,
  topPaste: null,
  topPause: null,
  topPlay: null,
  topPlaying: null,
  topProgress: null,
  topRateChange: null,
  topReset: null,
  topScroll: null,
  topSeeked: null,
  topSeeking: null,
  topSelectionChange: null,
  topStalled: null,
  topSubmit: null,
  topSuspend: null,
  topTextInput: null,
  topTimeUpdate: null,
  topTouchCancel: null,
  topTouchEnd: null,
  topTouchMove: null,
  topTouchStart: null,
  topVolumeChange: null,
  topWaiting: null,
  topWheel: null
});

var EventConstants = {
  topLevelTypes: topLevelTypes,
  PropagationPhases: PropagationPhases
};

module.exports = EventConstants;
},{"fbjs/lib/keyMirror":170}],38:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginHub
 */

'use strict';

var EventPluginRegistry = require('./EventPluginRegistry');
var EventPluginUtils = require('./EventPluginUtils');
var ReactErrorUtils = require('./ReactErrorUtils');

var accumulateInto = require('./accumulateInto');
var forEachAccumulated = require('./forEachAccumulated');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

/**
 * Internal store for event listeners
 */
var listenerBank = {};

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */
var eventQueue = null;

/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @private
 */
var executeDispatchesAndRelease = function (event, simulated) {
  if (event) {
    EventPluginUtils.executeDispatchesInOrder(event, simulated);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};
var executeDispatchesAndReleaseSimulated = function (e) {
  return executeDispatchesAndRelease(e, true);
};
var executeDispatchesAndReleaseTopLevel = function (e) {
  return executeDispatchesAndRelease(e, false);
};

/**
 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
 *   hierarchy given ids of the logical DOM elements involved.
 */
var InstanceHandle = null;

function validateInstanceHandle() {
  var valid = InstanceHandle && InstanceHandle.traverseTwoPhase && InstanceHandle.traverseEnterLeave;
  process.env.NODE_ENV !== 'production' ? warning(valid, 'InstanceHandle not injected before use!') : undefined;
}

/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */
var EventPluginHub = {

  /**
   * Methods for injecting dependencies.
   */
  injection: {

    /**
     * @param {object} InjectedMount
     * @public
     */
    injectMount: EventPluginUtils.injection.injectMount,

    /**
     * @param {object} InjectedInstanceHandle
     * @public
     */
    injectInstanceHandle: function (InjectedInstanceHandle) {
      InstanceHandle = InjectedInstanceHandle;
      if (process.env.NODE_ENV !== 'production') {
        validateInstanceHandle();
      }
    },

    getInstanceHandle: function () {
      if (process.env.NODE_ENV !== 'production') {
        validateInstanceHandle();
      }
      return InstanceHandle;
    },

    /**
     * @param {array} InjectedEventPluginOrder
     * @public
     */
    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

    /**
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     */
    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

  },

  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

  registrationNameModules: EventPluginRegistry.registrationNameModules,

  /**
   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {?function} listener The callback to store.
   */
  putListener: function (id, registrationName, listener) {
    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : invariant(false) : undefined;

    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
    bankForRegistrationName[id] = listener;

    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
    if (PluginModule && PluginModule.didPutListener) {
      PluginModule.didPutListener(id, registrationName, listener);
    }
  },

  /**
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @return {?function} The stored callback.
   */
  getListener: function (id, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    return bankForRegistrationName && bankForRegistrationName[id];
  },

  /**
   * Deletes a listener from the registration bank.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   */
  deleteListener: function (id, registrationName) {
    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
    if (PluginModule && PluginModule.willDeleteListener) {
      PluginModule.willDeleteListener(id, registrationName);
    }

    var bankForRegistrationName = listenerBank[registrationName];
    // TODO: This should never be null -- when is it?
    if (bankForRegistrationName) {
      delete bankForRegistrationName[id];
    }
  },

  /**
   * Deletes all listeners for the DOM element with the supplied ID.
   *
   * @param {string} id ID of the DOM element.
   */
  deleteAllListeners: function (id) {
    for (var registrationName in listenerBank) {
      if (!listenerBank[registrationName][id]) {
        continue;
      }

      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
      if (PluginModule && PluginModule.willDeleteListener) {
        PluginModule.willDeleteListener(id, registrationName);
      }

      delete listenerBank[registrationName][id];
    }
  },

  /**
   * Allows registered plugins an opportunity to extract events from top-level
   * native browser events.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @internal
   */
  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
    var events;
    var plugins = EventPluginRegistry.plugins;
    for (var i = 0; i < plugins.length; i++) {
      // Not every plugin in the ordering may be loaded at runtime.
      var possiblePlugin = plugins[i];
      if (possiblePlugin) {
        var extractedEvents = possiblePlugin.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
        if (extractedEvents) {
          events = accumulateInto(events, extractedEvents);
        }
      }
    }
    return events;
  },

  /**
   * Enqueues a synthetic event that should be dispatched when
   * `processEventQueue` is invoked.
   *
   * @param {*} events An accumulation of synthetic events.
   * @internal
   */
  enqueueEvents: function (events) {
    if (events) {
      eventQueue = accumulateInto(eventQueue, events);
    }
  },

  /**
   * Dispatches all synthetic events on the event queue.
   *
   * @internal
   */
  processEventQueue: function (simulated) {
    // Set `eventQueue` to null before processing it so that we can tell if more
    // events get enqueued while processing.
    var processingEventQueue = eventQueue;
    eventQueue = null;
    if (simulated) {
      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
    } else {
      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
    }
    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing ' + 'an event queue. Support for this has not yet been implemented.') : invariant(false) : undefined;
    // This would be a good time to rethrow if any of the event handlers threw.
    ReactErrorUtils.rethrowCaughtError();
  },

  /**
   * These are needed for tests only. Do not use!
   */
  __purge: function () {
    listenerBank = {};
  },

  __getListenerBank: function () {
    return listenerBank;
  }

};

module.exports = EventPluginHub;
}).call(this,require('_process'))
},{"./EventPluginRegistry":39,"./EventPluginUtils":40,"./ReactErrorUtils":79,"./accumulateInto":125,"./forEachAccumulated":133,"_process":21,"fbjs/lib/invariant":167,"fbjs/lib/warning":178}],39:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginRegistry
 * @typechecks static-only
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

/**
 * Injectable ordering of event plugins.
 */
var EventPluginOrder = null;

/**
 * Injectable mapping from names to event plugin modules.
 */
var namesToPlugins = {};

/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */
function recomputePluginOrdering() {
  if (!EventPluginOrder) {
    // Wait until an `EventPluginOrder` is injected.
    return;
  }
  for (var pluginName in namesToPlugins) {
    var PluginModule = namesToPlugins[pluginName];
    var pluginIndex = EventPluginOrder.indexOf(pluginName);
    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in ' + 'the plugin ordering, `%s`.', pluginName) : invariant(false) : undefined;
    if (EventPluginRegistry.plugins[pluginIndex]) {
      continue;
    }
    !PluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` ' + 'method, but `%s` does not.', pluginName) : invariant(false) : undefined;
    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
    var publishedEvents = PluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      !publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : invariant(false) : undefined;
    }
  }
}

/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */
function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'event name, `%s`.', eventName) : invariant(false) : undefined;
  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(phasedRegistrationName, PluginModule, eventName);
      }
    }
    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(dispatchConfig.registrationName, PluginModule, eventName);
    return true;
  }
  return false;
}

/**
 * Publishes a registration name that is used to identify dispatched events and
 * can be used with `EventPluginHub.putListener` to register listeners.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */
function publishRegistrationName(registrationName, PluginModule, eventName) {
  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName) : invariant(false) : undefined;
  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
  EventPluginRegistry.registrationNameDependencies[registrationName] = PluginModule.eventTypes[eventName].dependencies;
}

/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */
var EventPluginRegistry = {

  /**
   * Ordered list of injected plugins.
   */
  plugins: [],

  /**
   * Mapping from event name to dispatch config
   */
  eventNameDispatchConfigs: {},

  /**
   * Mapping from registration name to plugin module
   */
  registrationNameModules: {},

  /**
   * Mapping from registration name to event name
   */
  registrationNameDependencies: {},

  /**
   * Injects an ordering of plugins (by plugin name). This allows the ordering
   * to be decoupled from injection of the actual plugins so that ordering is
   * always deterministic regardless of packaging, on-the-fly injection, etc.
   *
   * @param {array} InjectedEventPluginOrder
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginOrder}
   */
  injectEventPluginOrder: function (InjectedEventPluginOrder) {
    !!EventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than ' + 'once. You are likely trying to load more than one copy of React.') : invariant(false) : undefined;
    // Clone the ordering so it cannot be dynamically mutated.
    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
    recomputePluginOrdering();
  },

  /**
   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
   * in the ordering injected by `injectEventPluginOrder`.
   *
   * Plugins can be injected as part of page initialization or on-the-fly.
   *
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginsByName}
   */
  injectEventPluginsByName: function (injectedNamesToPlugins) {
    var isOrderingDirty = false;
    for (var pluginName in injectedNamesToPlugins) {
      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
        continue;
      }
      var PluginModule = injectedNamesToPlugins[pluginName];
      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== PluginModule) {
        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins ' + 'using the same name, `%s`.', pluginName) : invariant(false) : undefined;
        namesToPlugins[pluginName] = PluginModule;
        isOrderingDirty = true;
      }
    }
    if (isOrderingDirty) {
      recomputePluginOrdering();
    }
  },

  /**
   * Looks up the plugin for the supplied event.
   *
   * @param {object} event A synthetic event.
   * @return {?object} The plugin that created the supplied event.
   * @internal
   */
  getPluginModuleForEvent: function (event) {
    var dispatchConfig = event.dispatchConfig;
    if (dispatchConfig.registrationName) {
      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
    }
    for (var phase in dispatchConfig.phasedRegistrationNames) {
      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
        continue;
      }
      var PluginModule = EventPluginRegistry.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];
      if (PluginModule) {
        return PluginModule;
      }
    }
    return null;
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _resetEventPlugins: function () {
    EventPluginOrder = null;
    for (var pluginName in namesToPlugins) {
      if (namesToPlugins.hasOwnProperty(pluginName)) {
        delete namesToPlugins[pluginName];
      }
    }
    EventPluginRegistry.plugins.length = 0;

    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
    for (var eventName in eventNameDispatchConfigs) {
      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
        delete eventNameDispatchConfigs[eventName];
      }
    }

    var registrationNameModules = EventPluginRegistry.registrationNameModules;
    for (var registrationName in registrationNameModules) {
      if (registrationNameModules.hasOwnProperty(registrationName)) {
        delete registrationNameModules[registrationName];
      }
    }
  }

};

module.exports = EventPluginRegistry;
}).call(this,require('_process'))
},{"_process":21,"fbjs/lib/invariant":167}],40:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginUtils
 */

'use strict';

var EventConstants = require('./EventConstants');
var ReactErrorUtils = require('./ReactErrorUtils');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

/**
 * Injected dependencies:
 */

/**
 * - `Mount`: [required] Module that can convert between React dom IDs and
 *   actual node references.
 */
var injection = {
  Mount: null,
  injectMount: function (InjectedMount) {
    injection.Mount = InjectedMount;
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(InjectedMount && InjectedMount.getNode && InjectedMount.getID, 'EventPluginUtils.injection.injectMount(...): Injected Mount ' + 'module is missing getNode or getID.') : undefined;
    }
  }
};

var topLevelTypes = EventConstants.topLevelTypes;

function isEndish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseUp || topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel;
}

function isMoveish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseMove || topLevelType === topLevelTypes.topTouchMove;
}
function isStartish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseDown || topLevelType === topLevelTypes.topTouchStart;
}

var validateEventDispatches;
if (process.env.NODE_ENV !== 'production') {
  validateEventDispatches = function (event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchIDs = event._dispatchIDs;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var idsIsArr = Array.isArray(dispatchIDs);
    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

    process.env.NODE_ENV !== 'production' ? warning(idsIsArr === listenersIsArr && IDsLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : undefined;
  };
}

/**
 * Dispatch the event to the listener.
 * @param {SyntheticEvent} event SyntheticEvent to handle
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @param {function} listener Application-level callback
 * @param {string} domID DOM id to pass to the callback.
 */
function executeDispatch(event, simulated, listener, domID) {
  var type = event.type || 'unknown-event';
  event.currentTarget = injection.Mount.getNode(domID);
  if (simulated) {
    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event, domID);
  } else {
    ReactErrorUtils.invokeGuardedCallback(type, listener, event, domID);
  }
  event.currentTarget = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches.
 */
function executeDispatchesInOrder(event, simulated) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      executeDispatch(event, simulated, dispatchListeners[i], dispatchIDs[i]);
    }
  } else if (dispatchListeners) {
    executeDispatch(event, simulated, dispatchListeners, dispatchIDs);
  }
  event._dispatchListeners = null;
  event._dispatchIDs = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches, but stops
 * at the first dispatch execution returning true, and returns that id.
 *
 * @return {?string} id of the first dispatch execution who's listener returns
 * true, or null if no listener returned true.
 */
function executeDispatchesInOrderStopAtTrueImpl(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      if (dispatchListeners[i](event, dispatchIDs[i])) {
        return dispatchIDs[i];
      }
    }
  } else if (dispatchListeners) {
    if (dispatchListeners(event, dispatchIDs)) {
      return dispatchIDs;
    }
  }
  return null;
}

/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */
function executeDispatchesInOrderStopAtTrue(event) {
  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
  event._dispatchIDs = null;
  event._dispatchListeners = null;
  return ret;
}

/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return {*} The return value of executing the single dispatch.
 */
function executeDirectDispatch(event) {
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches(event);
  }
  var dispatchListener = event._dispatchListeners;
  var dispatchID = event._dispatchIDs;
  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : invariant(false) : undefined;
  var res = dispatchListener ? dispatchListener(event, dispatchID) : null;
  event._dispatchListeners = null;
  event._dispatchIDs = null;
  return res;
}

/**
 * @param {SyntheticEvent} event
 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
 */
function hasDispatches(event) {
  return !!event._dispatchListeners;
}

/**
 * General utilities that are useful in creating custom Event Plugins.
 */
var EventPluginUtils = {
  isEndish: isEndish,
  isMoveish: isMoveish,
  isStartish: isStartish,

  executeDirectDispatch: executeDirectDispatch,
  executeDispatchesInOrder: executeDispatchesInOrder,
  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
  hasDispatches: hasDispatches,

  getNode: function (id) {
    return injection.Mount.getNode(id);
  },
  getID: function (node) {
    return injection.Mount.getID(node);
  },

  injection: injection
};

module.exports = EventPluginUtils;
}).call(this,require('_process'))
},{"./EventConstants":37,"./ReactErrorUtils":79,"_process":21,"fbjs/lib/invariant":167,"fbjs/lib/warning":178}],41:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPropagators
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventPluginHub = require('./EventPluginHub');

var warning = require('fbjs/lib/warning');

var accumulateInto = require('./accumulateInto');
var forEachAccumulated = require('./forEachAccumulated');

var PropagationPhases = EventConstants.PropagationPhases;
var getListener = EventPluginHub.getListener;

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(id, event, propagationPhase) {
  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(id, registrationName);
}

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */
function accumulateDirectionalDispatches(domID, upwards, event) {
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(domID, 'Dispatching id must not be null') : undefined;
  }
  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
  var listener = listenerAtPhase(domID, event, phase);
  if (listener) {
    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
  }
}

/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We cannot perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */
function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(event.dispatchMarker, accumulateDirectionalDispatches, event);
  }
}

/**
 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
 */
function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginHub.injection.getInstanceHandle().traverseTwoPhaseSkipTarget(event.dispatchMarker, accumulateDirectionalDispatches, event);
  }
}

/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */
function accumulateDispatches(id, ignoredDirection, event) {
  if (event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(id, registrationName);
    if (listener) {
      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
    }
  }
}

/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */
function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event.dispatchMarker, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateTwoPhaseDispatchesSkipTarget(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
}

function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(fromID, toID, accumulateDispatches, leave, enter);
}

function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}

/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing event a
 * single one.
 *
 * @constructor EventPropagators
 */
var EventPropagators = {
  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
  accumulateDirectDispatches: accumulateDirectDispatches,
  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
};

module.exports = EventPropagators;
}).call(this,require('_process'))
},{"./EventConstants":37,"./EventPluginHub":38,"./accumulateInto":125,"./forEachAccumulated":133,"_process":21,"fbjs/lib/warning":178}],42:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule FallbackCompositionState
 * @typechecks static-only
 */

'use strict';

var PooledClass = require('./PooledClass');

var assign = require('./Object.assign');
var getTextContentAccessor = require('./getTextContentAccessor');

/**
 * This helper class stores information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 * @param {DOMEventTarget} root
 */
function FallbackCompositionState(root) {
  this._root = root;
  this._startText = this.getText();
  this._fallbackText = null;
}

assign(FallbackCompositionState.prototype, {
  destructor: function () {
    this._root = null;
    this._startText = null;
    this._fallbackText = null;
  },

  /**
   * Get current text of input.
   *
   * @return {string}
   */
  getText: function () {
    if ('value' in this._root) {
      return this._root.value;
    }
    return this._root[getTextContentAccessor()];
  },

  /**
   * Determine the differing substring between the initially stored
   * text content and the current content.
   *
   * @return {string}
   */
  getData: function () {
    if (this._fallbackText) {
      return this._fallbackText;
    }

    var start;
    var startValue = this._startText;
    var startLength = startValue.length;
    var end;
    var endValue = this.getText();
    var endLength = endValue.length;

    for (start = 0; start < startLength; start++) {
      if (startValue[start] !== endValue[start]) {
        break;
      }
    }

    var minEnd = startLength - start;
    for (end = 1; end <= minEnd; end++) {
      if (startValue[startLength - end] !== endValue[endLength - end]) {
        break;
      }
    }

    var sliceTail = end > 1 ? 1 - end : undefined;
    this._fallbackText = endValue.slice(start, sliceTail);
    return this._fallbackText;
  }
});

PooledClass.addPoolingTo(FallbackCompositionState);

module.exports = FallbackCompositionState;
},{"./Object.assign":45,"./PooledClass":46,"./getTextContentAccessor":140}],43:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule HTMLDOMPropertyConfig
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

var hasSVG;
if (ExecutionEnvironment.canUseDOM) {
  var implementation = document.implementation;
  hasSVG = implementation && implementation.hasFeature && implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#BasicStructure', '1.1');
}

var HTMLDOMPropertyConfig = {
  isCustomAttribute: RegExp.prototype.test.bind(/^(data|aria)-[a-z_][a-z\d_.\-]*$/),
  Properties: {
    /**
     * Standard Properties
     */
    accept: null,
    acceptCharset: null,
    accessKey: null,
    action: null,
    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    allowTransparency: MUST_USE_ATTRIBUTE,
    alt: null,
    async: HAS_BOOLEAN_VALUE,
    autoComplete: null,
    // autoFocus is polyfilled/normalized by AutoFocusUtils
    // autoFocus: HAS_BOOLEAN_VALUE,
    autoPlay: HAS_BOOLEAN_VALUE,
    capture: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    cellPadding: null,
    cellSpacing: null,
    charSet: MUST_USE_ATTRIBUTE,
    challenge: MUST_USE_ATTRIBUTE,
    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    classID: MUST_USE_ATTRIBUTE,
    // To set className on SVG elements, it's necessary to use .setAttribute;
    // this works on HTML elements too in all browsers except IE8. Conveniently,
    // IE8 doesn't support SVG and so we can simply use the attribute in
    // browsers that support SVG and the property in browsers that don't,
    // regardless of whether the element is HTML or SVG.
    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    colSpan: null,
    content: null,
    contentEditable: null,
    contextMenu: MUST_USE_ATTRIBUTE,
    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    coords: null,
    crossOrigin: null,
    data: null, // For `<object />` acts as `src`.
    dateTime: MUST_USE_ATTRIBUTE,
    'default': HAS_BOOLEAN_VALUE,
    defer: HAS_BOOLEAN_VALUE,
    dir: null,
    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    download: HAS_OVERLOADED_BOOLEAN_VALUE,
    draggable: null,
    encType: null,
    form: MUST_USE_ATTRIBUTE,
    formAction: MUST_USE_ATTRIBUTE,
    formEncType: MUST_USE_ATTRIBUTE,
    formMethod: MUST_USE_ATTRIBUTE,
    formNoValidate: HAS_BOOLEAN_VALUE,
    formTarget: MUST_USE_ATTRIBUTE,
    frameBorder: MUST_USE_ATTRIBUTE,
    headers: null,
    height: MUST_USE_ATTRIBUTE,
    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    high: null,
    href: null,
    hrefLang: null,
    htmlFor: null,
    httpEquiv: null,
    icon: null,
    id: MUST_USE_PROPERTY,
    inputMode: MUST_USE_ATTRIBUTE,
    integrity: null,
    is: MUST_USE_ATTRIBUTE,
    keyParams: MUST_USE_ATTRIBUTE,
    keyType: MUST_USE_ATTRIBUTE,
    kind: null,
    label: null,
    lang: null,
    list: MUST_USE_ATTRIBUTE,
    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    low: null,
    manifest: MUST_USE_ATTRIBUTE,
    marginHeight: null,
    marginWidth: null,
    max: null,
    maxLength: MUST_USE_ATTRIBUTE,
    media: MUST_USE_ATTRIBUTE,
    mediaGroup: null,
    method: null,
    min: null,
    minLength: MUST_USE_ATTRIBUTE,
    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    name: null,
    nonce: MUST_USE_ATTRIBUTE,
    noValidate: HAS_BOOLEAN_VALUE,
    open: HAS_BOOLEAN_VALUE,
    optimum: null,
    pattern: null,
    placeholder: null,
    poster: null,
    preload: null,
    radioGroup: null,
    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    rel: null,
    required: HAS_BOOLEAN_VALUE,
    reversed: HAS_BOOLEAN_VALUE,
    role: MUST_USE_ATTRIBUTE,
    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    rowSpan: null,
    sandbox: null,
    scope: null,
    scoped: HAS_BOOLEAN_VALUE,
    scrolling: null,
    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    shape: null,
    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    sizes: MUST_USE_ATTRIBUTE,
    span: HAS_POSITIVE_NUMERIC_VALUE,
    spellCheck: null,
    src: null,
    srcDoc: MUST_USE_PROPERTY,
    srcLang: null,
    srcSet: MUST_USE_ATTRIBUTE,
    start: HAS_NUMERIC_VALUE,
    step: null,
    style: null,
    summary: null,
    tabIndex: null,
    target: null,
    title: null,
    type: null,
    useMap: null,
    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
    width: MUST_USE_ATTRIBUTE,
    wmode: MUST_USE_ATTRIBUTE,
    wrap: null,

    /**
     * RDFa Properties
     */
    about: MUST_USE_ATTRIBUTE,
    datatype: MUST_USE_ATTRIBUTE,
    inlist: MUST_USE_ATTRIBUTE,
    prefix: MUST_USE_ATTRIBUTE,
    // property is also supported for OpenGraph in meta tags.
    property: MUST_USE_ATTRIBUTE,
    resource: MUST_USE_ATTRIBUTE,
    'typeof': MUST_USE_ATTRIBUTE,
    vocab: MUST_USE_ATTRIBUTE,

    /**
     * Non-standard Properties
     */
    // autoCapitalize and autoCorrect are supported in Mobile Safari for
    // keyboard hints.
    autoCapitalize: MUST_USE_ATTRIBUTE,
    autoCorrect: MUST_USE_ATTRIBUTE,
    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
    autoSave: null,
    // color is for Safari mask-icon link
    color: null,
    // itemProp, itemScope, itemType are for
    // Microdata support. See http://schema.org/docs/gs.html
    itemProp: MUST_USE_ATTRIBUTE,
    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    itemType: MUST_USE_ATTRIBUTE,
    // itemID and itemRef are for Microdata support as well but
    // only specified in the the WHATWG spec document. See
    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
    itemID: MUST_USE_ATTRIBUTE,
    itemRef: MUST_USE_ATTRIBUTE,
    // results show looking glass icon and recent searches on input
    // search fields in WebKit/Blink
    results: null,
    // IE-only attribute that specifies security restrictions on an iframe
    // as an alternative to the sandbox attribute on IE<10
    security: MUST_USE_ATTRIBUTE,
    // IE-only attribute that controls focus behavior
    unselectable: MUST_USE_ATTRIBUTE
  },
  DOMAttributeNames: {
    acceptCharset: 'accept-charset',
    className: 'class',
    htmlFor: 'for',
    httpEquiv: 'http-equiv'
  },
  DOMPropertyNames: {
    autoComplete: 'autocomplete',
    autoFocus: 'autofocus',
    autoPlay: 'autoplay',
    autoSave: 'autosave',
    // `encoding` is equivalent to `enctype`, IE8 lacks an `enctype` setter.
    // http://www.w3.org/TR/html5/forms.html#dom-fs-encoding
    encType: 'encoding',
    hrefLang: 'hreflang',
    radioGroup: 'radiogroup',
    spellCheck: 'spellcheck',
    srcDoc: 'srcdoc',
    srcSet: 'srcset'
  }
};

module.exports = HTMLDOMPropertyConfig;
},{"./DOMProperty":32,"fbjs/lib/ExecutionEnvironment":153}],44:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule LinkedValueUtils
 * @typechecks static-only
 */

'use strict';

var ReactPropTypes = require('./ReactPropTypes');
var ReactPropTypeLocations = require('./ReactPropTypeLocations');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

var hasReadOnlyValue = {
  'button': true,
  'checkbox': true,
  'image': true,
  'hidden': true,
  'radio': true,
  'reset': true,
  'submit': true
};

function _assertSingleLink(inputProps) {
  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use ' + 'checkedLink, you probably don\'t want to use valueLink and vice versa.') : invariant(false) : undefined;
}
function _assertValueLink(inputProps) {
  _assertSingleLink(inputProps);
  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want ' + 'to use value or onChange, you probably don\'t want to use valueLink.') : invariant(false) : undefined;
}

function _assertCheckedLink(inputProps) {
  _assertSingleLink(inputProps);
  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. ' + 'If you want to use checked or onChange, you probably don\'t want to ' + 'use checkedLink') : invariant(false) : undefined;
}

var propTypes = {
  value: function (props, propName, componentName) {
    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
      return null;
    }
    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
  },
  checked: function (props, propName, componentName) {
    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
      return null;
    }
    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
  },
  onChange: ReactPropTypes.func
};

var loggedTypeFailures = {};
function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Provide a linked `value` attribute for controlled forms. You should not use
 * this outside of the ReactDOM controlled form components.
 */
var LinkedValueUtils = {
  checkPropTypes: function (tagName, props, owner) {
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error = propTypes[propName](props, propName, tagName, ReactPropTypeLocations.prop, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
      }
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var addendum = getDeclarationErrorAddendum(owner);
        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : undefined;
      }
    }
  },

  /**
   * @param {object} inputProps Props for form component
   * @return {*} current value of the input either from value prop or link.
   */
  getValue: function (inputProps) {
    if (inputProps.valueLink) {
      _assertValueLink(inputProps);
      return inputProps.valueLink.value;
    }
    return inputProps.value;
  },

  /**
   * @param {object} inputProps Props for form component
   * @return {*} current checked status of the input either from checked prop
   *             or link.
   */
  getChecked: function (inputProps) {
    if (inputProps.checkedLink) {
      _assertCheckedLink(inputProps);
      return inputProps.checkedLink.value;
    }
    return inputProps.checked;
  },

  /**
   * @param {object} inputProps Props for form component
   * @param {SyntheticEvent} event change event to handle
   */
  executeOnChange: function (inputProps, event) {
    if (inputProps.valueLink) {
      _assertValueLink(inputProps);
      return inputProps.valueLink.requestChange(event.target.value);
    } else if (inputProps.checkedLink) {
      _assertCheckedLink(inputProps);
      return inputProps.checkedLink.requestChange(event.target.checked);
    } else if (inputProps.onChange) {
      return inputProps.onChange.call(undefined, event);
    }
  }
};

module.exports = LinkedValueUtils;
}).call(this,require('_process'))
},{"./ReactPropTypeLocations":96,"./ReactPropTypes":97,"_process":21,"fbjs/lib/invariant":167,"fbjs/lib/warning":178}],45:[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Object.assign
 */

// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

'use strict';

function assign(target, sources) {
  if (target == null) {
    throw new TypeError('Object.assign target cannot be null or undefined');
  }

  var to = Object(target);
  var hasOwnProperty = Object.prototype.hasOwnProperty;

  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
    var nextSource = arguments[nextIndex];
    if (nextSource == null) {
      continue;
    }

    var from = Object(nextSource);

    // We don't currently support accessors nor proxies. Therefore this
    // copy cannot throw. If we ever supported this then we must handle
    // exceptions and side-effects. We don't support symbols so they won't
    // be transferred.

    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }
  }

  return to;
}

module.exports = assign;
},{}],46:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule PooledClass
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function (copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function (a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function (a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fourArgumentPooler = function (a1, a2, a3, a4) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4);
  }
};

var fiveArgumentPooler = function (a1, a2, a3, a4, a5) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4, a5);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4, a5);
  }
};

var standardReleaser = function (instance) {
  var Klass = this;
  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : invariant(false) : undefined;
  instance.destructor();
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances (optional).
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function (CopyConstructor, pooler) {
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fourArgumentPooler: fourArgumentPooler,
  fiveArgumentPooler: fiveArgumentPooler
};

module.exports = PooledClass;
}).call(this,require('_process'))
},{"_process":21,"fbjs/lib/invariant":167}],47:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule React
 */

'use strict';

var ReactDOM = require('./ReactDOM');
var ReactDOMServer = require('./ReactDOMServer');
var ReactIsomorphic = require('./ReactIsomorphic');

var assign = require('./Object.assign');
var deprecated = require('./deprecated');

// `version` will be added here by ReactIsomorphic.
var React = {};

assign(React, ReactIsomorphic);

assign(React, {
  // ReactDOM
  findDOMNode: deprecated('findDOMNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.findDOMNode),
  render: deprecated('render', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.render),
  unmountComponentAtNode: deprecated('unmountComponentAtNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.unmountComponentAtNode),

  // ReactDOMServer
  renderToString: deprecated('renderToString', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToString),
  renderToStaticMarkup: deprecated('renderToStaticMarkup', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToStaticMarkup)
});

React.__SECRET_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOM;
React.__SECRET_DOM_SERVER_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOMServer;

module.exports = React;
},{"./Object.assign":45,"./ReactDOM":58,"./ReactDOMServer":68,"./ReactIsomorphic":86,"./deprecated":129}],48:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserComponentMixin
 */

'use strict';

var ReactInstanceMap = require('./ReactInstanceMap');

var findDOMNode = require('./findDOMNode');
var warning = require('fbjs/lib/warning');

var didWarnKey = '_getDOMNodeDidWarn';

var ReactBrowserComponentMixin = {
  /**
   * Returns the DOM node rendered by this component.
   *
   * @return {DOMElement} The root node of this component.
   * @final
   * @protected
   */
  getDOMNode: function () {
    process.env.NODE_ENV !== 'production' ? warning(this.constructor[didWarnKey], '%s.getDOMNode(...) is deprecated. Please use ' + 'ReactDOM.findDOMNode(instance) instead.', ReactInstanceMap.get(this).getName() || this.tagName || 'Unknown') : undefined;
    this.constructor[didWarnKey] = true;
    return findDOMNode(this);
  }
};

module.exports = ReactBrowserComponentMixin;
}).call(this,require('_process'))
},{"./ReactInstanceMap":85,"./findDOMNode":131,"_process":21,"fbjs/lib/warning":178}],49:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserEventEmitter
 * @typechecks static-only
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventPluginHub = require('./EventPluginHub');
var EventPluginRegistry = require('./EventPluginRegistry');
var ReactEventEmitterMixin = require('./ReactEventEmitterMixin');
var ReactPerf = require('./ReactPerf');
var ViewportMetrics = require('./ViewportMetrics');

var assign = require('./Object.assign');
var isEventSupported = require('./isEventSupported');

/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactEventListener, which is injected and can therefore support pluggable
 *    event sources. This is the only work that occurs in the main thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var alreadyListeningTo = {};
var isMonitoringScrollValue = false;
var reactTopListenersCounter = 0;

// For events like 'submit' which don't consistently bubble (which we trap at a
// lower node than `document`), binding at `document` would cause duplicate
// events so we don't include them here
var topEventMapping = {
  topAbort: 'abort',
  topBlur: 'blur',
  topCanPlay: 'canplay',
  topCanPlayThrough: 'canplaythrough',
  topChange: 'change',
  topClick: 'click',
  topCompositionEnd: 'compositionend',
  topCompositionStart: 'compositionstart',
  topCompositionUpdate: 'compositionupdate',
  topContextMenu: 'contextmenu',
  topCopy: 'copy',
  topCut: 'cut',
  topDoubleClick: 'dblclick',
  topDrag: 'drag',
  topDragEnd: 'dragend',
  topDragEnter: 'dragenter',
  topDragExit: 'dragexit',
  topDragLeave: 'dragleave',
  topDragOver: 'dragover',
  topDragStart: 'dragstart',
  topDrop: 'drop',
  topDurationChange: 'durationchange',
  topEmptied: 'emptied',
  topEncrypted: 'encrypted',
  topEnded: 'ended',
  topError: 'error',
  topFocus: 'focus',
  topInput: 'input',
  topKeyDown: 'keydown',
  topKeyPress: 'keypress',
  topKeyUp: 'keyup',
  topLoadedData: 'loadeddata',
  topLoadedMetadata: 'loadedmetadata',
  topLoadStart: 'loadstart',
  topMouseDown: 'mousedown',
  topMouseMove: 'mousemove',
  topMouseOut: 'mouseout',
  topMouseOver: 'mouseover',
  topMouseUp: 'mouseup',
  topPaste: 'paste',
  topPause: 'pause',
  topPlay: 'play',
  topPlaying: 'playing',
  topProgress: 'progress',
  topRateChange: 'ratechange',
  topScroll: 'scroll',
  topSeeked: 'seeked',
  topSeeking: 'seeking',
  topSelectionChange: 'selectionchange',
  topStalled: 'stalled',
  topSuspend: 'suspend',
  topTextInput: 'textInput',
  topTimeUpdate: 'timeupdate',
  topTouchCancel: 'touchcancel',
  topTouchEnd: 'touchend',
  topTouchMove: 'touchmove',
  topTouchStart: 'touchstart',
  topVolumeChange: 'volumechange',
  topWaiting: 'waiting',
  topWheel: 'wheel'
};

/**
 * To ensure no conflicts with other potential React instances on the page
 */
var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

function getListeningForDocument(mountAt) {
  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
  // directly.
  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
    mountAt[topListenersIDKey] = reactTopListenersCounter++;
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
  }
  return alreadyListeningTo[mountAt[topListenersIDKey]];
}

/**
 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
 * example:
 *
 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
 *
 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
 *
 * @internal
 */
var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

  /**
   * Injectable event backend
   */
  ReactEventListener: null,

  injection: {
    /**
     * @param {object} ReactEventListener
     */
    injectReactEventListener: function (ReactEventListener) {
      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
    }
  },

  /**
   * Sets whether or not any created callbacks should be enabled.
   *
   * @param {boolean} enabled True if callbacks should be enabled.
   */
  setEnabled: function (enabled) {
    if (ReactBrowserEventEmitter.ReactEventListener) {
      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
    }
  },

  /**
   * @return {boolean} True if callbacks are enabled.
   */
  isEnabled: function () {
    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
  },

  /**
   * We listen for bubbled touch events on the document object.
   *
   * Firefox v8.01 (and possibly others) exhibited strange behavior when
   * mounting `onmousemove` events at some node that was not the document
   * element. The symptoms were that if your mouse is not moving over something
   * contained within that mount point (for example on the background) the
   * top-level listeners for `onmousemove` won't be called. However, if you
   * register the `mousemove` on the document object, then it will of course
   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
   * top-level listeners to the document object only, at least for these
   * movement types of events and possibly all events.
   *
   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
   *
   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
   * they bubble to document.
   *
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {object} contentDocumentHandle Document which owns the container
   */
  listenTo: function (registrationName, contentDocumentHandle) {
    var mountAt = contentDocumentHandle;
    var isListening = getListeningForDocument(mountAt);
    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];

    var topLevelTypes = EventConstants.topLevelTypes;
    for (var i = 0; i < dependencies.length; i++) {
      var dependency = dependencies[i];
      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
        if (dependency === topLevelTypes.topWheel) {
          if (isEventSupported('wheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'wheel', mountAt);
          } else if (isEventSupported('mousewheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'mousewheel', mountAt);
          } else {
            // Firefox needs to capture a different mouse scroll event.
            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'DOMMouseScroll', mountAt);
          }
        } else if (dependency === topLevelTypes.topScroll) {

          if (isEventSupported('scroll', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topScroll, 'scroll', mountAt);
          } else {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topScroll, 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
          }
        } else if (dependency === topLevelTypes.topFocus || dependency === topLevelTypes.topBlur) {

          if (isEventSupported('focus', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topFocus, 'focus', mountAt);
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topBlur, 'blur', mountAt);
          } else if (isEventSupported('focusin')) {
            // IE has `focusin` and `focusout` events which bubble.
            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topFocus, 'focusin', mountAt);
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topBlur, 'focusout', mountAt);
          }

          // to make sure blur and focus event listeners are only attached once
          isListening[topLevelTypes.topBlur] = true;
          isListening[topLevelTypes.topFocus] = true;
        } else if (topEventMapping.hasOwnProperty(dependency)) {
          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
        }

        isListening[dependency] = true;
      }
    }
  },

  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
  },

  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
  },

  /**
   * Listens to window scroll and resize events. We cache scroll values so that
   * application code can access them without triggering reflows.
   *
   * NOTE: Scroll events do not bubble.
   *
   * @see http://www.quirksmode.org/dom/events/scroll.html
   */
  ensureScrollValueMonitoring: function () {
    if (!isMonitoringScrollValue) {
      var refresh = ViewportMetrics.refreshScrollValues;
      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
      isMonitoringScrollValue = true;
    }
  },

  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

  registrationNameModules: EventPluginHub.registrationNameModules,

  putListener: EventPluginHub.putListener,

  getListener: EventPluginHub.getListener,

  deleteListener: EventPluginHub.deleteListener,

  deleteAllListeners: EventPluginHub.deleteAllListeners

});

ReactPerf.measureMethods(ReactBrowserEventEmitter, 'ReactBrowserEventEmitter', {
  putListener: 'putListener',
  deleteListener: 'deleteListener'
});

module.exports = ReactBrowserEventEmitter;
},{"./EventConstants":37,"./EventPluginHub":38,"./EventPluginRegistry":39,"./Object.assign":45,"./ReactEventEmitterMixin":80,"./ReactPerf":94,"./ViewportMetrics":124,"./isEventSupported":142}],50:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactChildReconciler
 * @typechecks static-only
 */

'use strict';

var ReactReconciler = require('./ReactReconciler');

var instantiateReactComponent = require('./instantiateReactComponent');
var shouldUpdateReactComponent = require('./shouldUpdateReactComponent');
var traverseAllChildren = require('./traverseAllChildren');
var warning = require('fbjs/lib/warning');

function instantiateChild(childInstances, child, name) {
  // We found a component instance.
  var keyUnique = childInstances[name] === undefined;
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
  }
  if (child != null && keyUnique) {
    childInstances[name] = instantiateReactComponent(child, null);
  }
}

/**
 * ReactChildReconciler provides helpers for initializing or updating a set of
 * children. Its output is suitable for passing it onto ReactMultiChild which
 * does diffed reordering and insertion.
 */
var ReactChildReconciler = {
  /**
   * Generates a "mount image" for each of the supplied children. In the case
   * of `ReactDOMComponent`, a mount image is a string of markup.
   *
   * @param {?object} nestedChildNodes Nested child maps.
   * @return {?object} A set of child instances.
   * @internal
   */
  instantiateChildren: function (nestedChildNodes, transaction, context) {
    if (nestedChildNodes == null) {
      return null;
    }
    var childInstances = {};
    traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
    return childInstances;
  },

  /**
   * Updates the rendered children and returns a new set of children.
   *
   * @param {?object} prevChildren Previously initialized set of children.
   * @param {?object} nextChildren Flat child element maps.
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @return {?object} A new set of child instances.
   * @internal
   */
  updateChildren: function (prevChildren, nextChildren, transaction, context) {
    // We currently don't have a way to track moves here but if we use iterators
    // instead of for..in we can zip the iterators and check if an item has
    // moved.
    // TODO: If nothing has changed, return the prevChildren object so that we
    // can quickly bailout if nothing has changed.
    if (!nextChildren && !prevChildren) {
      return null;
    }
    var name;
    for (name in nextChildren) {
      if (!nextChildren.hasOwnProperty(name)) {
        continue;
      }
      var prevChild = prevChildren && prevChildren[name];
      var prevElement = prevChild && prevChild._currentElement;
      var nextElement = nextChildren[name];
      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
        nextChildren[name] = prevChild;
      } else {
        if (prevChild) {
          ReactReconciler.unmountComponent(prevChild, name);
        }
        // The child must be instantiated before it's mounted.
        var nextChildInstance = instantiateReactComponent(nextElement, null);
        nextChildren[name] = nextChildInstance;
      }
    }
    // Unmount children that are no longer present.
    for (name in prevChildren) {
      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
        ReactReconciler.unmountComponent(prevChildren[name]);
      }
    }
    return nextChildren;
  },

  /**
   * Unmounts all rendered children. This should be used to clean up children
   * when this component is unmounted.
   *
   * @param {?object} renderedChildren Previously initialized set of children.
   * @internal
   */
  unmountChildren: function (renderedChildren) {
    for (var name in renderedChildren) {
      if (renderedChildren.hasOwnProperty(name)) {
        var renderedChild = renderedChildren[name];
        ReactReconciler.unmountComponent(renderedChild);
      }
    }
  }

};

module.exports = ReactChildReconciler;
}).call(this,require('_process'))
},{"./ReactReconciler":99,"./instantiateReactComponent":141,"./shouldUpdateReactComponent":149,"./traverseAllChildren":150,"_process":21,"fbjs/lib/warning":178}],51:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactChildren
 */

'use strict';

var PooledClass = require('./PooledClass');
var ReactElement = require('./ReactElement');

var emptyFunction = require('fbjs/lib/emptyFunction');
var traverseAllChildren = require('./traverseAllChildren');

var twoArgumentPooler = PooledClass.twoArgumentPooler;
var fourArgumentPooler = PooledClass.fourArgumentPooler;

var userProvidedKeyEscapeRegex = /\/(?!\/)/g;
function escapeUserProvidedKey(text) {
  return ('' + text).replace(userProvidedKeyEscapeRegex, '//');
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * traversal. Allows avoiding binding callbacks.
 *
 * @constructor ForEachBookKeeping
 * @param {!function} forEachFunction Function to perform traversal with.
 * @param {?*} forEachContext Context to perform context with.
 */
function ForEachBookKeeping(forEachFunction, forEachContext) {
  this.func = forEachFunction;
  this.context = forEachContext;
  this.count = 0;
}
ForEachBookKeeping.prototype.destructor = function () {
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

function forEachSingleChild(bookKeeping, child, name) {
  var func = bookKeeping.func;
  var context = bookKeeping.context;

  func.call(context, child, bookKeeping.count++);
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }
  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  ForEachBookKeeping.release(traverseContext);
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * mapping. Allows avoiding binding callbacks.
 *
 * @constructor MapBookKeeping
 * @param {!*} mapResult Object containing the ordered map of results.
 * @param {!function} mapFunction Function to perform mapping with.
 * @param {?*} mapContext Context to perform mapping with.
 */
function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
  this.result = mapResult;
  this.keyPrefix = keyPrefix;
  this.func = mapFunction;
  this.context = mapContext;
  this.count = 0;
}
MapBookKeeping.prototype.destructor = function () {
  this.result = null;
  this.keyPrefix = null;
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

function mapSingleChildIntoContext(bookKeeping, child, childKey) {
  var result = bookKeeping.result;
  var keyPrefix = bookKeeping.keyPrefix;
  var func = bookKeeping.func;
  var context = bookKeeping.context;

  var mappedChild = func.call(context, child, bookKeeping.count++);
  if (Array.isArray(mappedChild)) {
    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
  } else if (mappedChild != null) {
    if (ReactElement.isValidElement(mappedChild)) {
      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
      // Keep both the (mapped) and old keys if they differ, just as
      // traverseAllChildren used to do for objects as children
      keyPrefix + (mappedChild !== child ? escapeUserProvidedKey(mappedChild.key || '') + '/' : '') + childKey);
    }
    result.push(mappedChild);
  }
}

function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
  var escapedPrefix = '';
  if (prefix != null) {
    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
  }
  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  MapBookKeeping.release(traverseContext);
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
  return result;
}

function forEachSingleChildDummy(traverseContext, child, name) {
  return null;
}

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */
function countChildren(children, context) {
  return traverseAllChildren(children, forEachSingleChildDummy, null);
}

/**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 */
function toArray(children) {
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
  return result;
}

var ReactChildren = {
  forEach: forEachChildren,
  map: mapChildren,
  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
  count: countChildren,
  toArray: toArray
};

module.exports = ReactChildren;
},{"./PooledClass":46,"./ReactElement":75,"./traverseAllChildren":150,"fbjs/lib/emptyFunction":159}],52:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactClass
 */

'use strict';

var ReactComponent = require('./ReactComponent');
var ReactElement = require('./ReactElement');
var ReactPropTypeLocations = require('./ReactPropTypeLocations');
var ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');
var ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');

var assign = require('./Object.assign');
var emptyObject = require('fbjs/lib/emptyObject');
var invariant = require('fbjs/lib/invariant');
var keyMirror = require('fbjs/lib/keyMirror');
var keyOf = require('fbjs/lib/keyOf');
var warning = require('fbjs/lib/warning');

var MIXINS_KEY = keyOf({ mixins: null });

/**
 * Policies that describe methods in `ReactClassInterface`.
 */
var SpecPolicy = keyMirror({
  /**
   * These methods may be defined only once by the class specification or mixin.
   */
  DEFINE_ONCE: null,
  /**
   * These methods may be defined by both the class specification and mixins.
   * Subsequent definitions will be chained. These methods must return void.
   */
  DEFINE_MANY: null,
  /**
   * These methods are overriding the base class.
   */
  OVERRIDE_BASE: null,
  /**
   * These methods are similar to DEFINE_MANY, except we assume they return
   * objects. We try to merge the keys of the return values of all the mixed in
   * functions. If there is a key conflict we throw.
   */
  DEFINE_MANY_MERGED: null
});

var injectedMixins = [];

var warnedSetProps = false;
function warnSetProps() {
  if (!warnedSetProps) {
    warnedSetProps = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'setProps(...) and replaceProps(...) are deprecated. ' + 'Instead, call render again at the top level.') : undefined;
  }
}

/**
 * Composite components are higher-level components that compose other composite
 * or native components.
 *
 * To create a new type of `ReactClass`, pass a specification of
 * your new class to `React.createClass`. The only requirement of your class
 * specification is that you implement a `render` method.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return <div>Hello World</div>;
 *     }
 *   });
 *
 * The class specification supports a specific protocol of methods that have
 * special meaning (e.g. `render`). See `ReactClassInterface` for
 * more the comprehensive protocol. Any other properties and methods in the
 * class specification will be available on the prototype.
 *
 * @interface ReactClassInterface
 * @internal
 */
var ReactClassInterface = {

  /**
   * An array of Mixin objects to include when defining your component.
   *
   * @type {array}
   * @optional
   */
  mixins: SpecPolicy.DEFINE_MANY,

  /**
   * An object containing properties and methods that should be defined on
   * the component's constructor instead of its prototype (static methods).
   *
   * @type {object}
   * @optional
   */
  statics: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of prop types for this component.
   *
   * @type {object}
   * @optional
   */
  propTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types for this component.
   *
   * @type {object}
   * @optional
   */
  contextTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types this component sets for its children.
   *
   * @type {object}
   * @optional
   */
  childContextTypes: SpecPolicy.DEFINE_MANY,

  // ==== Definition methods ====

  /**
   * Invoked when the component is mounted. Values in the mapping will be set on
   * `this.props` if that prop is not specified (i.e. using an `in` check).
   *
   * This method is invoked before `getInitialState` and therefore cannot rely
   * on `this.state` or use `this.setState`.
   *
   * @return {object}
   * @optional
   */
  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Invoked once before the component is mounted. The return value will be used
   * as the initial value of `this.state`.
   *
   *   getInitialState: function() {
   *     return {
   *       isOn: false,
   *       fooBaz: new BazFoo()
   *     }
   *   }
   *
   * @return {object}
   * @optional
   */
  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * @return {object}
   * @optional
   */
  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Uses props from `this.props` and state from `this.state` to render the
   * structure of the component.
   *
   * No guarantees are made about when or how often this method is invoked, so
   * it must not have side effects.
   *
   *   render: function() {
   *     var name = this.props.name;
   *     return <div>Hello, {name}!</div>;
   *   }
   *
   * @return {ReactComponent}
   * @nosideeffects
   * @required
   */
  render: SpecPolicy.DEFINE_ONCE,

  // ==== Delegate methods ====

  /**
   * Invoked when the component is initially created and about to be mounted.
   * This may have side effects, but any external subscriptions or data created
   * by this method must be cleaned up in `componentWillUnmount`.
   *
   * @optional
   */
  componentWillMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component has been mounted and has a DOM representation.
   * However, there is no guarantee that the DOM node is in the document.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been mounted (initialized and rendered) for the first time.
   *
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked before the component receives new props.
   *
   * Use this as an opportunity to react to a prop transition by updating the
   * state using `this.setState`. Current props are accessed via `this.props`.
   *
   *   componentWillReceiveProps: function(nextProps, nextContext) {
   *     this.setState({
   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
   *     });
   *   }
   *
   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
   * transition may cause a state change, but the opposite is not true. If you
   * need it, you are probably looking for `componentWillUpdate`.
   *
   * @param {object} nextProps
   * @optional
   */
  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked while deciding if the component should be updated as a result of
   * receiving new props, state and/or context.
   *
   * Use this as an opportunity to `return false` when you're certain that the
   * transition to the new props/state/context will not require a component
   * update.
   *
   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
   *     return !equal(nextProps, this.props) ||
   *       !equal(nextState, this.state) ||
   *       !equal(nextContext, this.context);
   *   }
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @return {boolean} True if the component should update.
   * @optional
   */
  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

  /**
   * Invoked when the component is about to update due to a transition from
   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
   * and `nextContext`.
   *
   * Use this as an opportunity to perform preparation before an update occurs.
   *
   * NOTE: You **cannot** use `this.setState()` in this method.
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @param {ReactReconcileTransaction} transaction
   * @optional
   */
  componentWillUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component's DOM representation has been updated.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been updated.
   *
   * @param {object} prevProps
   * @param {?object} prevState
   * @param {?object} prevContext
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component is about to be removed from its parent and have
   * its DOM representation destroyed.
   *
   * Use this as an opportunity to deallocate any external resources.
   *
   * NOTE: There is no `componentDidUnmount` since your component will have been
   * destroyed by that point.
   *
   * @optional
   */
  componentWillUnmount: SpecPolicy.DEFINE_MANY,

  // ==== Advanced methods ====

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   * @overridable
   */
  updateComponent: SpecPolicy.OVERRIDE_BASE

};

/**
 * Mapping from class specification keys to special processing functions.
 *
 * Although these are declared like instance properties in the specification
 * when defining classes using `React.createClass`, they are actually static
 * and are accessible on the constructor instead of the prototype. Despite
 * being static, they must be defined outside of the "statics" key under
 * which all other static methods are defined.
 */
var RESERVED_SPEC_KEYS = {
  displayName: function (Constructor, displayName) {
    Constructor.displayName = displayName;
  },
  mixins: function (Constructor, mixins) {
    if (mixins) {
      for (var i = 0; i < mixins.length; i++) {
        mixSpecIntoComponent(Constructor, mixins[i]);
      }
    }
  },
  childContextTypes: function (Constructor, childContextTypes) {
    if (process.env.NODE_ENV !== 'production') {
      validateTypeDef(Constructor, childContextTypes, ReactPropTypeLocations.childContext);
    }
    Constructor.childContextTypes = assign({}, Constructor.childContextTypes, childContextTypes);
  },
  contextTypes: function (Constructor, contextTypes) {
    if (process.env.NODE_ENV !== 'production') {
      validateTypeDef(Constructor, contextTypes, ReactPropTypeLocations.context);
    }
    Constructor.contextTypes = assign({}, Constructor.contextTypes, contextTypes);
  },
  /**
   * Special case getDefaultProps which should move into statics but requires
   * automatic merging.
   */
  getDefaultProps: function (Constructor, getDefaultProps) {
    if (Constructor.getDefaultProps) {
      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
    } else {
      Constructor.getDefaultProps = getDefaultProps;
    }
  },
  propTypes: function (Constructor, propTypes) {
    if (process.env.NODE_ENV !== 'production') {
      validateTypeDef(Constructor, propTypes, ReactPropTypeLocations.prop);
    }
    Constructor.propTypes = assign({}, Constructor.propTypes, propTypes);
  },
  statics: function (Constructor, statics) {
    mixStaticSpecIntoComponent(Constructor, statics);
  },
  autobind: function () {} };

// noop
function validateTypeDef(Constructor, typeDef, location) {
  for (var propName in typeDef) {
    if (typeDef.hasOwnProperty(propName)) {
      // use a warning instead of an invariant so components
      // don't show up in prod but not in __DEV__
      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : undefined;
    }
  }
}

function validateMethodOverride(proto, name) {
  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

  // Disallow overriding of base class methods unless explicitly allowed.
  if (ReactClassMixin.hasOwnProperty(name)) {
    !(specPolicy === SpecPolicy.OVERRIDE_BASE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name) : invariant(false) : undefined;
  }

  // Disallow defining methods more than once unless explicitly allowed.
  if (proto.hasOwnProperty(name)) {
    !(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name) : invariant(false) : undefined;
  }
}

/**
 * Mixin helper which handles policy validation and reserved
 * specification keys when building React classses.
 */
function mixSpecIntoComponent(Constructor, spec) {
  if (!spec) {
    return;
  }

  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component class as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;
  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;

  var proto = Constructor.prototype;

  // By handling mixins before any other properties, we ensure the same
  // chaining order is applied to methods with DEFINE_MANY policy, whether
  // mixins are listed before or after these methods in the spec.
  if (spec.hasOwnProperty(MIXINS_KEY)) {
    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
  }

  for (var name in spec) {
    if (!spec.hasOwnProperty(name)) {
      continue;
    }

    if (name === MIXINS_KEY) {
      // We have already handled mixins in a special case above.
      continue;
    }

    var property = spec[name];
    validateMethodOverride(proto, name);

    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
      RESERVED_SPEC_KEYS[name](Constructor, property);
    } else {
      // Setup methods on prototype:
      // The following member methods should not be automatically bound:
      // 1. Expected ReactClass methods (in the "interface").
      // 2. Overridden methods (that were mixed in).
      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
      var isAlreadyDefined = proto.hasOwnProperty(name);
      var isFunction = typeof property === 'function';
      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

      if (shouldAutoBind) {
        if (!proto.__reactAutoBindMap) {
          proto.__reactAutoBindMap = {};
        }
        proto.__reactAutoBindMap[name] = property;
        proto[name] = property;
      } else {
        if (isAlreadyDefined) {
          var specPolicy = ReactClassInterface[name];

          // These cases should already be caught by validateMethodOverride.
          !(isReactClassMethod && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name) : invariant(false) : undefined;

          // For methods which are defined more than once, call the existing
          // methods before calling the new property, merging if appropriate.
          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
            proto[name] = createMergedResultFunction(proto[name], property);
          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
            proto[name] = createChainedFunction(proto[name], property);
          }
        } else {
          proto[name] = property;
          if (process.env.NODE_ENV !== 'production') {
            // Add verbose displayName to the function, which helps when looking
            // at profiling tools.
            if (typeof property === 'function' && spec.displayName) {
              proto[name].displayName = spec.displayName + '_' + name;
            }
          }
        }
      }
    }
  }
}

function mixStaticSpecIntoComponent(Constructor, statics) {
  if (!statics) {
    return;
  }
  for (var name in statics) {
    var property = statics[name];
    if (!statics.hasOwnProperty(name)) {
      continue;
    }

    var isReserved = (name in RESERVED_SPEC_KEYS);
    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name) : invariant(false) : undefined;

    var isInherited = (name in Constructor);
    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name) : invariant(false) : undefined;
    Constructor[name] = property;
  }
}

/**
 * Merge two objects, but throw if both contain the same key.
 *
 * @param {object} one The first object, which is mutated.
 * @param {object} two The second object
 * @return {object} one after it has been mutated to contain everything in two.
 */
function mergeIntoWithNoDuplicateKeys(one, two) {
  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : invariant(false) : undefined;

  for (var key in two) {
    if (two.hasOwnProperty(key)) {
      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key) : invariant(false) : undefined;
      one[key] = two[key];
    }
  }
  return one;
}

/**
 * Creates a function that invokes two functions and merges their return values.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createMergedResultFunction(one, two) {
  return function mergedResult() {
    var a = one.apply(this, arguments);
    var b = two.apply(this, arguments);
    if (a == null) {
      return b;
    } else if (b == null) {
      return a;
    }
    var c = {};
    mergeIntoWithNoDuplicateKeys(c, a);
    mergeIntoWithNoDuplicateKeys(c, b);
    return c;
  };
}

/**
 * Creates a function that invokes two functions and ignores their return vales.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createChainedFunction(one, two) {
  return function chainedFunction() {
    one.apply(this, arguments);
    two.apply(this, arguments);
  };
}

/**
 * Binds a method to the component.
 *
 * @param {object} component Component whose method is going to be bound.
 * @param {function} method Method to be bound.
 * @return {function} The bound method.
 */
function bindAutoBindMethod(component, method) {
  var boundMethod = method.bind(component);
  if (process.env.NODE_ENV !== 'production') {
    boundMethod.__reactBoundContext = component;
    boundMethod.__reactBoundMethod = method;
    boundMethod.__reactBoundArguments = null;
    var componentName = component.constructor.displayName;
    var _bind = boundMethod.bind;
    /* eslint-disable block-scoped-var, no-undef */
    boundMethod.bind = function (newThis) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      // User is trying to bind() an autobound method; we effectively will
      // ignore the value of "this" that the user is trying to use, so
      // let's warn.
      if (newThis !== component && newThis !== null) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : undefined;
      } else if (!args.length) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : undefined;
        return boundMethod;
      }
      var reboundMethod = _bind.apply(boundMethod, arguments);
      reboundMethod.__reactBoundContext = component;
      reboundMethod.__reactBoundMethod = method;
      reboundMethod.__reactBoundArguments = args;
      return reboundMethod;
      /* eslint-enable */
    };
  }
  return boundMethod;
}

/**
 * Binds all auto-bound methods in a component.
 *
 * @param {object} component Component whose method is going to be bound.
 */
function bindAutoBindMethods(component) {
  for (var autoBindKey in component.__reactAutoBindMap) {
    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
      var method = component.__reactAutoBindMap[autoBindKey];
      component[autoBindKey] = bindAutoBindMethod(component, method);
    }
  }
}

/**
 * Add more to the ReactClass base class. These are all legacy features and
 * therefore not already part of the modern ReactComponent.
 */
var ReactClassMixin = {

  /**
   * TODO: This will be deprecated because state should always keep a consistent
   * type signature and the only use case for this, is to avoid that.
   */
  replaceState: function (newState, callback) {
    this.updater.enqueueReplaceState(this, newState);
    if (callback) {
      this.updater.enqueueCallback(this, callback);
    }
  },

  /**
   * Checks whether or not this composite component is mounted.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function () {
    return this.updater.isMounted(this);
  },

  /**
   * Sets a subset of the props.
   *
   * @param {object} partialProps Subset of the next props.
   * @param {?function} callback Called after props are updated.
   * @final
   * @public
   * @deprecated
   */
  setProps: function (partialProps, callback) {
    if (process.env.NODE_ENV !== 'production') {
      warnSetProps();
    }
    this.updater.enqueueSetProps(this, partialProps);
    if (callback) {
      this.updater.enqueueCallback(this, callback);
    }
  },

  /**
   * Replace all the props.
   *
   * @param {object} newProps Subset of the next props.
   * @param {?function} callback Called after props are updated.
   * @final
   * @public
   * @deprecated
   */
  replaceProps: function (newProps, callback) {
    if (process.env.NODE_ENV !== 'production') {
      warnSetProps();
    }
    this.updater.enqueueReplaceProps(this, newProps);
    if (callback) {
      this.updater.enqueueCallback(this, callback);
    }
  }
};

var ReactClassComponent = function () {};
assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

/**
 * Module for creating composite components.
 *
 * @class ReactClass
 */
var ReactClass = {

  /**
   * Creates a composite component class given a class specification.
   *
   * @param {object} spec Class specification (which must define `render`).
   * @return {function} Component constructor function.
   * @public
   */
  createClass: function (spec) {
    var Constructor = function (props, context, updater) {
      // This constructor is overridden by mocks. The argument is used
      // by mocks to assert on what gets mounted.

      if (process.env.NODE_ENV !== 'production') {
        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : undefined;
      }

      // Wire up auto-binding
      if (this.__reactAutoBindMap) {
        bindAutoBindMethods(this);
      }

      this.props = props;
      this.context = context;
      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;

      this.state = null;

      // ReactClasses doesn't have constructors. Instead, they use the
      // getInitialState and componentWillMount methods for initialization.

      var initialState = this.getInitialState ? this.getInitialState() : null;
      if (process.env.NODE_ENV !== 'production') {
        // We allow auto-mocks to proceed as if they're returning null.
        if (typeof initialState === 'undefined' && this.getInitialState._isMockFunction) {
          // This is probably bad practice. Consider warning here and
          // deprecating this convenience.
          initialState = null;
        }
      }
      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : invariant(false) : undefined;

      this.state = initialState;
    };
    Constructor.prototype = new ReactClassComponent();
    Constructor.prototype.constructor = Constructor;

    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

    mixSpecIntoComponent(Constructor, spec);

    // Initialize the defaultProps property after all mixins have been merged.
    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();
    }

    if (process.env.NODE_ENV !== 'production') {
      // This is a tag to indicate that the use of these method names is ok,
      // since it's used with createClass. If it's not, then it's likely a
      // mistake so we'll warn you to use the static property, property
      // initializer or constructor respectively.
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps.isReactClassApproved = {};
      }
      if (Constructor.prototype.getInitialState) {
        Constructor.prototype.getInitialState.isReactClassApproved = {};
      }
    }

    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : invariant(false) : undefined;

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : undefined;
      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : undefined;
    }

    // Reduce time spent doing lookups by setting these on the prototype.
    for (var methodName in ReactClassInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    return Constructor;
  },

  injection: {
    injectMixin: function (mixin) {
      injectedMixins.push(mixin);
    }
  }

};

module.exports = ReactClass;
}).call(this,require('_process'))
},{"./Object.assign":45,"./ReactComponent":53,"./ReactElement":75,"./ReactNoopUpdateQueue":92,"./ReactPropTypeLocationNames":95,"./ReactPropTypeLocations":96,"_process":21,"fbjs/lib/emptyObject":160,"fbjs/lib/invariant":167,"fbjs/lib/keyMirror":170,"fbjs/lib/keyOf":171,"fbjs/lib/warning":178}],53:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponent
 */

'use strict';

var ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');

var canDefineProperty = require('./canDefineProperty');
var emptyObject = require('fbjs/lib/emptyObject');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

/**
 * Base class helpers for the updating state of a component.
 */
function ReactComponent(props, context, updater) {
  this.props = props;
  this.context = context;
  this.refs = emptyObject;
  // We initialize the default updater but the real one gets injected by the
  // renderer.
  this.updater = updater || ReactNoopUpdateQueue;
}

ReactComponent.prototype.isReactComponent = {};

/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */
ReactComponent.prototype.setState = function (partialState, callback) {
  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.') : invariant(false) : undefined;
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : undefined;
  }
  this.updater.enqueueSetState(this, partialState);
  if (callback) {
    this.updater.enqueueCallback(this, callback);
  }
};

/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */
ReactComponent.prototype.forceUpdate = function (callback) {
  this.updater.enqueueForceUpdate(this);
  if (callback) {
    this.updater.enqueueCallback(this, callback);
  }
};

/**
 * Deprecated APIs. These APIs used to exist on classic React classes but since
 * we would like to deprecate them, we're not going to move them over to this
 * modern base class. Instead, we define a getter that warns if it's accessed.
 */
if (process.env.NODE_ENV !== 'production') {
  var deprecatedAPIs = {
    getDOMNode: ['getDOMNode', 'Use ReactDOM.findDOMNode(component) instead.'],
    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
    replaceProps: ['replaceProps', 'Instead, call render again at the top level.'],
    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).'],
    setProps: ['setProps', 'Instead, call render again at the top level.']
  };
  var defineDeprecationWarning = function (methodName, info) {
    if (canDefineProperty) {
      Object.defineProperty(ReactComponent.prototype, methodName, {
        get: function () {
          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : undefined;
          return undefined;
        }
      });
    }
  };
  for (var fnName in deprecatedAPIs) {
    if (deprecatedAPIs.hasOwnProperty(fnName)) {
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
  }
}

module.exports = ReactComponent;
}).call(this,require('_process'))
},{"./ReactNoopUpdateQueue":92,"./canDefineProperty":127,"_process":21,"fbjs/lib/emptyObject":160,"fbjs/lib/invariant":167,"fbjs/lib/warning":178}],54:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponentBrowserEnvironment
 */

'use strict';

var ReactDOMIDOperations = require('./ReactDOMIDOperations');
var ReactMount = require('./ReactMount');

/**
 * Abstracts away all functionality of the reconciler that requires knowledge of
 * the browser context. TODO: These callers should be refactored to avoid the
 * need for this injection.
 */
var ReactComponentBrowserEnvironment = {

  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

  replaceNodeWithMarkupByID: ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,

  /**
   * If a particular environment requires that some resources be cleaned up,
   * specify this in the injected Mixin. In the DOM, we would likely want to
   * purge any cached node ID lookups.
   *
   * @private
   */
  unmountIDFromEnvironment: function (rootNodeID) {
    ReactMount.purgeID(rootNodeID);
  }

};

module.exports = ReactComponentBrowserEnvironment;
},{"./ReactDOMIDOperations":63,"./ReactMount":88}],55:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponentEnvironment
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

var injected = false;

var ReactComponentEnvironment = {

  /**
   * Optionally injectable environment dependent cleanup hook. (server vs.
   * browser etc). Example: A browser system caches DOM nodes based on component
   * ID and must remove that cache entry when this instance is unmounted.
   */
  unmountIDFromEnvironment: null,

  /**
   * Optionally injectable hook for swapping out mount images in the middle of
   * the tree.
   */
  replaceNodeWithMarkupByID: null,

  /**
   * Optionally injectable hook for processing a queue of child updates. Will
   * later move into MultiChildComponents.
   */
  processChildrenUpdates: null,

  injection: {
    injectEnvironment: function (environment) {
      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : invariant(false) : undefined;
      ReactComponentEnvironment.unmountIDFromEnvironment = environment.unmountIDFromEnvironment;
      ReactComponentEnvironment.replaceNodeWithMarkupByID = environment.replaceNodeWithMarkupByID;
      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
      injected = true;
    }
  }

};

module.exports = ReactComponentEnvironment;
}).call(this,require('_process'))
},{"_process":21,"fbjs/lib/invariant":167}],56:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCompositeComponent
 */

'use strict';

var ReactComponentEnvironment = require('./ReactComponentEnvironment');
var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactElement = require('./ReactElement');
var ReactInstanceMap = require('./ReactInstanceMap');
var ReactPerf = require('./ReactPerf');
var ReactPropTypeLocations = require('./ReactPropTypeLocations');
var ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');
var ReactReconciler = require('./ReactReconciler');
var ReactUpdateQueue = require('./ReactUpdateQueue');

var assign = require('./Object.assign');
var emptyObject = require('fbjs/lib/emptyObject');
var invariant = require('fbjs/lib/invariant');
var shouldUpdateReactComponent = require('./shouldUpdateReactComponent');
var warning = require('fbjs/lib/warning');

function getDeclarationErrorAddendum(component) {
  var owner = component._currentElement._owner || null;
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

function StatelessComponent(Component) {}
StatelessComponent.prototype.render = function () {
  var Component = ReactInstanceMap.get(this)._currentElement.type;
  return Component(this.props, this.context, this.updater);
};

/**
 * ------------------ The Life-Cycle of a Composite Component ------------------
 *
 * - constructor: Initialization of state. The instance is now retained.
 *   - componentWillMount
 *   - render
 *   - [children's constructors]
 *     - [children's componentWillMount and render]
 *     - [children's componentDidMount]
 *     - componentDidMount
 *
 *       Update Phases:
 *       - componentWillReceiveProps (only called if parent updated)
 *       - shouldComponentUpdate
 *         - componentWillUpdate
 *           - render
 *           - [children's constructors or receive props phases]
 *         - componentDidUpdate
 *
 *     - componentWillUnmount
 *     - [children's componentWillUnmount]
 *   - [children destroyed]
 * - (destroyed): The instance is now blank, released by React and ready for GC.
 *
 * -----------------------------------------------------------------------------
 */

/**
 * An incrementing ID assigned to each component when it is mounted. This is
 * used to enforce the order in which `ReactUpdates` updates dirty components.
 *
 * @private
 */
var nextMountID = 1;

/**
 * @lends {ReactCompositeComponent.prototype}
 */
var ReactCompositeComponentMixin = {

  /**
   * Base constructor for all composite component.
   *
   * @param {ReactElement} element
   * @final
   * @internal
   */
  construct: function (element) {
    this._currentElement = element;
    this._rootNodeID = null;
    this._instance = null;

    // See ReactUpdateQueue
    this._pendingElement = null;
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    this._renderedComponent = null;

    this._context = null;
    this._mountOrder = 0;
    this._topLevelWrapper = null;

    // See ReactUpdates and ReactUpdateQueue.
    this._pendingCallbacks = null;
  },

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function (rootID, transaction, context) {
    this._context = context;
    this._mountOrder = nextMountID++;
    this._rootNodeID = rootID;

    var publicProps = this._processProps(this._currentElement.props);
    var publicContext = this._processContext(context);

    var Component = this._currentElement.type;

    // Initialize the public class
    var inst;
    var renderedElement;

    // This is a way to detect if Component is a stateless arrow function
    // component, which is not newable. It might not be 100% reliable but is
    // something we can do until we start detecting that Component extends
    // React.Component. We already assume that typeof Component === 'function'.
    var canInstantiate = ('prototype' in Component);

    if (canInstantiate) {
      if (process.env.NODE_ENV !== 'production') {
        ReactCurrentOwner.current = this;
        try {
          inst = new Component(publicProps, publicContext, ReactUpdateQueue);
        } finally {
          ReactCurrentOwner.current = null;
        }
      } else {
        inst = new Component(publicProps, publicContext, ReactUpdateQueue);
      }
    }

    if (!canInstantiate || inst === null || inst === false || ReactElement.isValidElement(inst)) {
      renderedElement = inst;
      inst = new StatelessComponent(Component);
    }

    if (process.env.NODE_ENV !== 'production') {
      // This will throw later in _renderValidatedComponent, but add an early
      // warning now to help debugging
      if (inst.render == null) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`, returned ' + 'null/false from a stateless component, or tried to render an ' + 'element whose type is a function that isn\'t a React component.', Component.displayName || Component.name || 'Component') : undefined;
      } else {
        // We support ES6 inheriting from React.Component, the module pattern,
        // and stateless components, but not ES6 classes that don't extend
        process.env.NODE_ENV !== 'production' ? warning(Component.prototype && Component.prototype.isReactComponent || !canInstantiate || !(inst instanceof Component), '%s(...): React component classes must extend React.Component.', Component.displayName || Component.name || 'Component') : undefined;
      }
    }

    // These should be set up in the constructor, but as a convenience for
    // simpler class abstractions, we set them up after the fact.
    inst.props = publicProps;
    inst.context = publicContext;
    inst.refs = emptyObject;
    inst.updater = ReactUpdateQueue;

    this._instance = inst;

    // Store a reference from the instance back to the internal representation
    ReactInstanceMap.set(inst, this);

    if (process.env.NODE_ENV !== 'production') {
      // Since plain JS classes are defined without any special initialization
      // logic, we can not catch common errors early. Therefore, we have to
      // catch them here, at initialization time, instead.
      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : undefined;
      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : undefined;
      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : undefined;
      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : undefined;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : undefined;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : undefined;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : undefined;
    }

    var initialState = inst.state;
    if (initialState === undefined) {
      inst.state = initialState = null;
    }
    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;

    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    if (inst.componentWillMount) {
      inst.componentWillMount();
      // When mounting, calls to `setState` by `componentWillMount` will set
      // `this._pendingStateQueue` without triggering a re-render.
      if (this._pendingStateQueue) {
        inst.state = this._processPendingState(inst.props, inst.context);
      }
    }

    // If not a stateless component, we now render
    if (renderedElement === undefined) {
      renderedElement = this._renderValidatedComponent();
    }

    this._renderedComponent = this._instantiateReactComponent(renderedElement);

    var markup = ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, this._processChildContext(context));
    if (inst.componentDidMount) {
      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
    }

    return markup;
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function () {
    var inst = this._instance;

    if (inst.componentWillUnmount) {
      inst.componentWillUnmount();
    }

    ReactReconciler.unmountComponent(this._renderedComponent);
    this._renderedComponent = null;
    this._instance = null;

    // Reset pending fields
    // Even if this component is scheduled for another update in ReactUpdates,
    // it would still be ignored because these fields are reset.
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;
    this._pendingCallbacks = null;
    this._pendingElement = null;

    // These fields do not really need to be reset since this object is no
    // longer accessible.
    this._context = null;
    this._rootNodeID = null;
    this._topLevelWrapper = null;

    // Delete the reference from the instance to this internal representation
    // which allow the internals to be properly cleaned up even if the user
    // leaks a reference to the public instance.
    ReactInstanceMap.remove(inst);

    // Some existing components rely on inst.props even after they've been
    // destroyed (in event handlers).
    // TODO: inst.props = null;
    // TODO: inst.state = null;
    // TODO: inst.context = null;
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _maskContext: function (context) {
    var maskedContext = null;
    var Component = this._currentElement.type;
    var contextTypes = Component.contextTypes;
    if (!contextTypes) {
      return emptyObject;
    }
    maskedContext = {};
    for (var contextName in contextTypes) {
      maskedContext[contextName] = context[contextName];
    }
    return maskedContext;
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`, and asserts that they are valid.
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _processContext: function (context) {
    var maskedContext = this._maskContext(context);
    if (process.env.NODE_ENV !== 'production') {
      var Component = this._currentElement.type;
      if (Component.contextTypes) {
        this._checkPropTypes(Component.contextTypes, maskedContext, ReactPropTypeLocations.context);
      }
    }
    return maskedContext;
  },

  /**
   * @param {object} currentContext
   * @return {object}
   * @private
   */
  _processChildContext: function (currentContext) {
    var Component = this._currentElement.type;
    var inst = this._instance;
    var childContext = inst.getChildContext && inst.getChildContext();
    if (childContext) {
      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
      if (process.env.NODE_ENV !== 'production') {
        this._checkPropTypes(Component.childContextTypes, childContext, ReactPropTypeLocations.childContext);
      }
      for (var name in childContext) {
        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : invariant(false) : undefined;
      }
      return assign({}, currentContext, childContext);
    }
    return currentContext;
  },

  /**
   * Processes props by setting default values for unspecified props and
   * asserting that the props are valid. Does not mutate its argument; returns
   * a new props object with defaults merged in.
   *
   * @param {object} newProps
   * @return {object}
   * @private
   */
  _processProps: function (newProps) {
    if (process.env.NODE_ENV !== 'production') {
      var Component = this._currentElement.type;
      if (Component.propTypes) {
        this._checkPropTypes(Component.propTypes, newProps, ReactPropTypeLocations.prop);
      }
    }
    return newProps;
  },

  /**
   * Assert that the props are valid
   *
   * @param {object} propTypes Map of prop name to a ReactPropType
   * @param {object} props
   * @param {string} location e.g. "prop", "context", "child context"
   * @private
   */
  _checkPropTypes: function (propTypes, props, location) {
    // TODO: Stop validating prop types here and only use the element
    // validation.
    var componentName = this.getName();
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error;
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually ' + 'from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
          error = propTypes[propName](props, propName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
        } catch (ex) {
          error = ex;
        }
        if (error instanceof Error) {
          // We may want to extend this logic for similar errors in
          // top-level render calls, so I'm abstracting it away into
          // a function to minimize refactoring in the future
          var addendum = getDeclarationErrorAddendum(this);

          if (location === ReactPropTypeLocations.prop) {
            // Preface gives us something to blacklist in warning module
            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Composite propType: %s%s', error.message, addendum) : undefined;
          } else {
            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Context Types: %s%s', error.message, addendum) : undefined;
          }
        }
      }
    }
  },

  receiveComponent: function (nextElement, transaction, nextContext) {
    var prevElement = this._currentElement;
    var prevContext = this._context;

    this._pendingElement = null;

    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
  },

  /**
   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
   * is set, update the component.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function (transaction) {
    if (this._pendingElement != null) {
      ReactReconciler.receiveComponent(this, this._pendingElement || this._currentElement, transaction, this._context);
    }

    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
    }
  },

  /**
   * Perform an update to a mounted component. The componentWillReceiveProps and
   * shouldComponentUpdate methods are called, then (assuming the update isn't
   * skipped) the remaining update lifecycle methods are called and the DOM
   * representation is updated.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevParentElement
   * @param {ReactElement} nextParentElement
   * @internal
   * @overridable
   */
  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
    var inst = this._instance;

    var nextContext = this._context === nextUnmaskedContext ? inst.context : this._processContext(nextUnmaskedContext);
    var nextProps;

    // Distinguish between a props update versus a simple state update
    if (prevParentElement === nextParentElement) {
      // Skip checking prop types again -- we don't read inst.props to avoid
      // warning for DOM component props in this upgrade
      nextProps = nextParentElement.props;
    } else {
      nextProps = this._processProps(nextParentElement.props);
      // An update here will schedule an update but immediately set
      // _pendingStateQueue which will ensure that any state updates gets
      // immediately reconciled instead of waiting for the next batch.

      if (inst.componentWillReceiveProps) {
        inst.componentWillReceiveProps(nextProps, nextContext);
      }
    }

    var nextState = this._processPendingState(nextProps, nextContext);

    var shouldUpdate = this._pendingForceUpdate || !inst.shouldComponentUpdate || inst.shouldComponentUpdate(nextProps, nextState, nextContext);

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(typeof shouldUpdate !== 'undefined', '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : undefined;
    }

    if (shouldUpdate) {
      this._pendingForceUpdate = false;
      // Will set `this.props`, `this.state` and `this.context`.
      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
    } else {
      // If it's determined that a component should not update, we still want
      // to set props and state but we shortcut the rest of the update.
      this._currentElement = nextParentElement;
      this._context = nextUnmaskedContext;
      inst.props = nextProps;
      inst.state = nextState;
      inst.context = nextContext;
    }
  },

  _processPendingState: function (props, context) {
    var inst = this._instance;
    var queue = this._pendingStateQueue;
    var replace = this._pendingReplaceState;
    this._pendingReplaceState = false;
    this._pendingStateQueue = null;

    if (!queue) {
      return inst.state;
    }

    if (replace && queue.length === 1) {
      return queue[0];
    }

    var nextState = assign({}, replace ? queue[0] : inst.state);
    for (var i = replace ? 1 : 0; i < queue.length; i++) {
      var partial = queue[i];
      assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
    }

    return nextState;
  },

  /**
   * Merges new props and state, notifies delegate methods of update and
   * performs update.
   *
   * @param {ReactElement} nextElement Next element
   * @param {object} nextProps Next public object to set as properties.
   * @param {?object} nextState Next object to set as state.
   * @param {?object} nextContext Next public object to set as context.
   * @param {ReactReconcileTransaction} transaction
   * @param {?object} unmaskedContext
   * @private
   */
  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
    var inst = this._instance;

    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
    var prevProps;
    var prevState;
    var prevContext;
    if (hasComponentDidUpdate) {
      prevProps = inst.props;
      prevState = inst.state;
      prevContext = inst.context;
    }

    if (inst.componentWillUpdate) {
      inst.componentWillUpdate(nextProps, nextState, nextContext);
    }

    this._currentElement = nextElement;
    this._context = unmaskedContext;
    inst.props = nextProps;
    inst.state = nextState;
    inst.context = nextContext;

    this._updateRenderedComponent(transaction, unmaskedContext);

    if (hasComponentDidUpdate) {
      transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
    }
  },

  /**
   * Call the component's `render` method and update the DOM accordingly.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  _updateRenderedComponent: function (transaction, context) {
    var prevComponentInstance = this._renderedComponent;
    var prevRenderedElement = prevComponentInstance._currentElement;
    var nextRenderedElement = this._renderValidatedComponent();
    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
    } else {
      // These two IDs are actually the same! But nothing should rely on that.
      var thisID = this._rootNodeID;
      var prevComponentID = prevComponentInstance._rootNodeID;
      ReactReconciler.unmountComponent(prevComponentInstance);

      this._renderedComponent = this._instantiateReactComponent(nextRenderedElement);
      var nextMarkup = ReactReconciler.mountComponent(this._renderedComponent, thisID, transaction, this._processChildContext(context));
      this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
    }
  },

  /**
   * @protected
   */
  _replaceNodeWithMarkupByID: function (prevComponentID, nextMarkup) {
    ReactComponentEnvironment.replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
  },

  /**
   * @protected
   */
  _renderValidatedComponentWithoutOwnerOrContext: function () {
    var inst = this._instance;
    var renderedComponent = inst.render();
    if (process.env.NODE_ENV !== 'production') {
      // We allow auto-mocks to proceed as if they're returning null.
      if (typeof renderedComponent === 'undefined' && inst.render._isMockFunction) {
        // This is probably bad practice. Consider warning here and
        // deprecating this convenience.
        renderedComponent = null;
      }
    }

    return renderedComponent;
  },

  /**
   * @private
   */
  _renderValidatedComponent: function () {
    var renderedComponent;
    ReactCurrentOwner.current = this;
    try {
      renderedComponent = this._renderValidatedComponentWithoutOwnerOrContext();
    } finally {
      ReactCurrentOwner.current = null;
    }
    !(
    // TODO: An `isValidNode` function would probably be more appropriate
    renderedComponent === null || renderedComponent === false || ReactElement.isValidElement(renderedComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid ReactComponent must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
    return renderedComponent;
  },

  /**
   * Lazily allocates the refs object and stores `component` as `ref`.
   *
   * @param {string} ref Reference name.
   * @param {component} component Component to store as `ref`.
   * @final
   * @private
   */
  attachRef: function (ref, component) {
    var inst = this.getPublicInstance();
    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : invariant(false) : undefined;
    var publicComponentInstance = component.getPublicInstance();
    if (process.env.NODE_ENV !== 'production') {
      var componentName = component && component.getName ? component.getName() : 'a component';
      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : undefined;
    }
    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
    refs[ref] = publicComponentInstance;
  },

  /**
   * Detaches a reference name.
   *
   * @param {string} ref Name to dereference.
   * @final
   * @private
   */
  detachRef: function (ref) {
    var refs = this.getPublicInstance().refs;
    delete refs[ref];
  },

  /**
   * Get a text description of the component that can be used to identify it
   * in error messages.
   * @return {string} The name or null.
   * @internal
   */
  getName: function () {
    var type = this._currentElement.type;
    var constructor = this._instance && this._instance.constructor;
    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
  },

  /**
   * Get the publicly accessible representation of this component - i.e. what
   * is exposed by refs and returned by render. Can be null for stateless
   * components.
   *
   * @return {ReactComponent} the public component instance.
   * @internal
   */
  getPublicInstance: function () {
    var inst = this._instance;
    if (inst instanceof StatelessComponent) {
      return null;
    }
    return inst;
  },

  // Stub
  _instantiateReactComponent: null

};

ReactPerf.measureMethods(ReactCompositeComponentMixin, 'ReactCompositeComponent', {
  mountComponent: 'mountComponent',
  updateComponent: 'updateComponent',
  _renderValidatedComponent: '_renderValidatedComponent'
});

var ReactCompositeComponent = {

  Mixin: ReactCompositeComponentMixin

};

module.exports = ReactCompositeComponent;
}).call(this,require('_process'))
},{"./Object.assign":45,"./ReactComponentEnvironment":55,"./ReactCurrentOwner":57,"./ReactElement":75,"./ReactInstanceMap":85,"./ReactPerf":94,"./ReactPropTypeLocationNames":95,"./ReactPropTypeLocations":96,"./ReactReconciler":99,"./ReactUpdateQueue":105,"./shouldUpdateReactComponent":149,"_process":21,"fbjs/lib/emptyObject":160,"fbjs/lib/invariant":167,"fbjs/lib/warning":178}],57:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCurrentOwner
 */

'use strict';

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */
var ReactCurrentOwner = {

  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null

};

module.exports = ReactCurrentOwner;
},{}],58:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOM
 */

/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

'use strict';

var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactDOMTextComponent = require('./ReactDOMTextComponent');
var ReactDefaultInjection = require('./ReactDefaultInjection');
var ReactInstanceHandles = require('./ReactInstanceHandles');
var ReactMount = require('./ReactMount');
var ReactPerf = require('./ReactPerf');
var ReactReconciler = require('./ReactReconciler');
var ReactUpdates = require('./ReactUpdates');
var ReactVersion = require('./ReactVersion');

var findDOMNode = require('./findDOMNode');
var renderSubtreeIntoContainer = require('./renderSubtreeIntoContainer');
var warning = require('fbjs/lib/warning');

ReactDefaultInjection.inject();

var render = ReactPerf.measure('React', 'render', ReactMount.render);

var React = {
  findDOMNode: findDOMNode,
  render: render,
  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
  version: ReactVersion,

  /* eslint-disable camelcase */
  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
};

// Inject the runtime into a devtools global hook regardless of browser.
// Allows for debugging when the hook is injected on the page.
/* eslint-enable camelcase */
if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
    CurrentOwner: ReactCurrentOwner,
    InstanceHandles: ReactInstanceHandles,
    Mount: ReactMount,
    Reconciler: ReactReconciler,
    TextComponent: ReactDOMTextComponent
  });
}

if (process.env.NODE_ENV !== 'production') {
  var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

    // First check if devtools is not installed
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
      // If we're in Chrome or Firefox, provide a download link if not installed.
      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
        console.debug('Download the React DevTools for a better development experience: ' + 'https://fb.me/react-devtools');
      }
    }

    // If we're in IE8, check to see if we are in compatibility mode and provide
    // information on preventing compatibility mode
    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;

    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : undefined;

    var expectedFeatures = [
    // shims
    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.split, String.prototype.trim,

    // shams
    Object.create, Object.freeze];

    for (var i = 0; i < expectedFeatures.length; i++) {
      if (!expectedFeatures[i]) {
        console.error('One or more ES5 shim/shams expected by React are not available: ' + 'https://fb.me/react-warning-polyfills');
        break;
      }
    }
  }
}

module.exports = React;
}).call(this,require('_process'))
},{"./ReactCurrentOwner":57,"./ReactDOMTextComponent":69,"./ReactDefaultInjection":72,"./ReactInstanceHandles":84,"./ReactMount":88,"./ReactPerf":94,"./ReactReconciler":99,"./ReactUpdates":106,"./ReactVersion":107,"./findDOMNode":131,"./renderSubtreeIntoContainer":146,"_process":21,"fbjs/lib/ExecutionEnvironment":153,"fbjs/lib/warning":178}],59:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMButton
 */

'use strict';

var mouseListenerNames = {
  onClick: true,
  onDoubleClick: true,
  onMouseDown: true,
  onMouseMove: true,
  onMouseUp: true,

  onClickCapture: true,
  onDoubleClickCapture: true,
  onMouseDownCapture: true,
  onMouseMoveCapture: true,
  onMouseUpCapture: true
};

/**
 * Implements a <button> native component that does not receive mouse events
 * when `disabled` is set.
 */
var ReactDOMButton = {
  getNativeProps: function (inst, props, context) {
    if (!props.disabled) {
      return props;
    }

    // Copy the props, except the mouse listeners
    var nativeProps = {};
    for (var key in props) {
      if (props.hasOwnProperty(key) && !mouseListenerNames[key]) {
        nativeProps[key] = props[key];
      }
    }

    return nativeProps;
  }
};

module.exports = ReactDOMButton;
},{}],60:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMComponent
 * @typechecks static-only
 */

/* global hasOwnProperty:true */

'use strict';

var AutoFocusUtils = require('./AutoFocusUtils');
var CSSPropertyOperations = require('./CSSPropertyOperations');
var DOMProperty = require('./DOMProperty');
var DOMPropertyOperations = require('./DOMPropertyOperations');
var EventConstants = require('./EventConstants');
var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');
var ReactComponentBrowserEnvironment = require('./ReactComponentBrowserEnvironment');
var ReactDOMButton = require('./ReactDOMButton');
var ReactDOMInput = require('./ReactDOMInput');
var ReactDOMOption = require('./ReactDOMOption');
var ReactDOMSelect = require('./ReactDOMSelect');
var ReactDOMTextarea = require('./ReactDOMTextarea');
var ReactMount = require('./ReactMount');
var ReactMultiChild = require('./ReactMultiChild');
var ReactPerf = require('./ReactPerf');
var ReactUpdateQueue = require('./ReactUpdateQueue');

var assign = require('./Object.assign');
var canDefineProperty = require('./canDefineProperty');
var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');
var invariant = require('fbjs/lib/invariant');
var isEventSupported = require('./isEventSupported');
var keyOf = require('fbjs/lib/keyOf');
var setInnerHTML = require('./setInnerHTML');
var setTextContent = require('./setTextContent');
var shallowEqual = require('fbjs/lib/shallowEqual');
var validateDOMNesting = require('./validateDOMNesting');
var warning = require('fbjs/lib/warning');

var deleteListener = ReactBrowserEventEmitter.deleteListener;
var listenTo = ReactBrowserEventEmitter.listenTo;
var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

// For quickly matching children type, to test if can be treated as content.
var CONTENT_TYPES = { 'string': true, 'number': true };

var CHILDREN = keyOf({ children: null });
var STYLE = keyOf({ style: null });
var HTML = keyOf({ __html: null });

var ELEMENT_NODE_TYPE = 1;

function getDeclarationErrorAddendum(internalInstance) {
  if (internalInstance) {
    var owner = internalInstance._currentElement._owner || null;
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' This DOM node was rendered by `' + name + '`.';
      }
    }
  }
  return '';
}

var legacyPropsDescriptor;
if (process.env.NODE_ENV !== 'production') {
  legacyPropsDescriptor = {
    props: {
      enumerable: false,
      get: function () {
        var component = this._reactInternalComponent;
        process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .props of a DOM node; instead, ' + 'recreate the props as `render` did originally or read the DOM ' + 'properties/attributes directly from this node (e.g., ' + 'this.refs.box.className).%s', getDeclarationErrorAddendum(component)) : undefined;
        return component._currentElement.props;
      }
    }
  };
}

function legacyGetDOMNode() {
  if (process.env.NODE_ENV !== 'production') {
    var component = this._reactInternalComponent;
    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .getDOMNode() of a DOM node; ' + 'instead, use the node directly.%s', getDeclarationErrorAddendum(component)) : undefined;
  }
  return this;
}

function legacyIsMounted() {
  var component = this._reactInternalComponent;
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .isMounted() of a DOM node.%s', getDeclarationErrorAddendum(component)) : undefined;
  }
  return !!component;
}

function legacySetStateEtc() {
  if (process.env.NODE_ENV !== 'production') {
    var component = this._reactInternalComponent;
    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setState(), .replaceState(), or ' + '.forceUpdate() of a DOM node. This is a no-op.%s', getDeclarationErrorAddendum(component)) : undefined;
  }
}

function legacySetProps(partialProps, callback) {
  var component = this._reactInternalComponent;
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
  }
  if (!component) {
    return;
  }
  ReactUpdateQueue.enqueueSetPropsInternal(component, partialProps);
  if (callback) {
    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
  }
}

function legacyReplaceProps(partialProps, callback) {
  var component = this._reactInternalComponent;
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .replaceProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
  }
  if (!component) {
    return;
  }
  ReactUpdateQueue.enqueueReplacePropsInternal(component, partialProps);
  if (callback) {
    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
  }
}

function friendlyStringify(obj) {
  if (typeof obj === 'object') {
    if (Array.isArray(obj)) {
      return '[' + obj.map(friendlyStringify).join(', ') + ']';
    } else {
      var pairs = [];
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
        }
      }
      return '{' + pairs.join(', ') + '}';
    }
  } else if (typeof obj === 'string') {
    return JSON.stringify(obj);
  } else if (typeof obj === 'function') {
    return '[function object]';
  }
  // Differs from JSON.stringify in that undefined becauses undefined and that
  // inf and nan don't become null
  return String(obj);
}

var styleMutationWarning = {};

function checkAndWarnForMutatedStyle(style1, style2, component) {
  if (style1 == null || style2 == null) {
    return;
  }
  if (shallowEqual(style1, style2)) {
    return;
  }

  var componentName = component._tag;
  var owner = component._currentElement._owner;
  var ownerName;
  if (owner) {
    ownerName = owner.getName();
  }

  var hash = ownerName + '|' + componentName;

  if (styleMutationWarning.hasOwnProperty(hash)) {
    return;
  }

  styleMutationWarning[hash] = true;

  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : undefined;
}

/**
 * @param {object} component
 * @param {?object} props
 */
function assertValidProps(component, props) {
  if (!props) {
    return;
  }
  // Note the use of `==` which checks for null or undefined.
  if (process.env.NODE_ENV !== 'production') {
    if (voidElementTags[component._tag]) {
      process.env.NODE_ENV !== 'production' ? warning(props.children == null && props.dangerouslySetInnerHTML == null, '%s is a void element tag and must not have `children` or ' + 'use `props.dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : undefined;
    }
  }
  if (props.dangerouslySetInnerHTML != null) {
    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : invariant(false) : undefined;
    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' + 'for more information.') : invariant(false) : undefined;
  }
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : undefined;
    process.env.NODE_ENV !== 'production' ? warning(!props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : undefined;
  }
  !(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, ' + 'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' + 'using JSX.%s', getDeclarationErrorAddendum(component)) : invariant(false) : undefined;
}

function enqueuePutListener(id, registrationName, listener, transaction) {
  if (process.env.NODE_ENV !== 'production') {
    // IE8 has no API for event capturing and the `onScroll` event doesn't
    // bubble.
    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : undefined;
  }
  var container = ReactMount.findReactContainerForID(id);
  if (container) {
    var doc = container.nodeType === ELEMENT_NODE_TYPE ? container.ownerDocument : container;
    listenTo(registrationName, doc);
  }
  transaction.getReactMountReady().enqueue(putListener, {
    id: id,
    registrationName: registrationName,
    listener: listener
  });
}

function putListener() {
  var listenerToPut = this;
  ReactBrowserEventEmitter.putListener(listenerToPut.id, listenerToPut.registrationName, listenerToPut.listener);
}

// There are so many media events, it makes sense to just
// maintain a list rather than create a `trapBubbledEvent` for each
var mediaEvents = {
  topAbort: 'abort',
  topCanPlay: 'canplay',
  topCanPlayThrough: 'canplaythrough',
  topDurationChange: 'durationchange',
  topEmptied: 'emptied',
  topEncrypted: 'encrypted',
  topEnded: 'ended',
  topError: 'error',
  topLoadedData: 'loadeddata',
  topLoadedMetadata: 'loadedmetadata',
  topLoadStart: 'loadstart',
  topPause: 'pause',
  topPlay: 'play',
  topPlaying: 'playing',
  topProgress: 'progress',
  topRateChange: 'ratechange',
  topSeeked: 'seeked',
  topSeeking: 'seeking',
  topStalled: 'stalled',
  topSuspend: 'suspend',
  topTimeUpdate: 'timeupdate',
  topVolumeChange: 'volumechange',
  topWaiting: 'waiting'
};

function trapBubbledEventsLocal() {
  var inst = this;
  // If a component renders to null or if another component fatals and causes
  // the state of the tree to be corrupted, `node` here can be null.
  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : invariant(false) : undefined;
  var node = ReactMount.getNode(inst._rootNodeID);
  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : invariant(false) : undefined;

  switch (inst._tag) {
    case 'iframe':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
      break;
    case 'video':
    case 'audio':

      inst._wrapperState.listeners = [];
      // create listener for each media event
      for (var event in mediaEvents) {
        if (mediaEvents.hasOwnProperty(event)) {
          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes[event], mediaEvents[event], node));
        }
      }

      break;
    case 'img':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
      break;
    case 'form':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit', node)];
      break;
  }
}

function mountReadyInputWrapper() {
  ReactDOMInput.mountReadyWrapper(this);
}

function postUpdateSelectWrapper() {
  ReactDOMSelect.postUpdateWrapper(this);
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special cased tags.

var omittedCloseTags = {
  'area': true,
  'base': true,
  'br': true,
  'col': true,
  'embed': true,
  'hr': true,
  'img': true,
  'input': true,
  'keygen': true,
  'link': true,
  'meta': true,
  'param': true,
  'source': true,
  'track': true,
  'wbr': true
};

// NOTE: menuitem's close tag should be omitted, but that causes problems.
var newlineEatingTags = {
  'listing': true,
  'pre': true,
  'textarea': true
};

// For HTML, certain tags cannot have children. This has the same purpose as
// `omittedCloseTags` except that `menuitem` should still have its closing tag.

var voidElementTags = assign({
  'menuitem': true
}, omittedCloseTags);

// We accept any tag to be rendered but since this gets injected into arbitrary
// HTML, we want to make sure that it's a safe tag.
// http://www.w3.org/TR/REC-xml/#NT-Name

var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
var validatedTagCache = {};
var hasOwnProperty = ({}).hasOwnProperty;

function validateDangerousTag(tag) {
  if (!hasOwnProperty.call(validatedTagCache, tag)) {
    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : invariant(false) : undefined;
    validatedTagCache[tag] = true;
  }
}

function processChildContextDev(context, inst) {
  // Pass down our tag name to child components for validation purposes
  context = assign({}, context);
  var info = context[validateDOMNesting.ancestorInfoContextKey];
  context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(info, inst._tag, inst);
  return context;
}

function isCustomComponent(tagName, props) {
  return tagName.indexOf('-') >= 0 || props.is != null;
}

/**
 * Creates a new React class that is idempotent and capable of containing other
 * React components. It accepts event listeners and DOM properties that are
 * valid according to `DOMProperty`.
 *
 *  - Event listeners: `onClick`, `onMouseDown`, etc.
 *  - DOM properties: `className`, `name`, `title`, etc.
 *
 * The `style` property functions differently from the DOM API. It accepts an
 * object mapping of style properties to values.
 *
 * @constructor ReactDOMComponent
 * @extends ReactMultiChild
 */
function ReactDOMComponent(tag) {
  validateDangerousTag(tag);
  this._tag = tag.toLowerCase();
  this._renderedChildren = null;
  this._previousStyle = null;
  this._previousStyleCopy = null;
  this._rootNodeID = null;
  this._wrapperState = null;
  this._topLevelWrapper = null;
  this._nodeWithLegacyProperties = null;
  if (process.env.NODE_ENV !== 'production') {
    this._unprocessedContextDev = null;
    this._processedContextDev = null;
  }
}

ReactDOMComponent.displayName = 'ReactDOMComponent';

ReactDOMComponent.Mixin = {

  construct: function (element) {
    this._currentElement = element;
  },

  /**
   * Generates root tag markup then recurses. This method has side effects and
   * is not idempotent.
   *
   * @internal
   * @param {string} rootID The root DOM ID for this node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} context
   * @return {string} The computed markup.
   */
  mountComponent: function (rootID, transaction, context) {
    this._rootNodeID = rootID;

    var props = this._currentElement.props;

    switch (this._tag) {
      case 'iframe':
      case 'img':
      case 'form':
      case 'video':
      case 'audio':
        this._wrapperState = {
          listeners: null
        };
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'button':
        props = ReactDOMButton.getNativeProps(this, props, context);
        break;
      case 'input':
        ReactDOMInput.mountWrapper(this, props, context);
        props = ReactDOMInput.getNativeProps(this, props, context);
        break;
      case 'option':
        ReactDOMOption.mountWrapper(this, props, context);
        props = ReactDOMOption.getNativeProps(this, props, context);
        break;
      case 'select':
        ReactDOMSelect.mountWrapper(this, props, context);
        props = ReactDOMSelect.getNativeProps(this, props, context);
        context = ReactDOMSelect.processChildContext(this, props, context);
        break;
      case 'textarea':
        ReactDOMTextarea.mountWrapper(this, props, context);
        props = ReactDOMTextarea.getNativeProps(this, props, context);
        break;
    }

    assertValidProps(this, props);
    if (process.env.NODE_ENV !== 'production') {
      if (context[validateDOMNesting.ancestorInfoContextKey]) {
        validateDOMNesting(this._tag, this, context[validateDOMNesting.ancestorInfoContextKey]);
      }
    }

    if (process.env.NODE_ENV !== 'production') {
      this._unprocessedContextDev = context;
      this._processedContextDev = processChildContextDev(context, this);
      context = this._processedContextDev;
    }

    var mountImage;
    if (transaction.useCreateElement) {
      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
      var el = ownerDocument.createElement(this._currentElement.type);
      DOMPropertyOperations.setAttributeForID(el, this._rootNodeID);
      // Populate node cache
      ReactMount.getID(el);
      this._updateDOMProperties({}, props, transaction, el);
      this._createInitialChildren(transaction, props, context, el);
      mountImage = el;
    } else {
      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
      var tagContent = this._createContentMarkup(transaction, props, context);
      if (!tagContent && omittedCloseTags[this._tag]) {
        mountImage = tagOpen + '/>';
      } else {
        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
      }
    }

    switch (this._tag) {
      case 'input':
        transaction.getReactMountReady().enqueue(mountReadyInputWrapper, this);
      // falls through
      case 'button':
      case 'select':
      case 'textarea':
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
    }

    return mountImage;
  },

  /**
   * Creates markup for the open tag and all attributes.
   *
   * This method has side effects because events get registered.
   *
   * Iterating over object properties is faster than iterating over arrays.
   * @see http://jsperf.com/obj-vs-arr-iteration
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} props
   * @return {string} Markup of opening tag.
   */
  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
    var ret = '<' + this._currentElement.type;

    for (var propKey in props) {
      if (!props.hasOwnProperty(propKey)) {
        continue;
      }
      var propValue = props[propKey];
      if (propValue == null) {
        continue;
      }
      if (registrationNameModules.hasOwnProperty(propKey)) {
        if (propValue) {
          enqueuePutListener(this._rootNodeID, propKey, propValue, transaction);
        }
      } else {
        if (propKey === STYLE) {
          if (propValue) {
            if (process.env.NODE_ENV !== 'production') {
              // See `_updateDOMProperties`. style block
              this._previousStyle = propValue;
            }
            propValue = this._previousStyleCopy = assign({}, props.style);
          }
          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
        }
        var markup = null;
        if (this._tag != null && isCustomComponent(this._tag, props)) {
          if (propKey !== CHILDREN) {
            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
          }
        } else {
          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
        }
        if (markup) {
          ret += ' ' + markup;
        }
      }
    }

    // For static pages, no need to put React ID and checksum. Saves lots of
    // bytes.
    if (transaction.renderToStaticMarkup) {
      return ret;
    }

    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
    return ret + ' ' + markupForID;
  },

  /**
   * Creates markup for the content between the tags.
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} props
   * @param {object} context
   * @return {string} Content markup.
   */
  _createContentMarkup: function (transaction, props, context) {
    var ret = '';

    // Intentional use of != to avoid catching zero/false.
    var innerHTML = props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        ret = innerHTML.__html;
      }
    } else {
      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
      var childrenToUse = contentToUse != null ? null : props.children;
      if (contentToUse != null) {
        // TODO: Validate that text is allowed as a child of this node
        ret = escapeTextContentForBrowser(contentToUse);
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(childrenToUse, transaction, context);
        ret = mountImages.join('');
      }
    }
    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
      // text/html ignores the first character in these tags if it's a newline
      // Prefer to break application/xml over text/html (for now) by adding
      // a newline specifically to get eaten by the parser. (Alternately for
      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
      // \r is normalized out by HTMLTextAreaElement#value.)
      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
      // See: Parsing of "textarea" "listing" and "pre" elements
      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
      return '\n' + ret;
    } else {
      return ret;
    }
  },

  _createInitialChildren: function (transaction, props, context, el) {
    // Intentional use of != to avoid catching zero/false.
    var innerHTML = props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        setInnerHTML(el, innerHTML.__html);
      }
    } else {
      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
      var childrenToUse = contentToUse != null ? null : props.children;
      if (contentToUse != null) {
        // TODO: Validate that text is allowed as a child of this node
        setTextContent(el, contentToUse);
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(childrenToUse, transaction, context);
        for (var i = 0; i < mountImages.length; i++) {
          el.appendChild(mountImages[i]);
        }
      }
    }
  },

  /**
   * Receives a next element and updates the component.
   *
   * @internal
   * @param {ReactElement} nextElement
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} context
   */
  receiveComponent: function (nextElement, transaction, context) {
    var prevElement = this._currentElement;
    this._currentElement = nextElement;
    this.updateComponent(transaction, prevElement, nextElement, context);
  },

  /**
   * Updates a native DOM component after it has already been allocated and
   * attached to the DOM. Reconciles the root DOM node, then recurses.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @param {ReactElement} nextElement
   * @internal
   * @overridable
   */
  updateComponent: function (transaction, prevElement, nextElement, context) {
    var lastProps = prevElement.props;
    var nextProps = this._currentElement.props;

    switch (this._tag) {
      case 'button':
        lastProps = ReactDOMButton.getNativeProps(this, lastProps);
        nextProps = ReactDOMButton.getNativeProps(this, nextProps);
        break;
      case 'input':
        ReactDOMInput.updateWrapper(this);
        lastProps = ReactDOMInput.getNativeProps(this, lastProps);
        nextProps = ReactDOMInput.getNativeProps(this, nextProps);
        break;
      case 'option':
        lastProps = ReactDOMOption.getNativeProps(this, lastProps);
        nextProps = ReactDOMOption.getNativeProps(this, nextProps);
        break;
      case 'select':
        lastProps = ReactDOMSelect.getNativeProps(this, lastProps);
        nextProps = ReactDOMSelect.getNativeProps(this, nextProps);
        break;
      case 'textarea':
        ReactDOMTextarea.updateWrapper(this);
        lastProps = ReactDOMTextarea.getNativeProps(this, lastProps);
        nextProps = ReactDOMTextarea.getNativeProps(this, nextProps);
        break;
    }

    if (process.env.NODE_ENV !== 'production') {
      // If the context is reference-equal to the old one, pass down the same
      // processed object so the update bailout in ReactReconciler behaves
      // correctly (and identically in dev and prod). See #5005.
      if (this._unprocessedContextDev !== context) {
        this._unprocessedContextDev = context;
        this._processedContextDev = processChildContextDev(context, this);
      }
      context = this._processedContextDev;
    }

    assertValidProps(this, nextProps);
    this._updateDOMProperties(lastProps, nextProps, transaction, null);
    this._updateDOMChildren(lastProps, nextProps, transaction, context);

    if (!canDefineProperty && this._nodeWithLegacyProperties) {
      this._nodeWithLegacyProperties.props = nextProps;
    }

    if (this._tag === 'select') {
      // <select> value update needs to occur after <option> children
      // reconciliation
      transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
    }
  },

  /**
   * Reconciles the properties by detecting differences in property values and
   * updating the DOM as necessary. This function is probably the single most
   * critical path for performance optimization.
   *
   * TODO: Benchmark whether checking for changed values in memory actually
   *       improves performance (especially statically positioned elements).
   * TODO: Benchmark the effects of putting this at the top since 99% of props
   *       do not change for a given reconciliation.
   * TODO: Benchmark areas that can be improved with caching.
   *
   * @private
   * @param {object} lastProps
   * @param {object} nextProps
   * @param {ReactReconcileTransaction} transaction
   * @param {?DOMElement} node
   */
  _updateDOMProperties: function (lastProps, nextProps, transaction, node) {
    var propKey;
    var styleName;
    var styleUpdates;
    for (propKey in lastProps) {
      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey)) {
        continue;
      }
      if (propKey === STYLE) {
        var lastStyle = this._previousStyleCopy;
        for (styleName in lastStyle) {
          if (lastStyle.hasOwnProperty(styleName)) {
            styleUpdates = styleUpdates || {};
            styleUpdates[styleName] = '';
          }
        }
        this._previousStyleCopy = null;
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        if (lastProps[propKey]) {
          // Only call deleteListener if there was a listener previously or
          // else willDeleteListener gets called when there wasn't actually a
          // listener (e.g., onClick={null})
          deleteListener(this._rootNodeID, propKey);
        }
      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
        if (!node) {
          node = ReactMount.getNode(this._rootNodeID);
        }
        DOMPropertyOperations.deleteValueForProperty(node, propKey);
      }
    }
    for (propKey in nextProps) {
      var nextProp = nextProps[propKey];
      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps[propKey];
      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
        continue;
      }
      if (propKey === STYLE) {
        if (nextProp) {
          if (process.env.NODE_ENV !== 'production') {
            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
            this._previousStyle = nextProp;
          }
          nextProp = this._previousStyleCopy = assign({}, nextProp);
        } else {
          this._previousStyleCopy = null;
        }
        if (lastProp) {
          // Unset styles on `lastProp` but not on `nextProp`.
          for (styleName in lastProp) {
            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = '';
            }
          }
          // Update styles that changed since `lastProp`.
          for (styleName in nextProp) {
            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = nextProp[styleName];
            }
          }
        } else {
          // Relies on `updateStylesByID` not mutating `styleUpdates`.
          styleUpdates = nextProp;
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        if (nextProp) {
          enqueuePutListener(this._rootNodeID, propKey, nextProp, transaction);
        } else if (lastProp) {
          deleteListener(this._rootNodeID, propKey);
        }
      } else if (isCustomComponent(this._tag, nextProps)) {
        if (!node) {
          node = ReactMount.getNode(this._rootNodeID);
        }
        if (propKey === CHILDREN) {
          nextProp = null;
        }
        DOMPropertyOperations.setValueForAttribute(node, propKey, nextProp);
      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
        if (!node) {
          node = ReactMount.getNode(this._rootNodeID);
        }
        // If we're updating to null or undefined, we should remove the property
        // from the DOM node instead of inadvertantly setting to a string. This
        // brings us in line with the same behavior we have on initial render.
        if (nextProp != null) {
          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
        } else {
          DOMPropertyOperations.deleteValueForProperty(node, propKey);
        }
      }
    }
    if (styleUpdates) {
      if (!node) {
        node = ReactMount.getNode(this._rootNodeID);
      }
      CSSPropertyOperations.setValueForStyles(node, styleUpdates);
    }
  },

  /**
   * Reconciles the children with the various properties that affect the
   * children content.
   *
   * @param {object} lastProps
   * @param {object} nextProps
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   */
  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;

    // Note the use of `!=` which checks for null or undefined.
    var lastChildren = lastContent != null ? null : lastProps.children;
    var nextChildren = nextContent != null ? null : nextProps.children;

    // If we're switching from children to content/html or vice versa, remove
    // the old content
    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
    if (lastChildren != null && nextChildren == null) {
      this.updateChildren(null, transaction, context);
    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
      this.updateTextContent('');
    }

    if (nextContent != null) {
      if (lastContent !== nextContent) {
        this.updateTextContent('' + nextContent);
      }
    } else if (nextHtml != null) {
      if (lastHtml !== nextHtml) {
        this.updateMarkup('' + nextHtml);
      }
    } else if (nextChildren != null) {
      this.updateChildren(nextChildren, transaction, context);
    }
  },

  /**
   * Destroys all event registrations for this instance. Does not remove from
   * the DOM. That must be done by the parent.
   *
   * @internal
   */
  unmountComponent: function () {
    switch (this._tag) {
      case 'iframe':
      case 'img':
      case 'form':
      case 'video':
      case 'audio':
        var listeners = this._wrapperState.listeners;
        if (listeners) {
          for (var i = 0; i < listeners.length; i++) {
            listeners[i].remove();
          }
        }
        break;
      case 'input':
        ReactDOMInput.unmountWrapper(this);
        break;
      case 'html':
      case 'head':
      case 'body':
        /**
         * Components like <html> <head> and <body> can't be removed or added
         * easily in a cross-browser way, however it's valuable to be able to
         * take advantage of React's reconciliation for styling and <title>
         * management. So we just document it and throw in dangerous cases.
         */
        !false ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is ' + 'impossible to unmount some top-level components (eg <html>, ' + '<head>, and <body>) reliably and efficiently. To fix this, have a ' + 'single top-level component that never unmounts render these ' + 'elements.', this._tag) : invariant(false) : undefined;
        break;
    }

    this.unmountChildren();
    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
    this._rootNodeID = null;
    this._wrapperState = null;
    if (this._nodeWithLegacyProperties) {
      var node = this._nodeWithLegacyProperties;
      node._reactInternalComponent = null;
      this._nodeWithLegacyProperties = null;
    }
  },

  getPublicInstance: function () {
    if (!this._nodeWithLegacyProperties) {
      var node = ReactMount.getNode(this._rootNodeID);

      node._reactInternalComponent = this;
      node.getDOMNode = legacyGetDOMNode;
      node.isMounted = legacyIsMounted;
      node.setState = legacySetStateEtc;
      node.replaceState = legacySetStateEtc;
      node.forceUpdate = legacySetStateEtc;
      node.setProps = legacySetProps;
      node.replaceProps = legacyReplaceProps;

      if (process.env.NODE_ENV !== 'production') {
        if (canDefineProperty) {
          Object.defineProperties(node, legacyPropsDescriptor);
        } else {
          // updateComponent will update this property on subsequent renders
          node.props = this._currentElement.props;
        }
      } else {
        // updateComponent will update this property on subsequent renders
        node.props = this._currentElement.props;
      }

      this._nodeWithLegacyProperties = node;
    }
    return this._nodeWithLegacyProperties;
  }

};

ReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {
  mountComponent: 'mountComponent',
  updateComponent: 'updateComponent'
});

assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);

module.exports = ReactDOMComponent;
}).call(this,require('_process'))
},{"./AutoFocusUtils":24,"./CSSPropertyOperations":27,"./DOMProperty":32,"./DOMPropertyOperations":33,"./EventConstants":37,"./Object.assign":45,"./ReactBrowserEventEmitter":49,"./ReactComponentBrowserEnvironment":54,"./ReactDOMButton":59,"./ReactDOMInput":64,"./ReactDOMOption":65,"./ReactDOMSelect":66,"./ReactDOMTextarea":70,"./ReactMount":88,"./ReactMultiChild":89,"./ReactPerf":94,"./ReactUpdateQueue":105,"./canDefineProperty":127,"./escapeTextContentForBrowser":130,"./isEventSupported":142,"./setInnerHTML":147,"./setTextContent":148,"./validateDOMNesting":151,"_process":21,"fbjs/lib/invariant":167,"fbjs/lib/keyOf":171,"fbjs/lib/shallowEqual":176,"fbjs/lib/warning":178}],61:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMFactories
 * @typechecks static-only
 */

'use strict';

var ReactElement = require('./ReactElement');
var ReactElementValidator = require('./ReactElementValidator');

var mapObject = require('fbjs/lib/mapObject');

/**
 * Create a factory that creates HTML tag elements.
 *
 * @param {string} tag Tag name (e.g. `div`).
 * @private
 */
function createDOMFactory(tag) {
  if (process.env.NODE_ENV !== 'production') {
    return ReactElementValidator.createFactory(tag);
  }
  return ReactElement.createFactory(tag);
}

/**
 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
 * This is also accessible via `React.DOM`.
 *
 * @public
 */
var ReactDOMFactories = mapObject({
  a: 'a',
  abbr: 'abbr',
  address: 'address',
  area: 'area',
  article: 'article',
  aside: 'aside',
  audio: 'audio',
  b: 'b',
  base: 'base',
  bdi: 'bdi',
  bdo: 'bdo',
  big: 'big',
  blockquote: 'blockquote',
  body: 'body',
  br: 'br',
  button: 'button',
  canvas: 'canvas',
  caption: 'caption',
  cite: 'cite',
  code: 'code',
  col: 'col',
  colgroup: 'colgroup',
  data: 'data',
  datalist: 'datalist',
  dd: 'dd',
  del: 'del',
  details: 'details',
  dfn: 'dfn',
  dialog: 'dialog',
  div: 'div',
  dl: 'dl',
  dt: 'dt',
  em: 'em',
  embed: 'embed',
  fieldset: 'fieldset',
  figcaption: 'figcaption',
  figure: 'figure',
  footer: 'footer',
  form: 'form',
  h1: 'h1',
  h2: 'h2',
  h3: 'h3',
  h4: 'h4',
  h5: 'h5',
  h6: 'h6',
  head: 'head',
  header: 'header',
  hgroup: 'hgroup',
  hr: 'hr',
  html: 'html',
  i: 'i',
  iframe: 'iframe',
  img: 'img',
  input: 'input',
  ins: 'ins',
  kbd: 'kbd',
  keygen: 'keygen',
  label: 'label',
  legend: 'legend',
  li: 'li',
  link: 'link',
  main: 'main',
  map: 'map',
  mark: 'mark',
  menu: 'menu',
  menuitem: 'menuitem',
  meta: 'meta',
  meter: 'meter',
  nav: 'nav',
  noscript: 'noscript',
  object: 'object',
  ol: 'ol',
  optgroup: 'optgroup',
  option: 'option',
  output: 'output',
  p: 'p',
  param: 'param',
  picture: 'picture',
  pre: 'pre',
  progress: 'progress',
  q: 'q',
  rp: 'rp',
  rt: 'rt',
  ruby: 'ruby',
  s: 's',
  samp: 'samp',
  script: 'script',
  section: 'section',
  select: 'select',
  small: 'small',
  source: 'source',
  span: 'span',
  strong: 'strong',
  style: 'style',
  sub: 'sub',
  summary: 'summary',
  sup: 'sup',
  table: 'table',
  tbody: 'tbody',
  td: 'td',
  textarea: 'textarea',
  tfoot: 'tfoot',
  th: 'th',
  thead: 'thead',
  time: 'time',
  title: 'title',
  tr: 'tr',
  track: 'track',
  u: 'u',
  ul: 'ul',
  'var': 'var',
  video: 'video',
  wbr: 'wbr',

  // SVG
  circle: 'circle',
  clipPath: 'clipPath',
  defs: 'defs',
  ellipse: 'ellipse',
  g: 'g',
  image: 'image',
  line: 'line',
  linearGradient: 'linearGradient',
  mask: 'mask',
  path: 'path',
  pattern: 'pattern',
  polygon: 'polygon',
  polyline: 'polyline',
  radialGradient: 'radialGradient',
  rect: 'rect',
  stop: 'stop',
  svg: 'svg',
  text: 'text',
  tspan: 'tspan'

}, createDOMFactory);

module.exports = ReactDOMFactories;
}).call(this,require('_process'))
},{"./ReactElement":75,"./ReactElementValidator":76,"_process":21,"fbjs/lib/mapObject":172}],62:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMFeatureFlags
 */

'use strict';

var ReactDOMFeatureFlags = {
  useCreateElement: false
};

module.exports = ReactDOMFeatureFlags;
},{}],63:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMIDOperations
 * @typechecks static-only
 */

'use strict';

var DOMChildrenOperations = require('./DOMChildrenOperations');
var DOMPropertyOperations = require('./DOMPropertyOperations');
var ReactMount = require('./ReactMount');
var ReactPerf = require('./ReactPerf');

var invariant = require('fbjs/lib/invariant');

/**
 * Errors for properties that should not be updated with `updatePropertyByID()`.
 *
 * @type {object}
 * @private
 */
var INVALID_PROPERTY_ERRORS = {
  dangerouslySetInnerHTML: '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
  style: '`style` must be set using `updateStylesByID()`.'
};

/**
 * Operations used to process updates to DOM nodes.
 */
var ReactDOMIDOperations = {

  /**
   * Updates a DOM node with new property values. This should only be used to
   * update DOM properties in `DOMProperty`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} name A valid property name, see `DOMProperty`.
   * @param {*} value New value of the property.
   * @internal
   */
  updatePropertyByID: function (id, name, value) {
    var node = ReactMount.getNode(id);
    !!INVALID_PROPERTY_ERRORS.hasOwnProperty(name) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updatePropertyByID(...): %s', INVALID_PROPERTY_ERRORS[name]) : invariant(false) : undefined;

    // If we're updating to null or undefined, we should remove the property
    // from the DOM node instead of inadvertantly setting to a string. This
    // brings us in line with the same behavior we have on initial render.
    if (value != null) {
      DOMPropertyOperations.setValueForProperty(node, name, value);
    } else {
      DOMPropertyOperations.deleteValueForProperty(node, name);
    }
  },

  /**
   * Replaces a DOM node that exists in the document with markup.
   *
   * @param {string} id ID of child to be replaced.
   * @param {string} markup Dangerous markup to inject in place of child.
   * @internal
   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
   */
  dangerouslyReplaceNodeWithMarkupByID: function (id, markup) {
    var node = ReactMount.getNode(id);
    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
  },

  /**
   * Updates a component's children by processing a series of updates.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markup List of markup strings.
   * @internal
   */
  dangerouslyProcessChildrenUpdates: function (updates, markup) {
    for (var i = 0; i < updates.length; i++) {
      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
    }
    DOMChildrenOperations.processUpdates(updates, markup);
  }
};

ReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {
  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',
  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'
});

module.exports = ReactDOMIDOperations;
}).call(this,require('_process'))
},{"./DOMChildrenOperations":31,"./DOMPropertyOperations":33,"./ReactMount":88,"./ReactPerf":94,"_process":21,"fbjs/lib/invariant":167}],64:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMInput
 */

'use strict';

var ReactDOMIDOperations = require('./ReactDOMIDOperations');
var LinkedValueUtils = require('./LinkedValueUtils');
var ReactMount = require('./ReactMount');
var ReactUpdates = require('./ReactUpdates');

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');

var instancesByReactID = {};

function forceUpdateIfMounted() {
  if (this._rootNodeID) {
    // DOM component is still mounted; update
    ReactDOMInput.updateWrapper(this);
  }
}

/**
 * Implements an <input> native component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */
var ReactDOMInput = {
  getNativeProps: function (inst, props, context) {
    var value = LinkedValueUtils.getValue(props);
    var checked = LinkedValueUtils.getChecked(props);

    var nativeProps = assign({}, props, {
      defaultChecked: undefined,
      defaultValue: undefined,
      value: value != null ? value : inst._wrapperState.initialValue,
      checked: checked != null ? checked : inst._wrapperState.initialChecked,
      onChange: inst._wrapperState.onChange
    });

    return nativeProps;
  },

  mountWrapper: function (inst, props) {
    if (process.env.NODE_ENV !== 'production') {
      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);
    }

    var defaultValue = props.defaultValue;
    inst._wrapperState = {
      initialChecked: props.defaultChecked || false,
      initialValue: defaultValue != null ? defaultValue : null,
      onChange: _handleChange.bind(inst)
    };
  },

  mountReadyWrapper: function (inst) {
    // Can't be in mountWrapper or else server rendering leaks.
    instancesByReactID[inst._rootNodeID] = inst;
  },

  unmountWrapper: function (inst) {
    delete instancesByReactID[inst._rootNodeID];
  },

  updateWrapper: function (inst) {
    var props = inst._currentElement.props;

    // TODO: Shouldn't this be getChecked(props)?
    var checked = props.checked;
    if (checked != null) {
      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'checked', checked || false);
    }

    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;

  var returnValue = LinkedValueUtils.executeOnChange(props, event);

  // Here we use asap to wait until all updates have propagated, which
  // is important when using controlled components within layers:
  // https://github.com/facebook/react/issues/1698
  ReactUpdates.asap(forceUpdateIfMounted, this);

  var name = props.name;
  if (props.type === 'radio' && name != null) {
    var rootNode = ReactMount.getNode(this._rootNodeID);
    var queryRoot = rootNode;

    while (queryRoot.parentNode) {
      queryRoot = queryRoot.parentNode;
    }

    // If `rootNode.form` was non-null, then we could try `form.elements`,
    // but that sometimes behaves strangely in IE8. We could also try using
    // `form.getElementsByName`, but that will only return direct children
    // and won't include inputs that use the HTML5 `form=` attribute. Since
    // the input might not even be in a form, let's just use the global
    // `querySelectorAll` to ensure we don't miss anything.
    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

    for (var i = 0; i < group.length; i++) {
      var otherNode = group[i];
      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
        continue;
      }
      // This will throw if radio buttons rendered by different copies of React
      // and the same name are rendered into the same form (same as #1939).
      // That's probably okay; we don't support it just as we don't support
      // mixing React with non-React.
      var otherID = ReactMount.getID(otherNode);
      !otherID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.') : invariant(false) : undefined;
      var otherInstance = instancesByReactID[otherID];
      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Unknown radio button ID %s.', otherID) : invariant(false) : undefined;
      // If this is a controlled radio button group, forcing the input that
      // was previously checked to update will cause it to be come re-checked
      // as appropriate.
      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
    }
  }

  return returnValue;
}

module.exports = ReactDOMInput;
}).call(this,require('_process'))
},{"./LinkedValueUtils":44,"./Object.assign":45,"./ReactDOMIDOperations":63,"./ReactMount":88,"./ReactUpdates":106,"_process":21,"fbjs/lib/invariant":167}],65:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMOption
 */

'use strict';

var ReactChildren = require('./ReactChildren');
var ReactDOMSelect = require('./ReactDOMSelect');

var assign = require('./Object.assign');
var warning = require('fbjs/lib/warning');

var valueContextKey = ReactDOMSelect.valueContextKey;

/**
 * Implements an <option> native component that warns when `selected` is set.
 */
var ReactDOMOption = {
  mountWrapper: function (inst, props, context) {
    // TODO (yungsters): Remove support for `selected` in <option>.
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : undefined;
    }

    // Look up whether this option is 'selected' via context
    var selectValue = context[valueContextKey];

    // If context key is null (e.g., no specified value or after initial mount)
    // or missing (e.g., for <datalist>), we don't change props.selected
    var selected = null;
    if (selectValue != null) {
      selected = false;
      if (Array.isArray(selectValue)) {
        // multiple
        for (var i = 0; i < selectValue.length; i++) {
          if ('' + selectValue[i] === '' + props.value) {
            selected = true;
            break;
          }
        }
      } else {
        selected = '' + selectValue === '' + props.value;
      }
    }

    inst._wrapperState = { selected: selected };
  },

  getNativeProps: function (inst, props, context) {
    var nativeProps = assign({ selected: undefined, children: undefined }, props);

    // Read state only from initial mount because <select> updates value
    // manually; we need the initial state only for server rendering
    if (inst._wrapperState.selected != null) {
      nativeProps.selected = inst._wrapperState.selected;
    }

    var content = '';

    // Flatten children and warn if they aren't strings or numbers;
    // invalid types are ignored.
    ReactChildren.forEach(props.children, function (child) {
      if (child == null) {
        return;
      }
      if (typeof child === 'string' || typeof child === 'number') {
        content += child;
      } else {
        process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : undefined;
      }
    });

    if (content) {
      nativeProps.children = content;
    }

    return nativeProps;
  }

};

module.exports = ReactDOMOption;
}).call(this,require('_process'))
},{"./Object.assign":45,"./ReactChildren":51,"./ReactDOMSelect":66,"_process":21,"fbjs/lib/warning":178}],66:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelect
 */

'use strict';

var LinkedValueUtils = require('./LinkedValueUtils');
var ReactMount = require('./ReactMount');
var ReactUpdates = require('./ReactUpdates');

var assign = require('./Object.assign');
var warning = require('fbjs/lib/warning');

var valueContextKey = '__ReactDOMSelect_value$' + Math.random().toString(36).slice(2);

function updateOptionsIfPendingUpdateAndMounted() {
  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
    this._wrapperState.pendingUpdate = false;

    var props = this._currentElement.props;
    var value = LinkedValueUtils.getValue(props);

    if (value != null) {
      updateOptions(this, Boolean(props.multiple), value);
    }
  }
}

function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

var valuePropNames = ['value', 'defaultValue'];

/**
 * Validation function for `value` and `defaultValue`.
 * @private
 */
function checkSelectPropTypes(inst, props) {
  var owner = inst._currentElement._owner;
  LinkedValueUtils.checkPropTypes('select', props, owner);

  for (var i = 0; i < valuePropNames.length; i++) {
    var propName = valuePropNames[i];
    if (props[propName] == null) {
      continue;
    }
    if (props.multiple) {
      process.env.NODE_ENV !== 'production' ? warning(Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
    } else {
      process.env.NODE_ENV !== 'production' ? warning(!Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
    }
  }
}

/**
 * @param {ReactDOMComponent} inst
 * @param {boolean} multiple
 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
 * @private
 */
function updateOptions(inst, multiple, propValue) {
  var selectedValue, i;
  var options = ReactMount.getNode(inst._rootNodeID).options;

  if (multiple) {
    selectedValue = {};
    for (i = 0; i < propValue.length; i++) {
      selectedValue['' + propValue[i]] = true;
    }
    for (i = 0; i < options.length; i++) {
      var selected = selectedValue.hasOwnProperty(options[i].value);
      if (options[i].selected !== selected) {
        options[i].selected = selected;
      }
    }
  } else {
    // Do not set `select.value` as exact behavior isn't consistent across all
    // browsers for all cases.
    selectedValue = '' + propValue;
    for (i = 0; i < options.length; i++) {
      if (options[i].value === selectedValue) {
        options[i].selected = true;
        return;
      }
    }
    if (options.length) {
      options[0].selected = true;
    }
  }
}

/**
 * Implements a <select> native component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */
var ReactDOMSelect = {
  valueContextKey: valueContextKey,

  getNativeProps: function (inst, props, context) {
    return assign({}, props, {
      onChange: inst._wrapperState.onChange,
      value: undefined
    });
  },

  mountWrapper: function (inst, props) {
    if (process.env.NODE_ENV !== 'production') {
      checkSelectPropTypes(inst, props);
    }

    var value = LinkedValueUtils.getValue(props);
    inst._wrapperState = {
      pendingUpdate: false,
      initialValue: value != null ? value : props.defaultValue,
      onChange: _handleChange.bind(inst),
      wasMultiple: Boolean(props.multiple)
    };
  },

  processChildContext: function (inst, props, context) {
    // Pass down initial value so initial generated markup has correct
    // `selected` attributes
    var childContext = assign({}, context);
    childContext[valueContextKey] = inst._wrapperState.initialValue;
    return childContext;
  },

  postUpdateWrapper: function (inst) {
    var props = inst._currentElement.props;

    // After the initial mount, we control selected-ness manually so don't pass
    // the context value down
    inst._wrapperState.initialValue = undefined;

    var wasMultiple = inst._wrapperState.wasMultiple;
    inst._wrapperState.wasMultiple = Boolean(props.multiple);

    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      inst._wrapperState.pendingUpdate = false;
      updateOptions(inst, Boolean(props.multiple), value);
    } else if (wasMultiple !== Boolean(props.multiple)) {
      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
      if (props.defaultValue != null) {
        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
      } else {
        // Revert the select back to its default unselected state.
        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
      }
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;
  var returnValue = LinkedValueUtils.executeOnChange(props, event);

  this._wrapperState.pendingUpdate = true;
  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
  return returnValue;
}

module.exports = ReactDOMSelect;
}).call(this,require('_process'))
},{"./LinkedValueUtils":44,"./Object.assign":45,"./ReactMount":88,"./ReactUpdates":106,"_process":21,"fbjs/lib/warning":178}],67:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelection
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var getNodeForCharacterOffset = require('./getNodeForCharacterOffset');
var getTextContentAccessor = require('./getTextContentAccessor');

/**
 * While `isCollapsed` is available on the Selection object and `collapsed`
 * is available on the Range object, IE11 sometimes gets them wrong.
 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
 */
function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
  return anchorNode === focusNode && anchorOffset === focusOffset;
}

/**
 * Get the appropriate anchor and focus node/offset pairs for IE.
 *
 * The catch here is that IE's selection API doesn't provide information
 * about whether the selection is forward or backward, so we have to
 * behave as though it's always forward.
 *
 * IE text differs from modern selection in that it behaves as though
 * block elements end with a new line. This means character offsets will
 * differ between the two APIs.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getIEOffsets(node) {
  var selection = document.selection;
  var selectedRange = selection.createRange();
  var selectedLength = selectedRange.text.length;

  // Duplicate selection so we can move range without breaking user selection.
  var fromStart = selectedRange.duplicate();
  fromStart.moveToElementText(node);
  fromStart.setEndPoint('EndToStart', selectedRange);

  var startOffset = fromStart.text.length;
  var endOffset = startOffset + selectedLength;

  return {
    start: startOffset,
    end: endOffset
  };
}

/**
 * @param {DOMElement} node
 * @return {?object}
 */
function getModernOffsets(node) {
  var selection = window.getSelection && window.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode;
  var anchorOffset = selection.anchorOffset;
  var focusNode = selection.focusNode;
  var focusOffset = selection.focusOffset;

  var currentRange = selection.getRangeAt(0);

  // In Firefox, range.startContainer and range.endContainer can be "anonymous
  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
  // divs do not seem to expose properties, triggering a "Permission denied
  // error" if any of its properties are accessed. The only seemingly possible
  // way to avoid erroring is to access a property that typically works for
  // non-anonymous divs and catch any error that may otherwise arise. See
  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
  try {
    /* eslint-disable no-unused-expressions */
    currentRange.startContainer.nodeType;
    currentRange.endContainer.nodeType;
    /* eslint-enable no-unused-expressions */
  } catch (e) {
    return null;
  }

  // If the node and offset values are the same, the selection is collapsed.
  // `Selection.isCollapsed` is available natively, but IE sometimes gets
  // this value wrong.
  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);

  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

  var tempRange = currentRange.cloneRange();
  tempRange.selectNodeContents(node);
  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);

  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
  var end = start + rangeLength;

  // Detect whether the selection is backward.
  var detectionRange = document.createRange();
  detectionRange.setStart(anchorNode, anchorOffset);
  detectionRange.setEnd(focusNode, focusOffset);
  var isBackward = detectionRange.collapsed;

  return {
    start: isBackward ? end : start,
    end: isBackward ? start : end
  };
}

/**
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setIEOffsets(node, offsets) {
  var range = document.selection.createRange().duplicate();
  var start, end;

  if (typeof offsets.end === 'undefined') {
    start = offsets.start;
    end = start;
  } else if (offsets.start > offsets.end) {
    start = offsets.end;
    end = offsets.start;
  } else {
    start = offsets.start;
    end = offsets.end;
  }

  range.moveToElementText(node);
  range.moveStart('character', start);
  range.setEndPoint('EndToStart', range);
  range.moveEnd('character', end - start);
  range.select();
}

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setModernOffsets(node, offsets) {
  if (!window.getSelection) {
    return;
  }

  var selection = window.getSelection();
  var length = node[getTextContentAccessor()].length;
  var start = Math.min(offsets.start, length);
  var end = typeof offsets.end === 'undefined' ? start : Math.min(offsets.end, length);

  // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.
  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    var range = document.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);

var ReactDOMSelection = {
  /**
   * @param {DOMElement} node
   */
  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

  /**
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
};

module.exports = ReactDOMSelection;
},{"./getNodeForCharacterOffset":139,"./getTextContentAccessor":140,"fbjs/lib/ExecutionEnvironment":153}],68:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMServer
 */

'use strict';

var ReactDefaultInjection = require('./ReactDefaultInjection');
var ReactServerRendering = require('./ReactServerRendering');
var ReactVersion = require('./ReactVersion');

ReactDefaultInjection.inject();

var ReactDOMServer = {
  renderToString: ReactServerRendering.renderToString,
  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
  version: ReactVersion
};

module.exports = ReactDOMServer;
},{"./ReactDefaultInjection":72,"./ReactServerRendering":103,"./ReactVersion":107}],69:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMTextComponent
 * @typechecks static-only
 */

'use strict';

var DOMChildrenOperations = require('./DOMChildrenOperations');
var DOMPropertyOperations = require('./DOMPropertyOperations');
var ReactComponentBrowserEnvironment = require('./ReactComponentBrowserEnvironment');
var ReactMount = require('./ReactMount');

var assign = require('./Object.assign');
var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');
var setTextContent = require('./setTextContent');
var validateDOMNesting = require('./validateDOMNesting');

/**
 * Text nodes violate a couple assumptions that React makes about components:
 *
 *  - When mounting text into the DOM, adjacent text nodes are merged.
 *  - Text nodes cannot be assigned a React root ID.
 *
 * This component is used to wrap strings in elements so that they can undergo
 * the same reconciliation that is applied to elements.
 *
 * TODO: Investigate representing React components in the DOM with text nodes.
 *
 * @class ReactDOMTextComponent
 * @extends ReactComponent
 * @internal
 */
var ReactDOMTextComponent = function (props) {
  // This constructor and its argument is currently used by mocks.
};

assign(ReactDOMTextComponent.prototype, {

  /**
   * @param {ReactText} text
   * @internal
   */
  construct: function (text) {
    // TODO: This is really a ReactText (ReactNode), not a ReactElement
    this._currentElement = text;
    this._stringText = '' + text;

    // Properties
    this._rootNodeID = null;
    this._mountIndex = 0;
  },

  /**
   * Creates the markup for this text node. This node is not intended to have
   * any features besides containing text content.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Markup for this text node.
   * @internal
   */
  mountComponent: function (rootID, transaction, context) {
    if (process.env.NODE_ENV !== 'production') {
      if (context[validateDOMNesting.ancestorInfoContextKey]) {
        validateDOMNesting('span', null, context[validateDOMNesting.ancestorInfoContextKey]);
      }
    }

    this._rootNodeID = rootID;
    if (transaction.useCreateElement) {
      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
      var el = ownerDocument.createElement('span');
      DOMPropertyOperations.setAttributeForID(el, rootID);
      // Populate node cache
      ReactMount.getID(el);
      setTextContent(el, this._stringText);
      return el;
    } else {
      var escapedText = escapeTextContentForBrowser(this._stringText);

      if (transaction.renderToStaticMarkup) {
        // Normally we'd wrap this in a `span` for the reasons stated above, but
        // since this is a situation where React won't take over (static pages),
        // we can simply return the text as it is.
        return escapedText;
      }

      return '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' + escapedText + '</span>';
    }
  },

  /**
   * Updates this component by updating the text content.
   *
   * @param {ReactText} nextText The next text content
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  receiveComponent: function (nextText, transaction) {
    if (nextText !== this._currentElement) {
      this._currentElement = nextText;
      var nextStringText = '' + nextText;
      if (nextStringText !== this._stringText) {
        // TODO: Save this as pending props and use performUpdateIfNecessary
        // and/or updateComponent to do the actual update for consistency with
        // other component types?
        this._stringText = nextStringText;
        var node = ReactMount.getNode(this._rootNodeID);
        DOMChildrenOperations.updateTextContent(node, nextStringText);
      }
    }
  },

  unmountComponent: function () {
    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
  }

});

module.exports = ReactDOMTextComponent;
}).call(this,require('_process'))
},{"./DOMChildrenOperations":31,"./DOMPropertyOperations":33,"./Object.assign":45,"./ReactComponentBrowserEnvironment":54,"./ReactMount":88,"./escapeTextContentForBrowser":130,"./setTextContent":148,"./validateDOMNesting":151,"_process":21}],70:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMTextarea
 */

'use strict';

var LinkedValueUtils = require('./LinkedValueUtils');
var ReactDOMIDOperations = require('./ReactDOMIDOperations');
var ReactUpdates = require('./ReactUpdates');

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

function forceUpdateIfMounted() {
  if (this._rootNodeID) {
    // DOM component is still mounted; update
    ReactDOMTextarea.updateWrapper(this);
  }
}

/**
 * Implements a <textarea> native component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
var ReactDOMTextarea = {
  getNativeProps: function (inst, props, context) {
    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : invariant(false) : undefined;

    // Always set children to the same thing. In IE9, the selection range will
    // get reset if `textContent` is mutated.
    var nativeProps = assign({}, props, {
      defaultValue: undefined,
      value: undefined,
      children: inst._wrapperState.initialValue,
      onChange: inst._wrapperState.onChange
    });

    return nativeProps;
  },

  mountWrapper: function (inst, props) {
    if (process.env.NODE_ENV !== 'production') {
      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
    }

    var defaultValue = props.defaultValue;
    // TODO (yungsters): Remove support for children content in <textarea>.
    var children = props.children;
    if (children != null) {
      if (process.env.NODE_ENV !== 'production') {
        process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : undefined;
      }
      !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : invariant(false) : undefined;
      if (Array.isArray(children)) {
        !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : invariant(false) : undefined;
        children = children[0];
      }

      defaultValue = '' + children;
    }
    if (defaultValue == null) {
      defaultValue = '';
    }
    var value = LinkedValueUtils.getValue(props);

    inst._wrapperState = {
      // We save the initial value so that `ReactDOMComponent` doesn't update
      // `textContent` (unnecessary since we update value).
      // The initial value can be a boolean or object so that's why it's
      // forced to be a string.
      initialValue: '' + (value != null ? value : defaultValue),
      onChange: _handleChange.bind(inst)
    };
  },

  updateWrapper: function (inst) {
    var props = inst._currentElement.props;
    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;
  var returnValue = LinkedValueUtils.executeOnChange(props, event);
  ReactUpdates.asap(forceUpdateIfMounted, this);
  return returnValue;
}

module.exports = ReactDOMTextarea;
}).call(this,require('_process'))
},{"./LinkedValueUtils":44,"./Object.assign":45,"./ReactDOMIDOperations":63,"./ReactUpdates":106,"_process":21,"fbjs/lib/invariant":167,"fbjs/lib/warning":178}],71:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultBatchingStrategy
 */

'use strict';

var ReactUpdates = require('./ReactUpdates');
var Transaction = require('./Transaction');

var assign = require('./Object.assign');
var emptyFunction = require('fbjs/lib/emptyFunction');

var RESET_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: function () {
    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
  }
};

var FLUSH_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
};

var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

function ReactDefaultBatchingStrategyTransaction() {
  this.reinitializeTransaction();
}

assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction.Mixin, {
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  }
});

var transaction = new ReactDefaultBatchingStrategyTransaction();

var ReactDefaultBatchingStrategy = {
  isBatchingUpdates: false,

  /**
   * Call the provided function in a context within which calls to `setState`
   * and friends are batched such that components aren't updated unnecessarily.
   */
  batchedUpdates: function (callback, a, b, c, d, e) {
    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

    // The code is written this way to avoid extra allocations
    if (alreadyBatchingUpdates) {
      callback(a, b, c, d, e);
    } else {
      transaction.perform(callback, null, a, b, c, d, e);
    }
  }
};

module.exports = ReactDefaultBatchingStrategy;
},{"./Object.assign":45,"./ReactUpdates":106,"./Transaction":123,"fbjs/lib/emptyFunction":159}],72:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultInjection
 */

'use strict';

var BeforeInputEventPlugin = require('./BeforeInputEventPlugin');
var ChangeEventPlugin = require('./ChangeEventPlugin');
var ClientReactRootIndex = require('./ClientReactRootIndex');
var DefaultEventPluginOrder = require('./DefaultEventPluginOrder');
var EnterLeaveEventPlugin = require('./EnterLeaveEventPlugin');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var HTMLDOMPropertyConfig = require('./HTMLDOMPropertyConfig');
var ReactBrowserComponentMixin = require('./ReactBrowserComponentMixin');
var ReactComponentBrowserEnvironment = require('./ReactComponentBrowserEnvironment');
var ReactDefaultBatchingStrategy = require('./ReactDefaultBatchingStrategy');
var ReactDOMComponent = require('./ReactDOMComponent');
var ReactDOMTextComponent = require('./ReactDOMTextComponent');
var ReactEventListener = require('./ReactEventListener');
var ReactInjection = require('./ReactInjection');
var ReactInstanceHandles = require('./ReactInstanceHandles');
var ReactMount = require('./ReactMount');
var ReactReconcileTransaction = require('./ReactReconcileTransaction');
var SelectEventPlugin = require('./SelectEventPlugin');
var ServerReactRootIndex = require('./ServerReactRootIndex');
var SimpleEventPlugin = require('./SimpleEventPlugin');
var SVGDOMPropertyConfig = require('./SVGDOMPropertyConfig');

var alreadyInjected = false;

function inject() {
  if (alreadyInjected) {
    // TODO: This is currently true because these injections are shared between
    // the client and the server package. They should be built independently
    // and not share any injection state. Then this problem will be solved.
    return;
  }
  alreadyInjected = true;

  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);

  /**
   * Inject modules for resolving DOM hierarchy and plugin ordering.
   */
  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
  ReactInjection.EventPluginHub.injectMount(ReactMount);

  /**
   * Some important event plugins included by default (without having to require
   * them).
   */
  ReactInjection.EventPluginHub.injectEventPluginsByName({
    SimpleEventPlugin: SimpleEventPlugin,
    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
    ChangeEventPlugin: ChangeEventPlugin,
    SelectEventPlugin: SelectEventPlugin,
    BeforeInputEventPlugin: BeforeInputEventPlugin
  });

  ReactInjection.NativeComponent.injectGenericComponentClass(ReactDOMComponent);

  ReactInjection.NativeComponent.injectTextComponentClass(ReactDOMTextComponent);

  ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);

  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);

  ReactInjection.RootIndex.injectCreateReactRootIndex(ExecutionEnvironment.canUseDOM ? ClientReactRootIndex.createReactRootIndex : ServerReactRootIndex.createReactRootIndex);

  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);

  if (process.env.NODE_ENV !== 'production') {
    var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
    if (/[?&]react_perf\b/.test(url)) {
      var ReactDefaultPerf = require('./ReactDefaultPerf');
      ReactDefaultPerf.start();
    }
  }
}

module.exports = {
  inject: inject
};
}).call(this,require('_process'))
},{"./BeforeInputEventPlugin":25,"./ChangeEventPlugin":29,"./ClientReactRootIndex":30,"./DefaultEventPluginOrder":35,"./EnterLeaveEventPlugin":36,"./HTMLDOMPropertyConfig":43,"./ReactBrowserComponentMixin":48,"./ReactComponentBrowserEnvironment":54,"./ReactDOMComponent":60,"./ReactDOMTextComponent":69,"./ReactDefaultBatchingStrategy":71,"./ReactDefaultPerf":73,"./ReactEventListener":81,"./ReactInjection":82,"./ReactInstanceHandles":84,"./ReactMount":88,"./ReactReconcileTransaction":98,"./SVGDOMPropertyConfig":108,"./SelectEventPlugin":109,"./ServerReactRootIndex":110,"./SimpleEventPlugin":111,"_process":21,"fbjs/lib/ExecutionEnvironment":153}],73:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerf
 * @typechecks static-only
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var ReactDefaultPerfAnalysis = require('./ReactDefaultPerfAnalysis');
var ReactMount = require('./ReactMount');
var ReactPerf = require('./ReactPerf');

var performanceNow = require('fbjs/lib/performanceNow');

function roundFloat(val) {
  return Math.floor(val * 100) / 100;
}

function addValue(obj, key, val) {
  obj[key] = (obj[key] || 0) + val;
}

var ReactDefaultPerf = {
  _allMeasurements: [], // last item in the list is the current one
  _mountStack: [0],
  _injected: false,

  start: function () {
    if (!ReactDefaultPerf._injected) {
      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
    }

    ReactDefaultPerf._allMeasurements.length = 0;
    ReactPerf.enableMeasure = true;
  },

  stop: function () {
    ReactPerf.enableMeasure = false;
  },

  getLastMeasurements: function () {
    return ReactDefaultPerf._allMeasurements;
  },

  printExclusive: function (measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
    console.table(summary.map(function (item) {
      return {
        'Component class name': item.componentName,
        'Total inclusive time (ms)': roundFloat(item.inclusive),
        'Exclusive mount time (ms)': roundFloat(item.exclusive),
        'Exclusive render time (ms)': roundFloat(item.render),
        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
        'Render time per instance (ms)': roundFloat(item.render / item.count),
        'Instances': item.count
      };
    }));
    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
    // number.
  },

  printInclusive: function (measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
    console.table(summary.map(function (item) {
      return {
        'Owner > component': item.componentName,
        'Inclusive time (ms)': roundFloat(item.time),
        'Instances': item.count
      };
    }));
    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
  },

  getMeasurementsSummaryMap: function (measurements) {
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements, true);
    return summary.map(function (item) {
      return {
        'Owner > component': item.componentName,
        'Wasted time (ms)': item.time,
        'Instances': item.count
      };
    });
  },

  printWasted: function (measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
  },

  printDOM: function (measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
    console.table(summary.map(function (item) {
      var result = {};
      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
      result.type = item.type;
      result.args = JSON.stringify(item.args);
      return result;
    }));
    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
  },

  _recordWrite: function (id, fnName, totalTime, args) {
    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
    var writes = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].writes;
    writes[id] = writes[id] || [];
    writes[id].push({
      type: fnName,
      time: totalTime,
      args: args
    });
  },

  measure: function (moduleName, fnName, func) {
    return function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var totalTime;
      var rv;
      var start;

      if (fnName === '_renderNewRootComponent' || fnName === 'flushBatchedUpdates') {
        // A "measurement" is a set of metrics recorded for each flush. We want
        // to group the metrics for a given flush together so we can look at the
        // components that rendered and the DOM operations that actually
        // happened to determine the amount of "wasted work" performed.
        ReactDefaultPerf._allMeasurements.push({
          exclusive: {},
          inclusive: {},
          render: {},
          counts: {},
          writes: {},
          displayNames: {},
          totalTime: 0,
          created: {}
        });
        start = performanceNow();
        rv = func.apply(this, args);
        ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].totalTime = performanceNow() - start;
        return rv;
      } else if (fnName === '_mountImageIntoNode' || moduleName === 'ReactBrowserEventEmitter' || moduleName === 'ReactDOMIDOperations' || moduleName === 'CSSPropertyOperations' || moduleName === 'DOMChildrenOperations' || moduleName === 'DOMPropertyOperations') {
        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (fnName === '_mountImageIntoNode') {
          var mountID = ReactMount.getID(args[1]);
          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
          // special format
          args[0].forEach(function (update) {
            var writeArgs = {};
            if (update.fromIndex !== null) {
              writeArgs.fromIndex = update.fromIndex;
            }
            if (update.toIndex !== null) {
              writeArgs.toIndex = update.toIndex;
            }
            if (update.textContent !== null) {
              writeArgs.textContent = update.textContent;
            }
            if (update.markupIndex !== null) {
              writeArgs.markup = args[1][update.markupIndex];
            }
            ReactDefaultPerf._recordWrite(update.parentID, update.type, totalTime, writeArgs);
          });
        } else {
          // basic format
          var id = args[0];
          if (typeof id === 'object') {
            id = ReactMount.getID(args[0]);
          }
          ReactDefaultPerf._recordWrite(id, fnName, totalTime, Array.prototype.slice.call(args, 1));
        }
        return rv;
      } else if (moduleName === 'ReactCompositeComponent' && (fnName === 'mountComponent' || fnName === 'updateComponent' || // TODO: receiveComponent()?
      fnName === '_renderValidatedComponent')) {

        if (this._currentElement.type === ReactMount.TopLevelWrapper) {
          return func.apply(this, args);
        }

        var rootNodeID = fnName === 'mountComponent' ? args[0] : this._rootNodeID;
        var isRender = fnName === '_renderValidatedComponent';
        var isMount = fnName === 'mountComponent';

        var mountStack = ReactDefaultPerf._mountStack;
        var entry = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1];

        if (isRender) {
          addValue(entry.counts, rootNodeID, 1);
        } else if (isMount) {
          entry.created[rootNodeID] = true;
          mountStack.push(0);
        }

        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (isRender) {
          addValue(entry.render, rootNodeID, totalTime);
        } else if (isMount) {
          var subMountTime = mountStack.pop();
          mountStack[mountStack.length - 1] += totalTime;
          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
          addValue(entry.inclusive, rootNodeID, totalTime);
        } else {
          addValue(entry.inclusive, rootNodeID, totalTime);
        }

        entry.displayNames[rootNodeID] = {
          current: this.getName(),
          owner: this._currentElement._owner ? this._currentElement._owner.getName() : '<root>'
        };

        return rv;
      } else {
        return func.apply(this, args);
      }
    };
  }
};

module.exports = ReactDefaultPerf;
},{"./DOMProperty":32,"./ReactDefaultPerfAnalysis":74,"./ReactMount":88,"./ReactPerf":94,"fbjs/lib/performanceNow":175}],74:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerfAnalysis
 */

'use strict';

var assign = require('./Object.assign');

// Don't try to save users less than 1.2ms (a number I made up)
var DONT_CARE_THRESHOLD = 1.2;
var DOM_OPERATION_TYPES = {
  '_mountImageIntoNode': 'set innerHTML',
  INSERT_MARKUP: 'set innerHTML',
  MOVE_EXISTING: 'move',
  REMOVE_NODE: 'remove',
  SET_MARKUP: 'set innerHTML',
  TEXT_CONTENT: 'set textContent',
  'setValueForProperty': 'update attribute',
  'setValueForAttribute': 'update attribute',
  'deleteValueForProperty': 'remove attribute',
  'setValueForStyles': 'update styles',
  'replaceNodeWithMarkup': 'replace',
  'updateTextContent': 'set textContent'
};

function getTotalTime(measurements) {
  // TODO: return number of DOM ops? could be misleading.
  // TODO: measure dropped frames after reconcile?
  // TODO: log total time of each reconcile and the top-level component
  // class that triggered it.
  var totalTime = 0;
  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    totalTime += measurement.totalTime;
  }
  return totalTime;
}

function getDOMSummary(measurements) {
  var items = [];
  measurements.forEach(function (measurement) {
    Object.keys(measurement.writes).forEach(function (id) {
      measurement.writes[id].forEach(function (write) {
        items.push({
          id: id,
          type: DOM_OPERATION_TYPES[write.type] || write.type,
          args: write.args
        });
      });
    });
  });
  return items;
}

function getExclusiveSummary(measurements) {
  var candidates = {};
  var displayName;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

    for (var id in allIDs) {
      displayName = measurement.displayNames[id].current;

      candidates[displayName] = candidates[displayName] || {
        componentName: displayName,
        inclusive: 0,
        exclusive: 0,
        render: 0,
        count: 0
      };
      if (measurement.render[id]) {
        candidates[displayName].render += measurement.render[id];
      }
      if (measurement.exclusive[id]) {
        candidates[displayName].exclusive += measurement.exclusive[id];
      }
      if (measurement.inclusive[id]) {
        candidates[displayName].inclusive += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[displayName].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (displayName in candidates) {
    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[displayName]);
    }
  }

  arr.sort(function (a, b) {
    return b.exclusive - a.exclusive;
  });

  return arr;
}

function getInclusiveSummary(measurements, onlyClean) {
  var candidates = {};
  var inclusiveKey;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);
    var cleanComponents;

    if (onlyClean) {
      cleanComponents = getUnchangedComponents(measurement);
    }

    for (var id in allIDs) {
      if (onlyClean && !cleanComponents[id]) {
        continue;
      }

      var displayName = measurement.displayNames[id];

      // Inclusive time is not useful for many components without knowing where
      // they are instantiated. So we aggregate inclusive time with both the
      // owner and current displayName as the key.
      inclusiveKey = displayName.owner + ' > ' + displayName.current;

      candidates[inclusiveKey] = candidates[inclusiveKey] || {
        componentName: inclusiveKey,
        time: 0,
        count: 0
      };

      if (measurement.inclusive[id]) {
        candidates[inclusiveKey].time += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[inclusiveKey].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (inclusiveKey in candidates) {
    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[inclusiveKey]);
    }
  }

  arr.sort(function (a, b) {
    return b.time - a.time;
  });

  return arr;
}

function getUnchangedComponents(measurement) {
  // For a given reconcile, look at which components did not actually
  // render anything to the DOM and return a mapping of their ID to
  // the amount of time it took to render the entire subtree.
  var cleanComponents = {};
  var dirtyLeafIDs = Object.keys(measurement.writes);
  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

  for (var id in allIDs) {
    var isDirty = false;
    // For each component that rendered, see if a component that triggered
    // a DOM op is in its subtree.
    for (var i = 0; i < dirtyLeafIDs.length; i++) {
      if (dirtyLeafIDs[i].indexOf(id) === 0) {
        isDirty = true;
        break;
      }
    }
    // check if component newly created
    if (measurement.created[id]) {
      isDirty = true;
    }
    if (!isDirty && measurement.counts[id] > 0) {
      cleanComponents[id] = true;
    }
  }
  return cleanComponents;
}

var ReactDefaultPerfAnalysis = {
  getExclusiveSummary: getExclusiveSummary,
  getInclusiveSummary: getInclusiveSummary,
  getDOMSummary: getDOMSummary,
  getTotalTime: getTotalTime
};

module.exports = ReactDefaultPerfAnalysis;
},{"./Object.assign":45}],75:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElement
 */

'use strict';

var ReactCurrentOwner = require('./ReactCurrentOwner');

var assign = require('./Object.assign');
var canDefineProperty = require('./canDefineProperty');

// The Symbol used to tag the ReactElement type. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};

/**
 * Base constructor for all React elements. This is only used to make this
 * work with a dynamic instanceof check. Nothing should live on this prototype.
 *
 * @param {*} type
 * @param {*} key
 * @param {string|object} ref
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @param {*} owner
 * @param {*} props
 * @internal
 */
var ReactElement = function (type, key, ref, self, source, owner, props) {
  var element = {
    // This tag allow us to uniquely identify this as a React Element
    $$typeof: REACT_ELEMENT_TYPE,

    // Built-in properties that belong on the element
    type: type,
    key: key,
    ref: ref,
    props: props,

    // Record the component responsible for creating this element.
    _owner: owner
  };

  if (process.env.NODE_ENV !== 'production') {
    // The validation flag is currently mutative. We put it on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    element._store = {};

    // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.
    if (canDefineProperty) {
      Object.defineProperty(element._store, 'validated', {
        configurable: false,
        enumerable: false,
        writable: true,
        value: false
      });
      // self and source are DEV only properties.
      Object.defineProperty(element, '_self', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: self
      });
      // Two elements created in two different places should be considered
      // equal for testing purposes and therefore we hide it from enumeration.
      Object.defineProperty(element, '_source', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: source
      });
    } else {
      element._store.validated = false;
      element._self = self;
      element._source = source;
    }
    Object.freeze(element.props);
    Object.freeze(element);
  }

  return element;
};

ReactElement.createElement = function (type, config, children) {
  var propName;

  // Reserved names are extracted
  var props = {};

  var key = null;
  var ref = null;
  var self = null;
  var source = null;

  if (config != null) {
    ref = config.ref === undefined ? null : config.ref;
    key = config.key === undefined ? null : '' + config.key;
    self = config.__self === undefined ? null : config.__self;
    source = config.__source === undefined ? null : config.__source;
    // Remaining properties are added to a new props object
    for (propName in config) {
      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  // Resolve default props
  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (typeof props[propName] === 'undefined') {
        props[propName] = defaultProps[propName];
      }
    }
  }

  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
};

ReactElement.createFactory = function (type) {
  var factory = ReactElement.createElement.bind(null, type);
  // Expose the type on the factory and the prototype so that it can be
  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
  // This should not be named `constructor` since this may not be the function
  // that created the element, and it may not even be a constructor.
  // Legacy hook TODO: Warn if this is accessed
  factory.type = type;
  return factory;
};

ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

  return newElement;
};

ReactElement.cloneAndReplaceProps = function (oldElement, newProps) {
  var newElement = ReactElement(oldElement.type, oldElement.key, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, newProps);

  if (process.env.NODE_ENV !== 'production') {
    // If the key on the original is valid, then the clone is valid
    newElement._store.validated = oldElement._store.validated;
  }

  return newElement;
};

ReactElement.cloneElement = function (element, config, children) {
  var propName;

  // Original props are copied
  var props = assign({}, element.props);

  // Reserved names are extracted
  var key = element.key;
  var ref = element.ref;
  // Self is preserved since the owner is preserved.
  var self = element._self;
  // Source is preserved since cloneElement is unlikely to be targeted by a
  // transpiler, and the original source is probably a better indicator of the
  // true owner.
  var source = element._source;

  // Owner will be preserved, unless ref is overridden
  var owner = element._owner;

  if (config != null) {
    if (config.ref !== undefined) {
      // Silently steal the ref from the parent.
      ref = config.ref;
      owner = ReactCurrentOwner.current;
    }
    if (config.key !== undefined) {
      key = '' + config.key;
    }
    // Remaining properties override existing props
    for (propName in config) {
      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  return ReactElement(element.type, key, ref, self, source, owner, props);
};

/**
 * @param {?object} object
 * @return {boolean} True if `object` is a valid component.
 * @final
 */
ReactElement.isValidElement = function (object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
};

module.exports = ReactElement;
}).call(this,require('_process'))
},{"./Object.assign":45,"./ReactCurrentOwner":57,"./canDefineProperty":127,"_process":21}],76:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElementValidator
 */

/**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */

'use strict';

var ReactElement = require('./ReactElement');
var ReactPropTypeLocations = require('./ReactPropTypeLocations');
var ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');
var ReactCurrentOwner = require('./ReactCurrentOwner');

var canDefineProperty = require('./canDefineProperty');
var getIteratorFn = require('./getIteratorFn');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

function getDeclarationErrorAddendum() {
  if (ReactCurrentOwner.current) {
    var name = ReactCurrentOwner.current.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */
var ownerHasKeyUseWarning = {};

var loggedTypeFailures = {};

/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */
function validateExplicitKey(element, parentType) {
  if (!element._store || element._store.validated || element.key != null) {
    return;
  }
  element._store.validated = true;

  var addenda = getAddendaForKeyUse('uniqueKey', element, parentType);
  if (addenda === null) {
    // we already showed the warning
    return;
  }
  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s%s', addenda.parentOrOwner || '', addenda.childOwner || '', addenda.url || '') : undefined;
}

/**
 * Shared warning and monitoring code for the key warnings.
 *
 * @internal
 * @param {string} messageType A key used for de-duping warnings.
 * @param {ReactElement} element Component that requires a key.
 * @param {*} parentType element's parent's type.
 * @returns {?object} A set of addenda to use in the warning message, or null
 * if the warning has already been shown before (and shouldn't be shown again).
 */
function getAddendaForKeyUse(messageType, element, parentType) {
  var addendum = getDeclarationErrorAddendum();
  if (!addendum) {
    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
    if (parentName) {
      addendum = ' Check the top-level render call using <' + parentName + '>.';
    }
  }

  var memoizer = ownerHasKeyUseWarning[messageType] || (ownerHasKeyUseWarning[messageType] = {});
  if (memoizer[addendum]) {
    return null;
  }
  memoizer[addendum] = true;

  var addenda = {
    parentOrOwner: addendum,
    url: ' See https://fb.me/react-warning-keys for more information.',
    childOwner: null
  };

  // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.
  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
    // Give the component that originally created this child.
    addenda.childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
  }

  return addenda;
}

/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */
function validateChildKeys(node, parentType) {
  if (typeof node !== 'object') {
    return;
  }
  if (Array.isArray(node)) {
    for (var i = 0; i < node.length; i++) {
      var child = node[i];
      if (ReactElement.isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (ReactElement.isValidElement(node)) {
    // This element was passed in a valid location.
    if (node._store) {
      node._store.validated = true;
    }
  } else if (node) {
    var iteratorFn = getIteratorFn(node);
    // Entry iterators provide implicit keys.
    if (iteratorFn) {
      if (iteratorFn !== node.entries) {
        var iterator = iteratorFn.call(node);
        var step;
        while (!(step = iterator.next()).done) {
          if (ReactElement.isValidElement(step.value)) {
            validateExplicitKey(step.value, parentType);
          }
        }
      }
    }
  }
}

/**
 * Assert that the props are valid
 *
 * @param {string} componentName Name of the component for error messages.
 * @param {object} propTypes Map of prop name to a ReactPropType
 * @param {object} props
 * @param {string} location e.g. "prop", "context", "child context"
 * @private
 */
function checkPropTypes(componentName, propTypes, props, location) {
  for (var propName in propTypes) {
    if (propTypes.hasOwnProperty(propName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        // This is intentionally an invariant that gets caught. It's the same
        // behavior as without this statement except with a better message.
        !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
        error = propTypes[propName](props, propName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
      } catch (ex) {
        error = ex;
      }
      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], propName, typeof error) : undefined;
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var addendum = getDeclarationErrorAddendum();
        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed propType: %s%s', error.message, addendum) : undefined;
      }
    }
  }
}

/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */
function validatePropTypes(element) {
  var componentClass = element.type;
  if (typeof componentClass !== 'function') {
    return;
  }
  var name = componentClass.displayName || componentClass.name;
  if (componentClass.propTypes) {
    checkPropTypes(name, componentClass.propTypes, element.props, ReactPropTypeLocations.prop);
  }
  if (typeof componentClass.getDefaultProps === 'function') {
    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : undefined;
  }
}

var ReactElementValidator = {

  createElement: function (type, props, children) {
    var validType = typeof type === 'string' || typeof type === 'function';
    // We warn in this case but don't throw. We expect the element creation to
    // succeed and there will likely be errors in render.
    process.env.NODE_ENV !== 'production' ? warning(validType, 'React.createElement: type should not be null, undefined, boolean, or ' + 'number. It should be a string (for DOM elements) or a ReactClass ' + '(for composite components).%s', getDeclarationErrorAddendum()) : undefined;

    var element = ReactElement.createElement.apply(this, arguments);

    // The result can be nullish if a mock or a custom function is used.
    // TODO: Drop this when these are no longer allowed as the type argument.
    if (element == null) {
      return element;
    }

    // Skip key warning if the type isn't valid since our key validation logic
    // doesn't expect a non-string/function type and can throw confusing errors.
    // We don't want exception behavior to differ between dev and prod.
    // (Rendering will throw with a helpful message and as soon as the type is
    // fixed, the key warnings will appear.)
    if (validType) {
      for (var i = 2; i < arguments.length; i++) {
        validateChildKeys(arguments[i], type);
      }
    }

    validatePropTypes(element);

    return element;
  },

  createFactory: function (type) {
    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
    // Legacy hook TODO: Warn if this is accessed
    validatedFactory.type = type;

    if (process.env.NODE_ENV !== 'production') {
      if (canDefineProperty) {
        Object.defineProperty(validatedFactory, 'type', {
          enumerable: false,
          get: function () {
            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : undefined;
            Object.defineProperty(this, 'type', {
              value: type
            });
            return type;
          }
        });
      }
    }

    return validatedFactory;
  },

  cloneElement: function (element, props, children) {
    var newElement = ReactElement.cloneElement.apply(this, arguments);
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], newElement.type);
    }
    validatePropTypes(newElement);
    return newElement;
  }

};

module.exports = ReactElementValidator;
}).call(this,require('_process'))
},{"./ReactCurrentOwner":57,"./ReactElement":75,"./ReactPropTypeLocationNames":95,"./ReactPropTypeLocations":96,"./canDefineProperty":127,"./getIteratorFn":138,"_process":21,"fbjs/lib/invariant":167,"fbjs/lib/warning":178}],77:[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEmptyComponent
 */

'use strict';

var ReactElement = require('./ReactElement');
var ReactEmptyComponentRegistry = require('./ReactEmptyComponentRegistry');
var ReactReconciler = require('./ReactReconciler');

var assign = require('./Object.assign');

var placeholderElement;

var ReactEmptyComponentInjection = {
  injectEmptyComponent: function (component) {
    placeholderElement = ReactElement.createElement(component);
  }
};

function registerNullComponentID() {
  ReactEmptyComponentRegistry.registerNullComponentID(this._rootNodeID);
}

var ReactEmptyComponent = function (instantiate) {
  this._currentElement = null;
  this._rootNodeID = null;
  this._renderedComponent = instantiate(placeholderElement);
};
assign(ReactEmptyComponent.prototype, {
  construct: function (element) {},
  mountComponent: function (rootID, transaction, context) {
    transaction.getReactMountReady().enqueue(registerNullComponentID, this);
    this._rootNodeID = rootID;
    return ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, context);
  },
  receiveComponent: function () {},
  unmountComponent: function (rootID, transaction, context) {
    ReactReconciler.unmountComponent(this._renderedComponent);
    ReactEmptyComponentRegistry.deregisterNullComponentID(this._rootNodeID);
    this._rootNodeID = null;
    this._renderedComponent = null;
  }
});

ReactEmptyComponent.injection = ReactEmptyComponentInjection;

module.exports = ReactEmptyComponent;
},{"./Object.assign":45,"./ReactElement":75,"./ReactEmptyComponentRegistry":78,"./ReactReconciler":99}],78:[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEmptyComponentRegistry
 */

'use strict';

// This registry keeps track of the React IDs of the components that rendered to
// `null` (in reality a placeholder such as `noscript`)
var nullComponentIDsRegistry = {};

/**
 * @param {string} id Component's `_rootNodeID`.
 * @return {boolean} True if the component is rendered to null.
 */
function isNullComponentID(id) {
  return !!nullComponentIDsRegistry[id];
}

/**
 * Mark the component as having rendered to null.
 * @param {string} id Component's `_rootNodeID`.
 */
function registerNullComponentID(id) {
  nullComponentIDsRegistry[id] = true;
}

/**
 * Unmark the component as having rendered to null: it renders to something now.
 * @param {string} id Component's `_rootNodeID`.
 */
function deregisterNullComponentID(id) {
  delete nullComponentIDsRegistry[id];
}

var ReactEmptyComponentRegistry = {
  isNullComponentID: isNullComponentID,
  registerNullComponentID: registerNullComponentID,
  deregisterNullComponentID: deregisterNullComponentID
};

module.exports = ReactEmptyComponentRegistry;
},{}],79:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactErrorUtils
 * @typechecks
 */

'use strict';

var caughtError = null;

/**
 * Call a function while guarding against errors that happens within it.
 *
 * @param {?String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} a First argument
 * @param {*} b Second argument
 */
function invokeGuardedCallback(name, func, a, b) {
  try {
    return func(a, b);
  } catch (x) {
    if (caughtError === null) {
      caughtError = x;
    }
    return undefined;
  }
}

var ReactErrorUtils = {
  invokeGuardedCallback: invokeGuardedCallback,

  /**
   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
   * handler are sure to be rethrown by rethrowCaughtError.
   */
  invokeGuardedCallbackWithCatch: invokeGuardedCallback,

  /**
   * During execution of guarded functions we will capture the first error which
   * we will rethrow to be handled by the top level error handler.
   */
  rethrowCaughtError: function () {
    if (caughtError) {
      var error = caughtError;
      caughtError = null;
      throw error;
    }
  }
};

if (process.env.NODE_ENV !== 'production') {
  /**
   * To help development we can get better devtools integration by simulating a
   * real browser event.
   */
  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
    var fakeNode = document.createElement('react');
    ReactErrorUtils.invokeGuardedCallback = function (name, func, a, b) {
      var boundFunc = func.bind(null, a, b);
      var evtType = 'react-' + name;
      fakeNode.addEventListener(evtType, boundFunc, false);
      var evt = document.createEvent('Event');
      evt.initEvent(evtType, false, false);
      fakeNode.dispatchEvent(evt);
      fakeNode.removeEventListener(evtType, boundFunc, false);
    };
  }
}

module.exports = ReactErrorUtils;
}).call(this,require('_process'))
},{"_process":21}],80:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventEmitterMixin
 */

'use strict';

var EventPluginHub = require('./EventPluginHub');

function runEventQueueInBatch(events) {
  EventPluginHub.enqueueEvents(events);
  EventPluginHub.processEventQueue(false);
}

var ReactEventEmitterMixin = {

  /**
   * Streams a fired top-level event to `EventPluginHub` where plugins have the
   * opportunity to create `ReactEvent`s to be dispatched.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {object} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native environment event.
   */
  handleTopLevel: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
    var events = EventPluginHub.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
    runEventQueueInBatch(events);
  }
};

module.exports = ReactEventEmitterMixin;
},{"./EventPluginHub":38}],81:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventListener
 * @typechecks static-only
 */

'use strict';

var EventListener = require('fbjs/lib/EventListener');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var PooledClass = require('./PooledClass');
var ReactInstanceHandles = require('./ReactInstanceHandles');
var ReactMount = require('./ReactMount');
var ReactUpdates = require('./ReactUpdates');

var assign = require('./Object.assign');
var getEventTarget = require('./getEventTarget');
var getUnboundedScrollPosition = require('fbjs/lib/getUnboundedScrollPosition');

var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

/**
 * Finds the parent React component of `node`.
 *
 * @param {*} node
 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
 *                           is not nested.
 */
function findParent(node) {
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.
  var nodeID = ReactMount.getID(node);
  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
  var container = ReactMount.findReactContainerForID(rootID);
  var parent = ReactMount.getFirstReactDOM(container);
  return parent;
}

// Used to store ancestor hierarchy in top level callback
function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
  this.topLevelType = topLevelType;
  this.nativeEvent = nativeEvent;
  this.ancestors = [];
}
assign(TopLevelCallbackBookKeeping.prototype, {
  destructor: function () {
    this.topLevelType = null;
    this.nativeEvent = null;
    this.ancestors.length = 0;
  }
});
PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);

function handleTopLevelImpl(bookKeeping) {
  // TODO: Re-enable event.path handling
  //
  // if (bookKeeping.nativeEvent.path && bookKeeping.nativeEvent.path.length > 1) {
  //   // New browsers have a path attribute on native events
  //   handleTopLevelWithPath(bookKeeping);
  // } else {
  //   // Legacy browsers don't have a path attribute on native events
  //   handleTopLevelWithoutPath(bookKeeping);
  // }

  void handleTopLevelWithPath; // temporarily unused
  handleTopLevelWithoutPath(bookKeeping);
}

// Legacy browsers don't have a path attribute on native events
function handleTopLevelWithoutPath(bookKeeping) {
  var topLevelTarget = ReactMount.getFirstReactDOM(getEventTarget(bookKeeping.nativeEvent)) || window;

  // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.
  var ancestor = topLevelTarget;
  while (ancestor) {
    bookKeeping.ancestors.push(ancestor);
    ancestor = findParent(ancestor);
  }

  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
    topLevelTarget = bookKeeping.ancestors[i];
    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, topLevelTarget, topLevelTargetID, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
  }
}

// New browsers have a path attribute on native events
function handleTopLevelWithPath(bookKeeping) {
  var path = bookKeeping.nativeEvent.path;
  var currentNativeTarget = path[0];
  var eventsFired = 0;
  for (var i = 0; i < path.length; i++) {
    var currentPathElement = path[i];
    if (currentPathElement.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE) {
      currentNativeTarget = path[i + 1];
    }
    // TODO: slow
    var reactParent = ReactMount.getFirstReactDOM(currentPathElement);
    if (reactParent === currentPathElement) {
      var currentPathElementID = ReactMount.getID(currentPathElement);
      var newRootID = ReactInstanceHandles.getReactRootIDFromNodeID(currentPathElementID);
      bookKeeping.ancestors.push(currentPathElement);

      var topLevelTargetID = ReactMount.getID(currentPathElement) || '';
      eventsFired++;
      ReactEventListener._handleTopLevel(bookKeeping.topLevelType, currentPathElement, topLevelTargetID, bookKeeping.nativeEvent, currentNativeTarget);

      // Jump to the root of this React render tree
      while (currentPathElementID !== newRootID) {
        i++;
        currentPathElement = path[i];
        currentPathElementID = ReactMount.getID(currentPathElement);
      }
    }
  }
  if (eventsFired === 0) {
    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, window, '', bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
  }
}

function scrollValueMonitor(cb) {
  var scrollPosition = getUnboundedScrollPosition(window);
  cb(scrollPosition);
}

var ReactEventListener = {
  _enabled: true,
  _handleTopLevel: null,

  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

  setHandleTopLevel: function (handleTopLevel) {
    ReactEventListener._handleTopLevel = handleTopLevel;
  },

  setEnabled: function (enabled) {
    ReactEventListener._enabled = !!enabled;
  },

  isEnabled: function () {
    return ReactEventListener._enabled;
  },

  /**
   * Traps top-level events by using event bubbling.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {?object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return null;
    }
    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
  },

  /**
   * Traps a top-level event by using event capturing.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {?object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return null;
    }
    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
  },

  monitorScrollValue: function (refresh) {
    var callback = scrollValueMonitor.bind(null, refresh);
    EventListener.listen(window, 'scroll', callback);
  },

  dispatchEvent: function (topLevelType, nativeEvent) {
    if (!ReactEventListener._enabled) {
      return;
    }

    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
    try {
      // Event queue being processed in the same cycle allows
      // `preventDefault`.
      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
    } finally {
      TopLevelCallbackBookKeeping.release(bookKeeping);
    }
  }
};

module.exports = ReactEventListener;
},{"./Object.assign":45,"./PooledClass":46,"./ReactInstanceHandles":84,"./ReactMount":88,"./ReactUpdates":106,"./getEventTarget":137,"fbjs/lib/EventListener":152,"fbjs/lib/ExecutionEnvironment":153,"fbjs/lib/getUnboundedScrollPosition":164}],82:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInjection
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var EventPluginHub = require('./EventPluginHub');
var ReactComponentEnvironment = require('./ReactComponentEnvironment');
var ReactClass = require('./ReactClass');
var ReactEmptyComponent = require('./ReactEmptyComponent');
var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');
var ReactNativeComponent = require('./ReactNativeComponent');
var ReactPerf = require('./ReactPerf');
var ReactRootIndex = require('./ReactRootIndex');
var ReactUpdates = require('./ReactUpdates');

var ReactInjection = {
  Component: ReactComponentEnvironment.injection,
  Class: ReactClass.injection,
  DOMProperty: DOMProperty.injection,
  EmptyComponent: ReactEmptyComponent.injection,
  EventPluginHub: EventPluginHub.injection,
  EventEmitter: ReactBrowserEventEmitter.injection,
  NativeComponent: ReactNativeComponent.injection,
  Perf: ReactPerf.injection,
  RootIndex: ReactRootIndex.injection,
  Updates: ReactUpdates.injection
};

module.exports = ReactInjection;
},{"./DOMProperty":32,"./EventPluginHub":38,"./ReactBrowserEventEmitter":49,"./ReactClass":52,"./ReactComponentEnvironment":55,"./ReactEmptyComponent":77,"./ReactNativeComponent":91,"./ReactPerf":94,"./ReactRootIndex":101,"./ReactUpdates":106}],83:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInputSelection
 */

'use strict';

var ReactDOMSelection = require('./ReactDOMSelection');

var containsNode = require('fbjs/lib/containsNode');
var focusNode = require('fbjs/lib/focusNode');
var getActiveElement = require('fbjs/lib/getActiveElement');

function isInDocument(node) {
  return containsNode(document.documentElement, node);
}

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */
var ReactInputSelection = {

  hasSelectionCapabilities: function (elem) {
    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
  },

  getSelectionInformation: function () {
    var focusedElem = getActiveElement();
    return {
      focusedElem: focusedElem,
      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
    };
  },

  /**
   * @restoreSelection: If any selection information was potentially lost,
   * restore it. This is useful when performing operations that could remove dom
   * nodes and place them back in, resulting in focus being lost.
   */
  restoreSelection: function (priorSelectionInformation) {
    var curFocusedElem = getActiveElement();
    var priorFocusedElem = priorSelectionInformation.focusedElem;
    var priorSelectionRange = priorSelectionInformation.selectionRange;
    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
      }
      focusNode(priorFocusedElem);
    }
  },

  /**
   * @getSelection: Gets the selection bounds of a focused textarea, input or
   * contentEditable node.
   * -@input: Look up selection bounds of this input
   * -@return {start: selectionStart, end: selectionEnd}
   */
  getSelection: function (input) {
    var selection;

    if ('selectionStart' in input) {
      // Modern browser with input or textarea.
      selection = {
        start: input.selectionStart,
        end: input.selectionEnd
      };
    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
      // IE8 input.
      var range = document.selection.createRange();
      // There can only be one selection per document in IE, so it must
      // be in our element.
      if (range.parentElement() === input) {
        selection = {
          start: -range.moveStart('character', -input.value.length),
          end: -range.moveEnd('character', -input.value.length)
        };
      }
    } else {
      // Content editable or old IE textarea.
      selection = ReactDOMSelection.getOffsets(input);
    }

    return selection || { start: 0, end: 0 };
  },

  /**
   * @setSelection: Sets the selection bounds of a textarea or input and focuses
   * the input.
   * -@input     Set selection bounds of this input or textarea
   * -@offsets   Object of same form that is returned from get*
   */
  setSelection: function (input, offsets) {
    var start = offsets.start;
    var end = offsets.end;
    if (typeof end === 'undefined') {
      end = start;
    }

    if ('selectionStart' in input) {
      input.selectionStart = start;
      input.selectionEnd = Math.min(end, input.value.length);
    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
      var range = input.createTextRange();
      range.collapse(true);
      range.moveStart('character', start);
      range.moveEnd('character', end - start);
      range.select();
    } else {
      ReactDOMSelection.setOffsets(input, offsets);
    }
  }
};

module.exports = ReactInputSelection;
},{"./ReactDOMSelection":67,"fbjs/lib/containsNode":156,"fbjs/lib/focusNode":161,"fbjs/lib/getActiveElement":162}],84:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInstanceHandles
 * @typechecks static-only
 */

'use strict';

var ReactRootIndex = require('./ReactRootIndex');

var invariant = require('fbjs/lib/invariant');

var SEPARATOR = '.';
var SEPARATOR_LENGTH = SEPARATOR.length;

/**
 * Maximum depth of traversals before we consider the possibility of a bad ID.
 */
var MAX_TREE_DEPTH = 10000;

/**
 * Creates a DOM ID prefix to use when mounting React components.
 *
 * @param {number} index A unique integer
 * @return {string} React root ID.
 * @internal
 */
function getReactRootIDString(index) {
  return SEPARATOR + index.toString(36);
}

/**
 * Checks if a character in the supplied ID is a separator or the end.
 *
 * @param {string} id A React DOM ID.
 * @param {number} index Index of the character to check.
 * @return {boolean} True if the character is a separator or end of the ID.
 * @private
 */
function isBoundary(id, index) {
  return id.charAt(index) === SEPARATOR || index === id.length;
}

/**
 * Checks if the supplied string is a valid React DOM ID.
 *
 * @param {string} id A React DOM ID, maybe.
 * @return {boolean} True if the string is a valid React DOM ID.
 * @private
 */
function isValidID(id) {
  return id === '' || id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR;
}

/**
 * Checks if the first ID is an ancestor of or equal to the second ID.
 *
 * @param {string} ancestorID
 * @param {string} descendantID
 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
 * @internal
 */
function isAncestorIDOf(ancestorID, descendantID) {
  return descendantID.indexOf(ancestorID) === 0 && isBoundary(descendantID, ancestorID.length);
}

/**
 * Gets the parent ID of the supplied React DOM ID, `id`.
 *
 * @param {string} id ID of a component.
 * @return {string} ID of the parent, or an empty string.
 * @private
 */
function getParentID(id) {
  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
}

/**
 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
 * supplied `destinationID`. If they are equal, the ID is returned.
 *
 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
 * @param {string} destinationID ID of the destination node.
 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
 * @private
 */
function getNextDescendantID(ancestorID, destinationID) {
  !(isValidID(ancestorID) && isValidID(destinationID)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(%s, %s): Received an invalid React DOM ID.', ancestorID, destinationID) : invariant(false) : undefined;
  !isAncestorIDOf(ancestorID, destinationID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(...): React has made an invalid assumption about ' + 'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.', ancestorID, destinationID) : invariant(false) : undefined;
  if (ancestorID === destinationID) {
    return ancestorID;
  }
  // Skip over the ancestor and the immediate separator. Traverse until we hit
  // another separator or we reach the end of `destinationID`.
  var start = ancestorID.length + SEPARATOR_LENGTH;
  var i;
  for (i = start; i < destinationID.length; i++) {
    if (isBoundary(destinationID, i)) {
      break;
    }
  }
  return destinationID.substr(0, i);
}

/**
 * Gets the nearest common ancestor ID of two IDs.
 *
 * Using this ID scheme, the nearest common ancestor ID is the longest common
 * prefix of the two IDs that immediately preceded a "marker" in both strings.
 *
 * @param {string} oneID
 * @param {string} twoID
 * @return {string} Nearest common ancestor ID, or the empty string if none.
 * @private
 */
function getFirstCommonAncestorID(oneID, twoID) {
  var minLength = Math.min(oneID.length, twoID.length);
  if (minLength === 0) {
    return '';
  }
  var lastCommonMarkerIndex = 0;
  // Use `<=` to traverse until the "EOL" of the shorter string.
  for (var i = 0; i <= minLength; i++) {
    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
      lastCommonMarkerIndex = i;
    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
      break;
    }
  }
  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
  !isValidID(longestCommonID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s', oneID, twoID, longestCommonID) : invariant(false) : undefined;
  return longestCommonID;
}

/**
 * Traverses the parent path between two IDs (either up or down). The IDs must
 * not be the same, and there must exist a parent path between them. If the
 * callback returns `false`, traversal is stopped.
 *
 * @param {?string} start ID at which to start traversal.
 * @param {?string} stop ID at which to end traversal.
 * @param {function} cb Callback to invoke each ID with.
 * @param {*} arg Argument to invoke the callback with.
 * @param {?boolean} skipFirst Whether or not to skip the first node.
 * @param {?boolean} skipLast Whether or not to skip the last node.
 * @private
 */
function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
  start = start || '';
  stop = stop || '';
  !(start !== stop) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.', start) : invariant(false) : undefined;
  var traverseUp = isAncestorIDOf(stop, start);
  !(traverseUp || isAncestorIDOf(start, stop)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' + 'not have a parent path.', start, stop) : invariant(false) : undefined;
  // Traverse from `start` to `stop` one depth at a time.
  var depth = 0;
  var traverse = traverseUp ? getParentID : getNextDescendantID;
  for (var id = start;; /* until break */id = traverse(id, stop)) {
    var ret;
    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
      ret = cb(id, traverseUp, arg);
    }
    if (ret === false || id === stop) {
      // Only break //after// visiting `stop`.
      break;
    }
    !(depth++ < MAX_TREE_DEPTH) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' + 'traversing the React DOM ID tree. This may be due to malformed IDs: %s', start, stop, id) : invariant(false) : undefined;
  }
}

/**
 * Manages the IDs assigned to DOM representations of React components. This
 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
 * order to simulate events).
 *
 * @internal
 */
var ReactInstanceHandles = {

  /**
   * Constructs a React root ID
   * @return {string} A React root ID.
   */
  createReactRootID: function () {
    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
  },

  /**
   * Constructs a React ID by joining a root ID with a name.
   *
   * @param {string} rootID Root ID of a parent component.
   * @param {string} name A component's name (as flattened children).
   * @return {string} A React ID.
   * @internal
   */
  createReactID: function (rootID, name) {
    return rootID + name;
  },

  /**
   * Gets the DOM ID of the React component that is the root of the tree that
   * contains the React component with the supplied DOM ID.
   *
   * @param {string} id DOM ID of a React component.
   * @return {?string} DOM ID of the React component that is the root.
   * @internal
   */
  getReactRootIDFromNodeID: function (id) {
    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
      var index = id.indexOf(SEPARATOR, 1);
      return index > -1 ? id.substr(0, index) : id;
    }
    return null;
  },

  /**
   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
   * should would receive a `mouseEnter` or `mouseLeave` event.
   *
   * NOTE: Does not invoke the callback on the nearest common ancestor because
   * nothing "entered" or "left" that element.
   *
   * @param {string} leaveID ID being left.
   * @param {string} enterID ID being entered.
   * @param {function} cb Callback to invoke on each entered/left ID.
   * @param {*} upArg Argument to invoke the callback with on left IDs.
   * @param {*} downArg Argument to invoke the callback with on entered IDs.
   * @internal
   */
  traverseEnterLeave: function (leaveID, enterID, cb, upArg, downArg) {
    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
    if (ancestorID !== leaveID) {
      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
    }
    if (ancestorID !== enterID) {
      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
    }
  },

  /**
   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseTwoPhase: function (targetID, cb, arg) {
    if (targetID) {
      traverseParentPath('', targetID, cb, arg, true, false);
      traverseParentPath(targetID, '', cb, arg, false, true);
    }
  },

  /**
   * Same as `traverseTwoPhase` but skips the `targetID`.
   */
  traverseTwoPhaseSkipTarget: function (targetID, cb, arg) {
    if (targetID) {
      traverseParentPath('', targetID, cb, arg, true, true);
      traverseParentPath(targetID, '', cb, arg, true, true);
    }
  },

  /**
   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
   * example, passing `.0.$row-0.1` would result in `cb` getting called
   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseAncestors: function (targetID, cb, arg) {
    traverseParentPath('', targetID, cb, arg, true, false);
  },

  getFirstCommonAncestorID: getFirstCommonAncestorID,

  /**
   * Exposed for unit testing.
   * @private
   */
  _getNextDescendantID: getNextDescendantID,

  isAncestorIDOf: isAncestorIDOf,

  SEPARATOR: SEPARATOR

};

module.exports = ReactInstanceHandles;
}).call(this,require('_process'))
},{"./ReactRootIndex":101,"_process":21,"fbjs/lib/invariant":167}],85:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInstanceMap
 */

'use strict';

/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 */

// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
var ReactInstanceMap = {

  /**
   * This API should be called `delete` but we'd have to make sure to always
   * transform these to strings for IE support. When this transform is fully
   * supported we can rename it.
   */
  remove: function (key) {
    key._reactInternalInstance = undefined;
  },

  get: function (key) {
    return key._reactInternalInstance;
  },

  has: function (key) {
    return key._reactInternalInstance !== undefined;
  },

  set: function (key, value) {
    key._reactInternalInstance = value;
  }

};

module.exports = ReactInstanceMap;
},{}],86:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactIsomorphic
 */

'use strict';

var ReactChildren = require('./ReactChildren');
var ReactComponent = require('./ReactComponent');
var ReactClass = require('./ReactClass');
var ReactDOMFactories = require('./ReactDOMFactories');
var ReactElement = require('./ReactElement');
var ReactElementValidator = require('./ReactElementValidator');
var ReactPropTypes = require('./ReactPropTypes');
var ReactVersion = require('./ReactVersion');

var assign = require('./Object.assign');
var onlyChild = require('./onlyChild');

var createElement = ReactElement.createElement;
var createFactory = ReactElement.createFactory;
var cloneElement = ReactElement.cloneElement;

if (process.env.NODE_ENV !== 'production') {
  createElement = ReactElementValidator.createElement;
  createFactory = ReactElementValidator.createFactory;
  cloneElement = ReactElementValidator.cloneElement;
}

var React = {

  // Modern

  Children: {
    map: ReactChildren.map,
    forEach: ReactChildren.forEach,
    count: ReactChildren.count,
    toArray: ReactChildren.toArray,
    only: onlyChild
  },

  Component: ReactComponent,

  createElement: createElement,
  cloneElement: cloneElement,
  isValidElement: ReactElement.isValidElement,

  // Classic

  PropTypes: ReactPropTypes,
  createClass: ReactClass.createClass,
  createFactory: createFactory,
  createMixin: function (mixin) {
    // Currently a noop. Will be used to validate and trace mixins.
    return mixin;
  },

  // This looks DOM specific but these are actually isomorphic helpers
  // since they are just generating DOM strings.
  DOM: ReactDOMFactories,

  version: ReactVersion,

  // Hook for JSX spread, don't use this for anything else.
  __spread: assign
};

module.exports = React;
}).call(this,require('_process'))
},{"./Object.assign":45,"./ReactChildren":51,"./ReactClass":52,"./ReactComponent":53,"./ReactDOMFactories":61,"./ReactElement":75,"./ReactElementValidator":76,"./ReactPropTypes":97,"./ReactVersion":107,"./onlyChild":144,"_process":21}],87:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMarkupChecksum
 */

'use strict';

var adler32 = require('./adler32');

var TAG_END = /\/?>/;

var ReactMarkupChecksum = {
  CHECKSUM_ATTR_NAME: 'data-react-checksum',

  /**
   * @param {string} markup Markup string
   * @return {string} Markup string with checksum attribute attached
   */
  addChecksumToMarkup: function (markup) {
    var checksum = adler32(markup);

    // Add checksum (handle both parent tags and self-closing tags)
    return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
  },

  /**
   * @param {string} markup to use
   * @param {DOMElement} element root React element
   * @returns {boolean} whether or not the markup is the same
   */
  canReuseMarkup: function (markup, element) {
    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
    var markupChecksum = adler32(markup);
    return markupChecksum === existingChecksum;
  }
};

module.exports = ReactMarkupChecksum;
},{"./adler32":126}],88:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMount
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');
var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactDOMFeatureFlags = require('./ReactDOMFeatureFlags');
var ReactElement = require('./ReactElement');
var ReactEmptyComponentRegistry = require('./ReactEmptyComponentRegistry');
var ReactInstanceHandles = require('./ReactInstanceHandles');
var ReactInstanceMap = require('./ReactInstanceMap');
var ReactMarkupChecksum = require('./ReactMarkupChecksum');
var ReactPerf = require('./ReactPerf');
var ReactReconciler = require('./ReactReconciler');
var ReactUpdateQueue = require('./ReactUpdateQueue');
var ReactUpdates = require('./ReactUpdates');

var assign = require('./Object.assign');
var emptyObject = require('fbjs/lib/emptyObject');
var containsNode = require('fbjs/lib/containsNode');
var instantiateReactComponent = require('./instantiateReactComponent');
var invariant = require('fbjs/lib/invariant');
var setInnerHTML = require('./setInnerHTML');
var shouldUpdateReactComponent = require('./shouldUpdateReactComponent');
var validateDOMNesting = require('./validateDOMNesting');
var warning = require('fbjs/lib/warning');

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var nodeCache = {};

var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;
var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

var ownerDocumentContextKey = '__ReactMount_ownerDocument$' + Math.random().toString(36).slice(2);

/** Mapping from reactRootID to React component instance. */
var instancesByReactRootID = {};

/** Mapping from reactRootID to `container` nodes. */
var containersByReactRootID = {};

if (process.env.NODE_ENV !== 'production') {
  /** __DEV__-only mapping from reactRootID to root elements. */
  var rootElementsByReactRootID = {};
}

// Used to store breadth-first search state in findComponentRoot.
var findComponentRootReusableArray = [];

/**
 * Finds the index of the first character
 * that's not common between the two given strings.
 *
 * @return {number} the index of the character where the strings diverge
 */
function firstDifferenceIndex(string1, string2) {
  var minLen = Math.min(string1.length, string2.length);
  for (var i = 0; i < minLen; i++) {
    if (string1.charAt(i) !== string2.charAt(i)) {
      return i;
    }
  }
  return string1.length === string2.length ? -1 : minLen;
}

/**
 * @param {DOMElement|DOMDocument} container DOM element that may contain
 * a React component
 * @return {?*} DOM element that may have the reactRoot ID, or null.
 */
function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

/**
 * @param {DOMElement} container DOM element that may contain a React component.
 * @return {?string} A "reactRoot" ID, if a React component is rendered.
 */
function getReactRootID(container) {
  var rootElement = getReactRootElementInContainer(container);
  return rootElement && ReactMount.getID(rootElement);
}

/**
 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
 * element can return its control whose name or ID equals ATTR_NAME. All
 * DOM nodes support `getAttributeNode` but this can also get called on
 * other objects so just return '' if we're given something other than a
 * DOM node (such as window).
 *
 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
 * @return {string} ID of the supplied `domNode`.
 */
function getID(node) {
  var id = internalGetID(node);
  if (id) {
    if (nodeCache.hasOwnProperty(id)) {
      var cached = nodeCache[id];
      if (cached !== node) {
        !!isValid(cached, id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Two valid but unequal nodes with the same `%s`: %s', ATTR_NAME, id) : invariant(false) : undefined;

        nodeCache[id] = node;
      }
    } else {
      nodeCache[id] = node;
    }
  }

  return id;
}

function internalGetID(node) {
  // If node is something like a window, document, or text node, none of
  // which support attributes or a .getAttribute method, gracefully return
  // the empty string, as if the attribute were missing.
  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
}

/**
 * Sets the React-specific ID of the given node.
 *
 * @param {DOMElement} node The DOM node whose ID will be set.
 * @param {string} id The value of the ID attribute.
 */
function setID(node, id) {
  var oldID = internalGetID(node);
  if (oldID !== id) {
    delete nodeCache[oldID];
  }
  node.setAttribute(ATTR_NAME, id);
  nodeCache[id] = node;
}

/**
 * Finds the node with the supplied React-generated DOM ID.
 *
 * @param {string} id A React-generated DOM ID.
 * @return {DOMElement} DOM node with the suppled `id`.
 * @internal
 */
function getNode(id) {
  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
    nodeCache[id] = ReactMount.findReactNodeByID(id);
  }
  return nodeCache[id];
}

/**
 * Finds the node with the supplied public React instance.
 *
 * @param {*} instance A public React instance.
 * @return {?DOMElement} DOM node with the suppled `id`.
 * @internal
 */
function getNodeFromInstance(instance) {
  var id = ReactInstanceMap.get(instance)._rootNodeID;
  if (ReactEmptyComponentRegistry.isNullComponentID(id)) {
    return null;
  }
  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
    nodeCache[id] = ReactMount.findReactNodeByID(id);
  }
  return nodeCache[id];
}

/**
 * A node is "valid" if it is contained by a currently mounted container.
 *
 * This means that the node does not have to be contained by a document in
 * order to be considered valid.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @param {string} id The expected ID of the node.
 * @return {boolean} Whether the node is contained by a mounted container.
 */
function isValid(node, id) {
  if (node) {
    !(internalGetID(node) === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Unexpected modification of `%s`', ATTR_NAME) : invariant(false) : undefined;

    var container = ReactMount.findReactContainerForID(id);
    if (container && containsNode(container, node)) {
      return true;
    }
  }

  return false;
}

/**
 * Causes the cache to forget about one React-specific ID.
 *
 * @param {string} id The ID to forget.
 */
function purgeID(id) {
  delete nodeCache[id];
}

var deepestNodeSoFar = null;
function findDeepestCachedAncestorImpl(ancestorID) {
  var ancestor = nodeCache[ancestorID];
  if (ancestor && isValid(ancestor, ancestorID)) {
    deepestNodeSoFar = ancestor;
  } else {
    // This node isn't populated in the cache, so presumably none of its
    // descendants are. Break out of the loop.
    return false;
  }
}

/**
 * Return the deepest cached node whose ID is a prefix of `targetID`.
 */
function findDeepestCachedAncestor(targetID) {
  deepestNodeSoFar = null;
  ReactInstanceHandles.traverseAncestors(targetID, findDeepestCachedAncestorImpl);

  var foundNode = deepestNodeSoFar;
  deepestNodeSoFar = null;
  return foundNode;
}

/**
 * Mounts this component and inserts it into the DOM.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {string} rootID DOM ID of the root node.
 * @param {DOMElement} container DOM element to mount into.
 * @param {ReactReconcileTransaction} transaction
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
function mountComponentIntoNode(componentInstance, rootID, container, transaction, shouldReuseMarkup, context) {
  if (ReactDOMFeatureFlags.useCreateElement) {
    context = assign({}, context);
    if (container.nodeType === DOC_NODE_TYPE) {
      context[ownerDocumentContextKey] = container;
    } else {
      context[ownerDocumentContextKey] = container.ownerDocument;
    }
  }
  if (process.env.NODE_ENV !== 'production') {
    if (context === emptyObject) {
      context = {};
    }
    var tag = container.nodeName.toLowerCase();
    context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(null, tag, null);
  }
  var markup = ReactReconciler.mountComponent(componentInstance, rootID, transaction, context);
  componentInstance._renderedComponent._topLevelWrapper = componentInstance;
  ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup, transaction);
}

/**
 * Batched mount.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {string} rootID DOM ID of the root node.
 * @param {DOMElement} container DOM element to mount into.
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
function batchedMountComponentIntoNode(componentInstance, rootID, container, shouldReuseMarkup, context) {
  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
  /* forceHTML */shouldReuseMarkup);
  transaction.perform(mountComponentIntoNode, null, componentInstance, rootID, container, transaction, shouldReuseMarkup, context);
  ReactUpdates.ReactReconcileTransaction.release(transaction);
}

/**
 * Unmounts a component and removes it from the DOM.
 *
 * @param {ReactComponent} instance React component instance.
 * @param {DOMElement} container DOM element to unmount from.
 * @final
 * @internal
 * @see {ReactMount.unmountComponentAtNode}
 */
function unmountComponentFromNode(instance, container) {
  ReactReconciler.unmountComponent(instance);

  if (container.nodeType === DOC_NODE_TYPE) {
    container = container.documentElement;
  }

  // http://jsperf.com/emptying-a-node
  while (container.lastChild) {
    container.removeChild(container.lastChild);
  }
}

/**
 * True if the supplied DOM node has a direct React-rendered child that is
 * not a React root element. Useful for warning in `render`,
 * `unmountComponentAtNode`, etc.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM element contains a direct child that was
 * rendered by React but is not a root element.
 * @internal
 */
function hasNonRootReactChild(node) {
  var reactRootID = getReactRootID(node);
  return reactRootID ? reactRootID !== ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID) : false;
}

/**
 * Returns the first (deepest) ancestor of a node which is rendered by this copy
 * of React.
 */
function findFirstReactDOMImpl(node) {
  // This node might be from another React instance, so we make sure not to
  // examine the node cache here
  for (; node && node.parentNode !== node; node = node.parentNode) {
    if (node.nodeType !== 1) {
      // Not a DOMElement, therefore not a React component
      continue;
    }
    var nodeID = internalGetID(node);
    if (!nodeID) {
      continue;
    }
    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);

    // If containersByReactRootID contains the container we find by crawling up
    // the tree, we know that this instance of React rendered the node.
    // nb. isValid's strategy (with containsNode) does not work because render
    // trees may be nested and we don't want a false positive in that case.
    var current = node;
    var lastID;
    do {
      lastID = internalGetID(current);
      current = current.parentNode;
      if (current == null) {
        // The passed-in node has been detached from the container it was
        // originally rendered into.
        return null;
      }
    } while (lastID !== reactRootID);

    if (current === containersByReactRootID[reactRootID]) {
      return node;
    }
  }
  return null;
}

/**
 * Temporary (?) hack so that we can store all top-level pending updates on
 * composites instead of having to worry about different types of components
 * here.
 */
var TopLevelWrapper = function () {};
TopLevelWrapper.prototype.isReactComponent = {};
if (process.env.NODE_ENV !== 'production') {
  TopLevelWrapper.displayName = 'TopLevelWrapper';
}
TopLevelWrapper.prototype.render = function () {
  // this.props is actually a ReactElement
  return this.props;
};

/**
 * Mounting is the process of initializing a React component by creating its
 * representative DOM elements and inserting them into a supplied `container`.
 * Any prior content inside `container` is destroyed in the process.
 *
 *   ReactMount.render(
 *     component,
 *     document.getElementById('container')
 *   );
 *
 *   <div id="container">                   <-- Supplied `container`.
 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
 *       // ...                                 component.
 *     </div>
 *   </div>
 *
 * Inside of `container`, the first element rendered is the "reactRoot".
 */
var ReactMount = {

  TopLevelWrapper: TopLevelWrapper,

  /** Exposed for debugging purposes **/
  _instancesByReactRootID: instancesByReactRootID,

  /**
   * This is a hook provided to support rendering React components while
   * ensuring that the apparent scroll position of its `container` does not
   * change.
   *
   * @param {DOMElement} container The `container` being rendered into.
   * @param {function} renderCallback This must be called once to do the render.
   */
  scrollMonitor: function (container, renderCallback) {
    renderCallback();
  },

  /**
   * Take a component that's already mounted into the DOM and replace its props
   * @param {ReactComponent} prevComponent component instance already in the DOM
   * @param {ReactElement} nextElement component instance to render
   * @param {DOMElement} container container to render into
   * @param {?function} callback function triggered on completion
   */
  _updateRootComponent: function (prevComponent, nextElement, container, callback) {
    ReactMount.scrollMonitor(container, function () {
      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
      if (callback) {
        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
      }
    });

    if (process.env.NODE_ENV !== 'production') {
      // Record the root element in case it later gets transplanted.
      rootElementsByReactRootID[getReactRootID(container)] = getReactRootElementInContainer(container);
    }

    return prevComponent;
  },

  /**
   * Register a component into the instance map and starts scroll value
   * monitoring
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @return {string} reactRoot ID prefix
   */
  _registerComponent: function (nextComponent, container) {
    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : invariant(false) : undefined;

    ReactBrowserEventEmitter.ensureScrollValueMonitoring();

    var reactRootID = ReactMount.registerContainer(container);
    instancesByReactRootID[reactRootID] = nextComponent;
    return reactRootID;
  },

  /**
   * Render a new component into the DOM.
   * @param {ReactElement} nextElement element to render
   * @param {DOMElement} container container to render into
   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
   * @return {ReactComponent} nextComponent
   */
  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case.
    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;

    var componentInstance = instantiateReactComponent(nextElement, null);
    var reactRootID = ReactMount._registerComponent(componentInstance, container);

    // The initial render is synchronous but any updates that happen during
    // rendering, in componentWillMount or componentDidMount, will be batched
    // according to the current batching strategy.

    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, reactRootID, container, shouldReuseMarkup, context);

    if (process.env.NODE_ENV !== 'production') {
      // Record the root element in case it later gets transplanted.
      rootElementsByReactRootID[reactRootID] = getReactRootElementInContainer(container);
    }

    return componentInstance;
  },

  /**
   * Renders a React component into the DOM in the supplied `container`.
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
    !(parentComponent != null && parentComponent._reactInternalInstance != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : invariant(false) : undefined;
    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
  },

  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
    !ReactElement.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing an element string, make sure to instantiate ' + 'it by passing it to React.createElement.' : typeof nextElement === 'function' ? ' Instead of passing a component class, make sure to instantiate ' + 'it by passing it to React.createElement.' :
    // Check if it quacks like an element
    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : invariant(false) : undefined;

    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : undefined;

    var nextWrappedElement = new ReactElement(TopLevelWrapper, null, null, null, null, null, nextElement);

    var prevComponent = instancesByReactRootID[getReactRootID(container)];

    if (prevComponent) {
      var prevWrappedElement = prevComponent._currentElement;
      var prevElement = prevWrappedElement.props;
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        var publicInst = prevComponent._renderedComponent.getPublicInstance();
        var updatedCallback = callback && function () {
          callback.call(publicInst);
        };
        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, container, updatedCallback);
        return publicInst;
      } else {
        ReactMount.unmountComponentAtNode(container);
      }
    }

    var reactRootElement = getReactRootElementInContainer(container);
    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
    var containerHasNonRootReactChild = hasNonRootReactChild(container);

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : undefined;

      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
        var rootElementSibling = reactRootElement;
        while (rootElementSibling) {
          if (internalGetID(rootElementSibling)) {
            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : undefined;
            break;
          }
          rootElementSibling = rootElementSibling.nextSibling;
        }
      }
    }

    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, parentComponent != null ? parentComponent._reactInternalInstance._processChildContext(parentComponent._reactInternalInstance._context) : emptyObject)._renderedComponent.getPublicInstance();
    if (callback) {
      callback.call(component);
    }
    return component;
  },

  /**
   * Renders a React component into the DOM in the supplied `container`.
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  render: function (nextElement, container, callback) {
    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
  },

  /**
   * Registers a container node into which React components will be rendered.
   * This also creates the "reactRoot" ID that will be assigned to the element
   * rendered within.
   *
   * @param {DOMElement} container DOM element to register as a container.
   * @return {string} The "reactRoot" ID of elements rendered within.
   */
  registerContainer: function (container) {
    var reactRootID = getReactRootID(container);
    if (reactRootID) {
      // If one exists, make sure it is a valid "reactRoot" ID.
      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
    }
    if (!reactRootID) {
      // No valid "reactRoot" ID found, create one.
      reactRootID = ReactInstanceHandles.createReactRootID();
    }
    containersByReactRootID[reactRootID] = container;
    return reactRootID;
  },

  /**
   * Unmounts and destroys the React component rendered in the `container`.
   *
   * @param {DOMElement} container DOM element containing a React component.
   * @return {boolean} True if a component was found in and unmounted from
   *                   `container`
   */
  unmountComponentAtNode: function (container) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case. (Strictly speaking, unmounting won't cause a
    // render but we still don't expect to be in a render call here.)
    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;

    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : invariant(false) : undefined;

    var reactRootID = getReactRootID(container);
    var component = instancesByReactRootID[reactRootID];
    if (!component) {
      // Check if the node being unmounted was rendered by React, but isn't a
      // root node.
      var containerHasNonRootReactChild = hasNonRootReactChild(container);

      // Check if the container itself is a React root node.
      var containerID = internalGetID(container);
      var isContainerReactRoot = containerID && containerID === ReactInstanceHandles.getReactRootIDFromNodeID(containerID);

      if (process.env.NODE_ENV !== 'production') {
        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : undefined;
      }

      return false;
    }
    ReactUpdates.batchedUpdates(unmountComponentFromNode, component, container);
    delete instancesByReactRootID[reactRootID];
    delete containersByReactRootID[reactRootID];
    if (process.env.NODE_ENV !== 'production') {
      delete rootElementsByReactRootID[reactRootID];
    }
    return true;
  },

  /**
   * Finds the container DOM element that contains React component to which the
   * supplied DOM `id` belongs.
   *
   * @param {string} id The ID of an element rendered by a React component.
   * @return {?DOMElement} DOM element that contains the `id`.
   */
  findReactContainerForID: function (id) {
    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
    var container = containersByReactRootID[reactRootID];

    if (process.env.NODE_ENV !== 'production') {
      var rootElement = rootElementsByReactRootID[reactRootID];
      if (rootElement && rootElement.parentNode !== container) {
        process.env.NODE_ENV !== 'production' ? warning(
        // Call internalGetID here because getID calls isValid which calls
        // findReactContainerForID (this function).
        internalGetID(rootElement) === reactRootID, 'ReactMount: Root element ID differed from reactRootID.') : undefined;
        var containerChild = container.firstChild;
        if (containerChild && reactRootID === internalGetID(containerChild)) {
          // If the container has a new child with the same ID as the old
          // root element, then rootElementsByReactRootID[reactRootID] is
          // just stale and needs to be updated. The case that deserves a
          // warning is when the container is empty.
          rootElementsByReactRootID[reactRootID] = containerChild;
        } else {
          process.env.NODE_ENV !== 'production' ? warning(false, 'ReactMount: Root element has been removed from its original ' + 'container. New container: %s', rootElement.parentNode) : undefined;
        }
      }
    }

    return container;
  },

  /**
   * Finds an element rendered by React with the supplied ID.
   *
   * @param {string} id ID of a DOM node in the React component.
   * @return {DOMElement} Root DOM node of the React component.
   */
  findReactNodeByID: function (id) {
    var reactRoot = ReactMount.findReactContainerForID(id);
    return ReactMount.findComponentRoot(reactRoot, id);
  },

  /**
   * Traverses up the ancestors of the supplied node to find a node that is a
   * DOM representation of a React component rendered by this copy of React.
   *
   * @param {*} node
   * @return {?DOMEventTarget}
   * @internal
   */
  getFirstReactDOM: function (node) {
    return findFirstReactDOMImpl(node);
  },

  /**
   * Finds a node with the supplied `targetID` inside of the supplied
   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
   * quickly.
   *
   * @param {DOMEventTarget} ancestorNode Search from this root.
   * @pararm {string} targetID ID of the DOM representation of the component.
   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
   * @internal
   */
  findComponentRoot: function (ancestorNode, targetID) {
    var firstChildren = findComponentRootReusableArray;
    var childIndex = 0;

    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

    if (process.env.NODE_ENV !== 'production') {
      // This will throw on the next line; give an early warning
      process.env.NODE_ENV !== 'production' ? warning(deepestAncestor != null, 'React can\'t find the root component node for data-reactid value ' + '`%s`. If you\'re seeing this message, it probably means that ' + 'you\'ve loaded two copies of React on the page. At this time, only ' + 'a single copy of React can be loaded at a time.', targetID) : undefined;
    }

    firstChildren[0] = deepestAncestor.firstChild;
    firstChildren.length = 1;

    while (childIndex < firstChildren.length) {
      var child = firstChildren[childIndex++];
      var targetChild;

      while (child) {
        var childID = ReactMount.getID(child);
        if (childID) {
          // Even if we find the node we're looking for, we finish looping
          // through its siblings to ensure they're cached so that we don't have
          // to revisit this node again. Otherwise, we make n^2 calls to getID
          // when visiting the many children of a single node in order.

          if (targetID === childID) {
            targetChild = child;
          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
            // If we find a child whose ID is an ancestor of the given ID,
            // then we can be sure that we only want to search the subtree
            // rooted at this child, so we can throw out the rest of the
            // search state.
            firstChildren.length = childIndex = 0;
            firstChildren.push(child.firstChild);
          }
        } else {
          // If this child had no ID, then there's a chance that it was
          // injected automatically by the browser, as when a `<table>`
          // element sprouts an extra `<tbody>` child as a side effect of
          // `.innerHTML` parsing. Optimistically continue down this
          // branch, but not before examining the other siblings.
          firstChildren.push(child.firstChild);
        }

        child = child.nextSibling;
      }

      if (targetChild) {
        // Emptying firstChildren/findComponentRootReusableArray is
        // not necessary for correctness, but it helps the GC reclaim
        // any nodes that were left at the end of the search.
        firstChildren.length = 0;

        return targetChild;
      }
    }

    firstChildren.length = 0;

    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findComponentRoot(..., %s): Unable to find element. This probably ' + 'means the DOM was unexpectedly mutated (e.g., by the browser), ' + 'usually due to forgetting a <tbody> when using tables, nesting tags ' + 'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' + 'parent. ' + 'Try inspecting the child nodes of the element with React ID `%s`.', targetID, ReactMount.getID(ancestorNode)) : invariant(false) : undefined;
  },

  _mountImageIntoNode: function (markup, container, shouldReuseMarkup, transaction) {
    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : invariant(false) : undefined;

    if (shouldReuseMarkup) {
      var rootElement = getReactRootElementInContainer(container);
      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
        return;
      } else {
        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

        var rootMarkup = rootElement.outerHTML;
        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);

        var normalizedMarkup = markup;
        if (process.env.NODE_ENV !== 'production') {
          // because rootMarkup is retrieved from the DOM, various normalizations
          // will have occurred which will not be present in `markup`. Here,
          // insert markup into a <div> or <iframe> depending on the container
          // type to perform the same normalizations before comparing.
          var normalizer;
          if (container.nodeType === ELEMENT_NODE_TYPE) {
            normalizer = document.createElement('div');
            normalizer.innerHTML = markup;
            normalizedMarkup = normalizer.innerHTML;
          } else {
            normalizer = document.createElement('iframe');
            document.body.appendChild(normalizer);
            normalizer.contentDocument.write(markup);
            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
            document.body.removeChild(normalizer);
          }
        }

        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using ' + 'server rendering but the checksum was invalid. This usually ' + 'means you rendered a different component type or props on ' + 'the client from the one on the server, or your render() ' + 'methods are impure. React cannot handle this case due to ' + 'cross-browser quirks by rendering at the document root. You ' + 'should look for environment dependent code in your components ' + 'and ensure the props are the same client and server side:\n%s', difference) : invariant(false) : undefined;

        if (process.env.NODE_ENV !== 'production') {
          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : undefined;
        }
      }
    }

    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but ' + 'you didn\'t use server rendering. We can\'t do this ' + 'without using server rendering due to cross-browser quirks. ' + 'See ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;

    if (transaction.useCreateElement) {
      while (container.lastChild) {
        container.removeChild(container.lastChild);
      }
      container.appendChild(markup);
    } else {
      setInnerHTML(container, markup);
    }
  },

  ownerDocumentContextKey: ownerDocumentContextKey,

  /**
   * React ID utilities.
   */

  getReactRootID: getReactRootID,

  getID: getID,

  setID: setID,

  getNode: getNode,

  getNodeFromInstance: getNodeFromInstance,

  isValid: isValid,

  purgeID: purgeID
};

ReactPerf.measureMethods(ReactMount, 'ReactMount', {
  _renderNewRootComponent: '_renderNewRootComponent',
  _mountImageIntoNode: '_mountImageIntoNode'
});

module.exports = ReactMount;
}).call(this,require('_process'))
},{"./DOMProperty":32,"./Object.assign":45,"./ReactBrowserEventEmitter":49,"./ReactCurrentOwner":57,"./ReactDOMFeatureFlags":62,"./ReactElement":75,"./ReactEmptyComponentRegistry":78,"./ReactInstanceHandles":84,"./ReactInstanceMap":85,"./ReactMarkupChecksum":87,"./ReactPerf":94,"./ReactReconciler":99,"./ReactUpdateQueue":105,"./ReactUpdates":106,"./instantiateReactComponent":141,"./setInnerHTML":147,"./shouldUpdateReactComponent":149,"./validateDOMNesting":151,"_process":21,"fbjs/lib/containsNode":156,"fbjs/lib/emptyObject":160,"fbjs/lib/invariant":167,"fbjs/lib/warning":178}],89:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChild
 * @typechecks static-only
 */

'use strict';

var ReactComponentEnvironment = require('./ReactComponentEnvironment');
var ReactMultiChildUpdateTypes = require('./ReactMultiChildUpdateTypes');

var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactReconciler = require('./ReactReconciler');
var ReactChildReconciler = require('./ReactChildReconciler');

var flattenChildren = require('./flattenChildren');

/**
 * Updating children of a component may trigger recursive updates. The depth is
 * used to batch recursive updates to render markup more efficiently.
 *
 * @type {number}
 * @private
 */
var updateDepth = 0;

/**
 * Queue of update configuration objects.
 *
 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
 *
 * @type {array<object>}
 * @private
 */
var updateQueue = [];

/**
 * Queue of markup to be rendered.
 *
 * @type {array<string>}
 * @private
 */
var markupQueue = [];

/**
 * Enqueues markup to be rendered and inserted at a supplied index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} markup Markup that renders into an element.
 * @param {number} toIndex Destination index.
 * @private
 */
function enqueueInsertMarkup(parentID, markup, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
    markupIndex: markupQueue.push(markup) - 1,
    content: null,
    fromIndex: null,
    toIndex: toIndex
  });
}

/**
 * Enqueues moving an existing element to another index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Source index of the existing element.
 * @param {number} toIndex Destination index of the element.
 * @private
 */
function enqueueMove(parentID, fromIndex, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
    markupIndex: null,
    content: null,
    fromIndex: fromIndex,
    toIndex: toIndex
  });
}

/**
 * Enqueues removing an element at an index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Index of the element to remove.
 * @private
 */
function enqueueRemove(parentID, fromIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
    markupIndex: null,
    content: null,
    fromIndex: fromIndex,
    toIndex: null
  });
}

/**
 * Enqueues setting the markup of a node.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} markup Markup that renders into an element.
 * @private
 */
function enqueueSetMarkup(parentID, markup) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.SET_MARKUP,
    markupIndex: null,
    content: markup,
    fromIndex: null,
    toIndex: null
  });
}

/**
 * Enqueues setting the text content.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} textContent Text content to set.
 * @private
 */
function enqueueTextContent(parentID, textContent) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
    markupIndex: null,
    content: textContent,
    fromIndex: null,
    toIndex: null
  });
}

/**
 * Processes any enqueued updates.
 *
 * @private
 */
function processQueue() {
  if (updateQueue.length) {
    ReactComponentEnvironment.processChildrenUpdates(updateQueue, markupQueue);
    clearQueue();
  }
}

/**
 * Clears any enqueued updates.
 *
 * @private
 */
function clearQueue() {
  updateQueue.length = 0;
  markupQueue.length = 0;
}

/**
 * ReactMultiChild are capable of reconciling multiple children.
 *
 * @class ReactMultiChild
 * @internal
 */
var ReactMultiChild = {

  /**
   * Provides common functionality for components that must reconcile multiple
   * children. This is used by `ReactDOMComponent` to mount, update, and
   * unmount child components.
   *
   * @lends {ReactMultiChild.prototype}
   */
  Mixin: {

    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
      if (process.env.NODE_ENV !== 'production') {
        if (this._currentElement) {
          try {
            ReactCurrentOwner.current = this._currentElement._owner;
            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
          } finally {
            ReactCurrentOwner.current = null;
          }
        }
      }
      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
    },

    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, transaction, context) {
      var nextChildren;
      if (process.env.NODE_ENV !== 'production') {
        if (this._currentElement) {
          try {
            ReactCurrentOwner.current = this._currentElement._owner;
            nextChildren = flattenChildren(nextNestedChildrenElements);
          } finally {
            ReactCurrentOwner.current = null;
          }
          return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
        }
      }
      nextChildren = flattenChildren(nextNestedChildrenElements);
      return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
    },

    /**
     * Generates a "mount image" for each of the supplied children. In the case
     * of `ReactDOMComponent`, a mount image is a string of markup.
     *
     * @param {?object} nestedChildren Nested child maps.
     * @return {array} An array of mounted representations.
     * @internal
     */
    mountChildren: function (nestedChildren, transaction, context) {
      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
      this._renderedChildren = children;
      var mountImages = [];
      var index = 0;
      for (var name in children) {
        if (children.hasOwnProperty(name)) {
          var child = children[name];
          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
          var rootID = this._rootNodeID + name;
          var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
          child._mountIndex = index++;
          mountImages.push(mountImage);
        }
      }
      return mountImages;
    },

    /**
     * Replaces any rendered children with a text content string.
     *
     * @param {string} nextContent String of content.
     * @internal
     */
    updateTextContent: function (nextContent) {
      updateDepth++;
      var errorThrown = true;
      try {
        var prevChildren = this._renderedChildren;
        // Remove any rendered children.
        ReactChildReconciler.unmountChildren(prevChildren);
        // TODO: The setTextContent operation should be enough
        for (var name in prevChildren) {
          if (prevChildren.hasOwnProperty(name)) {
            this._unmountChild(prevChildren[name]);
          }
        }
        // Set new text content.
        this.setTextContent(nextContent);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          if (errorThrown) {
            clearQueue();
          } else {
            processQueue();
          }
        }
      }
    },

    /**
     * Replaces any rendered children with a markup string.
     *
     * @param {string} nextMarkup String of markup.
     * @internal
     */
    updateMarkup: function (nextMarkup) {
      updateDepth++;
      var errorThrown = true;
      try {
        var prevChildren = this._renderedChildren;
        // Remove any rendered children.
        ReactChildReconciler.unmountChildren(prevChildren);
        for (var name in prevChildren) {
          if (prevChildren.hasOwnProperty(name)) {
            this._unmountChildByName(prevChildren[name], name);
          }
        }
        this.setMarkup(nextMarkup);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          if (errorThrown) {
            clearQueue();
          } else {
            processQueue();
          }
        }
      }
    },

    /**
     * Updates the rendered children with new children.
     *
     * @param {?object} nextNestedChildrenElements Nested child element maps.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    updateChildren: function (nextNestedChildrenElements, transaction, context) {
      updateDepth++;
      var errorThrown = true;
      try {
        this._updateChildren(nextNestedChildrenElements, transaction, context);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          if (errorThrown) {
            clearQueue();
          } else {
            processQueue();
          }
        }
      }
    },

    /**
     * Improve performance by isolating this hot code path from the try/catch
     * block in `updateChildren`.
     *
     * @param {?object} nextNestedChildrenElements Nested child element maps.
     * @param {ReactReconcileTransaction} transaction
     * @final
     * @protected
     */
    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
      var prevChildren = this._renderedChildren;
      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, transaction, context);
      this._renderedChildren = nextChildren;
      if (!nextChildren && !prevChildren) {
        return;
      }
      var name;
      // `nextIndex` will increment for each child in `nextChildren`, but
      // `lastIndex` will be the last index visited in `prevChildren`.
      var lastIndex = 0;
      var nextIndex = 0;
      for (name in nextChildren) {
        if (!nextChildren.hasOwnProperty(name)) {
          continue;
        }
        var prevChild = prevChildren && prevChildren[name];
        var nextChild = nextChildren[name];
        if (prevChild === nextChild) {
          this.moveChild(prevChild, nextIndex, lastIndex);
          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
          prevChild._mountIndex = nextIndex;
        } else {
          if (prevChild) {
            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
            this._unmountChild(prevChild);
          }
          // The child must be instantiated before it's mounted.
          this._mountChildByNameAtIndex(nextChild, name, nextIndex, transaction, context);
        }
        nextIndex++;
      }
      // Remove children that are no longer present.
      for (name in prevChildren) {
        if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
          this._unmountChild(prevChildren[name]);
        }
      }
    },

    /**
     * Unmounts all rendered children. This should be used to clean up children
     * when this component is unmounted.
     *
     * @internal
     */
    unmountChildren: function () {
      var renderedChildren = this._renderedChildren;
      ReactChildReconciler.unmountChildren(renderedChildren);
      this._renderedChildren = null;
    },

    /**
     * Moves a child component to the supplied index.
     *
     * @param {ReactComponent} child Component to move.
     * @param {number} toIndex Destination index of the element.
     * @param {number} lastIndex Last index visited of the siblings of `child`.
     * @protected
     */
    moveChild: function (child, toIndex, lastIndex) {
      // If the index of `child` is less than `lastIndex`, then it needs to
      // be moved. Otherwise, we do not need to move it because a child will be
      // inserted or moved before `child`.
      if (child._mountIndex < lastIndex) {
        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
      }
    },

    /**
     * Creates a child component.
     *
     * @param {ReactComponent} child Component to create.
     * @param {string} mountImage Markup to insert.
     * @protected
     */
    createChild: function (child, mountImage) {
      enqueueInsertMarkup(this._rootNodeID, mountImage, child._mountIndex);
    },

    /**
     * Removes a child component.
     *
     * @param {ReactComponent} child Child to remove.
     * @protected
     */
    removeChild: function (child) {
      enqueueRemove(this._rootNodeID, child._mountIndex);
    },

    /**
     * Sets this text content string.
     *
     * @param {string} textContent Text content to set.
     * @protected
     */
    setTextContent: function (textContent) {
      enqueueTextContent(this._rootNodeID, textContent);
    },

    /**
     * Sets this markup string.
     *
     * @param {string} markup Markup to set.
     * @protected
     */
    setMarkup: function (markup) {
      enqueueSetMarkup(this._rootNodeID, markup);
    },

    /**
     * Mounts a child with the supplied name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to mount.
     * @param {string} name Name of the child.
     * @param {number} index Index at which to insert the child.
     * @param {ReactReconcileTransaction} transaction
     * @private
     */
    _mountChildByNameAtIndex: function (child, name, index, transaction, context) {
      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
      var rootID = this._rootNodeID + name;
      var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
      child._mountIndex = index;
      this.createChild(child, mountImage);
    },

    /**
     * Unmounts a rendered child.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to unmount.
     * @private
     */
    _unmountChild: function (child) {
      this.removeChild(child);
      child._mountIndex = null;
    }

  }

};

module.exports = ReactMultiChild;
}).call(this,require('_process'))
},{"./ReactChildReconciler":50,"./ReactComponentEnvironment":55,"./ReactCurrentOwner":57,"./ReactMultiChildUpdateTypes":90,"./ReactReconciler":99,"./flattenChildren":132,"_process":21}],90:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChildUpdateTypes
 */

'use strict';

var keyMirror = require('fbjs/lib/keyMirror');

/**
 * When a component's children are updated, a series of update configuration
 * objects are created in order to batch and serialize the required changes.
 *
 * Enumerates all the possible types of update configurations.
 *
 * @internal
 */
var ReactMultiChildUpdateTypes = keyMirror({
  INSERT_MARKUP: null,
  MOVE_EXISTING: null,
  REMOVE_NODE: null,
  SET_MARKUP: null,
  TEXT_CONTENT: null
});

module.exports = ReactMultiChildUpdateTypes;
},{"fbjs/lib/keyMirror":170}],91:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactNativeComponent
 */

'use strict';

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');

var autoGenerateWrapperClass = null;
var genericComponentClass = null;
// This registry keeps track of wrapper classes around native tags.
var tagToComponentClass = {};
var textComponentClass = null;

var ReactNativeComponentInjection = {
  // This accepts a class that receives the tag string. This is a catch all
  // that can render any kind of tag.
  injectGenericComponentClass: function (componentClass) {
    genericComponentClass = componentClass;
  },
  // This accepts a text component class that takes the text string to be
  // rendered as props.
  injectTextComponentClass: function (componentClass) {
    textComponentClass = componentClass;
  },
  // This accepts a keyed object with classes as values. Each key represents a
  // tag. That particular tag will use this class instead of the generic one.
  injectComponentClasses: function (componentClasses) {
    assign(tagToComponentClass, componentClasses);
  }
};

/**
 * Get a composite component wrapper class for a specific tag.
 *
 * @param {ReactElement} element The tag for which to get the class.
 * @return {function} The React class constructor function.
 */
function getComponentClassForElement(element) {
  if (typeof element.type === 'function') {
    return element.type;
  }
  var tag = element.type;
  var componentClass = tagToComponentClass[tag];
  if (componentClass == null) {
    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);
  }
  return componentClass;
}

/**
 * Get a native internal component class for a specific tag.
 *
 * @param {ReactElement} element The element to create.
 * @return {function} The internal class constructor function.
 */
function createInternalComponent(element) {
  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : invariant(false) : undefined;
  return new genericComponentClass(element.type, element.props);
}

/**
 * @param {ReactText} text
 * @return {ReactComponent}
 */
function createInstanceForText(text) {
  return new textComponentClass(text);
}

/**
 * @param {ReactComponent} component
 * @return {boolean}
 */
function isTextComponent(component) {
  return component instanceof textComponentClass;
}

var ReactNativeComponent = {
  getComponentClassForElement: getComponentClassForElement,
  createInternalComponent: createInternalComponent,
  createInstanceForText: createInstanceForText,
  isTextComponent: isTextComponent,
  injection: ReactNativeComponentInjection
};

module.exports = ReactNativeComponent;
}).call(this,require('_process'))
},{"./Object.assign":45,"_process":21,"fbjs/lib/invariant":167}],92:[function(require,module,exports){
(function (process){
/**
 * Copyright 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactNoopUpdateQueue
 */

'use strict';

var warning = require('fbjs/lib/warning');

function warnTDZ(publicInstance, callerName) {
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor && publicInstance.constructor.displayName || '') : undefined;
  }
}

/**
 * This is the abstract API for an update queue.
 */
var ReactNoopUpdateQueue = {

  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    return false;
  },

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */
  enqueueCallback: function (publicInstance, callback) {},

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance) {
    warnTDZ(publicInstance, 'forceUpdate');
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState) {
    warnTDZ(publicInstance, 'replaceState');
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState) {
    warnTDZ(publicInstance, 'setState');
  },

  /**
   * Sets a subset of the props.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialProps Subset of the next props.
   * @internal
   */
  enqueueSetProps: function (publicInstance, partialProps) {
    warnTDZ(publicInstance, 'setProps');
  },

  /**
   * Replaces all of the props.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} props New props.
   * @internal
   */
  enqueueReplaceProps: function (publicInstance, props) {
    warnTDZ(publicInstance, 'replaceProps');
  }

};

module.exports = ReactNoopUpdateQueue;
}).call(this,require('_process'))
},{"_process":21,"fbjs/lib/warning":178}],93:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactOwner
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

/**
 * ReactOwners are capable of storing references to owned components.
 *
 * All components are capable of //being// referenced by owner components, but
 * only ReactOwner components are capable of //referencing// owned components.
 * The named reference is known as a "ref".
 *
 * Refs are available when mounted and updated during reconciliation.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return (
 *         <div onClick={this.handleClick}>
 *           <CustomComponent ref="custom" />
 *         </div>
 *       );
 *     },
 *     handleClick: function() {
 *       this.refs.custom.handleClick();
 *     },
 *     componentDidMount: function() {
 *       this.refs.custom.initialize();
 *     }
 *   });
 *
 * Refs should rarely be used. When refs are used, they should only be done to
 * control data that is not handled by React's data flow.
 *
 * @class ReactOwner
 */
var ReactOwner = {

  /**
   * @param {?object} object
   * @return {boolean} True if `object` is a valid owner.
   * @final
   */
  isValidOwner: function (object) {
    return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
  },

  /**
   * Adds a component by ref to an owner component.
   *
   * @param {ReactComponent} component Component to reference.
   * @param {string} ref Name by which to refer to the component.
   * @param {ReactOwner} owner Component on which to record the ref.
   * @final
   * @internal
   */
  addComponentAsRefTo: function (component, ref, owner) {
    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might ' + 'be adding a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
    owner.attachRef(ref, component);
  },

  /**
   * Removes a component by ref from an owner component.
   *
   * @param {ReactComponent} component Component to dereference.
   * @param {string} ref Name of the ref to remove.
   * @param {ReactOwner} owner Component on which the ref is recorded.
   * @final
   * @internal
   */
  removeComponentAsRefFrom: function (component, ref, owner) {
    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might ' + 'be removing a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
    // Check that `component` is still the current ref because we do not want to
    // detach the ref if another component stole it.
    if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {
      owner.detachRef(ref);
    }
  }

};

module.exports = ReactOwner;
}).call(this,require('_process'))
},{"_process":21,"fbjs/lib/invariant":167}],94:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPerf
 * @typechecks static-only
 */

'use strict';

/**
 * ReactPerf is a general AOP system designed to measure performance. This
 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
 */
var ReactPerf = {
  /**
   * Boolean to enable/disable measurement. Set to false by default to prevent
   * accidental logging and perf loss.
   */
  enableMeasure: false,

  /**
   * Holds onto the measure function in use. By default, don't measure
   * anything, but we'll override this if we inject a measure function.
   */
  storedMeasure: _noMeasure,

  /**
   * @param {object} object
   * @param {string} objectName
   * @param {object<string>} methodNames
   */
  measureMethods: function (object, objectName, methodNames) {
    if (process.env.NODE_ENV !== 'production') {
      for (var key in methodNames) {
        if (!methodNames.hasOwnProperty(key)) {
          continue;
        }
        object[key] = ReactPerf.measure(objectName, methodNames[key], object[key]);
      }
    }
  },

  /**
   * Use this to wrap methods you want to measure. Zero overhead in production.
   *
   * @param {string} objName
   * @param {string} fnName
   * @param {function} func
   * @return {function}
   */
  measure: function (objName, fnName, func) {
    if (process.env.NODE_ENV !== 'production') {
      var measuredFunc = null;
      var wrapper = function () {
        if (ReactPerf.enableMeasure) {
          if (!measuredFunc) {
            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
          }
          return measuredFunc.apply(this, arguments);
        }
        return func.apply(this, arguments);
      };
      wrapper.displayName = objName + '_' + fnName;
      return wrapper;
    }
    return func;
  },

  injection: {
    /**
     * @param {function} measure
     */
    injectMeasure: function (measure) {
      ReactPerf.storedMeasure = measure;
    }
  }
};

/**
 * Simply passes through the measured function, without measuring it.
 *
 * @param {string} objName
 * @param {string} fnName
 * @param {function} func
 * @return {function}
 */
function _noMeasure(objName, fnName, func) {
  return func;
}

module.exports = ReactPerf;
}).call(this,require('_process'))
},{"_process":21}],95:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocationNames
 */

'use strict';

var ReactPropTypeLocationNames = {};

if (process.env.NODE_ENV !== 'production') {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;
}).call(this,require('_process'))
},{"_process":21}],96:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocations
 */

'use strict';

var keyMirror = require('fbjs/lib/keyMirror');

var ReactPropTypeLocations = keyMirror({
  prop: null,
  context: null,
  childContext: null
});

module.exports = ReactPropTypeLocations;
},{"fbjs/lib/keyMirror":170}],97:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypes
 */

'use strict';

var ReactElement = require('./ReactElement');
var ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');

var emptyFunction = require('fbjs/lib/emptyFunction');
var getIteratorFn = require('./getIteratorFn');

/**
 * Collection of methods that allow declaration and validation of props that are
 * supplied to React components. Example usage:
 *
 *   var Props = require('ReactPropTypes');
 *   var MyArticle = React.createClass({
 *     propTypes: {
 *       // An optional string prop named "description".
 *       description: Props.string,
 *
 *       // A required enum prop named "category".
 *       category: Props.oneOf(['News','Photos']).isRequired,
 *
 *       // A prop named "dialog" that requires an instance of Dialog.
 *       dialog: Props.instanceOf(Dialog).isRequired
 *     },
 *     render: function() { ... }
 *   });
 *
 * A more formal specification of how these methods are used:
 *
 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
 *   decl := ReactPropTypes.{type}(.isRequired)?
 *
 * Each and every declaration produces a function with the same signature. This
 * allows the creation of custom validation functions. For example:
 *
 *  var MyLink = React.createClass({
 *    propTypes: {
 *      // An optional string or URI prop named "href".
 *      href: function(props, propName, componentName) {
 *        var propValue = props[propName];
 *        if (propValue != null && typeof propValue !== 'string' &&
 *            !(propValue instanceof URI)) {
 *          return new Error(
 *            'Expected a string or an URI for ' + propName + ' in ' +
 *            componentName
 *          );
 *        }
 *      }
 *    },
 *    render: function() {...}
 *  });
 *
 * @internal
 */

var ANONYMOUS = '<<anonymous>>';

var ReactPropTypes = {
  array: createPrimitiveTypeChecker('array'),
  bool: createPrimitiveTypeChecker('boolean'),
  func: createPrimitiveTypeChecker('function'),
  number: createPrimitiveTypeChecker('number'),
  object: createPrimitiveTypeChecker('object'),
  string: createPrimitiveTypeChecker('string'),

  any: createAnyTypeChecker(),
  arrayOf: createArrayOfTypeChecker,
  element: createElementTypeChecker(),
  instanceOf: createInstanceTypeChecker,
  node: createNodeChecker(),
  objectOf: createObjectOfTypeChecker,
  oneOf: createEnumTypeChecker,
  oneOfType: createUnionTypeChecker,
  shape: createShapeTypeChecker
};

function createChainableTypeChecker(validate) {
  function checkType(isRequired, props, propName, componentName, location, propFullName) {
    componentName = componentName || ANONYMOUS;
    propFullName = propFullName || propName;
    if (props[propName] == null) {
      var locationName = ReactPropTypeLocationNames[location];
      if (isRequired) {
        return new Error('Required ' + locationName + ' `' + propFullName + '` was not specified in ' + ('`' + componentName + '`.'));
      }
      return null;
    } else {
      return validate(props, propName, componentName, location, propFullName);
    }
  }

  var chainedCheckType = checkType.bind(null, false);
  chainedCheckType.isRequired = checkType.bind(null, true);

  return chainedCheckType;
}

function createPrimitiveTypeChecker(expectedType) {
  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== expectedType) {
      var locationName = ReactPropTypeLocationNames[location];
      // `propValue` being instance of, say, date/regexp, pass the 'object'
      // check, but we can offer a more precise error message here rather than
      // 'of type `object`'.
      var preciseType = getPreciseType(propValue);

      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createAnyTypeChecker() {
  return createChainableTypeChecker(emptyFunction.thatReturns(null));
}

function createArrayOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    if (!Array.isArray(propValue)) {
      var locationName = ReactPropTypeLocationNames[location];
      var propType = getPropType(propValue);
      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
    }
    for (var i = 0; i < propValue.length; i++) {
      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
      if (error instanceof Error) {
        return error;
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createElementTypeChecker() {
  function validate(props, propName, componentName, location, propFullName) {
    if (!ReactElement.isValidElement(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a single ReactElement.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createInstanceTypeChecker(expectedClass) {
  function validate(props, propName, componentName, location, propFullName) {
    if (!(props[propName] instanceof expectedClass)) {
      var locationName = ReactPropTypeLocationNames[location];
      var expectedClassName = expectedClass.name || ANONYMOUS;
      var actualClassName = getClassName(props[propName]);
      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createEnumTypeChecker(expectedValues) {
  if (!Array.isArray(expectedValues)) {
    return createChainableTypeChecker(function () {
      return new Error('Invalid argument supplied to oneOf, expected an instance of array.');
    });
  }

  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    for (var i = 0; i < expectedValues.length; i++) {
      if (propValue === expectedValues[i]) {
        return null;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    var valuesString = JSON.stringify(expectedValues);
    return new Error('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
  }
  return createChainableTypeChecker(validate);
}

function createObjectOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
    }
    for (var key in propValue) {
      if (propValue.hasOwnProperty(key)) {
        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
        if (error instanceof Error) {
          return error;
        }
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createUnionTypeChecker(arrayOfTypeCheckers) {
  if (!Array.isArray(arrayOfTypeCheckers)) {
    return createChainableTypeChecker(function () {
      return new Error('Invalid argument supplied to oneOfType, expected an instance of array.');
    });
  }

  function validate(props, propName, componentName, location, propFullName) {
    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (checker(props, propName, componentName, location, propFullName, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED') == null) {
        return null;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
  }
  return createChainableTypeChecker(validate);
}

function createNodeChecker() {
  function validate(props, propName, componentName, location, propFullName) {
    if (!isNode(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createShapeTypeChecker(shapeTypes) {
  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
    }
    for (var key in shapeTypes) {
      var checker = shapeTypes[key];
      if (!checker) {
        continue;
      }
      var error = checker(propValue, key, componentName, location, propFullName + '.' + key, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
      if (error) {
        return error;
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function isNode(propValue) {
  switch (typeof propValue) {
    case 'number':
    case 'string':
    case 'undefined':
      return true;
    case 'boolean':
      return !propValue;
    case 'object':
      if (Array.isArray(propValue)) {
        return propValue.every(isNode);
      }
      if (propValue === null || ReactElement.isValidElement(propValue)) {
        return true;
      }

      var iteratorFn = getIteratorFn(propValue);
      if (iteratorFn) {
        var iterator = iteratorFn.call(propValue);
        var step;
        if (iteratorFn !== propValue.entries) {
          while (!(step = iterator.next()).done) {
            if (!isNode(step.value)) {
              return false;
            }
          }
        } else {
          // Iterator will provide entry [k,v] tuples rather than values.
          while (!(step = iterator.next()).done) {
            var entry = step.value;
            if (entry) {
              if (!isNode(entry[1])) {
                return false;
              }
            }
          }
        }
      } else {
        return false;
      }

      return true;
    default:
      return false;
  }
}

// Equivalent of `typeof` but with special handling for array and regexp.
function getPropType(propValue) {
  var propType = typeof propValue;
  if (Array.isArray(propValue)) {
    return 'array';
  }
  if (propValue instanceof RegExp) {
    // Old webkits (at least until Android 4.0) return 'function' rather than
    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
    // passes PropTypes.object.
    return 'object';
  }
  return propType;
}

// This handles more types than `getPropType`. Only used for error messages.
// See `createPrimitiveTypeChecker`.
function getPreciseType(propValue) {
  var propType = getPropType(propValue);
  if (propType === 'object') {
    if (propValue instanceof Date) {
      return 'date';
    } else if (propValue instanceof RegExp) {
      return 'regexp';
    }
  }
  return propType;
}

// Returns class name of the object, if any.
function getClassName(propValue) {
  if (!propValue.constructor || !propValue.constructor.name) {
    return '<<anonymous>>';
  }
  return propValue.constructor.name;
}

module.exports = ReactPropTypes;
},{"./ReactElement":75,"./ReactPropTypeLocationNames":95,"./getIteratorFn":138,"fbjs/lib/emptyFunction":159}],98:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactReconcileTransaction
 * @typechecks static-only
 */

'use strict';

var CallbackQueue = require('./CallbackQueue');
var PooledClass = require('./PooledClass');
var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');
var ReactDOMFeatureFlags = require('./ReactDOMFeatureFlags');
var ReactInputSelection = require('./ReactInputSelection');
var Transaction = require('./Transaction');

var assign = require('./Object.assign');

/**
 * Ensures that, when possible, the selection range (currently selected text
 * input) is not disturbed by performing the transaction.
 */
var SELECTION_RESTORATION = {
  /**
   * @return {Selection} Selection information.
   */
  initialize: ReactInputSelection.getSelectionInformation,
  /**
   * @param {Selection} sel Selection information returned from `initialize`.
   */
  close: ReactInputSelection.restoreSelection
};

/**
 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
 * high level DOM manipulations (like temporarily removing a text input from the
 * DOM).
 */
var EVENT_SUPPRESSION = {
  /**
   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
   * the reconciliation.
   */
  initialize: function () {
    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
    ReactBrowserEventEmitter.setEnabled(false);
    return currentlyEnabled;
  },

  /**
   * @param {boolean} previouslyEnabled Enabled status of
   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
   *   restores the previous value.
   */
  close: function (previouslyEnabled) {
    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
  }
};

/**
 * Provides a queue for collecting `componentDidMount` and
 * `componentDidUpdate` callbacks during the the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function () {
    this.reactMountReady.reset();
  },

  /**
   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
   */
  close: function () {
    this.reactMountReady.notifyAll();
  }
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];

/**
 * Currently:
 * - The order that these are listed in the transaction is critical:
 * - Suppresses events.
 * - Restores selection range.
 *
 * Future:
 * - Restore document/overflow scroll positions that were unintentionally
 *   modified via DOM insertions above the top viewport boundary.
 * - Implement/integrate with customized constraint based layout system and keep
 *   track of which dimensions must be remeasured.
 *
 * @class ReactReconcileTransaction
 */
function ReactReconcileTransaction(forceHTML) {
  this.reinitializeTransaction();
  // Only server-side rendering really needs this option (see
  // `ReactServerRendering`), but server-side uses
  // `ReactServerRenderingTransaction` instead. This option is here so that it's
  // accessible and defaults to false when `ReactDOMComponent` and
  // `ReactTextComponent` checks it in `mountComponent`.`
  this.renderToStaticMarkup = false;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.useCreateElement = !forceHTML && ReactDOMFeatureFlags.useCreateElement;
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array<object>} List of operation wrap procedures.
   *   TODO: convert to array<TransactionWrapper>
   */
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function () {
    return this.reactMountReady;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be reused.
   */
  destructor: function () {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;
  }
};

assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

PooledClass.addPoolingTo(ReactReconcileTransaction);

module.exports = ReactReconcileTransaction;
},{"./CallbackQueue":28,"./Object.assign":45,"./PooledClass":46,"./ReactBrowserEventEmitter":49,"./ReactDOMFeatureFlags":62,"./ReactInputSelection":83,"./Transaction":123}],99:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactReconciler
 */

'use strict';

var ReactRef = require('./ReactRef');

/**
 * Helper to call ReactRef.attachRefs with this composite component, split out
 * to avoid allocations in the transaction mount-ready queue.
 */
function attachRefs() {
  ReactRef.attachRefs(this, this._currentElement);
}

var ReactReconciler = {

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {ReactComponent} internalInstance
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function (internalInstance, rootID, transaction, context) {
    var markup = internalInstance.mountComponent(rootID, transaction, context);
    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    }
    return markup;
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function (internalInstance) {
    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
    internalInstance.unmountComponent();
  },

  /**
   * Update a component using a new element.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactElement} nextElement
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @internal
   */
  receiveComponent: function (internalInstance, nextElement, transaction, context) {
    var prevElement = internalInstance._currentElement;

    if (nextElement === prevElement && context === internalInstance._context) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for an element created outside a composite to be
      // deeply mutated and reused.

      // TODO: Bailing out early is just a perf optimization right?
      // TODO: Removing the return statement should affect correctness?
      return;
    }

    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

    if (refsChanged) {
      ReactRef.detachRefs(internalInstance, prevElement);
    }

    internalInstance.receiveComponent(nextElement, transaction, context);

    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    }
  },

  /**
   * Flush any dirty changes in a component.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function (internalInstance, transaction) {
    internalInstance.performUpdateIfNecessary(transaction);
  }

};

module.exports = ReactReconciler;
},{"./ReactRef":100}],100:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactRef
 */

'use strict';

var ReactOwner = require('./ReactOwner');

var ReactRef = {};

function attachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(component.getPublicInstance());
  } else {
    // Legacy ref
    ReactOwner.addComponentAsRefTo(component, ref, owner);
  }
}

function detachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(null);
  } else {
    // Legacy ref
    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
  }
}

ReactRef.attachRefs = function (instance, element) {
  if (element === null || element === false) {
    return;
  }
  var ref = element.ref;
  if (ref != null) {
    attachRef(ref, instance, element._owner);
  }
};

ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
  // If either the owner or a `ref` has changed, make sure the newest owner
  // has stored a reference to `this`, and the previous owner (if different)
  // has forgotten the reference to `this`. We use the element instead
  // of the public this.props because the post processing cannot determine
  // a ref. The ref conceptually lives on the element.

  // TODO: Should this even be possible? The owner cannot change because
  // it's forbidden by shouldUpdateReactComponent. The ref can change
  // if you swap the keys of but not the refs. Reconsider where this check
  // is made. It probably belongs where the key checking and
  // instantiateReactComponent is done.

  var prevEmpty = prevElement === null || prevElement === false;
  var nextEmpty = nextElement === null || nextElement === false;

  return(
    // This has a few false positives w/r/t empty components.
    prevEmpty || nextEmpty || nextElement._owner !== prevElement._owner || nextElement.ref !== prevElement.ref
  );
};

ReactRef.detachRefs = function (instance, element) {
  if (element === null || element === false) {
    return;
  }
  var ref = element.ref;
  if (ref != null) {
    detachRef(ref, instance, element._owner);
  }
};

module.exports = ReactRef;
},{"./ReactOwner":93}],101:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactRootIndex
 * @typechecks
 */

'use strict';

var ReactRootIndexInjection = {
  /**
   * @param {function} _createReactRootIndex
   */
  injectCreateReactRootIndex: function (_createReactRootIndex) {
    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
  }
};

var ReactRootIndex = {
  createReactRootIndex: null,
  injection: ReactRootIndexInjection
};

module.exports = ReactRootIndex;
},{}],102:[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactServerBatchingStrategy
 * @typechecks
 */

'use strict';

var ReactServerBatchingStrategy = {
  isBatchingUpdates: false,
  batchedUpdates: function (callback) {
    // Don't do anything here. During the server rendering we don't want to
    // schedule any updates. We will simply ignore them.
  }
};

module.exports = ReactServerBatchingStrategy;
},{}],103:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks static-only
 * @providesModule ReactServerRendering
 */
'use strict';

var ReactDefaultBatchingStrategy = require('./ReactDefaultBatchingStrategy');
var ReactElement = require('./ReactElement');
var ReactInstanceHandles = require('./ReactInstanceHandles');
var ReactMarkupChecksum = require('./ReactMarkupChecksum');
var ReactServerBatchingStrategy = require('./ReactServerBatchingStrategy');
var ReactServerRenderingTransaction = require('./ReactServerRenderingTransaction');
var ReactUpdates = require('./ReactUpdates');

var emptyObject = require('fbjs/lib/emptyObject');
var instantiateReactComponent = require('./instantiateReactComponent');
var invariant = require('fbjs/lib/invariant');

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup
 */
function renderToString(element) {
  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToString(): You must pass a valid ReactElement.') : invariant(false) : undefined;

  var transaction;
  try {
    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);

    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(false);

    return transaction.perform(function () {
      var componentInstance = instantiateReactComponent(element, null);
      var markup = componentInstance.mountComponent(id, transaction, emptyObject);
      return ReactMarkupChecksum.addChecksumToMarkup(markup);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
    // Revert to the DOM batching strategy since these two renderers
    // currently share these stateful modules.
    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
  }
}

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup, without the extra React ID and checksum
 * (for generating static pages)
 */
function renderToStaticMarkup(element) {
  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToStaticMarkup(): You must pass a valid ReactElement.') : invariant(false) : undefined;

  var transaction;
  try {
    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);

    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(true);

    return transaction.perform(function () {
      var componentInstance = instantiateReactComponent(element, null);
      return componentInstance.mountComponent(id, transaction, emptyObject);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
    // Revert to the DOM batching strategy since these two renderers
    // currently share these stateful modules.
    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
  }
}

module.exports = {
  renderToString: renderToString,
  renderToStaticMarkup: renderToStaticMarkup
};
}).call(this,require('_process'))
},{"./ReactDefaultBatchingStrategy":71,"./ReactElement":75,"./ReactInstanceHandles":84,"./ReactMarkupChecksum":87,"./ReactServerBatchingStrategy":102,"./ReactServerRenderingTransaction":104,"./ReactUpdates":106,"./instantiateReactComponent":141,"_process":21,"fbjs/lib/emptyObject":160,"fbjs/lib/invariant":167}],104:[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactServerRenderingTransaction
 * @typechecks
 */

'use strict';

var PooledClass = require('./PooledClass');
var CallbackQueue = require('./CallbackQueue');
var Transaction = require('./Transaction');

var assign = require('./Object.assign');
var emptyFunction = require('fbjs/lib/emptyFunction');

/**
 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
 * during the performing of the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function () {
    this.reactMountReady.reset();
  },

  close: emptyFunction
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [ON_DOM_READY_QUEUEING];

/**
 * @class ReactServerRenderingTransaction
 * @param {boolean} renderToStaticMarkup
 */
function ReactServerRenderingTransaction(renderToStaticMarkup) {
  this.reinitializeTransaction();
  this.renderToStaticMarkup = renderToStaticMarkup;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.useCreateElement = false;
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array} Empty list of operation wrap procedures.
   */
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function () {
    return this.reactMountReady;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be reused.
   */
  destructor: function () {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;
  }
};

assign(ReactServerRenderingTransaction.prototype, Transaction.Mixin, Mixin);

PooledClass.addPoolingTo(ReactServerRenderingTransaction);

module.exports = ReactServerRenderingTransaction;
},{"./CallbackQueue":28,"./Object.assign":45,"./PooledClass":46,"./Transaction":123,"fbjs/lib/emptyFunction":159}],105:[function(require,module,exports){
(function (process){
/**
 * Copyright 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactUpdateQueue
 */

'use strict';

var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactElement = require('./ReactElement');
var ReactInstanceMap = require('./ReactInstanceMap');
var ReactUpdates = require('./ReactUpdates');

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

function enqueueUpdate(internalInstance) {
  ReactUpdates.enqueueUpdate(internalInstance);
}

function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
  var internalInstance = ReactInstanceMap.get(publicInstance);
  if (!internalInstance) {
    if (process.env.NODE_ENV !== 'production') {
      // Only warn when we have a callerName. Otherwise we should be silent.
      // We're probably calling from enqueueCallback. We don't want to warn
      // there because we already warned for the corresponding lifecycle method.
      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor.displayName) : undefined;
    }
    return null;
  }

  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition ' + '(such as within `render`). Render methods should be a pure function ' + 'of props and state.', callerName) : undefined;
  }

  return internalInstance;
}

/**
 * ReactUpdateQueue allows for state updates to be scheduled into a later
 * reconciliation step.
 */
var ReactUpdateQueue = {

  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    if (process.env.NODE_ENV !== 'production') {
      var owner = ReactCurrentOwner.current;
      if (owner !== null) {
        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
        owner._warnedAboutRefsInRender = true;
      }
    }
    var internalInstance = ReactInstanceMap.get(publicInstance);
    if (internalInstance) {
      // During componentWillMount and render this will still be null but after
      // that will always render to something. At least for now. So we can use
      // this hack.
      return !!internalInstance._renderedComponent;
    } else {
      return false;
    }
  },

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */
  enqueueCallback: function (publicInstance, callback) {
    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

    // Previously we would throw an error if we didn't have an internal
    // instance. Since we want to make it a no-op instead, we mirror the same
    // behavior we have in other enqueue* methods.
    // We also need to ignore callbacks in componentWillMount. See
    // enqueueUpdates.
    if (!internalInstance) {
      return null;
    }

    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    // TODO: The callback here is ignored when setState is called from
    // componentWillMount. Either fix it or disallow doing so completely in
    // favor of getInitialState. Alternatively, we can disallow
    // componentWillMount during server-side rendering.
    enqueueUpdate(internalInstance);
  },

  enqueueCallbackInternal: function (internalInstance, callback) {
    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    enqueueUpdate(internalInstance);
  },

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingForceUpdate = true;

    enqueueUpdate(internalInstance);
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingStateQueue = [completeState];
    internalInstance._pendingReplaceState = true;

    enqueueUpdate(internalInstance);
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

    if (!internalInstance) {
      return;
    }

    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
    queue.push(partialState);

    enqueueUpdate(internalInstance);
  },

  /**
   * Sets a subset of the props.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialProps Subset of the next props.
   * @internal
   */
  enqueueSetProps: function (publicInstance, partialProps) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setProps');
    if (!internalInstance) {
      return;
    }
    ReactUpdateQueue.enqueueSetPropsInternal(internalInstance, partialProps);
  },

  enqueueSetPropsInternal: function (internalInstance, partialProps) {
    var topLevelWrapper = internalInstance._topLevelWrapper;
    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setProps(...): You called `setProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;

    // Merge with the pending element if it exists, otherwise with existing
    // element props.
    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
    var element = wrapElement.props;
    var props = assign({}, element.props, partialProps);
    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));

    enqueueUpdate(topLevelWrapper);
  },

  /**
   * Replaces all of the props.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} props New props.
   * @internal
   */
  enqueueReplaceProps: function (publicInstance, props) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceProps');
    if (!internalInstance) {
      return;
    }
    ReactUpdateQueue.enqueueReplacePropsInternal(internalInstance, props);
  },

  enqueueReplacePropsInternal: function (internalInstance, props) {
    var topLevelWrapper = internalInstance._topLevelWrapper;
    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'replaceProps(...): You called `replaceProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;

    // Merge with the pending element if it exists, otherwise with existing
    // element props.
    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
    var element = wrapElement.props;
    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));

    enqueueUpdate(topLevelWrapper);
  },

  enqueueElementInternal: function (internalInstance, newElement) {
    internalInstance._pendingElement = newElement;
    enqueueUpdate(internalInstance);
  }

};

module.exports = ReactUpdateQueue;
}).call(this,require('_process'))
},{"./Object.assign":45,"./ReactCurrentOwner":57,"./ReactElement":75,"./ReactInstanceMap":85,"./ReactUpdates":106,"_process":21,"fbjs/lib/invariant":167,"fbjs/lib/warning":178}],106:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactUpdates
 */

'use strict';

var CallbackQueue = require('./CallbackQueue');
var PooledClass = require('./PooledClass');
var ReactPerf = require('./ReactPerf');
var ReactReconciler = require('./ReactReconciler');
var Transaction = require('./Transaction');

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');

var dirtyComponents = [];
var asapCallbackQueue = CallbackQueue.getPooled();
var asapEnqueued = false;

var batchingStrategy = null;

function ensureInjected() {
  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching ' + 'strategy') : invariant(false) : undefined;
}

var NESTED_UPDATES = {
  initialize: function () {
    this.dirtyComponentsLength = dirtyComponents.length;
  },
  close: function () {
    if (this.dirtyComponentsLength !== dirtyComponents.length) {
      // Additional updates were enqueued by componentDidUpdate handlers or
      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
      // these new updates so that if A's componentDidUpdate calls setState on
      // B, B will update before the callback A's updater provided when calling
      // setState.
      dirtyComponents.splice(0, this.dirtyComponentsLength);
      flushBatchedUpdates();
    } else {
      dirtyComponents.length = 0;
    }
  }
};

var UPDATE_QUEUEING = {
  initialize: function () {
    this.callbackQueue.reset();
  },
  close: function () {
    this.callbackQueue.notifyAll();
  }
};

var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

function ReactUpdatesFlushTransaction() {
  this.reinitializeTransaction();
  this.dirtyComponentsLength = null;
  this.callbackQueue = CallbackQueue.getPooled();
  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled( /* forceHTML */false);
}

assign(ReactUpdatesFlushTransaction.prototype, Transaction.Mixin, {
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  destructor: function () {
    this.dirtyComponentsLength = null;
    CallbackQueue.release(this.callbackQueue);
    this.callbackQueue = null;
    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
    this.reconcileTransaction = null;
  },

  perform: function (method, scope, a) {
    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
    // with this transaction's wrappers around it.
    return Transaction.Mixin.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
  }
});

PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

function batchedUpdates(callback, a, b, c, d, e) {
  ensureInjected();
  batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
}

/**
 * Array comparator for ReactComponents by mount ordering.
 *
 * @param {ReactComponent} c1 first component you're comparing
 * @param {ReactComponent} c2 second component you're comparing
 * @return {number} Return value usable by Array.prototype.sort().
 */
function mountOrderComparator(c1, c2) {
  return c1._mountOrder - c2._mountOrder;
}

function runBatchedUpdates(transaction) {
  var len = transaction.dirtyComponentsLength;
  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to ' + 'match dirty-components array length (%s).', len, dirtyComponents.length) : invariant(false) : undefined;

  // Since reconciling a component higher in the owner hierarchy usually (not
  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
  // them before their children by sorting the array.
  dirtyComponents.sort(mountOrderComparator);

  for (var i = 0; i < len; i++) {
    // If a component is unmounted before pending changes apply, it will still
    // be here, but we assume that it has cleared its _pendingCallbacks and
    // that performUpdateIfNecessary is a noop.
    var component = dirtyComponents[i];

    // If performUpdateIfNecessary happens to enqueue any new updates, we
    // shouldn't execute the callbacks until the next render happens, so
    // stash the callbacks first
    var callbacks = component._pendingCallbacks;
    component._pendingCallbacks = null;

    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction);

    if (callbacks) {
      for (var j = 0; j < callbacks.length; j++) {
        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
      }
    }
  }
}

var flushBatchedUpdates = function () {
  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
  // array and perform any updates enqueued by mount-ready handlers (i.e.,
  // componentDidUpdate) but we need to check here too in order to catch
  // updates enqueued by setState callbacks and asap calls.
  while (dirtyComponents.length || asapEnqueued) {
    if (dirtyComponents.length) {
      var transaction = ReactUpdatesFlushTransaction.getPooled();
      transaction.perform(runBatchedUpdates, null, transaction);
      ReactUpdatesFlushTransaction.release(transaction);
    }

    if (asapEnqueued) {
      asapEnqueued = false;
      var queue = asapCallbackQueue;
      asapCallbackQueue = CallbackQueue.getPooled();
      queue.notifyAll();
      CallbackQueue.release(queue);
    }
  }
};
flushBatchedUpdates = ReactPerf.measure('ReactUpdates', 'flushBatchedUpdates', flushBatchedUpdates);

/**
 * Mark a component as needing a rerender, adding an optional callback to a
 * list of functions which will be executed once the rerender occurs.
 */
function enqueueUpdate(component) {
  ensureInjected();

  // Various parts of our code (such as ReactCompositeComponent's
  // _renderValidatedComponent) assume that calls to render aren't nested;
  // verify that that's the case. (This is called by each top-level update
  // function, like setProps, setState, forceUpdate, etc.; creation and
  // destruction of top-level components is guarded in ReactMount.)

  if (!batchingStrategy.isBatchingUpdates) {
    batchingStrategy.batchedUpdates(enqueueUpdate, component);
    return;
  }

  dirtyComponents.push(component);
}

/**
 * Enqueue a callback to be run at the end of the current batching cycle. Throws
 * if no updates are currently being performed.
 */
function asap(callback, context) {
  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' + 'updates are not being batched.') : invariant(false) : undefined;
  asapCallbackQueue.enqueue(callback, context);
  asapEnqueued = true;
}

var ReactUpdatesInjection = {
  injectReconcileTransaction: function (ReconcileTransaction) {
    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : invariant(false) : undefined;
    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
  },

  injectBatchingStrategy: function (_batchingStrategy) {
    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : invariant(false) : undefined;
    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : invariant(false) : undefined;
    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : invariant(false) : undefined;
    batchingStrategy = _batchingStrategy;
  }
};

var ReactUpdates = {
  /**
   * React references `ReactReconcileTransaction` using this property in order
   * to allow dependency injection.
   *
   * @internal
   */
  ReactReconcileTransaction: null,

  batchedUpdates: batchedUpdates,
  enqueueUpdate: enqueueUpdate,
  flushBatchedUpdates: flushBatchedUpdates,
  injection: ReactUpdatesInjection,
  asap: asap
};

module.exports = ReactUpdates;
}).call(this,require('_process'))
},{"./CallbackQueue":28,"./Object.assign":45,"./PooledClass":46,"./ReactPerf":94,"./ReactReconciler":99,"./Transaction":123,"_process":21,"fbjs/lib/invariant":167}],107:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactVersion
 */

'use strict';

module.exports = '0.14.9';
},{}],108:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SVGDOMPropertyConfig
 */

'use strict';

var DOMProperty = require('./DOMProperty');

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

var NS = {
  xlink: 'http://www.w3.org/1999/xlink',
  xml: 'http://www.w3.org/XML/1998/namespace'
};

var SVGDOMPropertyConfig = {
  Properties: {
    clipPath: MUST_USE_ATTRIBUTE,
    cx: MUST_USE_ATTRIBUTE,
    cy: MUST_USE_ATTRIBUTE,
    d: MUST_USE_ATTRIBUTE,
    dx: MUST_USE_ATTRIBUTE,
    dy: MUST_USE_ATTRIBUTE,
    fill: MUST_USE_ATTRIBUTE,
    fillOpacity: MUST_USE_ATTRIBUTE,
    fontFamily: MUST_USE_ATTRIBUTE,
    fontSize: MUST_USE_ATTRIBUTE,
    fx: MUST_USE_ATTRIBUTE,
    fy: MUST_USE_ATTRIBUTE,
    gradientTransform: MUST_USE_ATTRIBUTE,
    gradientUnits: MUST_USE_ATTRIBUTE,
    markerEnd: MUST_USE_ATTRIBUTE,
    markerMid: MUST_USE_ATTRIBUTE,
    markerStart: MUST_USE_ATTRIBUTE,
    offset: MUST_USE_ATTRIBUTE,
    opacity: MUST_USE_ATTRIBUTE,
    patternContentUnits: MUST_USE_ATTRIBUTE,
    patternUnits: MUST_USE_ATTRIBUTE,
    points: MUST_USE_ATTRIBUTE,
    preserveAspectRatio: MUST_USE_ATTRIBUTE,
    r: MUST_USE_ATTRIBUTE,
    rx: MUST_USE_ATTRIBUTE,
    ry: MUST_USE_ATTRIBUTE,
    spreadMethod: MUST_USE_ATTRIBUTE,
    stopColor: MUST_USE_ATTRIBUTE,
    stopOpacity: MUST_USE_ATTRIBUTE,
    stroke: MUST_USE_ATTRIBUTE,
    strokeDasharray: MUST_USE_ATTRIBUTE,
    strokeLinecap: MUST_USE_ATTRIBUTE,
    strokeOpacity: MUST_USE_ATTRIBUTE,
    strokeWidth: MUST_USE_ATTRIBUTE,
    textAnchor: MUST_USE_ATTRIBUTE,
    transform: MUST_USE_ATTRIBUTE,
    version: MUST_USE_ATTRIBUTE,
    viewBox: MUST_USE_ATTRIBUTE,
    x1: MUST_USE_ATTRIBUTE,
    x2: MUST_USE_ATTRIBUTE,
    x: MUST_USE_ATTRIBUTE,
    xlinkActuate: MUST_USE_ATTRIBUTE,
    xlinkArcrole: MUST_USE_ATTRIBUTE,
    xlinkHref: MUST_USE_ATTRIBUTE,
    xlinkRole: MUST_USE_ATTRIBUTE,
    xlinkShow: MUST_USE_ATTRIBUTE,
    xlinkTitle: MUST_USE_ATTRIBUTE,
    xlinkType: MUST_USE_ATTRIBUTE,
    xmlBase: MUST_USE_ATTRIBUTE,
    xmlLang: MUST_USE_ATTRIBUTE,
    xmlSpace: MUST_USE_ATTRIBUTE,
    y1: MUST_USE_ATTRIBUTE,
    y2: MUST_USE_ATTRIBUTE,
    y: MUST_USE_ATTRIBUTE
  },
  DOMAttributeNamespaces: {
    xlinkActuate: NS.xlink,
    xlinkArcrole: NS.xlink,
    xlinkHref: NS.xlink,
    xlinkRole: NS.xlink,
    xlinkShow: NS.xlink,
    xlinkTitle: NS.xlink,
    xlinkType: NS.xlink,
    xmlBase: NS.xml,
    xmlLang: NS.xml,
    xmlSpace: NS.xml
  },
  DOMAttributeNames: {
    clipPath: 'clip-path',
    fillOpacity: 'fill-opacity',
    fontFamily: 'font-family',
    fontSize: 'font-size',
    gradientTransform: 'gradientTransform',
    gradientUnits: 'gradientUnits',
    markerEnd: 'marker-end',
    markerMid: 'marker-mid',
    markerStart: 'marker-start',
    patternContentUnits: 'patternContentUnits',
    patternUnits: 'patternUnits',
    preserveAspectRatio: 'preserveAspectRatio',
    spreadMethod: 'spreadMethod',
    stopColor: 'stop-color',
    stopOpacity: 'stop-opacity',
    strokeDasharray: 'stroke-dasharray',
    strokeLinecap: 'stroke-linecap',
    strokeOpacity: 'stroke-opacity',
    strokeWidth: 'stroke-width',
    textAnchor: 'text-anchor',
    viewBox: 'viewBox',
    xlinkActuate: 'xlink:actuate',
    xlinkArcrole: 'xlink:arcrole',
    xlinkHref: 'xlink:href',
    xlinkRole: 'xlink:role',
    xlinkShow: 'xlink:show',
    xlinkTitle: 'xlink:title',
    xlinkType: 'xlink:type',
    xmlBase: 'xml:base',
    xmlLang: 'xml:lang',
    xmlSpace: 'xml:space'
  }
};

module.exports = SVGDOMPropertyConfig;
},{"./DOMProperty":32}],109:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SelectEventPlugin
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventPropagators = require('./EventPropagators');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var ReactInputSelection = require('./ReactInputSelection');
var SyntheticEvent = require('./SyntheticEvent');

var getActiveElement = require('fbjs/lib/getActiveElement');
var isTextInputElement = require('./isTextInputElement');
var keyOf = require('fbjs/lib/keyOf');
var shallowEqual = require('fbjs/lib/shallowEqual');

var topLevelTypes = EventConstants.topLevelTypes;

var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

var eventTypes = {
  select: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onSelect: null }),
      captured: keyOf({ onSelectCapture: null })
    },
    dependencies: [topLevelTypes.topBlur, topLevelTypes.topContextMenu, topLevelTypes.topFocus, topLevelTypes.topKeyDown, topLevelTypes.topMouseDown, topLevelTypes.topMouseUp, topLevelTypes.topSelectionChange]
  }
};

var activeElement = null;
var activeElementID = null;
var lastSelection = null;
var mouseDown = false;

// Track whether a listener exists for this plugin. If none exist, we do
// not extract events.
var hasListener = false;
var ON_SELECT_KEY = keyOf({ onSelect: null });

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getSelection(node) {
  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else if (window.getSelection) {
    var selection = window.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  } else if (document.selection) {
    var range = document.selection.createRange();
    return {
      parentElement: range.parentElement(),
      text: range.text,
      top: range.boundingTop,
      left: range.boundingLeft
    };
  }
}

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @return {?SyntheticEvent}
 */
function constructSelectEvent(nativeEvent, nativeEventTarget) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
    return null;
  }

  // Only fire when selection has actually changed.
  var currentSelection = getSelection(activeElement);
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;

    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementID, nativeEvent, nativeEventTarget);

    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement;

    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

    return syntheticEvent;
  }

  return null;
}

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */
var SelectEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
    if (!hasListener) {
      return null;
    }

    switch (topLevelType) {
      // Track the input node that has focus.
      case topLevelTypes.topFocus:
        if (isTextInputElement(topLevelTarget) || topLevelTarget.contentEditable === 'true') {
          activeElement = topLevelTarget;
          activeElementID = topLevelTargetID;
          lastSelection = null;
        }
        break;
      case topLevelTypes.topBlur:
        activeElement = null;
        activeElementID = null;
        lastSelection = null;
        break;

      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.
      case topLevelTypes.topMouseDown:
        mouseDown = true;
        break;
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topMouseUp:
        mouseDown = false;
        return constructSelectEvent(nativeEvent, nativeEventTarget);

      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't). IE's event fires out of order with respect
      // to key and input events on deletion, so we discard it.
      //
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      // This is also our approach for IE handling, for the reason above.
      case topLevelTypes.topSelectionChange:
        if (skipSelectionChangeEvent) {
          break;
        }
      // falls through
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        return constructSelectEvent(nativeEvent, nativeEventTarget);
    }

    return null;
  },

  didPutListener: function (id, registrationName, listener) {
    if (registrationName === ON_SELECT_KEY) {
      hasListener = true;
    }
  }
};

module.exports = SelectEventPlugin;
},{"./EventConstants":37,"./EventPropagators":41,"./ReactInputSelection":83,"./SyntheticEvent":115,"./isTextInputElement":143,"fbjs/lib/ExecutionEnvironment":153,"fbjs/lib/getActiveElement":162,"fbjs/lib/keyOf":171,"fbjs/lib/shallowEqual":176}],110:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ServerReactRootIndex
 * @typechecks
 */

'use strict';

/**
 * Size of the reactRoot ID space. We generate random numbers for React root
 * IDs and if there's a collision the events and DOM update system will
 * get confused. In the future we need a way to generate GUIDs but for
 * now this will work on a smaller scale.
 */
var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

var ServerReactRootIndex = {
  createReactRootIndex: function () {
    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
  }
};

module.exports = ServerReactRootIndex;
},{}],111:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SimpleEventPlugin
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventListener = require('fbjs/lib/EventListener');
var EventPropagators = require('./EventPropagators');
var ReactMount = require('./ReactMount');
var SyntheticClipboardEvent = require('./SyntheticClipboardEvent');
var SyntheticEvent = require('./SyntheticEvent');
var SyntheticFocusEvent = require('./SyntheticFocusEvent');
var SyntheticKeyboardEvent = require('./SyntheticKeyboardEvent');
var SyntheticMouseEvent = require('./SyntheticMouseEvent');
var SyntheticDragEvent = require('./SyntheticDragEvent');
var SyntheticTouchEvent = require('./SyntheticTouchEvent');
var SyntheticUIEvent = require('./SyntheticUIEvent');
var SyntheticWheelEvent = require('./SyntheticWheelEvent');

var emptyFunction = require('fbjs/lib/emptyFunction');
var getEventCharCode = require('./getEventCharCode');
var invariant = require('fbjs/lib/invariant');
var keyOf = require('fbjs/lib/keyOf');

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  abort: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onAbort: true }),
      captured: keyOf({ onAbortCapture: true })
    }
  },
  blur: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onBlur: true }),
      captured: keyOf({ onBlurCapture: true })
    }
  },
  canPlay: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCanPlay: true }),
      captured: keyOf({ onCanPlayCapture: true })
    }
  },
  canPlayThrough: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCanPlayThrough: true }),
      captured: keyOf({ onCanPlayThroughCapture: true })
    }
  },
  click: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onClick: true }),
      captured: keyOf({ onClickCapture: true })
    }
  },
  contextMenu: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onContextMenu: true }),
      captured: keyOf({ onContextMenuCapture: true })
    }
  },
  copy: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCopy: true }),
      captured: keyOf({ onCopyCapture: true })
    }
  },
  cut: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCut: true }),
      captured: keyOf({ onCutCapture: true })
    }
  },
  doubleClick: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDoubleClick: true }),
      captured: keyOf({ onDoubleClickCapture: true })
    }
  },
  drag: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDrag: true }),
      captured: keyOf({ onDragCapture: true })
    }
  },
  dragEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDragEnd: true }),
      captured: keyOf({ onDragEndCapture: true })
    }
  },
  dragEnter: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDragEnter: true }),
      captured: keyOf({ onDragEnterCapture: true })
    }
  },
  dragExit: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDragExit: true }),
      captured: keyOf({ onDragExitCapture: true })
    }
  },
  dragLeave: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDragLeave: true }),
      captured: keyOf({ onDragLeaveCapture: true })
    }
  },
  dragOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDragOver: true }),
      captured: keyOf({ onDragOverCapture: true })
    }
  },
  dragStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDragStart: true }),
      captured: keyOf({ onDragStartCapture: true })
    }
  },
  drop: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDrop: true }),
      captured: keyOf({ onDropCapture: true })
    }
  },
  durationChange: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDurationChange: true }),
      captured: keyOf({ onDurationChangeCapture: true })
    }
  },
  emptied: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onEmptied: true }),
      captured: keyOf({ onEmptiedCapture: true })
    }
  },
  encrypted: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onEncrypted: true }),
      captured: keyOf({ onEncryptedCapture: true })
    }
  },
  ended: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onEnded: true }),
      captured: keyOf({ onEndedCapture: true })
    }
  },
  error: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onError: true }),
      captured: keyOf({ onErrorCapture: true })
    }
  },
  focus: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onFocus: true }),
      captured: keyOf({ onFocusCapture: true })
    }
  },
  input: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onInput: true }),
      captured: keyOf({ onInputCapture: true })
    }
  },
  keyDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onKeyDown: true }),
      captured: keyOf({ onKeyDownCapture: true })
    }
  },
  keyPress: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onKeyPress: true }),
      captured: keyOf({ onKeyPressCapture: true })
    }
  },
  keyUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onKeyUp: true }),
      captured: keyOf({ onKeyUpCapture: true })
    }
  },
  load: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onLoad: true }),
      captured: keyOf({ onLoadCapture: true })
    }
  },
  loadedData: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onLoadedData: true }),
      captured: keyOf({ onLoadedDataCapture: true })
    }
  },
  loadedMetadata: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onLoadedMetadata: true }),
      captured: keyOf({ onLoadedMetadataCapture: true })
    }
  },
  loadStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onLoadStart: true }),
      captured: keyOf({ onLoadStartCapture: true })
    }
  },
  // Note: We do not allow listening to mouseOver events. Instead, use the
  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
  mouseDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onMouseDown: true }),
      captured: keyOf({ onMouseDownCapture: true })
    }
  },
  mouseMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onMouseMove: true }),
      captured: keyOf({ onMouseMoveCapture: true })
    }
  },
  mouseOut: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onMouseOut: true }),
      captured: keyOf({ onMouseOutCapture: true })
    }
  },
  mouseOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onMouseOver: true }),
      captured: keyOf({ onMouseOverCapture: true })
    }
  },
  mouseUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onMouseUp: true }),
      captured: keyOf({ onMouseUpCapture: true })
    }
  },
  paste: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onPaste: true }),
      captured: keyOf({ onPasteCapture: true })
    }
  },
  pause: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onPause: true }),
      captured: keyOf({ onPauseCapture: true })
    }
  },
  play: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onPlay: true }),
      captured: keyOf({ onPlayCapture: true })
    }
  },
  playing: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onPlaying: true }),
      captured: keyOf({ onPlayingCapture: true })
    }
  },
  progress: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onProgress: true }),
      captured: keyOf({ onProgressCapture: true })
    }
  },
  rateChange: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onRateChange: true }),
      captured: keyOf({ onRateChangeCapture: true })
    }
  },
  reset: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onReset: true }),
      captured: keyOf({ onResetCapture: true })
    }
  },
  scroll: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onScroll: true }),
      captured: keyOf({ onScrollCapture: true })
    }
  },
  seeked: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onSeeked: true }),
      captured: keyOf({ onSeekedCapture: true })
    }
  },
  seeking: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onSeeking: true }),
      captured: keyOf({ onSeekingCapture: true })
    }
  },
  stalled: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onStalled: true }),
      captured: keyOf({ onStalledCapture: true })
    }
  },
  submit: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onSubmit: true }),
      captured: keyOf({ onSubmitCapture: true })
    }
  },
  suspend: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onSuspend: true }),
      captured: keyOf({ onSuspendCapture: true })
    }
  },
  timeUpdate: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onTimeUpdate: true }),
      captured: keyOf({ onTimeUpdateCapture: true })
    }
  },
  touchCancel: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onTouchCancel: true }),
      captured: keyOf({ onTouchCancelCapture: true })
    }
  },
  touchEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onTouchEnd: true }),
      captured: keyOf({ onTouchEndCapture: true })
    }
  },
  touchMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onTouchMove: true }),
      captured: keyOf({ onTouchMoveCapture: true })
    }
  },
  touchStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onTouchStart: true }),
      captured: keyOf({ onTouchStartCapture: true })
    }
  },
  volumeChange: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onVolumeChange: true }),
      captured: keyOf({ onVolumeChangeCapture: true })
    }
  },
  waiting: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onWaiting: true }),
      captured: keyOf({ onWaitingCapture: true })
    }
  },
  wheel: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onWheel: true }),
      captured: keyOf({ onWheelCapture: true })
    }
  }
};

var topLevelEventsToDispatchConfig = {
  topAbort: eventTypes.abort,
  topBlur: eventTypes.blur,
  topCanPlay: eventTypes.canPlay,
  topCanPlayThrough: eventTypes.canPlayThrough,
  topClick: eventTypes.click,
  topContextMenu: eventTypes.contextMenu,
  topCopy: eventTypes.copy,
  topCut: eventTypes.cut,
  topDoubleClick: eventTypes.doubleClick,
  topDrag: eventTypes.drag,
  topDragEnd: eventTypes.dragEnd,
  topDragEnter: eventTypes.dragEnter,
  topDragExit: eventTypes.dragExit,
  topDragLeave: eventTypes.dragLeave,
  topDragOver: eventTypes.dragOver,
  topDragStart: eventTypes.dragStart,
  topDrop: eventTypes.drop,
  topDurationChange: eventTypes.durationChange,
  topEmptied: eventTypes.emptied,
  topEncrypted: eventTypes.encrypted,
  topEnded: eventTypes.ended,
  topError: eventTypes.error,
  topFocus: eventTypes.focus,
  topInput: eventTypes.input,
  topKeyDown: eventTypes.keyDown,
  topKeyPress: eventTypes.keyPress,
  topKeyUp: eventTypes.keyUp,
  topLoad: eventTypes.load,
  topLoadedData: eventTypes.loadedData,
  topLoadedMetadata: eventTypes.loadedMetadata,
  topLoadStart: eventTypes.loadStart,
  topMouseDown: eventTypes.mouseDown,
  topMouseMove: eventTypes.mouseMove,
  topMouseOut: eventTypes.mouseOut,
  topMouseOver: eventTypes.mouseOver,
  topMouseUp: eventTypes.mouseUp,
  topPaste: eventTypes.paste,
  topPause: eventTypes.pause,
  topPlay: eventTypes.play,
  topPlaying: eventTypes.playing,
  topProgress: eventTypes.progress,
  topRateChange: eventTypes.rateChange,
  topReset: eventTypes.reset,
  topScroll: eventTypes.scroll,
  topSeeked: eventTypes.seeked,
  topSeeking: eventTypes.seeking,
  topStalled: eventTypes.stalled,
  topSubmit: eventTypes.submit,
  topSuspend: eventTypes.suspend,
  topTimeUpdate: eventTypes.timeUpdate,
  topTouchCancel: eventTypes.touchCancel,
  topTouchEnd: eventTypes.touchEnd,
  topTouchMove: eventTypes.touchMove,
  topTouchStart: eventTypes.touchStart,
  topVolumeChange: eventTypes.volumeChange,
  topWaiting: eventTypes.waiting,
  topWheel: eventTypes.wheel
};

for (var type in topLevelEventsToDispatchConfig) {
  topLevelEventsToDispatchConfig[type].dependencies = [type];
}

var ON_CLICK_KEY = keyOf({ onClick: null });
var onClickListeners = {};

var SimpleEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
    if (!dispatchConfig) {
      return null;
    }
    var EventConstructor;
    switch (topLevelType) {
      case topLevelTypes.topAbort:
      case topLevelTypes.topCanPlay:
      case topLevelTypes.topCanPlayThrough:
      case topLevelTypes.topDurationChange:
      case topLevelTypes.topEmptied:
      case topLevelTypes.topEncrypted:
      case topLevelTypes.topEnded:
      case topLevelTypes.topError:
      case topLevelTypes.topInput:
      case topLevelTypes.topLoad:
      case topLevelTypes.topLoadedData:
      case topLevelTypes.topLoadedMetadata:
      case topLevelTypes.topLoadStart:
      case topLevelTypes.topPause:
      case topLevelTypes.topPlay:
      case topLevelTypes.topPlaying:
      case topLevelTypes.topProgress:
      case topLevelTypes.topRateChange:
      case topLevelTypes.topReset:
      case topLevelTypes.topSeeked:
      case topLevelTypes.topSeeking:
      case topLevelTypes.topStalled:
      case topLevelTypes.topSubmit:
      case topLevelTypes.topSuspend:
      case topLevelTypes.topTimeUpdate:
      case topLevelTypes.topVolumeChange:
      case topLevelTypes.topWaiting:
        // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0
        EventConstructor = SyntheticEvent;
        break;
      case topLevelTypes.topKeyPress:
        // FireFox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }
      /* falls through */
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        EventConstructor = SyntheticKeyboardEvent;
        break;
      case topLevelTypes.topBlur:
      case topLevelTypes.topFocus:
        EventConstructor = SyntheticFocusEvent;
        break;
      case topLevelTypes.topClick:
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }
      /* falls through */
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topDoubleClick:
      case topLevelTypes.topMouseDown:
      case topLevelTypes.topMouseMove:
      case topLevelTypes.topMouseOut:
      case topLevelTypes.topMouseOver:
      case topLevelTypes.topMouseUp:
        EventConstructor = SyntheticMouseEvent;
        break;
      case topLevelTypes.topDrag:
      case topLevelTypes.topDragEnd:
      case topLevelTypes.topDragEnter:
      case topLevelTypes.topDragExit:
      case topLevelTypes.topDragLeave:
      case topLevelTypes.topDragOver:
      case topLevelTypes.topDragStart:
      case topLevelTypes.topDrop:
        EventConstructor = SyntheticDragEvent;
        break;
      case topLevelTypes.topTouchCancel:
      case topLevelTypes.topTouchEnd:
      case topLevelTypes.topTouchMove:
      case topLevelTypes.topTouchStart:
        EventConstructor = SyntheticTouchEvent;
        break;
      case topLevelTypes.topScroll:
        EventConstructor = SyntheticUIEvent;
        break;
      case topLevelTypes.topWheel:
        EventConstructor = SyntheticWheelEvent;
        break;
      case topLevelTypes.topCopy:
      case topLevelTypes.topCut:
      case topLevelTypes.topPaste:
        EventConstructor = SyntheticClipboardEvent;
        break;
    }
    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : invariant(false) : undefined;
    var event = EventConstructor.getPooled(dispatchConfig, topLevelTargetID, nativeEvent, nativeEventTarget);
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  },

  didPutListener: function (id, registrationName, listener) {
    // Mobile Safari does not fire properly bubble click events on
    // non-interactive elements, which means delegated click listeners do not
    // fire. The workaround for this bug involves attaching an empty click
    // listener on the target node.
    if (registrationName === ON_CLICK_KEY) {
      var node = ReactMount.getNode(id);
      if (!onClickListeners[id]) {
        onClickListeners[id] = EventListener.listen(node, 'click', emptyFunction);
      }
    }
  },

  willDeleteListener: function (id, registrationName) {
    if (registrationName === ON_CLICK_KEY) {
      onClickListeners[id].remove();
      delete onClickListeners[id];
    }
  }

};

module.exports = SimpleEventPlugin;
}).call(this,require('_process'))
},{"./EventConstants":37,"./EventPropagators":41,"./ReactMount":88,"./SyntheticClipboardEvent":112,"./SyntheticDragEvent":114,"./SyntheticEvent":115,"./SyntheticFocusEvent":116,"./SyntheticKeyboardEvent":118,"./SyntheticMouseEvent":119,"./SyntheticTouchEvent":120,"./SyntheticUIEvent":121,"./SyntheticWheelEvent":122,"./getEventCharCode":134,"_process":21,"fbjs/lib/EventListener":152,"fbjs/lib/emptyFunction":159,"fbjs/lib/invariant":167,"fbjs/lib/keyOf":171}],112:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticClipboardEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */
var ClipboardEventInterface = {
  clipboardData: function (event) {
    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

module.exports = SyntheticClipboardEvent;
},{"./SyntheticEvent":115}],113:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticCompositionEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */
var CompositionEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

module.exports = SyntheticCompositionEvent;
},{"./SyntheticEvent":115}],114:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticDragEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticMouseEvent = require('./SyntheticMouseEvent');

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var DragEventInterface = {
  dataTransfer: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

module.exports = SyntheticDragEvent;
},{"./SyntheticMouseEvent":119}],115:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticEvent
 * @typechecks static-only
 */

'use strict';

var PooledClass = require('./PooledClass');

var assign = require('./Object.assign');
var emptyFunction = require('fbjs/lib/emptyFunction');
var warning = require('fbjs/lib/warning');

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var EventInterface = {
  type: null,
  target: null,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: emptyFunction.thatReturnsNull,
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function (event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 */
function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  this.dispatchConfig = dispatchConfig;
  this.dispatchMarker = dispatchMarker;
  this.nativeEvent = nativeEvent;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      if (propName === 'target') {
        this.target = nativeEventTarget;
      } else {
        this[propName] = nativeEvent[propName];
      }
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  } else {
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
  }
  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
}

assign(SyntheticEvent.prototype, {

  preventDefault: function () {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `preventDefault` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
    }
    if (!event) {
      return;
    }

    if (event.preventDefault) {
      event.preventDefault();
    } else {
      event.returnValue = false;
    }
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  },

  stopPropagation: function () {
    var event = this.nativeEvent;
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `stopPropagation` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
    }
    if (!event) {
      return;
    }

    if (event.stopPropagation) {
      event.stopPropagation();
    } else {
      event.cancelBubble = true;
    }
    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function () {
    this.isPersistent = emptyFunction.thatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: emptyFunction.thatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function () {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      this[propName] = null;
    }
    this.dispatchConfig = null;
    this.dispatchMarker = null;
    this.nativeEvent = null;
  }

});

SyntheticEvent.Interface = EventInterface;

/**
 * Helper to reduce boilerplate when creating subclasses.
 *
 * @param {function} Class
 * @param {?object} Interface
 */
SyntheticEvent.augmentClass = function (Class, Interface) {
  var Super = this;

  var prototype = Object.create(Super.prototype);
  assign(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = assign({}, Super.Interface, Interface);
  Class.augmentClass = Super.augmentClass;

  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
};

PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

module.exports = SyntheticEvent;
}).call(this,require('_process'))
},{"./Object.assign":45,"./PooledClass":46,"_process":21,"fbjs/lib/emptyFunction":159,"fbjs/lib/warning":178}],116:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticFocusEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticUIEvent = require('./SyntheticUIEvent');

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var FocusEventInterface = {
  relatedTarget: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

module.exports = SyntheticFocusEvent;
},{"./SyntheticUIEvent":121}],117:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticInputEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
var InputEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);

module.exports = SyntheticInputEvent;
},{"./SyntheticEvent":115}],118:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticKeyboardEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticUIEvent = require('./SyntheticUIEvent');

var getEventCharCode = require('./getEventCharCode');
var getEventKey = require('./getEventKey');
var getEventModifierState = require('./getEventModifierState');

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var KeyboardEventInterface = {
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function (event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.

    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    return 0;
  },
  keyCode: function (event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.

    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  },
  which: function (event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

module.exports = SyntheticKeyboardEvent;
},{"./SyntheticUIEvent":121,"./getEventCharCode":134,"./getEventKey":135,"./getEventModifierState":136}],119:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticMouseEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticUIEvent = require('./SyntheticUIEvent');
var ViewportMetrics = require('./ViewportMetrics');

var getEventModifierState = require('./getEventModifierState');

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var MouseEventInterface = {
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: function (event) {
    // Webkit, Firefox, IE9+
    // which:  1 2 3
    // button: 0 1 2 (standard)
    var button = event.button;
    if ('which' in event) {
      return button;
    }
    // IE<9
    // which:  undefined
    // button: 0 0 0
    // button: 1 4 2 (onmouseup)
    return button === 2 ? 2 : button === 4 ? 1 : 0;
  },
  buttons: null,
  relatedTarget: function (event) {
    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
  },
  // "Proprietary" Interface.
  pageX: function (event) {
    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
  },
  pageY: function (event) {
    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

module.exports = SyntheticMouseEvent;
},{"./SyntheticUIEvent":121,"./ViewportMetrics":124,"./getEventModifierState":136}],120:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticTouchEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticUIEvent = require('./SyntheticUIEvent');

var getEventModifierState = require('./getEventModifierState');

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
var TouchEventInterface = {
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

module.exports = SyntheticTouchEvent;
},{"./SyntheticUIEvent":121,"./getEventModifierState":136}],121:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticUIEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

var getEventTarget = require('./getEventTarget');

/**
 * @interface UIEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var UIEventInterface = {
  view: function (event) {
    if (event.view) {
      return event.view;
    }

    var target = getEventTarget(event);
    if (target != null && target.window === target) {
      // target is a window object
      return target;
    }

    var doc = target.ownerDocument;
    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
    if (doc) {
      return doc.defaultView || doc.parentWindow;
    } else {
      return window;
    }
  },
  detail: function (event) {
    return event.detail || 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

module.exports = SyntheticUIEvent;
},{"./SyntheticEvent":115,"./getEventTarget":137}],122:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticWheelEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticMouseEvent = require('./SyntheticMouseEvent');

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var WheelEventInterface = {
  deltaX: function (event) {
    return 'deltaX' in event ? event.deltaX :
    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
  },
  deltaY: function (event) {
    return 'deltaY' in event ? event.deltaY :
    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
    'wheelDeltaY' in event ? -event.wheelDeltaY :
    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
    'wheelDelta' in event ? -event.wheelDelta : 0;
  },
  deltaZ: null,

  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticMouseEvent}
 */
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

module.exports = SyntheticWheelEvent;
},{"./SyntheticMouseEvent":119}],123:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Transaction
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

/**
 * `Transaction` creates a black box that is able to wrap any method such that
 * certain invariants are maintained before and after the method is invoked
 * (Even if an exception is thrown while invoking the wrapped method). Whoever
 * instantiates a transaction can provide enforcers of the invariants at
 * creation time. The `Transaction` class itself will supply one additional
 * automatic invariant for you - the invariant that any transaction instance
 * should not be run while it is already being run. You would typically create a
 * single instance of a `Transaction` for reuse multiple times, that potentially
 * is used to wrap several different methods. Wrappers are extremely simple -
 * they only require implementing two methods.
 *
 * <pre>
 *                       wrappers (injected at creation time)
 *                                      +        +
 *                                      |        |
 *                    +-----------------|--------|--------------+
 *                    |                 v        |              |
 *                    |      +---------------+   |              |
 *                    |   +--|    wrapper1   |---|----+         |
 *                    |   |  +---------------+   v    |         |
 *                    |   |          +-------------+  |         |
 *                    |   |     +----|   wrapper2  |--------+   |
 *                    |   |     |    +-------------+  |     |   |
 *                    |   |     |                     |     |   |
 *                    |   v     v                     v     v   | wrapper
 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | +---+ +---+   +---------+   +---+ +---+ |
 *                    |  initialize                    close    |
 *                    +-----------------------------------------+
 * </pre>
 *
 * Use cases:
 * - Preserving the input selection ranges before/after reconciliation.
 *   Restoring selection even in the event of an unexpected error.
 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
 *   while guaranteeing that afterwards, the event system is reactivated.
 * - Flushing a queue of collected DOM mutations to the main UI thread after a
 *   reconciliation takes place in a worker thread.
 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
 *   content.
 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
 * - (Future use case): Layout calculations before and after DOM updates.
 *
 * Transactional plugin API:
 * - A module that has an `initialize` method that returns any precomputation.
 * - and a `close` method that accepts the precomputation. `close` is invoked
 *   when the wrapped process is completed, or has failed.
 *
 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
 * that implement `initialize` and `close`.
 * @return {Transaction} Single transaction for reuse in thread.
 *
 * @class Transaction
 */
var Mixin = {
  /**
   * Sets up this instance so that it is prepared for collecting metrics. Does
   * so such that this setup method may be used on an instance that is already
   * initialized, in a way that does not consume additional memory upon reuse.
   * That can be useful if you decide to make your subclass of this mixin a
   * "PooledClass".
   */
  reinitializeTransaction: function () {
    this.transactionWrappers = this.getTransactionWrappers();
    if (this.wrapperInitData) {
      this.wrapperInitData.length = 0;
    } else {
      this.wrapperInitData = [];
    }
    this._isInTransaction = false;
  },

  _isInTransaction: false,

  /**
   * @abstract
   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
   */
  getTransactionWrappers: null,

  isInTransaction: function () {
    return !!this._isInTransaction;
  },

  /**
   * Executes the function within a safety window. Use this for the top level
   * methods that result in large amounts of computation/mutations that would
   * need to be safety checked. The optional arguments helps prevent the need
   * to bind in many cases.
   *
   * @param {function} method Member of scope to call.
   * @param {Object} scope Scope to invoke from.
   * @param {Object?=} a Argument to pass to the method.
   * @param {Object?=} b Argument to pass to the method.
   * @param {Object?=} c Argument to pass to the method.
   * @param {Object?=} d Argument to pass to the method.
   * @param {Object?=} e Argument to pass to the method.
   * @param {Object?=} f Argument to pass to the method.
   *
   * @return {*} Return value from `method`.
   */
  perform: function (method, scope, a, b, c, d, e, f) {
    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there ' + 'is already an outstanding transaction.') : invariant(false) : undefined;
    var errorThrown;
    var ret;
    try {
      this._isInTransaction = true;
      // Catching errors makes debugging more difficult, so we start with
      // errorThrown set to true before setting it to false after calling
      // close -- if it's still set to true in the finally block, it means
      // one of these calls threw.
      errorThrown = true;
      this.initializeAll(0);
      ret = method.call(scope, a, b, c, d, e, f);
      errorThrown = false;
    } finally {
      try {
        if (errorThrown) {
          // If `method` throws, prefer to show that stack trace over any thrown
          // by invoking `closeAll`.
          try {
            this.closeAll(0);
          } catch (err) {}
        } else {
          // Since `method` didn't throw, we don't want to silence the exception
          // here.
          this.closeAll(0);
        }
      } finally {
        this._isInTransaction = false;
      }
    }
    return ret;
  },

  initializeAll: function (startIndex) {
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      try {
        // Catching errors makes debugging more difficult, so we start with the
        // OBSERVED_ERROR state before overwriting it with the real return value
        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
        // block, it means wrapper.initialize threw.
        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
      } finally {
        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
          // The initializer for wrapper i threw an error; initialize the
          // remaining wrappers but silence any exceptions from them to ensure
          // that the first error is the one to bubble up.
          try {
            this.initializeAll(i + 1);
          } catch (err) {}
        }
      }
    }
  },

  /**
   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
   * them the respective return values of `this.transactionWrappers.init[i]`
   * (`close`rs that correspond to initializers that failed will not be
   * invoked).
   */
  closeAll: function (startIndex) {
    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : invariant(false) : undefined;
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      var initData = this.wrapperInitData[i];
      var errorThrown;
      try {
        // Catching errors makes debugging more difficult, so we start with
        // errorThrown set to true before setting it to false after calling
        // close -- if it's still set to true in the finally block, it means
        // wrapper.close threw.
        errorThrown = true;
        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
          wrapper.close.call(this, initData);
        }
        errorThrown = false;
      } finally {
        if (errorThrown) {
          // The closer for wrapper i threw an error; close the remaining
          // wrappers but silence any exceptions from them to ensure that the
          // first error is the one to bubble up.
          try {
            this.closeAll(i + 1);
          } catch (e) {}
        }
      }
    }
    this.wrapperInitData.length = 0;
  }
};

var Transaction = {

  Mixin: Mixin,

  /**
   * Token to look for to determine if an error occurred.
   */
  OBSERVED_ERROR: {}

};

module.exports = Transaction;
}).call(this,require('_process'))
},{"_process":21,"fbjs/lib/invariant":167}],124:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ViewportMetrics
 */

'use strict';

var ViewportMetrics = {

  currentScrollLeft: 0,

  currentScrollTop: 0,

  refreshScrollValues: function (scrollPosition) {
    ViewportMetrics.currentScrollLeft = scrollPosition.x;
    ViewportMetrics.currentScrollTop = scrollPosition.y;
  }

};

module.exports = ViewportMetrics;
},{}],125:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule accumulateInto
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

/**
 *
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : invariant(false) : undefined;
  if (current == null) {
    return next;
  }

  // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).
  var currentIsArray = Array.isArray(current);
  var nextIsArray = Array.isArray(next);

  if (currentIsArray && nextIsArray) {
    current.push.apply(current, next);
    return current;
  }

  if (currentIsArray) {
    current.push(next);
    return current;
  }

  if (nextIsArray) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

module.exports = accumulateInto;
}).call(this,require('_process'))
},{"_process":21,"fbjs/lib/invariant":167}],126:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule adler32
 */

'use strict';

var MOD = 65521;

// adler32 is not cryptographically strong, and is only used to sanity check that
// markup generated on the server matches the markup generated on the client.
// This implementation (a modified version of the SheetJS version) has been optimized
// for our use case, at the expense of conforming to the adler32 specification
// for non-ascii inputs.
function adler32(data) {
  var a = 1;
  var b = 0;
  var i = 0;
  var l = data.length;
  var m = l & ~0x3;
  while (i < m) {
    for (; i < Math.min(i + 4096, m); i += 4) {
      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
    }
    a %= MOD;
    b %= MOD;
  }
  for (; i < l; i++) {
    b += a += data.charCodeAt(i);
  }
  a %= MOD;
  b %= MOD;
  return a | b << 16;
}

module.exports = adler32;
},{}],127:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule canDefineProperty
 */

'use strict';

var canDefineProperty = false;
if (process.env.NODE_ENV !== 'production') {
  try {
    Object.defineProperty({}, 'x', { get: function () {} });
    canDefineProperty = true;
  } catch (x) {
    // IE will fail on defineProperty
  }
}

module.exports = canDefineProperty;
}).call(this,require('_process'))
},{"_process":21}],128:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule dangerousStyleValue
 * @typechecks static-only
 */

'use strict';

var CSSProperty = require('./CSSProperty');

var isUnitlessNumber = CSSProperty.isUnitlessNumber;

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(name, value) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }

  var isNonNumeric = isNaN(value);
  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
    return '' + value; // cast to string
  }

  if (typeof value === 'string') {
    value = value.trim();
  }
  return value + 'px';
}

module.exports = dangerousStyleValue;
},{"./CSSProperty":26}],129:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule deprecated
 */

'use strict';

var assign = require('./Object.assign');
var warning = require('fbjs/lib/warning');

/**
 * This will log a single deprecation notice per function and forward the call
 * on to the new API.
 *
 * @param {string} fnName The name of the function
 * @param {string} newModule The module that fn will exist in
 * @param {string} newPackage The module that fn will exist in
 * @param {*} ctx The context this forwarded call should run in
 * @param {function} fn The function to forward on to
 * @return {function} The function that will warn once and then call fn
 */
function deprecated(fnName, newModule, newPackage, ctx, fn) {
  var warned = false;
  if (process.env.NODE_ENV !== 'production') {
    var newFn = function () {
      process.env.NODE_ENV !== 'production' ? warning(warned,
      // Require examples in this string must be split to prevent React's
      // build tools from mistaking them for real requires.
      // Otherwise the build tools will attempt to build a '%s' module.
      'React.%s is deprecated. Please use %s.%s from require' + '(\'%s\') ' + 'instead.', fnName, newModule, fnName, newPackage) : undefined;
      warned = true;
      return fn.apply(ctx, arguments);
    };
    // We need to make sure all properties of the original fn are copied over.
    // In particular, this is needed to support PropTypes
    return assign(newFn, fn);
  }

  return fn;
}

module.exports = deprecated;
}).call(this,require('_process'))
},{"./Object.assign":45,"_process":21,"fbjs/lib/warning":178}],130:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule escapeTextContentForBrowser
 */

'use strict';

var ESCAPE_LOOKUP = {
  '&': '&amp;',
  '>': '&gt;',
  '<': '&lt;',
  '"': '&quot;',
  '\'': '&#x27;'
};

var ESCAPE_REGEX = /[&><"']/g;

function escaper(match) {
  return ESCAPE_LOOKUP[match];
}

/**
 * Escapes text to prevent scripting attacks.
 *
 * @param {*} text Text value to escape.
 * @return {string} An escaped string.
 */
function escapeTextContentForBrowser(text) {
  return ('' + text).replace(ESCAPE_REGEX, escaper);
}

module.exports = escapeTextContentForBrowser;
},{}],131:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule findDOMNode
 * @typechecks static-only
 */

'use strict';

var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactInstanceMap = require('./ReactInstanceMap');
var ReactMount = require('./ReactMount');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

/**
 * Returns the DOM node rendered by this element.
 *
 * @param {ReactComponent|DOMElement} componentOrElement
 * @return {?DOMElement} The root node of this element.
 */
function findDOMNode(componentOrElement) {
  if (process.env.NODE_ENV !== 'production') {
    var owner = ReactCurrentOwner.current;
    if (owner !== null) {
      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing getDOMNode or findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
      owner._warnedAboutRefsInRender = true;
    }
  }
  if (componentOrElement == null) {
    return null;
  }
  if (componentOrElement.nodeType === 1) {
    return componentOrElement;
  }
  if (ReactInstanceMap.has(componentOrElement)) {
    return ReactMount.getNodeFromInstance(componentOrElement);
  }
  !(componentOrElement.render == null || typeof componentOrElement.render !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : invariant(false) : undefined;
  !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : invariant(false) : undefined;
}

module.exports = findDOMNode;
}).call(this,require('_process'))
},{"./ReactCurrentOwner":57,"./ReactInstanceMap":85,"./ReactMount":88,"_process":21,"fbjs/lib/invariant":167,"fbjs/lib/warning":178}],132:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule flattenChildren
 */

'use strict';

var traverseAllChildren = require('./traverseAllChildren');
var warning = require('fbjs/lib/warning');

/**
 * @param {function} traverseContext Context passed through traversal.
 * @param {?ReactComponent} child React child component.
 * @param {!string} name String name of key path to child.
 */
function flattenSingleChildIntoContext(traverseContext, child, name) {
  // We found a component instance.
  var result = traverseContext;
  var keyUnique = result[name] === undefined;
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
  }
  if (keyUnique && child != null) {
    result[name] = child;
  }
}

/**
 * Flattens children that are typically specified as `props.children`. Any null
 * children will not be included in the resulting object.
 * @return {!object} flattened children keyed by name.
 */
function flattenChildren(children) {
  if (children == null) {
    return children;
  }
  var result = {};
  traverseAllChildren(children, flattenSingleChildIntoContext, result);
  return result;
}

module.exports = flattenChildren;
}).call(this,require('_process'))
},{"./traverseAllChildren":150,"_process":21,"fbjs/lib/warning":178}],133:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule forEachAccumulated
 */

'use strict';

/**
 * @param {array} arr an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 */
var forEachAccumulated = function (arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
};

module.exports = forEachAccumulated;
},{}],134:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventCharCode
 * @typechecks static-only
 */

'use strict';

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */
function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode;

    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  }

  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.
  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

module.exports = getEventCharCode;
},{}],135:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventKey
 * @typechecks static-only
 */

'use strict';

var getEventCharCode = require('./getEventCharCode');

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var normalizeKey = {
  'Esc': 'Escape',
  'Spacebar': ' ',
  'Left': 'ArrowLeft',
  'Up': 'ArrowUp',
  'Right': 'ArrowRight',
  'Down': 'ArrowDown',
  'Del': 'Delete',
  'Win': 'OS',
  'Menu': 'ContextMenu',
  'Apps': 'ContextMenu',
  'Scroll': 'ScrollLock',
  'MozPrintableKey': 'Unidentified'
};

/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var translateToKey = {
  8: 'Backspace',
  9: 'Tab',
  12: 'Clear',
  13: 'Enter',
  16: 'Shift',
  17: 'Control',
  18: 'Alt',
  19: 'Pause',
  20: 'CapsLock',
  27: 'Escape',
  32: ' ',
  33: 'PageUp',
  34: 'PageDown',
  35: 'End',
  36: 'Home',
  37: 'ArrowLeft',
  38: 'ArrowUp',
  39: 'ArrowRight',
  40: 'ArrowDown',
  45: 'Insert',
  46: 'Delete',
  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
  144: 'NumLock',
  145: 'ScrollLock',
  224: 'Meta'
};

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */
function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.

    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
    if (key !== 'Unidentified') {
      return key;
    }
  }

  // Browser does not implement `key`, polyfill as much of it as we can.
  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent);

    // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.
    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }
  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }
  return '';
}

module.exports = getEventKey;
},{"./getEventCharCode":134}],136:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventModifierState
 * @typechecks static-only
 */

'use strict';

/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

var modifierKeyToProp = {
  'Alt': 'altKey',
  'Control': 'ctrlKey',
  'Meta': 'metaKey',
  'Shift': 'shiftKey'
};

// IE8 does not implement getModifierState so we simply map it to the only
// modifier keys exposed by the event itself, does not support Lock-keys.
// Currently, all major browsers except Chrome seems to support Lock-keys.
function modifierStateGetter(keyArg) {
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;
  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }
  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

module.exports = getEventModifierState;
},{}],137:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventTarget
 * @typechecks static-only
 */

'use strict';

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */
function getEventTarget(nativeEvent) {
  var target = nativeEvent.target || nativeEvent.srcElement || window;
  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html
  return target.nodeType === 3 ? target.parentNode : target;
}

module.exports = getEventTarget;
},{}],138:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getIteratorFn
 * @typechecks static-only
 */

'use strict';

/* global Symbol */
var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

/**
 * Returns the iterator method function contained on the iterable object.
 *
 * Be sure to invoke the function with the iterable as context:
 *
 *     var iteratorFn = getIteratorFn(myIterable);
 *     if (iteratorFn) {
 *       var iterator = iteratorFn.call(myIterable);
 *       ...
 *     }
 *
 * @param {?object} maybeIterable
 * @return {?function}
 */
function getIteratorFn(maybeIterable) {
  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
  if (typeof iteratorFn === 'function') {
    return iteratorFn;
  }
}

module.exports = getIteratorFn;
},{}],139:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getNodeForCharacterOffset
 */

'use strict';

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */
function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }
  return node;
}

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */
function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }
    node = node.parentNode;
  }
}

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */
function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType === 3) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

module.exports = getNodeForCharacterOffset;
},{}],140:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getTextContentAccessor
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var contentKey = null;

/**
 * Gets the key used to access text content on a DOM node.
 *
 * @return {?string} Key used to access text content.
 * @internal
 */
function getTextContentAccessor() {
  if (!contentKey && ExecutionEnvironment.canUseDOM) {
    // Prefer textContent to innerText because many browsers support both but
    // SVG <text> elements don't support innerText even when <div> does.
    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
  }
  return contentKey;
}

module.exports = getTextContentAccessor;
},{"fbjs/lib/ExecutionEnvironment":153}],141:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule instantiateReactComponent
 * @typechecks static-only
 */

'use strict';

var ReactCompositeComponent = require('./ReactCompositeComponent');
var ReactEmptyComponent = require('./ReactEmptyComponent');
var ReactNativeComponent = require('./ReactNativeComponent');

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

// To avoid a cyclic dependency, we create the final class in this module
var ReactCompositeComponentWrapper = function () {};
assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent.Mixin, {
  _instantiateReactComponent: instantiateReactComponent
});

function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Check if the type reference is a known internal type. I.e. not a user
 * provided composite type.
 *
 * @param {function} type
 * @return {boolean} Returns true if this is a valid internal type.
 */
function isInternalComponentType(type) {
  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
}

/**
 * Given a ReactNode, create an instance that will actually be mounted.
 *
 * @param {ReactNode} node
 * @return {object} A new instance of the element's constructor.
 * @protected
 */
function instantiateReactComponent(node) {
  var instance;

  if (node === null || node === false) {
    instance = new ReactEmptyComponent(instantiateReactComponent);
  } else if (typeof node === 'object') {
    var element = node;
    !(element && (typeof element.type === 'function' || typeof element.type === 'string')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) ' + 'or a class/function (for composite components) but got: %s.%s', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : invariant(false) : undefined;

    // Special case string values
    if (typeof element.type === 'string') {
      instance = ReactNativeComponent.createInternalComponent(element);
    } else if (isInternalComponentType(element.type)) {
      // This is temporarily available for custom components that are not string
      // representations. I.e. ART. Once those are updated to use the string
      // representation, we can drop this code path.
      instance = new element.type(element);
    } else {
      instance = new ReactCompositeComponentWrapper();
    }
  } else if (typeof node === 'string' || typeof node === 'number') {
    instance = ReactNativeComponent.createInstanceForText(node);
  } else {
    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : invariant(false) : undefined;
  }

  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(typeof instance.construct === 'function' && typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : undefined;
  }

  // Sets up the instance. This can probably just move into the constructor now.
  instance.construct(node);

  // These two fields are used by the DOM and ART diffing algorithms
  // respectively. Instead of using expandos on components, we should be
  // storing the state needed by the diffing algorithms elsewhere.
  instance._mountIndex = 0;
  instance._mountImage = null;

  if (process.env.NODE_ENV !== 'production') {
    instance._isOwnerNecessary = false;
    instance._warnedAboutRefsInRender = false;
  }

  // Internal instances should fully constructed at this point, so they should
  // not get any new fields added to them at this point.
  if (process.env.NODE_ENV !== 'production') {
    if (Object.preventExtensions) {
      Object.preventExtensions(instance);
    }
  }

  return instance;
}

module.exports = instantiateReactComponent;
}).call(this,require('_process'))
},{"./Object.assign":45,"./ReactCompositeComponent":56,"./ReactEmptyComponent":77,"./ReactNativeComponent":91,"_process":21,"fbjs/lib/invariant":167,"fbjs/lib/warning":178}],142:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isEventSupported
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var useHasFeature;
if (ExecutionEnvironment.canUseDOM) {
  useHasFeature = document.implementation && document.implementation.hasFeature &&
  // always returns true in newer browsers as per the standard.
  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
  document.implementation.hasFeature('', '') !== true;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = (eventName in document);

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
  }

  return isSupported;
}

module.exports = isEventSupported;
},{"fbjs/lib/ExecutionEnvironment":153}],143:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextInputElement
 */

'use strict';

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */
var supportedInputTypes = {
  'color': true,
  'date': true,
  'datetime': true,
  'datetime-local': true,
  'email': true,
  'month': true,
  'number': true,
  'password': true,
  'range': true,
  'search': true,
  'tel': true,
  'text': true,
  'time': true,
  'url': true,
  'week': true
};

function isTextInputElement(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName && (nodeName === 'input' && supportedInputTypes[elem.type] || nodeName === 'textarea');
}

module.exports = isTextInputElement;
},{}],144:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule onlyChild
 */
'use strict';

var ReactElement = require('./ReactElement');

var invariant = require('fbjs/lib/invariant');

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection. The current implementation of this
 * function assumes that a single child gets passed without a wrapper, but the
 * purpose of this helper function is to abstract away the particular structure
 * of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactComponent} The first and only `ReactComponent` contained in the
 * structure.
 */
function onlyChild(children) {
  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'onlyChild must be passed a children with exactly one child.') : invariant(false) : undefined;
  return children;
}

module.exports = onlyChild;
}).call(this,require('_process'))
},{"./ReactElement":75,"_process":21,"fbjs/lib/invariant":167}],145:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule quoteAttributeValueForBrowser
 */

'use strict';

var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');

/**
 * Escapes attribute value to prevent scripting attacks.
 *
 * @param {*} value Value to escape.
 * @return {string} An escaped string.
 */
function quoteAttributeValueForBrowser(value) {
  return '"' + escapeTextContentForBrowser(value) + '"';
}

module.exports = quoteAttributeValueForBrowser;
},{"./escapeTextContentForBrowser":130}],146:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
* @providesModule renderSubtreeIntoContainer
*/

'use strict';

var ReactMount = require('./ReactMount');

module.exports = ReactMount.renderSubtreeIntoContainer;
},{"./ReactMount":88}],147:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule setInnerHTML
 */

/* globals MSApp */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var WHITESPACE_TEST = /^[ \r\n\t\f]/;
var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

/**
 * Set the innerHTML property of a node, ensuring that whitespace is preserved
 * even in IE8.
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */
var setInnerHTML = function (node, html) {
  node.innerHTML = html;
};

// Win8 apps: Allow all html to be inserted
if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
  setInnerHTML = function (node, html) {
    MSApp.execUnsafeLocalFunction(function () {
      node.innerHTML = html;
    });
  };
}

if (ExecutionEnvironment.canUseDOM) {
  // IE8: When updating a just created node with innerHTML only leading
  // whitespace is removed. When updating an existing node with innerHTML
  // whitespace in root TextNodes is also collapsed.
  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

  // Feature detection; only IE8 is known to behave improperly like this.
  var testElement = document.createElement('div');
  testElement.innerHTML = ' ';
  if (testElement.innerHTML === '') {
    setInnerHTML = function (node, html) {
      // Magic theory: IE8 supposedly differentiates between added and updated
      // nodes when processing innerHTML, innerHTML on updated nodes suffers
      // from worse whitespace behavior. Re-adding a node like this triggers
      // the initial and more favorable whitespace behavior.
      // TODO: What to do on a detached node?
      if (node.parentNode) {
        node.parentNode.replaceChild(node, node);
      }

      // We also implement a workaround for non-visible tags disappearing into
      // thin air on IE8, this only happens if there is no visible text
      // in-front of the non-visible tags. Piggyback on the whitespace fix
      // and simply check if any non-visible tags appear in the source.
      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
        // Recover leading whitespace by temporarily prepending any character.
        // \uFEFF has the potential advantage of being zero-width/invisible.
        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
        // in hopes that this is preserved even if "\uFEFF" is transformed to
        // the actual Unicode character (by Babel, for example).
        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
        node.innerHTML = String.fromCharCode(0xFEFF) + html;

        // deleteData leaves an empty `TextNode` which offsets the index of all
        // children. Definitely want to avoid this.
        var textNode = node.firstChild;
        if (textNode.data.length === 1) {
          node.removeChild(textNode);
        } else {
          textNode.deleteData(0, 1);
        }
      } else {
        node.innerHTML = html;
      }
    };
  }
}

module.exports = setInnerHTML;
},{"fbjs/lib/ExecutionEnvironment":153}],148:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule setTextContent
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');
var setInnerHTML = require('./setInnerHTML');

/**
 * Set the textContent property of a node, ensuring that whitespace is preserved
 * even in IE8. innerText is a poor substitute for textContent and, among many
 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
 * as it should.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */
var setTextContent = function (node, text) {
  node.textContent = text;
};

if (ExecutionEnvironment.canUseDOM) {
  if (!('textContent' in document.documentElement)) {
    setTextContent = function (node, text) {
      setInnerHTML(node, escapeTextContentForBrowser(text));
    };
  }
}

module.exports = setTextContent;
},{"./escapeTextContentForBrowser":130,"./setInnerHTML":147,"fbjs/lib/ExecutionEnvironment":153}],149:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shouldUpdateReactComponent
 * @typechecks static-only
 */

'use strict';

/**
 * Given a `prevElement` and `nextElement`, determines if the existing
 * instance should be updated as opposed to being destroyed or replaced by a new
 * instance. Both arguments are elements. This ensures that this logic can
 * operate on stateless trees without any backing instance.
 *
 * @param {?object} prevElement
 * @param {?object} nextElement
 * @return {boolean} True if the existing instance should be updated.
 * @protected
 */
function shouldUpdateReactComponent(prevElement, nextElement) {
  var prevEmpty = prevElement === null || prevElement === false;
  var nextEmpty = nextElement === null || nextElement === false;
  if (prevEmpty || nextEmpty) {
    return prevEmpty === nextEmpty;
  }

  var prevType = typeof prevElement;
  var nextType = typeof nextElement;
  if (prevType === 'string' || prevType === 'number') {
    return nextType === 'string' || nextType === 'number';
  } else {
    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
  }
  return false;
}

module.exports = shouldUpdateReactComponent;
},{}],150:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule traverseAllChildren
 */

'use strict';

var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactElement = require('./ReactElement');
var ReactInstanceHandles = require('./ReactInstanceHandles');

var getIteratorFn = require('./getIteratorFn');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

var SEPARATOR = ReactInstanceHandles.SEPARATOR;
var SUBSEPARATOR = ':';

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

var userProvidedKeyEscaperLookup = {
  '=': '=0',
  '.': '=1',
  ':': '=2'
};

var userProvidedKeyEscapeRegex = /[=.:]/g;

var didWarnAboutMaps = false;

function userProvidedKeyEscaper(match) {
  return userProvidedKeyEscaperLookup[match];
}

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  if (component && component.key != null) {
    // Explicit key
    return wrapUserProvidedKey(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * Escape a component key so that it is safe to use in a reactid.
 *
 * @param {*} text Component key to be escaped.
 * @return {string} An escaped string.
 */
function escapeUserProvidedKey(text) {
  return ('' + text).replace(userProvidedKeyEscapeRegex, userProvidedKeyEscaper);
}

/**
 * Wrap a `key` value explicitly provided by the user to distinguish it from
 * implicitly-generated keys generated by a component's index in its parent.
 *
 * @param {string} key Value of a user-provided `key` attribute
 * @return {string}
 */
function wrapUserProvidedKey(key) {
  return '$' + escapeUserProvidedKey(key);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  if (children === null || type === 'string' || type === 'number' || ReactElement.isValidElement(children)) {
    callback(traverseContext, children,
    // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows.
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);
    if (iteratorFn) {
      var iterator = iteratorFn.call(children);
      var step;
      if (iteratorFn !== children.entries) {
        var ii = 0;
        while (!(step = iterator.next()).done) {
          child = step.value;
          nextName = nextNamePrefix + getComponentKey(child, ii++);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        if (process.env.NODE_ENV !== 'production') {
          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.') : undefined;
          didWarnAboutMaps = true;
        }
        // Iterator will provide entry [k,v] tuples rather than values.
        while (!(step = iterator.next()).done) {
          var entry = step.value;
          if (entry) {
            child = entry[1];
            nextName = nextNamePrefix + wrapUserProvidedKey(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        }
      }
    } else if (type === 'object') {
      var addendum = '';
      if (process.env.NODE_ENV !== 'production') {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
        if (children._isReactElement) {
          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
        }
        if (ReactCurrentOwner.current) {
          var name = ReactCurrentOwner.current.getName();
          if (name) {
            addendum += ' Check the render method of `' + name + '`.';
          }
        }
      }
      var childrenString = String(children);
      !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : invariant(false) : undefined;
    }
  }

  return subtreeCount;
}

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}

module.exports = traverseAllChildren;
}).call(this,require('_process'))
},{"./ReactCurrentOwner":57,"./ReactElement":75,"./ReactInstanceHandles":84,"./getIteratorFn":138,"_process":21,"fbjs/lib/invariant":167,"fbjs/lib/warning":178}],151:[function(require,module,exports){
(function (process){
/**
 * Copyright 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule validateDOMNesting
 */

'use strict';

var assign = require('./Object.assign');
var emptyFunction = require('fbjs/lib/emptyFunction');
var warning = require('fbjs/lib/warning');

var validateDOMNesting = emptyFunction;

if (process.env.NODE_ENV !== 'production') {
  // This validation code was written based on the HTML5 parsing spec:
  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  //
  // Note: this does not catch all invalid nesting, nor does it try to (as it's
  // not clear what practical benefit doing so provides); instead, we warn only
  // for cases where the parser will give a parse tree differing from what React
  // intended. For example, <b><div></div></b> is invalid but we don't warn
  // because it still parses correctly; we do warn for other cases like nested
  // <p> tags where the beginning of the second element implicitly closes the
  // first, causing a confusing mess.

  // https://html.spec.whatwg.org/multipage/syntax.html#special
  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
  // TODO: Distinguish by namespace here -- for <title>, including it here
  // errs on the side of fewer warnings
  'foreignObject', 'desc', 'title'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
  var buttonScopeTags = inScopeTags.concat(['button']);

  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

  var emptyAncestorInfo = {
    parentTag: null,

    formTag: null,
    aTagInScope: null,
    buttonTagInScope: null,
    nobrTagInScope: null,
    pTagInButtonScope: null,

    listItemTagAutoclosing: null,
    dlItemTagAutoclosing: null
  };

  var updatedAncestorInfo = function (oldInfo, tag, instance) {
    var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
    var info = { tag: tag, instance: instance };

    if (inScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.aTagInScope = null;
      ancestorInfo.buttonTagInScope = null;
      ancestorInfo.nobrTagInScope = null;
    }
    if (buttonScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.pTagInButtonScope = null;
    }

    // See rules for 'li', 'dd', 'dt' start tags in
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
      ancestorInfo.listItemTagAutoclosing = null;
      ancestorInfo.dlItemTagAutoclosing = null;
    }

    ancestorInfo.parentTag = info;

    if (tag === 'form') {
      ancestorInfo.formTag = info;
    }
    if (tag === 'a') {
      ancestorInfo.aTagInScope = info;
    }
    if (tag === 'button') {
      ancestorInfo.buttonTagInScope = info;
    }
    if (tag === 'nobr') {
      ancestorInfo.nobrTagInScope = info;
    }
    if (tag === 'p') {
      ancestorInfo.pTagInButtonScope = info;
    }
    if (tag === 'li') {
      ancestorInfo.listItemTagAutoclosing = info;
    }
    if (tag === 'dd' || tag === 'dt') {
      ancestorInfo.dlItemTagAutoclosing = info;
    }

    return ancestorInfo;
  };

  /**
   * Returns whether
   */
  var isTagValidWithParent = function (tag, parentTag) {
    // First, let's check if we're in an unusual parsing mode...
    switch (parentTag) {
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
      case 'select':
        return tag === 'option' || tag === 'optgroup' || tag === '#text';
      case 'optgroup':
        return tag === 'option' || tag === '#text';
      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
      // but
      case 'option':
        return tag === '#text';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
      // No special behavior since these rules fall back to "in body" mode for
      // all except special table nodes which cause bad parsing behavior anyway.

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
      case 'tr':
        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
      case 'tbody':
      case 'thead':
      case 'tfoot':
        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
      case 'colgroup':
        return tag === 'col' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
      case 'table':
        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
      case 'head':
        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
      case 'html':
        return tag === 'head' || tag === 'body';
    }

    // Probably in the "in body" parsing mode, so we outlaw only tag combos
    // where the parsing rules cause implicit opens or closes to be added.
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    switch (tag) {
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

      case 'rp':
      case 'rt':
        return impliedEndTags.indexOf(parentTag) === -1;

      case 'caption':
      case 'col':
      case 'colgroup':
      case 'frame':
      case 'head':
      case 'tbody':
      case 'td':
      case 'tfoot':
      case 'th':
      case 'thead':
      case 'tr':
        // These tags are only valid with a few parents that have special child
        // parsing rules -- if we're down here, then none of those matched and
        // so we allow it only if we don't know what the parent is, as all other
        // cases are invalid.
        return parentTag == null;
    }

    return true;
  };

  /**
   * Returns whether
   */
  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
    switch (tag) {
      case 'address':
      case 'article':
      case 'aside':
      case 'blockquote':
      case 'center':
      case 'details':
      case 'dialog':
      case 'dir':
      case 'div':
      case 'dl':
      case 'fieldset':
      case 'figcaption':
      case 'figure':
      case 'footer':
      case 'header':
      case 'hgroup':
      case 'main':
      case 'menu':
      case 'nav':
      case 'ol':
      case 'p':
      case 'section':
      case 'summary':
      case 'ul':

      case 'pre':
      case 'listing':

      case 'table':

      case 'hr':

      case 'xmp':

      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return ancestorInfo.pTagInButtonScope;

      case 'form':
        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

      case 'li':
        return ancestorInfo.listItemTagAutoclosing;

      case 'dd':
      case 'dt':
        return ancestorInfo.dlItemTagAutoclosing;

      case 'button':
        return ancestorInfo.buttonTagInScope;

      case 'a':
        // Spec says something about storing a list of markers, but it sounds
        // equivalent to this check.
        return ancestorInfo.aTagInScope;

      case 'nobr':
        return ancestorInfo.nobrTagInScope;
    }

    return null;
  };

  /**
   * Given a ReactCompositeComponent instance, return a list of its recursive
   * owners, starting at the root and ending with the instance itself.
   */
  var findOwnerStack = function (instance) {
    if (!instance) {
      return [];
    }

    var stack = [];
    /*eslint-disable space-after-keywords */
    do {
      /*eslint-enable space-after-keywords */
      stack.push(instance);
    } while (instance = instance._currentElement._owner);
    stack.reverse();
    return stack;
  };

  var didWarn = {};

  validateDOMNesting = function (childTag, childInstance, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.parentTag;
    var parentTag = parentInfo && parentInfo.tag;

    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
    var problematic = invalidParent || invalidAncestor;

    if (problematic) {
      var ancestorTag = problematic.tag;
      var ancestorInstance = problematic.instance;

      var childOwner = childInstance && childInstance._currentElement._owner;
      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;

      var childOwners = findOwnerStack(childOwner);
      var ancestorOwners = findOwnerStack(ancestorOwner);

      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
      var i;

      var deepestCommon = -1;
      for (i = 0; i < minStackLen; i++) {
        if (childOwners[i] === ancestorOwners[i]) {
          deepestCommon = i;
        } else {
          break;
        }
      }

      var UNKNOWN = '(unknown)';
      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
        return inst.getName() || UNKNOWN;
      });
      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
        return inst.getName() || UNKNOWN;
      });
      var ownerInfo = [].concat(
      // If the parent and child instances have a common owner ancestor, start
      // with that -- otherwise we just start with the parent's owners.
      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
      // If we're warning about an invalid (non-parent) ancestry, add '...'
      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');

      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
      if (didWarn[warnKey]) {
        return;
      }
      didWarn[warnKey] = true;

      if (invalidParent) {
        var info = '';
        if (ancestorTag === 'table' && childTag === 'tr') {
          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
        }
        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a child of <%s>. ' + 'See %s.%s', childTag, ancestorTag, ownerInfo, info) : undefined;
      } else {
        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a descendant of ' + '<%s>. See %s.', childTag, ancestorTag, ownerInfo) : undefined;
      }
    }
  };

  validateDOMNesting.ancestorInfoContextKey = '__validateDOMNesting_ancestorInfo$' + Math.random().toString(36).slice(2);

  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;

  // For testing
  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.parentTag;
    var parentTag = parentInfo && parentInfo.tag;
    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
  };
}

module.exports = validateDOMNesting;
}).call(this,require('_process'))
},{"./Object.assign":45,"_process":21,"fbjs/lib/emptyFunction":159,"fbjs/lib/warning":178}],152:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule EventListener
 * @typechecks
 */

'use strict';

var emptyFunction = require('./emptyFunction');

/**
 * Upstream version of event listener. Does not take into account specific
 * nature of platform.
 */
var EventListener = {
  /**
   * Listen to DOM events during the bubble phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  listen: function (target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, false);
      return {
        remove: function () {
          target.removeEventListener(eventType, callback, false);
        }
      };
    } else if (target.attachEvent) {
      target.attachEvent('on' + eventType, callback);
      return {
        remove: function () {
          target.detachEvent('on' + eventType, callback);
        }
      };
    }
  },

  /**
   * Listen to DOM events during the capture phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  capture: function (target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, true);
      return {
        remove: function () {
          target.removeEventListener(eventType, callback, true);
        }
      };
    } else {
      if (process.env.NODE_ENV !== 'production') {
        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
      }
      return {
        remove: emptyFunction
      };
    }
  },

  registerDefault: function () {}
};

module.exports = EventListener;
}).call(this,require('_process'))
},{"./emptyFunction":159,"_process":21}],153:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ExecutionEnvironment
 */

'use strict';

var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM // For now, this is true - might change in the future.

};

module.exports = ExecutionEnvironment;
},{}],154:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelize
 * @typechecks
 */

"use strict";

var _hyphenPattern = /-(.)/g;

/**
 * Camelcases a hyphenated string, for example:
 *
 *   > camelize('background-color')
 *   < "backgroundColor"
 *
 * @param {string} string
 * @return {string}
 */
function camelize(string) {
  return string.replace(_hyphenPattern, function (_, character) {
    return character.toUpperCase();
  });
}

module.exports = camelize;
},{}],155:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelizeStyleName
 * @typechecks
 */

'use strict';

var camelize = require('./camelize');

var msPattern = /^-ms-/;

/**
 * Camelcases a hyphenated CSS property name, for example:
 *
 *   > camelizeStyleName('background-color')
 *   < "backgroundColor"
 *   > camelizeStyleName('-moz-transition')
 *   < "MozTransition"
 *   > camelizeStyleName('-ms-transition')
 *   < "msTransition"
 *
 * As Andi Smith suggests
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
 * is converted to lowercase `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function camelizeStyleName(string) {
  return camelize(string.replace(msPattern, 'ms-'));
}

module.exports = camelizeStyleName;
},{"./camelize":154}],156:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule containsNode
 * @typechecks
 */

'use strict';

var isTextNode = require('./isTextNode');

/*eslint-disable no-bitwise */

/**
 * Checks if a given DOM node contains or is another DOM node.
 *
 * @param {?DOMNode} outerNode Outer DOM node.
 * @param {?DOMNode} innerNode Inner DOM node.
 * @return {boolean} True if `outerNode` contains or is `innerNode`.
 */
function containsNode(_x, _x2) {
  var _again = true;

  _function: while (_again) {
    var outerNode = _x,
        innerNode = _x2;
    _again = false;

    if (!outerNode || !innerNode) {
      return false;
    } else if (outerNode === innerNode) {
      return true;
    } else if (isTextNode(outerNode)) {
      return false;
    } else if (isTextNode(innerNode)) {
      _x = outerNode;
      _x2 = innerNode.parentNode;
      _again = true;
      continue _function;
    } else if (outerNode.contains) {
      return outerNode.contains(innerNode);
    } else if (outerNode.compareDocumentPosition) {
      return !!(outerNode.compareDocumentPosition(innerNode) & 16);
    } else {
      return false;
    }
  }
}

module.exports = containsNode;
},{"./isTextNode":169}],157:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createArrayFromMixed
 * @typechecks
 */

'use strict';

var toArray = require('./toArray');

/**
 * Perform a heuristic test to determine if an object is "array-like".
 *
 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
 *   Joshu replied: "Mu."
 *
 * This function determines if its argument has "array nature": it returns
 * true if the argument is an actual array, an `arguments' object, or an
 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
 *
 * It will return false for other array-like objects like Filelist.
 *
 * @param {*} obj
 * @return {boolean}
 */
function hasArrayNature(obj) {
  return(
    // not null/false
    !!obj && (
    // arrays are objects, NodeLists are functions in Safari
    typeof obj == 'object' || typeof obj == 'function') &&
    // quacks like an array
    'length' in obj &&
    // not window
    !('setInterval' in obj) &&
    // no DOM node should be considered an array-like
    // a 'select' element has 'length' and 'item' properties on IE8
    typeof obj.nodeType != 'number' && (
    // a real array
    Array.isArray(obj) ||
    // arguments
    'callee' in obj ||
    // HTMLCollection/NodeList
    'item' in obj)
  );
}

/**
 * Ensure that the argument is an array by wrapping it in an array if it is not.
 * Creates a copy of the argument if it is already an array.
 *
 * This is mostly useful idiomatically:
 *
 *   var createArrayFromMixed = require('createArrayFromMixed');
 *
 *   function takesOneOrMoreThings(things) {
 *     things = createArrayFromMixed(things);
 *     ...
 *   }
 *
 * This allows you to treat `things' as an array, but accept scalars in the API.
 *
 * If you need to convert an array-like object, like `arguments`, into an array
 * use toArray instead.
 *
 * @param {*} obj
 * @return {array}
 */
function createArrayFromMixed(obj) {
  if (!hasArrayNature(obj)) {
    return [obj];
  } else if (Array.isArray(obj)) {
    return obj.slice();
  } else {
    return toArray(obj);
  }
}

module.exports = createArrayFromMixed;
},{"./toArray":177}],158:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createNodesFromMarkup
 * @typechecks
 */

/*eslint-disable fb-www/unsafe-html*/

'use strict';

var ExecutionEnvironment = require('./ExecutionEnvironment');

var createArrayFromMixed = require('./createArrayFromMixed');
var getMarkupWrap = require('./getMarkupWrap');
var invariant = require('./invariant');

/**
 * Dummy container used to render all markup.
 */
var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Pattern used by `getNodeName`.
 */
var nodeNamePattern = /^\s*<(\w+)/;

/**
 * Extracts the `nodeName` of the first element in a string of markup.
 *
 * @param {string} markup String of markup.
 * @return {?string} Node name of the supplied markup.
 */
function getNodeName(markup) {
  var nodeNameMatch = markup.match(nodeNamePattern);
  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
}

/**
 * Creates an array containing the nodes rendered from the supplied markup. The
 * optionally supplied `handleScript` function will be invoked once for each
 * <script> element that is rendered. If no `handleScript` function is supplied,
 * an exception is thrown if any <script> elements are rendered.
 *
 * @param {string} markup A string of valid HTML markup.
 * @param {?function} handleScript Invoked once for each rendered <script>.
 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
 */
function createNodesFromMarkup(markup, handleScript) {
  var node = dummyNode;
  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : undefined;
  var nodeName = getNodeName(markup);

  var wrap = nodeName && getMarkupWrap(nodeName);
  if (wrap) {
    node.innerHTML = wrap[1] + markup + wrap[2];

    var wrapDepth = wrap[0];
    while (wrapDepth--) {
      node = node.lastChild;
    }
  } else {
    node.innerHTML = markup;
  }

  var scripts = node.getElementsByTagName('script');
  if (scripts.length) {
    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : undefined;
    createArrayFromMixed(scripts).forEach(handleScript);
  }

  var nodes = createArrayFromMixed(node.childNodes);
  while (node.lastChild) {
    node.removeChild(node.lastChild);
  }
  return nodes;
}

module.exports = createNodesFromMarkup;
}).call(this,require('_process'))
},{"./ExecutionEnvironment":153,"./createArrayFromMixed":157,"./getMarkupWrap":163,"./invariant":167,"_process":21}],159:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyFunction
 */

"use strict";

function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
function emptyFunction() {}

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function () {
  return this;
};
emptyFunction.thatReturnsArgument = function (arg) {
  return arg;
};

module.exports = emptyFunction;
},{}],160:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyObject
 */

'use strict';

var emptyObject = {};

if (process.env.NODE_ENV !== 'production') {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;
}).call(this,require('_process'))
},{"_process":21}],161:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule focusNode
 */

'use strict';

/**
 * @param {DOMElement} node input/textarea to focus
 */
function focusNode(node) {
  // IE8 can throw "Can't move focus to the control because it is invisible,
  // not enabled, or of a type that does not accept the focus." for all kinds of
  // reasons that are too expensive and fragile to test.
  try {
    node.focus();
  } catch (e) {}
}

module.exports = focusNode;
},{}],162:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getActiveElement
 * @typechecks
 */

/* eslint-disable fb-www/typeof-undefined */

/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document or document body is not
 * yet defined.
 */
'use strict';

function getActiveElement() /*?DOMElement*/{
  if (typeof document === 'undefined') {
    return null;
  }
  try {
    return document.activeElement || document.body;
  } catch (e) {
    return document.body;
  }
}

module.exports = getActiveElement;
},{}],163:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getMarkupWrap
 */

/*eslint-disable fb-www/unsafe-html */

'use strict';

var ExecutionEnvironment = require('./ExecutionEnvironment');

var invariant = require('./invariant');

/**
 * Dummy container used to detect which wraps are necessary.
 */
var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Some browsers cannot use `innerHTML` to render certain elements standalone,
 * so we wrap them, render the wrapped nodes, then extract the desired node.
 *
 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
 */

var shouldWrap = {};

var selectWrap = [1, '<select multiple="true">', '</select>'];
var tableWrap = [1, '<table>', '</table>'];
var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

var markupWrap = {
  '*': [1, '?<div>', '</div>'],

  'area': [1, '<map>', '</map>'],
  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  'legend': [1, '<fieldset>', '</fieldset>'],
  'param': [1, '<object>', '</object>'],
  'tr': [2, '<table><tbody>', '</tbody></table>'],

  'optgroup': selectWrap,
  'option': selectWrap,

  'caption': tableWrap,
  'colgroup': tableWrap,
  'tbody': tableWrap,
  'tfoot': tableWrap,
  'thead': tableWrap,

  'td': trWrap,
  'th': trWrap
};

// Initialize the SVG elements since we know they'll always need to be wrapped
// consistently. If they are created inside a <div> they will be initialized in
// the wrong namespace (and will not display).
var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
svgElements.forEach(function (nodeName) {
  markupWrap[nodeName] = svgWrap;
  shouldWrap[nodeName] = true;
});

/**
 * Gets the markup wrap configuration for the supplied `nodeName`.
 *
 * NOTE: This lazily detects which wraps are necessary for the current browser.
 *
 * @param {string} nodeName Lowercase `nodeName`.
 * @return {?array} Markup wrap configuration, if applicable.
 */
function getMarkupWrap(nodeName) {
  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : undefined;
  if (!markupWrap.hasOwnProperty(nodeName)) {
    nodeName = '*';
  }
  if (!shouldWrap.hasOwnProperty(nodeName)) {
    if (nodeName === '*') {
      dummyNode.innerHTML = '<link />';
    } else {
      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
    }
    shouldWrap[nodeName] = !dummyNode.firstChild;
  }
  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
}

module.exports = getMarkupWrap;
}).call(this,require('_process'))
},{"./ExecutionEnvironment":153,"./invariant":167,"_process":21}],164:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getUnboundedScrollPosition
 * @typechecks
 */

'use strict';

/**
 * Gets the scroll position of the supplied element or window.
 *
 * The return values are unbounded, unlike `getScrollPosition`. This means they
 * may be negative or exceed the element boundaries (which is possible using
 * inertial scrolling).
 *
 * @param {DOMWindow|DOMElement} scrollable
 * @return {object} Map with `x` and `y` keys.
 */
function getUnboundedScrollPosition(scrollable) {
  if (scrollable === window) {
    return {
      x: window.pageXOffset || document.documentElement.scrollLeft,
      y: window.pageYOffset || document.documentElement.scrollTop
    };
  }
  return {
    x: scrollable.scrollLeft,
    y: scrollable.scrollTop
  };
}

module.exports = getUnboundedScrollPosition;
},{}],165:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenate
 * @typechecks
 */

'use strict';

var _uppercasePattern = /([A-Z])/g;

/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * For CSS style names, use `hyphenateStyleName` instead which works properly
 * with all vendor prefixes, including `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate(string) {
  return string.replace(_uppercasePattern, '-$1').toLowerCase();
}

module.exports = hyphenate;
},{}],166:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenateStyleName
 * @typechecks
 */

'use strict';

var hyphenate = require('./hyphenate');

var msPattern = /^ms-/;

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenateStyleName(string) {
  return hyphenate(string).replace(msPattern, '-ms-');
}

module.exports = hyphenateStyleName;
},{"./hyphenate":165}],167:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule invariant
 */

'use strict';

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

function invariant(condition, format, a, b, c, d, e, f) {
  if (process.env.NODE_ENV !== 'production') {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
}

module.exports = invariant;
}).call(this,require('_process'))
},{"_process":21}],168:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isNode
 * @typechecks
 */

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM node.
 */
'use strict';

function isNode(object) {
  return !!(object && (typeof Node === 'function' ? object instanceof Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
}

module.exports = isNode;
},{}],169:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextNode
 * @typechecks
 */

'use strict';

var isNode = require('./isNode');

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM text node.
 */
function isTextNode(object) {
  return isNode(object) && object.nodeType == 3;
}

module.exports = isTextNode;
},{"./isNode":168}],170:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyMirror
 * @typechecks static-only
 */

'use strict';

var invariant = require('./invariant');

/**
 * Constructs an enumeration with keys equal to their value.
 *
 * For example:
 *
 *   var COLORS = keyMirror({blue: null, red: null});
 *   var myColor = COLORS.blue;
 *   var isColorValid = !!COLORS[myColor];
 *
 * The last line could not be performed if the values of the generated enum were
 * not equal to their keys.
 *
 *   Input:  {key1: val1, key2: val2}
 *   Output: {key1: key1, key2: key2}
 *
 * @param {object} obj
 * @return {object}
 */
var keyMirror = function (obj) {
  var ret = {};
  var key;
  !(obj instanceof Object && !Array.isArray(obj)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : undefined;
  for (key in obj) {
    if (!obj.hasOwnProperty(key)) {
      continue;
    }
    ret[key] = key;
  }
  return ret;
};

module.exports = keyMirror;
}).call(this,require('_process'))
},{"./invariant":167,"_process":21}],171:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyOf
 */

/**
 * Allows extraction of a minified key. Let's the build system minify keys
 * without losing the ability to dynamically use key strings as values
 * themselves. Pass in an object with a single key/val pair and it will return
 * you the string key of that single record. Suppose you want to grab the
 * value for a key 'className' inside of an object. Key/val minification may
 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
 * reuse those resolutions.
 */
"use strict";

var keyOf = function (oneKeyObj) {
  var key;
  for (key in oneKeyObj) {
    if (!oneKeyObj.hasOwnProperty(key)) {
      continue;
    }
    return key;
  }
  return null;
};

module.exports = keyOf;
},{}],172:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule mapObject
 */

'use strict';

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * Executes the provided `callback` once for each enumerable own property in the
 * object and constructs a new object from the results. The `callback` is
 * invoked with three arguments:
 *
 *  - the property value
 *  - the property name
 *  - the object being traversed
 *
 * Properties that are added after the call to `mapObject` will not be visited
 * by `callback`. If the values of existing properties are changed, the value
 * passed to `callback` will be the value at the time `mapObject` visits them.
 * Properties that are deleted before being visited are not visited.
 *
 * @grep function objectMap()
 * @grep function objMap()
 *
 * @param {?object} object
 * @param {function} callback
 * @param {*} context
 * @return {?object}
 */
function mapObject(object, callback, context) {
  if (!object) {
    return null;
  }
  var result = {};
  for (var name in object) {
    if (hasOwnProperty.call(object, name)) {
      result[name] = callback.call(context, object[name], name, object);
    }
  }
  return result;
}

module.exports = mapObject;
},{}],173:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule memoizeStringOnly
 * @typechecks static-only
 */

'use strict';

/**
 * Memoizes the return value of a function that accepts one string argument.
 *
 * @param {function} callback
 * @return {function}
 */
function memoizeStringOnly(callback) {
  var cache = {};
  return function (string) {
    if (!cache.hasOwnProperty(string)) {
      cache[string] = callback.call(this, string);
    }
    return cache[string];
  };
}

module.exports = memoizeStringOnly;
},{}],174:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performance
 * @typechecks
 */

'use strict';

var ExecutionEnvironment = require('./ExecutionEnvironment');

var performance;

if (ExecutionEnvironment.canUseDOM) {
  performance = window.performance || window.msPerformance || window.webkitPerformance;
}

module.exports = performance || {};
},{"./ExecutionEnvironment":153}],175:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performanceNow
 * @typechecks
 */

'use strict';

var performance = require('./performance');

var performanceNow;

/**
 * Detect if we can use `window.performance.now()` and gracefully fallback to
 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
 * because of Facebook's testing infrastructure.
 */
if (performance.now) {
  performanceNow = function () {
    return performance.now();
  };
} else {
  performanceNow = function () {
    return Date.now();
  };
}

module.exports = performanceNow;
},{"./performance":174}],176:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shallowEqual
 * @typechecks
 * 
 */

'use strict';

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */
function shallowEqual(objA, objB) {
  if (objA === objB) {
    return true;
  }

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  }

  // Test for A's keys different from B.
  var bHasOwnProperty = hasOwnProperty.bind(objB);
  for (var i = 0; i < keysA.length; i++) {
    if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
      return false;
    }
  }

  return true;
}

module.exports = shallowEqual;
},{}],177:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule toArray
 * @typechecks
 */

'use strict';

var invariant = require('./invariant');

/**
 * Convert array-like objects to arrays.
 *
 * This API assumes the caller knows the contents of the data type. For less
 * well defined inputs use createArrayFromMixed.
 *
 * @param {object|function|filelist} obj
 * @return {array}
 */
function toArray(obj) {
  var length = obj.length;

  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
  // old versions of Safari).
  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : undefined;

  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : undefined;

  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : undefined;

  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
  // without method will throw during the slice call and skip straight to the
  // fallback.
  if (obj.hasOwnProperty) {
    try {
      return Array.prototype.slice.call(obj);
    } catch (e) {
      // IE < 9 does not support Array#slice on collections objects
    }
  }

  // Fall back to copying key by key. This assumes all keys have a value,
  // so will not preserve sparsely populated inputs.
  var ret = Array(length);
  for (var ii = 0; ii < length; ii++) {
    ret[ii] = obj[ii];
  }
  return ret;
}

module.exports = toArray;
}).call(this,require('_process'))
},{"./invariant":167,"_process":21}],178:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule warning
 */

'use strict';

var emptyFunction = require('./emptyFunction');

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if (process.env.NODE_ENV !== 'production') {
  warning = function (condition, format) {
    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }

    if (format.indexOf('Failed Composite propType: ') === 0) {
      return; // Ignore CompositeComponent proptype check.
    }

    if (!condition) {
      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });
      if (typeof console !== 'undefined') {
        console.error(message);
      }
      try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch (x) {}
    }
  };
}

module.exports = warning;
}).call(this,require('_process'))
},{"./emptyFunction":159,"_process":21}],179:[function(require,module,exports){
'use strict';

module.exports = require('./lib/React');

},{"./lib/React":47}],180:[function(require,module,exports){
/*! jQuery UI Virtual Keyboard v1.25.11 */
!function(a){"function"==typeof define&&define.amd?define(["jquery"],a):"object"==typeof module&&"object"==typeof module.exports?module.exports=a(require("jquery")):a(jQuery)}(function(a){"use strict";var b=a.keyboard=function(c,d){var e,f=this;f.version="1.25.11",f.$el=a(c),f.el=c,f.$el.data("keyboard",f),f.init=function(){var c,g,h,i=b.css,j=b.events;f.settings=d||{},d&&d.position&&(g=a.extend({},d.position),d.position=null),f.options=e=a.extend(!0,{},b.defaultOptions,d),g&&(e.position=g,d.position=g),f.el.active=!0,f.namespace=".keyboard"+Math.random().toString(16).slice(2),f.extensionNamespace=[],f.shiftActive=f.altActive=f.metaActive=f.sets=f.capsLock=!1,f.rows=["","-shift","-alt","-alt-shift"],f.inPlaceholder=f.$el.attr("placeholder")||"",f.watermark=b.watermark&&""!==f.inPlaceholder,f.repeatTime=1e3/(e.repeatRate||20),e.preventDoubleEventTime=e.preventDoubleEventTime||100,f.isOpen=!1,f.wheel=a.isFunction(a.fn.mousewheel),c=b.keyCodes,f.alwaysAllowed=[c.capsLock,c.pageUp,c.pageDown,c.end,c.home,c.left,c.up,c.right,c.down,c.insert,c["delete"]],f.$keyboard=[],f.enabled=!0,a.isEmptyObject(e.position)||(e.position.orig_at=e.position.at),f.checkCaret=e.lockInput||b.checkCaretSupport(),f.last={start:0,end:0,key:"",val:"",layout:"",virtual:!0,keyset:[!1,!1,!1],wheel_$Keys:null,wheelIndex:0,wheelLayers:[]},f.temp=["",0,0],a.each([j.kbInit,j.kbBeforeVisible,j.kbVisible,j.kbHidden,j.inputCanceled,j.inputAccepted,j.kbBeforeClose],function(b,c){a.isFunction(e[c])&&f.$el.bind(c+f.namespace,e[c])}),e.alwaysOpen&&(e.stayOpen=!0),h=a(document),f.el.ownerDocument!==document&&(h=h.add(f.el.ownerDocument)),h.bind("mousedown keyup touchstart checkkeyboard ".split(" ").join(f.namespace+" "),f.checkClose),f.$el.addClass(i.input+" "+e.css.input).attr({"aria-haspopup":"true",role:"textbox"}),(e.lockInput||f.el.readOnly)&&(e.lockInput=!0,f.$el.addClass(i.locked).attr({readonly:"readonly"})),(f.$el.is(":disabled")||f.$el.attr("readonly")&&!f.$el.hasClass(i.locked))&&f.$el.addClass(i.noKeyboard),e.openOn&&f.$el.bind(e.openOn+f.namespace,function(){f.focusOn()}),f.watermark||""!==f.$el.val()||""===f.inPlaceholder||""===f.$el.attr("placeholder")||f.$el.addClass(i.placeholder).val(f.inPlaceholder),f.$el.trigger(j.kbInit,[f,f.el]),e.alwaysOpen&&f.reveal()},f.toggle=function(){var a=f.$keyboard.find("."+b.css.keyToggle),c=!f.enabled;f.$preview.prop("readonly",c||f.options.lockInput),f.$keyboard.toggleClass(b.css.keyDisabled,c).find("."+b.css.keyButton).not(a).prop("disabled",c).attr("aria-disabled",c),a.toggleClass(b.css.keyDisabled,c),c&&f.typing_options&&(f.typing_options.text="")},f.setCurrent=function(){var c=b.css,d=a("."+c.isCurrent),e=d.data("keyboard");a.isEmptyObject(e)||e.close(e.options.autoAccept?"true":!1),d.removeClass(c.isCurrent),a("."+c.hasFocus).removeClass(c.hasFocus),f.$el.addClass(c.isCurrent),f.$keyboard.addClass(c.hasFocus),f.isCurrent(!0),f.isOpen=!0},f.isCurrent=function(a){var c=b.currentKeyboard||!1;return a?c=b.currentKeyboard=f.el:a===!1&&c===f.el&&(c=b.currentKeyboard=""),c===f.el},f.isVisible=function(){return f.$keyboard&&f.$keyboard.length?f.$keyboard.is(":visible"):!1},f.focusOn=function(){(f||!f.el.active)&&(f.isVisible()||(clearTimeout(f.timer),f.reveal()))},f.reveal=function(c){f.isOpen&&(c=!0);var d=b.css;return f.opening=!0,a("."+d.keyboard).not("."+d.alwaysOpen).remove(),c&&(f.isOpen=e.alwaysOpen,f.last.val=f.$preview&&f.$preview.val()||"",f.$keyboard.length&&(f.$keyboard.remove(),f.$keyboard=[],f.shiftActive=f.altActive=f.metaActive=!1)),f.$el.is(":disabled")||f.$el.attr("readonly")&&!f.$el.hasClass(d.locked)?void f.$el.addClass(d.noKeyboard):(f.$el.removeClass(d.noKeyboard),e.openOn&&f.$el.unbind(a.trim((e.openOn+" ").split(/\s+/).join(f.namespace+" "))),(!f.$keyboard||f.$keyboard&&(!f.$keyboard.length||a.contains(document.body,f.$keyboard[0])))&&f.startup(),f.watermark||f.el.value!==f.inPlaceholder||f.$el.removeClass(d.placeholder).val(""),f.originalContent=f.$el.val(),f.$preview.val(c?f.last.val:f.originalContent),e.acceptValid&&f.checkValid(),e.resetDefault&&(f.shiftActive=f.altActive=f.metaActive=!1),f.showSet(),f.isVisible()||f.$el.trigger(b.events.kbBeforeVisible,[f,f.el]),f.setCurrent(),f.toggle(),f.$keyboard.show(),e.usePreview&&b.msie&&("undefined"==typeof f.width&&(f.$preview.hide(),f.width=Math.ceil(f.$keyboard.width()),f.$preview.show()),f.$preview.width(f.width)),f.position=a.isEmptyObject(e.position)?!1:e.position,a.ui&&a.ui.position&&f.position&&(f.position.of=f.position.of||f.$el.data("keyboardPosition")||f.$el,f.position.collision=f.position.collision||"flipfit flipfit",e.position.at=e.usePreview?e.position.orig_at:e.position.at2,f.$keyboard.position(f.position)),f.checkDecimal(),f.lineHeight=parseInt(f.$preview.css("lineHeight"),10)||parseInt(f.$preview.css("font-size"),10)+4,e.caretToEnd&&f.saveCaret(f.originalContent.length,f.originalContent.length),b.allie&&(0===f.last.end&&f.last.start>0&&(f.last.end=f.last.start),f.last.start<0&&(f.last.start=f.last.end=f.originalContent.length)),c||(f.timer2=setTimeout(function(){var a;f.opening=!1,/(number|email)/i.test(f.el.type)||e.caretToEnd||f.saveCaret(a,a,f.$el),e.initialFocus&&b.caret(f.$preview,f.last),f.last.eventTime=(new Date).getTime(),f.$el.trigger(b.events.kbVisible,[f,f.el]),f.timer=setTimeout(function(){f&&f.saveCaret()},200)},10)),f)},f.updateLanguage=function(){var c=b.layouts,d=e.language||c[e.layout]&&c[e.layout].lang&&c[e.layout].lang||[e.language||"en"],g=b.language;d=(a.isArray(d)?d[0]:d).split("-")[0],e.display=a.extend(!0,{},g.en.display,g[d]&&g[d].display||{},f.settings.display),e.combos=a.extend(!0,{},g.en.combos,g[d]&&g[d].combos||{},f.settings.combos),e.wheelMessage=g[d]&&g[d].wheelMessage||g.en.wheelMessage,e.rtl=c[e.layout]&&c[e.layout].rtl||g[d]&&g[d].rtl||!1,f.regex=g[d]&&g[d].comboRegex||b.comboRegex,f.decimal=/^\./.test(e.display.dec),f.$el.toggleClass("rtl",e.rtl).css("direction",e.rtl?"rtl":"")},f.startup=function(){var c=b.css;e.alwaysOpen&&f.$preview||f.makePreview(),f.$keyboard&&f.$keyboard.length||("custom"===e.layout&&(e.layoutHash="custom"+f.customHash()),f.layout="custom"===e.layout?e.layoutHash:e.layout,f.last.layout=f.layout,f.updateLanguage(),"undefined"==typeof b.builtLayouts[f.layout]&&(a.isFunction(e.create)?f.$keyboard=e.create(f):f.$keyboard.length||f.buildKeyboard(f.layout,!0)),f.$keyboard=b.builtLayouts[f.layout].$keyboard.clone(),f.$keyboard.data("keyboard",f),""!==(f.el.id||"")&&f.$keyboard.attr("id",f.el.id+b.css.idSuffix),f.makePreview(),e.usePreview?a.isEmptyObject(e.position)||(e.position.at=e.position.orig_at):a.isEmptyObject(e.position)||(e.position.at=e.position.at2)),f.$decBtn=f.$keyboard.find("."+c.keyPrefix+"dec"),(e.enterNavigation||"TEXTAREA"===f.el.nodeName)&&f.alwaysAllowed.push(13),f.bindKeyboard(),f.$keyboard.appendTo(e.appendLocally?f.$el.parent():e.appendTo||"body"),f.bindKeys(),e.reposition&&a.ui&&a.ui.position&&"body"==e.appendTo&&a(window).bind("resize"+f.namespace,function(){f.position&&f.isVisible()&&f.$keyboard.position(f.position)})},f.makePreview=function(){if(e.usePreview){var c,d,g,h,i=b.css;for(f.$preview=f.$el.clone(!1).data("keyboard",f).removeClass(i.placeholder+" "+i.input).addClass(i.preview+" "+e.css.input).attr("tabindex","-1").show(),f.preview=f.$preview[0],"number"===f.preview.type&&(f.preview.type="text"),h=/^(data-|id|aria-haspopup)/i,d=f.$preview.get(0).attributes,c=d.length-1;c>=0;c--)g=d[c]&&d[c].name,h.test(g)&&f.preview.removeAttribute(g);a("<div />").addClass(i.wrapper).append(f.$preview).prependTo(f.$keyboard)}else f.$preview=f.$el,f.preview=f.el},f.saveCaret=function(a,c,d){var e=b.caret(d||f.$preview,a,c);f.last.start="undefined"==typeof a?e.start:a,f.last.end="undefined"==typeof c?e.end:c},f.setScroll=function(){if(f.last.virtual){var a,b,c,d,g="TEXTAREA"===f.preview.nodeName,h=f.last.val.substring(0,Math.max(f.last.start,f.last.end));f.$previewCopy||(f.$previewCopy=f.$preview.clone().removeAttr("id").css({position:"absolute",left:0,zIndex:-10,visibility:"hidden"}).addClass("ui-keyboard-preview-clone"),g||f.$previewCopy.css({"white-space":"pre",width:0}),e.usePreview?f.$preview.after(f.$previewCopy):f.$keyboard.prepend(f.$previewCopy)),g?(f.$previewCopy.height(f.lineHeight).val(h),f.preview.scrollTop=f.lineHeight*(Math.floor(f.$previewCopy[0].scrollHeight/f.lineHeight)-1)):(f.$previewCopy.val(h.replace(/\s/g," ")),c=/c/i.test(e.scrollAdjustment)?f.preview.clientWidth/2:e.scrollAdjustment,a=f.$previewCopy[0].scrollWidth-1,"undefined"==typeof f.last.scrollWidth&&(f.last.scrollWidth=a,f.last.direction=!0),d=f.last.scrollWidth===a?f.last.direction:f.last.scrollWidth<a,b=f.preview.clientWidth-c,d?b>a?f.preview.scrollLeft=0:f.preview.scrollLeft=a-b:a>=f.preview.scrollWidth-b?f.preview.scrollLeft=f.preview.scrollWidth-c:a-c>0?f.preview.scrollLeft=a-c:f.preview.scrollLeft=0,f.last.scrollWidth=a,f.last.direction=d)}},f.bindKeyboard=function(){var c,d=b.keyCodes,g=b.builtLayouts[f.layout];f.$preview.unbind("keypress keyup keydown mouseup touchend ".split(" ").join(f.namespace+" ")).bind("click"+f.namespace,function(){f.timer2=setTimeout(function(){f.saveCaret()},150)}).bind("keypress"+f.namespace,function(h){if(e.lockInput)return!1;var i=h.charCode||h.which,j=f.last.key=String.fromCharCode(i);if(f.last.virtual=!1,f.last.event=h,f.last.$key=[],f.checkCaret&&f.saveCaret(),f.capsLock=i>=d.A&&i<=d.Z&&!h.shiftKey||i>=d.a&&i<=d.z&&h.shiftKey?!0:!1,e.restrictInput){if((h.which===d.backSpace||0===h.which)&&a.inArray(h.keyCode,f.alwaysAllowed))return;-1===a.inArray(j,g.acceptedKeys)&&(h.preventDefault(),c=a.extend({},h),c.type=b.events.inputRestricted,f.$el.trigger(c,[f,f.el]),a.isFunction(e.restricted)&&e.restricted(c,f,f.el))}else if((h.ctrlKey||h.metaKey)&&(h.which===d.A||h.which===d.C||h.which===d.V||h.which>=d.X&&h.which<=d.Z))return;g.hasMappedKeys&&g.mappedKeys.hasOwnProperty(j)&&(f.last.key=g.mappedKeys[j],f.insertText(f.last.key),h.preventDefault()),f.checkMaxLength()}).bind("keyup"+f.namespace,function(c){switch(f.last.virtual=!1,c.which){case d.tab:if(f.tab&&e.tabNavigation&&!e.lockInput){f.shiftActive=c.shiftKey;var g=b.keyaction.tab(f);if(f.tab=!1,!g)return!1}else c.preventDefault();break;case d.escape:return e.ignoreEsc||f.close(e.autoAccept&&e.autoAcceptOnEsc?"true":!1),!1}return clearTimeout(f.throttled),f.throttled=setTimeout(function(){f.isVisible()&&f.checkCombos()},100),f.checkMaxLength(),f.$el.trigger(b.events.kbChange,[f,f.el]),f.last.val=f.$preview.val(),a.isFunction(e.change)?(e.change(a.Event(b.events.inputChange),f,f.el),!1):void 0}).bind("keydown"+f.namespace,function(a){if(e.alwaysOpen&&!f.isCurrent()&&f.reveal(),a.which===d.tab)return f.tab=!0,!1;if(e.lockInput)return!1;switch(f.last.virtual=!1,a.which){case d.backSpace:b.keyaction.bksp(f,null,a),a.preventDefault();break;case d.enter:b.keyaction.enter(f,null,a);break;case d.capsLock:f.shiftActive=f.capsLock=!f.capsLock,f.showSet();break;case d.V:if(a.ctrlKey||a.metaKey){if(e.preventPaste)return void a.preventDefault();f.checkCombos()}}}).bind("mouseup touchend ".split(" ").join(f.namespace+" "),function(){f.last.virtual=!0,f.checkCaret&&f.saveCaret()}),f.$keyboard.bind("mousedown click touchstart ".split(" ").join(f.namespace+" "),function(b){b.stopPropagation(),f.isCurrent()||(f.reveal(),a(document).trigger("checkkeyboard"+f.namespace)),e.noFocus||f.$preview.focus()}),e.preventPaste&&(f.$preview.bind("contextmenu"+f.namespace,function(a){a.preventDefault()}),f.$el.bind("contextmenu"+f.namespace,function(a){a.preventDefault()}))},f.bindKeys=function(){var c=b.css;f.$allKeys=f.$keyboard.find("button."+c.keyButton).unbind(f.namespace+" "+f.namespace+"kb").bind("mouseenter mouseleave touchstart ".split(" ").join(f.namespace+" "),function(b){if(e.alwaysOpen&&"mouseleave"!==b.type&&!f.isCurrent()&&f.reveal(),f.isCurrent()){var c,d,g=f.last,h=a(this),i=b.type;e.useWheel&&f.wheel&&(c=f.getLayers(h),d=(c.length?c.map(function(){return a(this).attr("data-value")||""}).get():"")||[h.text()],g.wheel_$Keys=c,g.wheelLayers=d,g.wheelIndex=a.inArray(h.attr("data-value"),d)),"mouseenter"!==i&&"touchstart"!==i||"password"===f.el.type||h.hasClass(e.css.buttonDisabled)||(h.addClass(e.css.buttonHover),e.useWheel&&f.wheel&&h.attr("title",function(a,b){return f.wheel&&""===b&&f.sets&&d.length>1&&"touchstart"!==i?e.wheelMessage:b})),"mouseleave"===i&&(h.removeClass("password"===f.el.type?"":e.css.buttonHover),e.useWheel&&f.wheel&&(g.wheelIndex=0,g.wheelLayers=[],g.wheel_$Keys=null,h.attr("title",function(a,b){return b===e.wheelMessage?"":b}).html(h.attr("data-html"))))}}).bind(e.keyBinding.split(" ").join(f.namespace+" ")+f.namespace+" "+b.events.kbRepeater,function(d){if(d.preventDefault(),!f.$keyboard.is(":visible"))return!1;var g,h,i=f.last,j=this,k=a(j),l=(new Date).getTime();if(e.useWheel&&f.wheel&&(h=i.wheel_$Keys,k=h&&i.wheelIndex>-1?h.eq(i.wheelIndex):k),g=k.attr("data-action"),g=":"===g?":":(g||"").split(":")[0],!(l-(i.eventTime||0)<e.preventDoubleEventTime)){if(i.eventTime=l,i.event=d,i.virtual=!0,e.noFocus||f.$preview.focus(),i.$key=k,i.key=k.attr("data-value"),f.checkCaret&&b.caret(f.$preview,i),g.match("meta")&&(g="meta"),g===i.key&&"string"==typeof b.keyaction[g])i.key=g=b.keyaction[g];else if(g in b.keyaction&&a.isFunction(b.keyaction[g])){if(b.keyaction[g](f,this,d)===!1)return!1;g=null}return"undefined"!=typeof g&&null!==g&&(i.key=a(this).hasClass(c.keyAction)?g:i.key,f.insertText(i.key),f.capsLock||e.stickyShift||d.shiftKey||(f.shiftActive=!1,f.showSet(k.attr("data-name")))),b.caret(f.$preview,i),f.checkCombos(),f.$el.trigger(b.events.kbChange,[f,f.el]),i.val=f.$preview.val(),a.isFunction(e.change)?(e.change(a.Event(b.events.inputChange),f,f.el),!1):void 0}}).bind("mouseup"+f.namespace+" "+"mouseleave touchend touchmove touchcancel ".split(" ").join(f.namespace+"kb "),function(c){f.last.virtual=!0;var d,g=a(this);if("touchmove"===c.type){if(d=g.offset(),d.right=d.left+g.outerWidth(),d.bottom=d.top+g.outerHeight(),c.originalEvent.touches[0].pageX>=d.left&&c.originalEvent.touches[0].pageX<d.right&&c.originalEvent.touches[0].pageY>=d.top&&c.originalEvent.touches[0].pageY<d.bottom)return!0}else/(mouseleave|touchend|touchcancel)/i.test(c.type)?g.removeClass(e.css.buttonHover):(!e.noFocus&&f.isVisible()&&f.isCurrent()&&f.$preview.focus(),f.checkCaret&&b.caret(f.$preview,f.last));return f.mouseRepeat=[!1,""],clearTimeout(f.repeater),!1}).bind("click"+f.namespace,function(){return!1}).not("."+c.keyAction).bind("mousewheel"+f.namespace,function(b,c){if(e.useWheel&&f.wheel){c=c||b.deltaY;var d,g=f.last.wheelLayers||[];return g.length>1?(d=f.last.wheelIndex+(c>0?-1:1),d>g.length-1&&(d=0),0>d&&(d=g.length-1)):d=0,f.last.wheelIndex=d,a(this).html(g[d]),!1}}).add("."+c.keyPrefix+"tab bksp space enter".split(" ").join(",."+c.keyPrefix),f.$keyboard).bind("mousedown touchstart ".split(" ").join(f.namespace+"kb "),function(){if(0!==e.repeatRate){var b=a(this);f.mouseRepeat=[!0,b],setTimeout(function(){f.mouseRepeat[0]&&f.mouseRepeat[1]===b&&f.repeatKey(b)},e.repeatDelay)}return!1})},f.insertText=function(a){if("undefined"!=typeof a){var c,d,e="\b"===a,g=f.$preview.val(),h=b.caret(f.$preview),i=g.length;h.end<h.start&&(h.end=h.start),h.start>i&&(h.end=h.start=i),"TEXTAREA"===f.preview.nodeName&&b.msie&&"\n"===g.substr(h.start,1)&&(h.start+=1,h.end+=1),"{d}"===a&&(a="",d=h.start,h.end+=1),c=e&&h.start===h.end,a=e?"":a,g=g.substr(0,h.start-(c?1:0))+a+g.substr(h.end),d=h.start+(c?-1:a.length),f.$preview.val(g),f.saveCaret(d,d),f.setScroll()}},f.checkMaxLength=function(){var a,c,d=f.$preview.val();e.maxLength!==!1&&d.length>e.maxLength&&(a=b.caret(f.$preview).start,c=Math.min(a,e.maxLength),e.maxInsert||(d=f.last.val,c=a-1),f.$preview.val(d.substring(0,e.maxLength)),f.saveCaret(c,c)),f.$decBtn.length&&f.checkDecimal()},f.repeatKey=function(a){a.trigger(b.events.kbRepeater),f.mouseRepeat[0]&&(f.repeater=setTimeout(function(){f.repeatKey(a)},f.repeatTime))},f.showKeySet=function(a){"string"==typeof a?(f.last.keyset=[f.shiftActive,f.altActive,f.metaActive],f.shiftActive=/shift/i.test(a),f.altActive=/alt/i.test(a),/meta/.test(a)?(f.metaActive=!0,f.showSet(a.match(/meta\d+/i)[0])):(f.metaActive=!1,f.showSet())):f.showSet(a)},f.showSet=function(a){e=f.options;var c=b.css,d="."+c.keyPrefix,g=e.css.buttonActive,h="",i=(f.shiftActive?1:0)+(f.altActive?2:0);return f.shiftActive||(f.capsLock=!1),f.metaActive?(h=/meta/i.test(a)?a:"",""===h?h=f.metaActive===!0?"":f.metaActive:f.metaActive=h,(!e.stickyShift&&f.last.keyset[2]!==f.metaActive||(f.shiftActive||f.altActive)&&!f.$keyboard.find("."+c.keySet+"-"+h+f.rows[i]).length)&&(f.shiftActive=f.altActive=!1)):!e.stickyShift&&f.last.keyset[2]!==f.metaActive&&f.shiftActive&&(f.shiftActive=f.altActive=!1),i=(f.shiftActive?1:0)+(f.altActive?2:0),h=0!==i||f.metaActive?""===h?"":"-"+h:"-normal",f.$keyboard.find("."+c.keySet+h+f.rows[i]).length?(f.$keyboard.find(d+"alt,"+d+"shift,."+c.keyAction+"[class*=meta]").removeClass(g).end().find(d+"alt").toggleClass(g,f.altActive).end().find(d+"shift").toggleClass(g,f.shiftActive).end().find(d+"lock").toggleClass(g,f.capsLock).end().find("."+c.keySet).hide().end().find("."+c.keyAction+d+h).addClass(g),f.$keyboard.find("."+c.keySet+h+f.rows[i])[0].style.display="inline-block",f.metaActive&&f.$keyboard.find(d+f.metaActive).toggleClass(g,f.metaActive!==!1),f.last.keyset=[f.shiftActive,f.altActive,f.metaActive],void f.$el.trigger(b.events.kbKeysetChange,[f,f.el])):(f.shiftActive=f.last.keyset[0],f.altActive=f.last.keyset[1],void(f.metaActive=f.last.keyset[2]))},f.checkCombos=function(){if(!f.isVisible())return f.$preview.val();var a,c,d,g,h=f.$preview.val(),i=b.caret(f.$preview),j=b.builtLayouts[f.layout],k=h.length;if(""===h)return h;if(i.end<i.start&&(i.end=i.start),i.start>k&&(i.end=i.start=k),b.msie&&"\n"===h.substr(i.start,1)&&(i.start+=1,i.end+=1),e.useCombos&&(b.msie?h=h.replace(f.regex,function(a,b,c){return e.combos.hasOwnProperty(b)?e.combos[b][c]||a:a}):f.$preview.length&&(d=i.start-(i.start-2>=0?2:0),b.caret(f.$preview,d,i.end),g=(b.caret(f.$preview).text||"").replace(f.regex,function(a,b,c){return e.combos.hasOwnProperty(b)?e.combos[b][c]||a:a}),f.$preview.val(b.caret(f.$preview).replaceStr(g)),h=f.$preview.val())),e.restrictInput&&""!==h){for(d=h,c=j.acceptedKeys.length,a=0;c>a;a++)""!==d&&(g=j.acceptedKeys[a],h.indexOf(g)>=0&&(/[\[|\]|\\|\^|\$|\.|\||\?|\*|\+|\(|\)|\{|\}]/g.test(g)&&(g="\\"+g),d=d.replace(new RegExp(g,"g"),"")));""!==d&&(h=h.replace(d,""))}return i.start+=h.length-k,i.end+=h.length-k,f.$preview.val(h),f.saveCaret(i.start,i.end),f.setScroll(),f.checkMaxLength(),e.acceptValid&&f.checkValid(),h},f.checkValid=function(){var c=b.css,d=f.$keyboard.find("."+c.keyPrefix+"accept"),g=!0;a.isFunction(e.validate)&&(g=e.validate(f,f.$preview.val(),!1)),d.toggleClass(c.inputInvalid,!g).toggleClass(c.inputValid,g).attr("title",d.attr("data-title")+" ("+e.display[g?"valid":"invalid"]+")")},f.checkDecimal=function(){f.decimal&&/\./g.test(f.preview.value)||!f.decimal&&/\,/g.test(f.preview.value)?f.$decBtn.attr({disabled:"disabled","aria-disabled":"true"}).removeClass(e.css.buttonHover).addClass(e.css.buttonDisabled):f.$decBtn.removeAttr("disabled").attr({"aria-disabled":"false"}).addClass(e.css.buttonDefault).removeClass(e.css.buttonDisabled)},f.getLayers=function(c){var d=b.css,e=c.attr("data-pos"),f=c.closest("."+d.keyboard).find('button[data-pos="'+e+'"]');return f.filter(function(){return""!==a(this).find("."+d.keyText).text()}).add(c)},f.switchInput=function(b,c){if(a.isFunction(e.switchInput))e.switchInput(f,b,c);else{f.$keyboard.length&&f.$keyboard.hide();var d,g=!1,h=a("button, input, textarea, a").filter(":visible").not(":disabled"),i=h.index(f.$el)+(b?1:-1);if(f.$keyboard.length&&f.$keyboard.show(),i>h.length-1&&(g=e.stopAtEnd,i=0),0>i&&(g=e.stopAtEnd,i=h.length-1),!g){if(c=f.close(c),!c)return;d=h.eq(i).data("keyboard"),d&&d.options.openOn.length?d.focusOn():h.eq(i).focus()}}return!1},f.close=function(c){if(f.isOpen){clearTimeout(f.throttled);var d=b.css,g=b.events,h=c?f.checkCombos():f.originalContent;if(c&&a.isFunction(e.validate)&&!e.validate(f,h,!0)&&(h=f.originalContent,c=!1,e.cancelClose))return;f.isCurrent(!1),f.isOpen=e.alwaysOpen,f.$preview.val(h),f.$el.removeClass(d.isCurrent+" "+d.inputAutoAccepted).addClass(c?c===!0?"":d.inputAutoAccepted:"").val(h).trigger(g.inputChange).trigger(e.alwaysOpen?"":g.kbBeforeClose,[f,f.el,c||!1]).trigger(c?g.inputAccepted:g.inputCanceled,[f,f.el]).trigger(e.alwaysOpen?g.kbInactive:g.kbHidden,[f,f.el]).blur(),f&&(f.last.eventTime=(new Date).getTime(),!e.alwaysOpen&&f.$keyboard&&(e.openOn&&(f.timer=setTimeout(function(){f&&f.el.active&&(f.$el.bind(e.openOn+f.namespace,function(){f.focusOn()}),a(":focus")[0]===f.el&&f.$el.blur())},500)),f.$keyboard.remove(),f.$keyboard=[],f.$previewCopy=null),f.watermark||""!==f.el.value||""===f.inPlaceholder||f.$el.addClass(d.placeholder).val(f.inPlaceholder))}return!!c},f.accept=function(){return f.close(!0)},f.checkClose=function(b){if(!f.opening){f.escClose(b);var c=a.keyboard.css,d=a(b.target);if(d.hasClass(c.input)){var e=d.data("keyboard");e!==f||e.$el.hasClass(c.isCurrent)||b.type!==e.options.openOn||e.focusOn()}}},f.escClose=function(c){if(c&&"keyup"===c.type)return c.which!==b.keyCodes.escape||e.ignoreEsc?"":f.close(e.autoAccept&&e.autoAcceptOnEsc?"true":!1);if(f.isOpen&&(!f.isCurrent()&&f.isOpen||f.isOpen&&c.target!==f.el)){if(e.stayOpen&&!a(c.target).hasClass("ui-keyboard-input"))return;b.allie&&c.preventDefault(),f.close(e.autoAccept?"true":!1)}},f.keyBtn=a("<button />").attr({role:"button",type:"button","aria-disabled":"false",tabindex:"-1"}).addClass(b.css.keyButton),f.processName=function(a){var b,c,d=(a||"").replace(/[^a-z0-9-_]/gi,""),e=d.length,f=[];if(e>1&&a===d)return a;if(e=a.length){for(b=0;e>b;b++)c=a[b],f.push(/[a-z0-9-_]/i.test(c)?/[-_]/.test(c)?"":c:(0===b?"":"-")+c.charCodeAt(0));return f.join("")}return a},f.addKey=function(c,d,g){var h,i,j,k,l=b.css,m=d.split(":"),n=m.length-1,o=g===!0?c:e.display[m[0]]||c,p={isAction:!g,action:c,name:f.processName(c.split(/[(:]/)[0])};return/\(.+\)/.test(o)&&(j=o.replace(/\(([^()]+)\)/,""),i=o.match(/\(([^()]+)\)/)[1],o=j,k=j.split(":"),j=""!==k[0]&&k.length>1?k[0]:j,b.builtLayouts[f.layout].mappedKeys[i]=j),k=o.split(":"),""===k[0]&&""===k[1]&&(o=":"),o=""!==k[0]&&k.length>1?k[0]:o,p.value=a.trim(g?o:m[1]||o),p.title=k.length>1?a.trim(k[1]).replace(/_/g," ")||"":n>0?m[n]||"":"",h=p.value.length>2?" "+l.keyWide:"",h+=g?"":" "+l.keyAction,p.html='<span class="'+l.keyText+'">'+p.value.replace(/[\u00A0-\u9999<>\&]/gim,function(a){return"&#"+a.charCodeAt(0)+";"})+"</span>",p.$key=f.keyBtn.clone().attr({"data-value":p.value,"data-name":p.name,"data-pos":f.temp[1]+","+f.temp[2],"data-title":p.title,title:p.title,"data-action":p.action,"data-html":p.html}).addClass((""===p.name?"":l.keyPrefix+p.name+h+" ")+e.css.buttonDefault).html(p.html).appendTo(f.temp[0]),"function"==typeof e.buildKey&&(p=e.buildKey(f,p),m=p.$key.html(),p.$key.attr("data-html",m)),p.$key},f.customHash=function(a){var b,c,d,f,g,h=[],i=[];a="undefined"==typeof a?e.customLayout:a;for(c in a)a.hasOwnProperty(c)&&h.push(a[c]);if(i=i.concat.apply(i,h).join(" "),d=0,g=i.length,0===g)return d;for(b=0;g>b;b++)f=i.charCodeAt(b),d=(d<<5)-d+f,d&=d;return d},f.buildKeyboard=function(c,d){a.isEmptyObject(e.display)&&f.updateLanguage();var g,h,i,j=b.css,k=0,l=b.builtLayouts[c||f.layout||e.layout]={mappedKeys:{},acceptedKeys:[]},m=l.acceptedKeys=e.restrictInclude?(""+e.restrictInclude).split(/\s+/)||[]:[],n=j.keyboard+" "+e.css.popup+" "+e.css.container+(e.alwaysOpen?" "+j.alwaysOpen:""),o=a("<div />").addClass(n).attr({role:"textbox"}).hide();return d&&"custom"===e.layout||!b.layouts.hasOwnProperty(e.layout)?(e.layout="custom",n=b.layouts.custom=e.customLayout||{normal:["{cancel}"]}):n=b.layouts[d?e.layout:c||f.layout||e.layout],a.each(n,function(b,c){if(""!==b&&!/^(name|lang|rtl)$/i.test(b))for("default"===b&&(b="normal"),k++,h=a("<div />").attr("name",b).addClass(j.keySet+" "+j.keySet+"-"+b).appendTo(o).toggle("normal"===b),g=0;g<c.length;g++)i=a.trim(c[g]).replace(/\{(\.?)[\s+]?:[\s+]?(\.?)\}/g,"{$1:$2}"),f.buildRow(h,g,i.split(/\s+/),m),h.find("."+j.keyButton+",."+j.keySpacer).filter(":last").after('<br class="'+j.endRow+'"/>')}),k>1&&(f.sets=!0),l.hasMappedKeys=!a.isEmptyObject(l.mappedKeys),l.$keyboard=o,o},f.buildRow=function(c,d,g,h){var i,j,k,l,m,n,o=b.css;for(k=0;k<g.length;k++)if(f.temp=[c,d,k],l=!1,0!==g[k].length)if(/^\{\S+\}$/.test(g[k])){if(m=g[k].match(/^\{(\S+)\}$/)[1],/\!\!/.test(m)&&(m=m.replace("!!",""),l=!0),/^sp:((\d+)?([\.|,]\d+)?)(em|px)?$/i.test(m)&&(n=parseFloat(m.replace(/,/,".").match(/^sp:((\d+)?([\.|,]\d+)?)(em|px)?$/i)[1]||0),a('<span class="'+o.keyText+'"></span>').width(m.match(/px/i)?n+"px":2*n+"em").addClass(o.keySpacer).appendTo(c)),/^empty(:((\d+)?([\.|,]\d+)?)(em|px)?)?$/i.test(m)&&(n=/:/.test(m)?parseFloat(m.replace(/,/,".").match(/^empty:((\d+)?([\.|,]\d+)?)(em|px)?$/i)[1]||0):"",f.addKey(""," ").addClass(e.css.buttonDisabled+" "+e.css.buttonEmpty).attr("aria-disabled",!0).width(n?m.match("px")?n+"px":2*n+"em":"")),/^meta\d+\:?(\w+)?/i.test(m)){f.addKey(m.split(":")[0],m).addClass(o.keyHasActive);continue}switch(j=m.split(":"),j[0].toLowerCase()){case"a":case"accept":f.addKey("accept",m).addClass(e.css.buttonAction+" "+o.keyAction);break;case"alt":case"altgr":f.addKey("alt",m).addClass(o.keyHasActive);break;case"b":case"bksp":f.addKey("bksp",m);break;case"c":case"cancel":f.addKey("cancel",m).addClass(e.css.buttonAction+" "+o.keyAction);break;case"combo":f.addKey("combo",m).addClass(o.keyHasActive).attr("title",function(a,b){return b+" ("+e.display[e.useCombos?"active":"disabled"]+")"}).toggleClass(e.css.buttonActive,e.useCombos);break;case"dec":h.push(f.decimal?".":","),f.addKey("dec",m);break;case"e":case"enter":f.addKey("enter",m).addClass(e.css.buttonAction+" "+o.keyAction);break;case"lock":f.addKey("lock",m).addClass(o.keyHasActive);break;case"s":case"shift":f.addKey("shift",m).addClass(o.keyHasActive);break;case"sign":h.push("-"),f.addKey("sign",m);break;case"space":h.push(" "),f.addKey("space",m);break;case"t":case"tab":f.addKey("tab",m);break;default:b.keyaction.hasOwnProperty(j[0])&&f.addKey(j[0],m).toggleClass(e.css.buttonAction+" "+o.keyAction,l)}}else i=g[k],h.push(":"===i?i:i.split(":")[0]),f.addKey(i,i,!0)},f.removeBindings=function(b){a(document).unbind(b),f.el.ownerDocument!==document&&a(f.el.ownerDocument).unbind(b),a(window).unbind(b),f.$el.unbind(b)},f.destroy=function(a){var c,d=b.css,g=f.extensionNamespace.length,h=[d.input,d.locked,d.placeholder,d.noKeyboard,d.alwaysOpen,e.css.input,d.isCurrent].join(" ");for(clearTimeout(f.timer),clearTimeout(f.timer2),f.removeBindings(f.namespace),c=0;g>c;c++)f.removeBindings(f.extensionNamespace[c]);f.el.active=!1,f.$keyboard.length&&f.$keyboard.remove(),f.$el.removeClass(h).removeAttr("aria-haspopup").removeAttr("role").removeData("keyboard"),f=null,"function"==typeof a&&a()},f.init()};return b.keyCodes={backSpace:8,tab:9,enter:13,capsLock:20,escape:27,space:32,pageUp:33,pageDown:34,end:35,home:36,left:37,up:38,right:39,down:40,insert:45,"delete":46,A:65,Z:90,V:86,C:67,X:88,a:97,z:122},b.css={idSuffix:"_keyboard",input:"ui-keyboard-input",wrapper:"ui-keyboard-preview-wrapper",preview:"ui-keyboard-preview",keyboard:"ui-keyboard",keySet:"ui-keyboard-keyset",keyButton:"ui-keyboard-button",keyWide:"ui-keyboard-widekey",keyPrefix:"ui-keyboard-",keyText:"ui-keyboard-text",keyHasActive:"ui-keyboard-hasactivestate",keyAction:"ui-keyboard-actionkey",keySpacer:"ui-keyboard-spacer",keyToggle:"ui-keyboard-toggle",keyDisabled:"ui-keyboard-disabled",locked:"ui-keyboard-lockedinput",alwaysOpen:"ui-keyboard-always-open",noKeyboard:"ui-keyboard-nokeyboard",placeholder:"ui-keyboard-placeholder",hasFocus:"ui-keyboard-has-focus",isCurrent:"ui-keyboard-input-current",inputValid:"ui-keyboard-valid-input",inputInvalid:"ui-keyboard-invalid-input",inputAutoAccepted:"ui-keyboard-autoaccepted",endRow:"ui-keyboard-button-endrow"},b.events={kbChange:"keyboardChange",kbBeforeClose:"beforeClose",kbBeforeVisible:"beforeVisible",kbVisible:"visible",kbInit:"initialized",kbInactive:"inactive",kbHidden:"hidden",kbRepeater:"repeater",kbKeysetChange:"keysetChange",inputAccepted:"accepted",inputCanceled:"canceled",inputChange:"change",inputRestricted:"restricted"},b.keyaction={accept:function(a){return a.close(!0),!1},alt:function(a){a.altActive=!a.altActive,a.showSet()},bksp:function(a){a.insertText("\b")},cancel:function(a){return a.close(),!1},clear:function(a){a.$preview.val(""),a.$decBtn.length&&a.checkDecimal()},combo:function(a){var c=a.options,d=!c.useCombos,e=a.$keyboard.find("."+b.css.keyPrefix+"combo");return c.useCombos=d,e.toggleClass(c.css.buttonActive,d).attr("title",e.attr("data-title")+" ("+c.display[d?"active":"disabled"]+")"),d&&a.checkCombos(),!1},dec:function(a){a.insertText(a.decimal?".":",")},del:function(a){a.insertText("{d}")},"default":function(a){a.shiftActive=a.altActive=a.metaActive=!1,a.showSet()},enter:function(c,d,e){var f=c.el.nodeName,g=c.options;return e.shiftKey?g.enterNavigation?c.switchInput(!e[g.enterMod],!0):c.close(!0):g.enterNavigation&&("TEXTAREA"!==f||e[g.enterMod])?c.switchInput(!e[g.enterMod],g.autoAccept?"true":!1):void("TEXTAREA"===f&&a(e.target).closest("button").length&&c.insertText((b.msie?" ":"")+"\n"))},lock:function(a){a.last.keyset[0]=a.shiftActive=a.capsLock=!a.capsLock,a.showSet()},left:function(a){var c=b.caret(a.$preview);c.start-1>=0&&(a.last.start=a.last.end=c.start-1,b.caret(a.$preview,a.last),a.setScroll())},meta:function(b,c){var d=a(c);b.metaActive=!d.hasClass(b.options.css.buttonActive),b.showSet(d.attr("data-name"))},next:function(a){return a.switchInput(!0,a.options.autoAccept),!1},normal:function(a){a.shiftActive=a.altActive=a.metaActive=!1,a.showSet()},prev:function(a){return a.switchInput(!1,a.options.autoAccept),!1},right:function(a){var c=b.caret(a.$preview);c.start+1<=a.$preview.val().length&&(a.last.start=a.last.end=c.start+1,b.caret(a.$preview,a.last),a.setScroll())},shift:function(a){a.last.keyset[0]=a.shiftActive=!a.shiftActive,a.showSet()},sign:function(a){/^\-?\d*\.?\d*$/.test(a.$preview.val())&&a.$preview.val(-1*a.$preview.val())},space:function(a){a.insertText(" ")},tab:function(a){var b=a.el.nodeName,c=a.options;return"INPUT"===b?c.tabNavigation?a.switchInput(!a.shiftActive,!0):!1:void a.insertText("	")},toggle:function(a){a.enabled=!a.enabled,a.toggle()},NBSP:" ",ZWSP:"​",ZWNJ:"‌",ZWJ:"‍",LRM:"‎",RLM:"‏"},b.builtLayouts={},b.layouts={alpha:{normal:["` 1 2 3 4 5 6 7 8 9 0 - = {bksp}","{tab} a b c d e f g h i j [ ] \\","k l m n o p q r s ; ' {enter}","{shift} t u v w x y z , . / {shift}","{accept} {space} {cancel}"],shift:["~ ! @ # $ % ^ & * ( ) _ + {bksp}","{tab} A B C D E F G H I J { } |",'K L M N O P Q R S : " {enter}',"{shift} T U V W X Y Z < > ? {shift}","{accept} {space} {cancel}"]},qwerty:{normal:["` 1 2 3 4 5 6 7 8 9 0 - = {bksp}","{tab} q w e r t y u i o p [ ] \\","a s d f g h j k l ; ' {enter}","{shift} z x c v b n m , . / {shift}","{accept} {space} {cancel}"],shift:["~ ! @ # $ % ^ & * ( ) _ + {bksp}","{tab} Q W E R T Y U I O P { } |",'A S D F G H J K L : " {enter}',"{shift} Z X C V B N M < > ? {shift}","{accept} {space} {cancel}"]},international:{normal:["` 1 2 3 4 5 6 7 8 9 0 - = {bksp}","{tab} q w e r t y u i o p [ ] \\","a s d f g h j k l ; ' {enter}","{shift} z x c v b n m , . / {shift}","{accept} {alt} {space} {alt} {cancel}"],shift:["~ ! @ # $ % ^ & * ( ) _ + {bksp}","{tab} Q W E R T Y U I O P { } |",'A S D F G H J K L : " {enter}',"{shift} Z X C V B N M < > ? {shift}","{accept} {alt} {space} {alt} {cancel}"],alt:["~ ¡ ² ³ ¤ € ¼ ½ ¾ ‘ ’ ¥ × {bksp}","{tab} ä å é ® þ ü ú í ó ö « » ¬","á ß ð f g h j k ø ¶ ´ {enter}","{shift} æ x © v b ñ µ ç > ¿ {shift}","{accept} {alt} {space} {alt} {cancel}"],"alt-shift":["~ ¹ ² ³ £ € ¼ ½ ¾ ‘ ’ ¥ ÷ {bksp}","{tab} Ä Å É ® Þ Ü Ú Í Ó Ö « » ¦","Ä § Ð F G H J K Ø ° ¨ {enter}","{shift} Æ X ¢ V B Ñ µ Ç . ¿ {shift}","{accept} {alt} {space} {alt} {cancel}"]},colemak:{normal:["` 1 2 3 4 5 6 7 8 9 0 - = {bksp}","{tab} q w f p g j l u y ; [ ] \\","{bksp} a r s t d h n e i o ' {enter}","{shift} z x c v b k m , . / {shift}","{accept} {space} {cancel}"],
shift:["~ ! @ # $ % ^ & * ( ) _ + {bksp}","{tab} Q W F P G J L U Y : { } |",'{bksp} A R S T D H N E I O " {enter}',"{shift} Z X C V B K M < > ? {shift}","{accept} {space} {cancel}"]},dvorak:{normal:["` 1 2 3 4 5 6 7 8 9 0 [ ] {bksp}","{tab} ' , . p y f g c r l / = \\","a o e u i d h t n s - {enter}","{shift} ; q j k x b m w v z {shift}","{accept} {space} {cancel}"],shift:["~ ! @ # $ % ^ & * ( ) { } {bksp}",'{tab} " < > P Y F G C R L ? + |',"A O E U I D H T N S _ {enter}","{shift} : Q J K X B M W V Z {shift}","{accept} {space} {cancel}"]},num:{normal:["= ( ) {b}","{clear} / * -","7 8 9 +","4 5 6 {sign}","1 2 3 %","0 {dec} {a} {c}"]}},b.language=a.extend({},b.language,{en:{display:{a:"✔:Accept (Shift+Enter)",accept:"Accept:Accept (Shift+Enter)",alt:"Alt:⌥ AltGr",b:"⌫:Backspace",bksp:"Bksp:Backspace",c:"✖:Cancel (Esc)",cancel:"Cancel:Cancel (Esc)",clear:"C:Clear",combo:"ö:Toggle Combo Keys",dec:".:Decimal",e:"⏎:Enter",empty:" ",enter:"Enter:Enter ⏎",left:"←",lock:"Lock:⇪ Caps Lock",next:"Next ⇨",prev:"⇦ Prev",right:"→",s:"⇧:Shift",shift:"Shift:Shift",sign:"±:Change Sign",space:" :Space",t:"⇥:Tab",tab:"⇥ Tab:Tab",toggle:" ",valid:"valid",invalid:"invalid",active:"active",disabled:"disabled"},wheelMessage:"Use mousewheel to see other keys",comboRegex:/([`\'~\^\"ao])([a-z])/gim,combos:{"`":{a:"à",A:"À",e:"è",E:"È",i:"ì",I:"Ì",o:"ò",O:"Ò",u:"ù",U:"Ù",y:"ỳ",Y:"Ỳ"},"'":{a:"á",A:"Á",e:"é",E:"É",i:"í",I:"Í",o:"ó",O:"Ó",u:"ú",U:"Ú",y:"ý",Y:"Ý"},'"':{a:"ä",A:"Ä",e:"ë",E:"Ë",i:"ï",I:"Ï",o:"ö",O:"Ö",u:"ü",U:"Ü",y:"ÿ",Y:"Ÿ"},"^":{a:"â",A:"Â",e:"ê",E:"Ê",i:"î",I:"Î",o:"ô",O:"Ô",u:"û",U:"Û",y:"ŷ",Y:"Ŷ"},"~":{a:"ã",A:"Ã",e:"ẽ",E:"Ẽ",i:"ĩ",I:"Ĩ",o:"õ",O:"Õ",u:"ũ",U:"Ũ",y:"ỹ",Y:"Ỹ",n:"ñ",N:"Ñ"}}}}),b.defaultOptions={language:null,rtl:!1,layout:"qwerty",customLayout:null,position:{of:null,my:"center top",at:"center top",at2:"center bottom"},reposition:!0,usePreview:!0,alwaysOpen:!1,initialFocus:!0,noFocus:!1,stayOpen:!1,ignoreEsc:!1,css:{input:"ui-widget-content ui-corner-all",container:"ui-widget-content ui-widget ui-corner-all ui-helper-clearfix",popup:"",buttonDefault:"ui-state-default ui-corner-all",buttonHover:"ui-state-hover",buttonAction:"ui-state-active",buttonActive:"ui-state-active",buttonDisabled:"ui-state-disabled",buttonEmpty:"ui-keyboard-empty"},autoAccept:!1,autoAcceptOnEsc:!1,lockInput:!1,restrictInput:!1,restrictInclude:"",acceptValid:!1,cancelClose:!0,tabNavigation:!1,enterNavigation:!1,enterMod:"altKey",stopAtEnd:!0,appendLocally:!1,appendTo:"body",stickyShift:!0,preventPaste:!1,caretToEnd:!1,scrollAdjustment:10,maxLength:!1,maxInsert:!0,repeatDelay:500,repeatRate:20,resetDefault:!0,openOn:"focus",keyBinding:"mousedown touchstart",useWheel:!0,useCombos:!0,validate:function(a,b,c){return!0}},b.comboRegex=/([`\'~\^\"ao])([a-z])/gim,b.currentKeyboard="",a('<!--[if lte IE 8]><script>jQuery("body").addClass("oldie");</script><![endif]--><!--[if IE]><script>jQuery("body").addClass("ie");</script><![endif]-->').appendTo("body").remove(),b.msie=a("body").hasClass("oldie"),b.allie=a("body").hasClass("ie"),b.watermark="undefined"!=typeof document.createElement("input").placeholder,b.checkCaretSupport=function(){if("boolean"!=typeof b.checkCaret){var c=a('<div style="height:0px;width:0px;overflow:hidden;"><input type="text" value="testing"/></div>').prependTo("body");b.caret(c.find("input"),3,3),b.checkCaret=3!==b.caret(c.find("input").hide().show()).start,c.remove()}return b.checkCaret},b.caret=function(a,b,c){if(!a.length||a.is(":hidden")||"hidden"===a.css("visibility"))return{};var d,e,f,g,h=a.data("keyboard"),i=h&&h.options.noFocus;return i||a.focus(),"undefined"!=typeof b?("object"==typeof b&&"start"in b&&"end"in b?(d=b.start,e=b.end):"undefined"==typeof c&&(c=b),"number"==typeof b&&"number"==typeof c?(d=b,e=c):"start"===b?d=e=0:"string"==typeof b&&(d=e=a.val().length),a.caret(d,e,i)):(g=a.caret(),d=g.start,e=g.end,f=a[0].value||a.text()||"",{start:d,end:e,text:f.substring(d,e),replaceStr:function(a){return f.substring(0,d)+a+f.substring(e,f.length)}})},a.fn.keyboard=function(b){return this.each(function(){a(this).data("keyboard")||new a.keyboard(this,b)})},a.fn.getkeyboard=function(){return this.data("keyboard")},a.fn.caret=function(a,b,c){if("undefined"==typeof this[0]||this.is(":hidden")||"hidden"===this.css("visibility"))return this;var d,e,f,g,h,i=document.selection,j=this,k=j[0],l=k.scrollTop,m=!1,n=!0;try{m="selectionStart"in k}catch(o){n=!1}return n&&"undefined"!=typeof a?(/(email|number)/i.test(k.type)||(m?(k.selectionStart=a,k.selectionEnd=b):(d=k.createTextRange(),d.collapse(!0),d.moveStart("character",a),d.moveEnd("character",b-a),d.select())),c||!j.is(":visible")&&"hidden"===j.css("visibility")||k.focus(),k.scrollTop=l,this):(/(email|number)/i.test(k.type)?a=b=j.val().length:m?(a=k.selectionStart,b=k.selectionEnd):i?"TEXTAREA"===k.nodeName?(h=j.val(),e=i.createRange(),f=e.duplicate(),f.moveToElementText(k),f.setEndPoint("EndToEnd",e),a=f.text.replace(/\r/g,"\n").length,b=a+e.text.replace(/\r/g,"\n").length):(h=j.val().replace(/\r/g,"\n"),e=i.createRange().duplicate(),e.moveEnd("character",h.length),a=""===e.text?h.length:h.lastIndexOf(e.text),e=i.createRange().duplicate(),e.moveStart("character",-h.length),b=e.text.length):a=b=(k.value||"").length,g=k.value||"",{start:a,end:b,text:g.substring(a,b),replace:function(c){return g.substring(0,a)+c+g.substring(b,g.length)}})},b});
},{"jquery":19}],181:[function(require,module,exports){
var AppDispatcher = require('../dispatchers/AppDispatcher');
var appConstants = require('../constants/appConstants');

var commonActions = {
  webSocketConnection: function(data) {
    AppDispatcher.handleAction({
      actionType: appConstants.WEBSOCKET_CONNECT,
      data: data
    });
  },
  listSeats: function(data) {
    AppDispatcher.handleAction({
      actionType: appConstants.LIST_SEATS,
      data: data
    });
  },
  listStations: function(data) {
    AppDispatcher.handleAction({
      actionType: appConstants.LIST_STATIONS,
      data: data
    });
  },
  login: function(data) {
    AppDispatcher.handleAction({
      actionType: appConstants.LOGIN,
      data: data
    });
  },
  operatorSeat: function(data) {
    AppDispatcher.handleAction({
      actionType: appConstants.OPERATOR_SEAT,
      data: data
    });
  },
  loginSeat: function(data) {
    AppDispatcher.handleAction({
      actionType: appConstants.LOGIN_SEAT,
      data: data
    });
  },
  toggleBinSelection: function(bin_id) {
    AppDispatcher.handleAction({
      actionType: appConstants.TOGGLE_BIN_SELECTION,
      bin_id: bin_id
    });
  },

  setPutData: function(data) {
    AppDispatcher.handleAction({
      actionType: appConstants.SET_PUT_DATA,
      data: data
    });
  },

  setCurrentSeat: function(seat) {
    AppDispatcher.handleAction({
      actionType: appConstants.SET_CURRENT_SEAT,
      data: seat
    });
  },
  setCurrentStationId: function(data) {
    AppDispatcher.handleAction({
      actionType: appConstants.SET_CURRENT_STATION_ID,
      data: data
    });
  },
  hideSpinner: function(data) {
    AppDispatcher.handleAction({
      actionType: appConstants.HIDE_SPINNER,
      data: data
    });
  },

  showErrorMessage: function(seat) {
    AppDispatcher.handleAction({
      actionType: appConstants.SHOW_ERROR_MESSAGE,
      data: seat
    });
  },

  postDataToInterface: function(data) {
    AppDispatcher.handleAction({
      actionType: appConstants.POST_DATA_TO_INTERFACE,
      data: data
    });
  },

  postDataToTower: function(data) {
    AppDispatcher.handleAction({
      actionType: appConstants.POST_DATA_TO_TOWER,
      data: data
    });
  },

  setPutBackData: function(data) {
    AppDispatcher.handleAction({
      actionType: appConstants.SET_PUT_BACK_DATA,
      data: data
    });
  },
  setPutFrontData: function(data) {
    AppDispatcher.handleAction({
      actionType: appConstants.SET_PUT_FRONT_DATA,
      data: data
    });
  },
  setSearchData: function(data) {
    AppDispatcher.handleAction({
      actionType: appConstants.SET_SEARCH_DATA,
      data: data
    });
  },

  setPickBackData: function(data) {
    AppDispatcher.handleAction({
      actionType: appConstants.SET_PICK_BACK_DATA,
      data: data
    });
  },

  setAuditData: function(data) {
    AppDispatcher.handleAction({
      actionType: appConstants.SET_AUDIT_DATA,
      data: data
    });
  },

  updatePopupVisible: function(status) {
    AppDispatcher.handleAction({
      actionType: appConstants.POPUP_VISIBLE,
      status: status
    });
  },
  stageAllBins: function() {
    AppDispatcher.handleAction({
      actionType: appConstants.STAGE_ALL
    });
  },
  stageOneBin: function() {
    AppDispatcher.handleAction({
      actionType: appConstants.STAGE_ONE_BIN
    });
  },
  resetNumpadVal: function(data) {
    AppDispatcher.handleAction({
      actionType: appConstants.RESET_NUMPAD,
      data: data
    });
  },
  showModal: function(data) {
    AppDispatcher.handleAction({
      actionType: appConstants.LOAD_MODAL,
      data: data
    });
  },
  pptlPress: function(data) {
    AppDispatcher.handleAction({
      actionType: appConstants.PPTL_PRESS,
      data: data
    });
  },
  setPickFrontData: function(data) {
    AppDispatcher.handleAction({
      actionType: appConstants.SET_PICK_FRONT_DATA,
      data: data
    });
  },
  setServerMessages: function() {
    AppDispatcher.handleAction({
      actionType: appConstants.SET_SERVER_MESSAGES
    });
  },
  changeLanguage: function(data) {
    AppDispatcher.handleAction({
      actionType: appConstants.CHANGE_LANGUAGE,
      data: data
    });
  },
  setLanguage: function(data) {
    AppDispatcher.handleAction({
      actionType: appConstants.SET_LANGUAGE,
      data: data
    });
  },
  logError: function(data) {
    AppDispatcher.handleAction({
      actionType: appConstants.LOG_ERROR,
      data: data
    });
  },
  enableException: function(data) {
    AppDispatcher.handleAction({
      actionType: appConstants.ENABLE_EXCEPTION,
      data: data
    });
  },
  enableSearch: function(data) {
    AppDispatcher.handleAction({
      actionType: appConstants.ENABLE_SEARCH,
      data: data
    });
  },
  logoutSession: function(data) {
    AppDispatcher.handleAction({
      actionType: appConstants.LOGOUT_SESSION,
      data: data
    });
  },
  setActiveException: function(data) {
    AppDispatcher.handleAction({
      actionType: appConstants.SET_ACTIVE_EXCEPTION,
      data: data
    });
  },

  updateKQQuantity: function(data) {
    AppDispatcher.handleAction({
      actionType: appConstants.UPDATE_KQ_QUANTITY,
      data: data
    });
  },
  updateMissingQuantity: function(data) {
    AppDispatcher.handleAction({
      actionType: appConstants.UPDATE_MISSING_QUANTITY,
      data: data
    });
  },
  updateUnscannableQuantity: function(data) {
    AppDispatcher.handleAction({
      actionType: appConstants.UPDATE_UNSCANNABLE_QUANTITY,
      data: data
    });
  },

  updateGoodQuantity: function(data) {
    AppDispatcher.handleAction({
      actionType: appConstants.UPDATE_GOOD_QUANTITY,
      data: data
    });
  },

  updateDamagedQuantity: function(data) {
    AppDispatcher.handleAction({
      actionType: appConstants.UPDATE_DAMAGED_QUANTITY,
      data: data
    });
  },

  changePutFrontExceptionScreen: function(data) {
    AppDispatcher.handleAction({
      actionType: appConstants.CHANGE_PUT_FRONT_EXCEPTION_SCREEN,
      data: data
    });
  },

  changeAuditExceptionScreen: function(data) {
    AppDispatcher.handleAction({
      actionType: appConstants.CHANGE_AUDIT_EXCEPTION_SCREEN,
      data: data
    });
  },

  changePickFrontExceptionScreen: function(data) {
    AppDispatcher.handleAction({
      actionType: appConstants.CHANGE_PICK_FRONT_EXCEPTION_SCREEN,
      data: data
    });
  },

  changePutBackExceptionScreen: function(data) {
    AppDispatcher.handleAction({
      actionType: appConstants.CHANGE_PUT_BACK_EXCEPTION_SCREEN,
      data: data
    });
  },

  validateAndSendDataToServer: function() {
    AppDispatcher.handleAction({
      actionType: appConstants.VALIDATE_AND_SEND_DATA_TO_SERVER
    });
  },
  validateAndSendSpaceUnavailableDataToServer: function() {
    AppDispatcher.handleAction({
      actionType:
        appConstants.VALIDATE_AND_SEND_SPACE_UNAVAILABLE_DATA_TO_SERVER
    });
  },
  validateUnmarkedDamagedData: function() {
    AppDispatcher.handleAction({
      actionType: appConstants.VALIDATE_UNMARKED_DAMAGED_DATA
    });
  },
  getPeriPheralData: function(data) {
    AppDispatcher.handleAction({
      actionType: appConstants.PERIPHERAL_DATA,
      data: data
    });
  },
  getOrphanItemData: function(data) {
    AppDispatcher.handleAction({
      actionType: appConstants.ORPHAN_ITEM_DATA,
      data: data
    });
  },
  getBOIConfig: function() {
    AppDispatcher.handleAction({
      actionType: appConstants.GET_BOI_CONFIG
    });
  },
  updateSeatData: function(data, type, status, method) {
    AppDispatcher.handleAction({
      actionType: appConstants.UPDATE_SEAT_DATA,
      data: data,
      type: type,
      status: status,
      method: method
    });
  },
  convertTextBox: function(data, index) {
    AppDispatcher.handleAction({
      actionType: appConstants.CONVERT_TEXTBOX,
      data: data,
      index: index
    });
  },
  updateData: function(data, method, index) {
    AppDispatcher.handleAction({
      actionType: appConstants.UPDATE_PERIPHERAL,
      data: data,
      method: method,
      index: index
    });
  },
  generateNotification: function(data) {
    AppDispatcher.handleAction({
      actionType: appConstants.GENERATE_NOTIFICATION,
      data: data
    });
  },
  clearNotification: function() {
    AppDispatcher.handleAction({
      actionType: appConstants.CLEAR_NOTIFICATIONS
    });
  },
  setCancelButtonStatus: function(data) {
    AppDispatcher.handleAction({
      actionType: appConstants.SET_CANCEL_BUTTON_STATUS,
      data: data
    });
  }
};

module.exports = commonActions;

},{"../constants/appConstants":242,"../dispatchers/AppDispatcher":246}],182:[function(require,module,exports){
var React = require('react');
var allresourceConstants = require('../constants/resourceConstants');

var BinMap = React.createClass({displayName: "BinMap",

	processData: function(){
		var data =  Object.assign({},(this.props.mapDetails || {}));
		var leftCol = [],leftColCount,rightColCount,selectedGroup = this.props.selectedGroup,isSelected,
		rightCol=[],maxBlockCount=0,maxLeftCount=0,maxRightCount=0,maxBlockHeight=0,style=null,maxWidth=null;
		
		for(var  key in data){
			if(data[key] === allresourceConstants.BIN_GROUP_LEFT){
				maxLeftCount++;
			}
			else if(data[key] === allresourceConstants.BIN_GROUP_RIGHT){
				maxRightCount++;
			}
		}
		maxBlockCount = maxLeftCount > maxRightCount ? maxLeftCount :maxRightCount;
		maxBlockHeight = 40/maxBlockCount;
		maxWidth = ((maxBlockHeight/100)*150);
		style = {
			height:maxBlockHeight+"%",
			width: maxWidth <= 38 ? maxWidth : 38
		}

		for(var  k in data){
			if(data.hasOwnProperty(k)){
				isSelected = selectedGroup === k ? "sel" : "";
				if(data[k] === allresourceConstants.BIN_GROUP_LEFT){
					leftCol.push(React.createElement("li", {key: k, style: style, className: isSelected}));
				}
				else if(data[k] === allresourceConstants.BIN_GROUP_RIGHT){
					rightCol.push(React.createElement("li", {key: k, style: style, className: isSelected}));
				}

			}
		}
		switch(leftCol.length){
			case 1:
			leftColCount = "one";
			break;
			case 2:
			leftColCount = "two";
			break;
			case 3:
			leftColCount = "three";
			break;
			case 4:
			leftColCount = "four";
			break;
			default:
			leftColCount = "zero";
		}
		switch(rightCol.length){
			case 1:
			rightColCount = "one";
			break;
			case 2:
			rightColCount = "two";
			break;
			case 3:
			rightColCount = "three";
			break;
			case 4:
			rightColCount = "four";
			break;
			default:
			rightColCount = "zero";
		}

		return {
			leftCol:leftCol,
			rightCol:rightCol,
			leftColCount:leftColCount,
			rightColCount:rightColCount
		}
	},
	render:function(){
		var transformStyle = {
			transform: 'rotate('+((Number(this.props.orientation || 0)+'deg)'))
		}
		var mapStructure = this.processData();
		return (
				React.createElement("div", {style: transformStyle, className: "binMapWrapper "+this.props.screenClass}, 
					React.createElement("div", {className: "mapCont"}, 
					React.createElement("div", {className: "msuSpace"}), 
					React.createElement("div", {className: "col1 "+mapStructure.leftColCount}, 
					React.createElement("ul", null, 
					mapStructure.leftCol
					)
					), 
					React.createElement("div", {className: "col2 spriteIcons"}
					), 
					React.createElement("div", {className: "col3 "+mapStructure.rightColCount}, 
					React.createElement("ul", null, 
					mapStructure.rightCol
					)
					)
					)
				)



			);
	}
});

module.exports = BinMap;

},{"../constants/resourceConstants":244,"react":179}],183:[function(require,module,exports){
var React = require('react');
var ActionCreators = require('../../actions/CommonActions');
var Modal = require('../Modal/Modal');
var appConstants = require('../../constants/appConstants');
var MainStore = require('../../stores/mainstore');

var Bin = React.createClass({displayName: "Bin",

    _toggleBinSelection: function (bin_id, e) {
        ActionCreators.toggleBinSelection(bin_id);
        e.stopPropagation();
        return false;
    },
    pressPptl: function (bin_id, binState) {
        var data = {
            "event_name": "",
            "event_data": {},
            "source": ""
        };
        data["event_name"] = "process_ppsbin_event";
        data["event_data"]["ppsbin_id"] = bin_id;
        data["event_data"]["ppsbin_state"] = binState;
        data["event_data"]["ppsbin_event"] = MainStore.getPPTLEvent();
        data["source"] = "ui";
        ActionCreators.postDataToInterface(data);
    },
    pressPptlExceptionDataSend: function (bin_id, binState) {
        var data = {
            "event_name": "",
            "event_data": {},
        };
        data["event_name"] = "pick_back_exception";
        data["event_data"]["ppsbin_id"] = bin_id;
        data["event_data"]["type"] = MainStore.getExceptionType();
        ActionCreators.postDataToInterface(data);
    },

    showModal: function (data, type, e) {
        ActionCreators.showModal({
            data: data,
            type: type
        });
        $('.modal').modal();
        e.stopPropagation();
        return false;
    },
    getBinParams: function (compData) {
        var iconToShow = '', infoIcon = '', ppsBinCount = '', tote = '', packingBox = '';

        ppsBinCount = (React.createElement("div", {className: "item-count"}, compData.ppsbin_count < 1 ? '-' : compData.ppsbin_count));

        if (compData.selected_state === true && compData.ppsbin_count > 0) {
            infoIcon = (React.createElement("span", {className: "glyphicon glyphicon-info-sign info-icon", 
                onClick: this.showModal.bind(this, compData.bin_info, "bin-info")}
            ));
        }

        tote = (React.createElement("div", {className: "tote"}, 
            React.createElement("span", {className: "bin-icon tote-icon"}), 
            infoIcon
        ));
        packingBox = (React.createElement("div", {className: "tote"}, 
            React.createElement("img", {className: "bin-icon packingBox-icon", src: "./assets/images/packingbox_icon.png"}), 
            infoIcon
        ));

        if (compData["totes_associated"] != undefined && (compData.totes_associated == true || compData.totes_associated == "true")) {
            iconToShow = tote;
        }
        else if (compData["packing_box"] != undefined && (compData.packing_box == true || compData.packing_box == "true")) {
            iconToShow = packingBox;
        }

        return {
            iconToShow: iconToShow,
            ppsBinCount: ppsBinCount
        };
    },
    render: function () {
        var compData = this.props.binData;
        var binParams = this.getBinParams(compData);

        if (this.props.screenId == appConstants.PICK_BACK_EXCEPTION_REPRINT) {
            return (React.createElement("div", {
                className: compData["ppsbin_blink_state"] != undefined && (compData.ppsbin_blink_state == true || compData.ppsbin_blink_state == "true") ? "bin selected blink1" : "bin no-excess-item"}, 
                binParams.iconToShow, 
                binParams.ppsBinCount, 
                React.createElement("div", {
                    className: compData["ppsbin_blink_state"] != undefined && (compData.ppsbin_blink_state == true || compData.ppsbin_blink_state == "true") ? "pptl selected blink" : "pptl no-excess-item"}, compData.ppsbin_id)
            ));
        }
        else if ((this.props.screenId == appConstants.PUT_BACK_STAGE || this.props.screenId == appConstants.PUT_BACK_SCAN_TOTE || this.props.screenId === appConstants.PUT_BACK_NO_SCAN_TOTE) && compData.ppsbin_state == 'error') {
            return (
                React.createElement("div", {className: "bin selected binError " + (compData['pps_blink_state'] ? 'blink1' : ''), 
                    style: compData["ppsbin_light_color"] ? { borderColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, 
                    binParams.ppsBinCount, 
                    React.createElement("div", {className: "pptl selected binError " + (compData['ppsbin_blink_state'] ? 'blink' : ''), 
                        onClick: this.pressPptl.bind(this, compData.ppsbin_id, compData.ppsbin_state), 
                        style: compData["ppsbin_light_color"] ? { backgroundColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, compData.ppsbin_id)
                )
            );
        }
        else if (this.props.screenId == appConstants.PICK_BACK_EXCEPTION_SKIP_PRINTING) {
            if (compData["ppsbin_blue_state"] != undefined && (compData.ppsbin_blue_state == true || compData.ppsbin_blue_state == "true") && compData.ppsbin_state != 'error') {
                return (React.createElement("div", {
                    className: "bin excess-item " + (compData["selected_for_staging"] ? "excess-select " : " ") + (compData['pps_blink_state'] ? 'blink1 ' : ''), 
                    onClick: this._toggleBinSelection.bind(this, compData.ppsbin_id), 
                    style: compData["ppsbin_light_color"] ? { borderColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, 
                    binParams.iconToShow, 
                    binParams.ppsBinCount, 
                    React.createElement("div", {className: "pptl selected " + (compData['pps_blink_state'] ? 'blink ' : ''), 
                        style: compData["ppsbin_light_color"] ? { backgroundColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, compData.ppsbin_id)
                ));
            } else {
                return (React.createElement("div", {className: "bin no-excess-item " + (compData['pps_blink_state'] ? 'blink1' : ''), 
                    style: compData["ppsbin_light_color"] ? { borderColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, 
                    binParams.iconToShow, 
                    binParams.ppsBinCount, 
                    React.createElement("div", {className: "pptl no-excess-item " + (compData['ppsbin_blink_state'] ? 'blink' : ''), 
                        style: compData["ppsbin_light_color"] ? { backgroundColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, compData.ppsbin_id)
                ));
            }
        }

        else if (this.props.screenId == appConstants.PICK_BACK_CHANGE_PBOX_BIN) {
            if (compData["packing_box"] != undefined && (compData.packing_box == true || compData.packing_box == "true") && compData.ppsbin_state != 'error') {
                return (React.createElement("div", {
                    className: "bin excess-item " + (compData["selected_for_staging"] ? "excess-select " : " ") + (compData['pps_blink_state'] ? 'blink1 ' : ''), 
                    onClick: this.pressPptlExceptionDataSend.bind(this, compData.ppsbin_id), 
                    style: compData["ppsbin_light_color"] ? { borderColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, 
                    binParams.iconToShow, 
                    binParams.ppsBinCount, 
                    React.createElement("div", {className: "pptl selected " + (compData['pps_blink_state'] ? 'blink ' : ''), 
                        style: compData["ppsbin_light_color"] ? { backgroundColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, compData.ppsbin_id)
                ));
            } else {
                return (React.createElement("div", {className: "bin no-excess-item " + (compData['pps_blink_state'] ? 'blink1' : ''), 
                    style: compData["ppsbin_light_color"] ? { borderColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, 
                    binParams.iconToShow, 
                    binParams.ppsBinCount, 
                    React.createElement("div", {className: "pptl no-excess-item " + (compData['ppsbin_blink_state'] ? 'blink' : ''), 
                        style: compData["ppsbin_light_color"] ? { backgroundColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, compData.ppsbin_id)
                ));
            }
        }


        else if (this.props.screenId == appConstants.PICK_BACK_EXCEPTION_OVERRIDE_TOTE) {
            if (compData["ppsbin_blue_state"] != undefined && (compData.ppsbin_blue_state == true || compData.ppsbin_blue_state == "true") && compData.ppsbin_state != 'error') {
                if ((compData["totes_associated"] == true || compData["totes_associated"] == "true") || (compData["packing_box"] == true || compData["packing_box"] == "true")) {
                    return (React.createElement("div", {className: "bin excess-item " + (compData['pps_blink_state'] ? 'blink1' : ''), 
                        style: compData["ppsbin_light_color"] ? { borderColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, 
                        binParams.iconToShow, 
                        binParams.ppsBinCount, 
                        React.createElement("div", {className: "pptl excess-item " + (compData['ppsbin_blink_state'] ? 'blink' : ''), 
                            style: compData["ppsbin_light_color"] ? { backgroundColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, compData.ppsbin_id)
                    ));
                } else {
                    return (React.createElement("div", {
                        className: "bin excess-item " + (compData["selected_for_staging"] ? "excess-select " : "") + (compData['pps_blink_state'] ? 'blink1 ' : ''), 
                        onClick: this._toggleBinSelection.bind(this, compData.ppsbin_id), 
                        style: compData["ppsbin_light_color"] ? { borderColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, 
                        binParams.iconToShow, 
                        binParams.ppsBinCount, 
                        React.createElement("div", {className: "pptl selected " + (compData['pps_blink_state'] ? 'blink ' : ''), 
                            style: compData["ppsbin_light_color"] ? { backgroundColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, compData.ppsbin_id)
                    ));
                }
            } else {
                return (React.createElement("div", {className: "bin no-excess-item " + (compData['pps_blink_state'] ? 'blink1' : ''), 
                    style: compData["ppsbin_light_color"] ? { borderColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, 
                    binParams.iconToShow, 
                    binParams.ppsBinCount, 
                    React.createElement("div", {className: "pptl no-excess-item " + (compData['ppsbin_blink_state'] ? 'blink' : ''), 
                        style: compData["ppsbin_light_color"] ? { backgroundColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, compData.ppsbin_id)
                ));
            }
        }
        else if (this.props.screenId == appConstants.PICK_BACK_EXCEPTION_DIS_ASSOCIATE_TOTE) {
            if (compData["totes_associated"] != undefined && this.props.dataToDisassociateTote && this.props.dataToDisassociateTote.indexOf(compData.ppsbin_id) > -1 && compData.ppsbin_state != 'error') {
                return (React.createElement("div", {
                    className: "bin excess-item " + (compData["selected_for_staging"] ? "excess-select " : "") + (compData['pps_blink_state'] ? 'blink1 ' : ''), 
                    onClick: this._toggleBinSelection.bind(this, compData.ppsbin_id)}, 
                    binParams.iconToShow, 
                    binParams.ppsBinCount, 
                    React.createElement("div", {className: "pptl excess-item " + (compData['pps_blink_state'] ? 'blink ' : '')}, compData.ppsbin_id)
                ));
            } else {
                return (React.createElement("div", {className: "bin no-excess-item " + (compData['pps_blink_state'] ? 'blink1' : ''), 
                    style: compData["ppsbin_light_color"] ? { borderColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, 
                    binParams.iconToShow, 
                    binParams.ppsBinCount, 
                    React.createElement("div", {className: "pptl no-excess-item " + (compData['ppsbin_blink_state'] ? 'blink' : ''), 
                        style: compData["ppsbin_light_color"] ? { backgroundColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, compData.ppsbin_id)
                ));
            }
        }
        else if (this.props.screenId == appConstants.PUT_BACK_EXCEPTION_EXCESS_ITEMS_IN_BINS && !compData.put_complete)
            return (
                React.createElement("div", {className: "bin no-excess-item " + (compData['pps_blink_state'] ? 'blink1' : ''), 
                    style: compData["ppsbin_light_color"] ? { borderColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, 
                    binParams.ppsBinCount, 
                    React.createElement("div", {className: "pptl " + (compData['ppsbin_blink_state'] ? 'blink' : ''), 
                        style: compData["ppsbin_light_color"] ? { backgroundColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, compData.ppsbin_id)
                )
            );
        else if (this.props.screenId == appConstants.PUT_BACK_EXCEPTION_EXCESS_ITEMS_IN_BINS && compData.put_complete)
            return (
                React.createElement("div", {
                    className: "bin excess-item " + (compData["selected_for_staging"] ? "excess-select " : "") + (compData['pps_blink_state'] ? 'blink1 ' : ''), 
                    onClick: this._toggleBinSelection.bind(this, compData.ppsbin_id), 
                    style: compData["ppsbin_light_color"] ? { borderColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, 
                    binParams.ppsBinCount, 
                    React.createElement("div", {className: "pptl " + (compData['ppsbin_blink_state'] ? 'blink' : ''), 
                        style: compData["ppsbin_light_color"] ? { backgroundColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, compData.ppsbin_id)
                )
            );
        else if (compData.ppsbin_state == "staged")
            return (
                React.createElement("div", {className: "bin staged " + (compData['pps_blink_state'] ? 'blink1' : ''), 
                    style: compData["ppsbin_light_color"] ? { borderColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, 
                    binParams.ppsBinCount, 
                    React.createElement("div", {className: "pptl " + (compData['ppsbin_blink_state'] ? 'blink' : ''), 
                        style: compData["ppsbin_light_color"] ? { backgroundColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, compData.ppsbin_id)
                )
            );
        else if (compData.ppsbin_state == "completed")
            return (
                React.createElement("div", {className: "bin completed " + (compData['pps_blink_state'] ? 'blink1' : ''), 
                    style: compData["ppsbin_light_color"] ? { borderColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, 
                    binParams.ppsBinCount, 
                    React.createElement("div", {className: "pptl completed " + (compData['ppsbin_blink_state'] ? 'blink' : ''), 
                        style: compData["ppsbin_light_color"] ? { backgroundColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, compData.ppsbin_id)
                )
            );

        else if (compData.ppsbin_count > 0 && (compData["selected_for_staging"] != undefined && compData["selected_for_staging"] == true) && (this.props.screenId == appConstants.PUT_BACK_STAGE || this.props.screenId == appConstants.PUT_BACK_SCAN_TOTE || this.props.screenId === appConstants.PUT_BACK_NO_SCAN_TOTE) && compData.ppsbin_state != 'error')
            return (
                React.createElement("div", {className: "bin use selected-staging " + (compData['pps_blink_state'] ? 'blink1' : ''), 
                    onClick: this._toggleBinSelection.bind(this, compData.ppsbin_id), 
                    style: compData["ppsbin_light_color"] ? { borderColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, 
                    React.createElement("div", {className: "item-count"}, compData.ppsbin_count), 
                    React.createElement("div", {className: "pptl " + (compData['ppsbin_blink_state'] ? 'blink' : ''), 
                        style: compData["ppsbin_light_color"] ? { backgroundColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, compData.ppsbin_id)
                )
            );


        else if ((this.props.screenId == appConstants.PICK_BACK_PACKING_BOX || this.props.screenId == appConstants.PICK_BACK_SCAN || this.props.screenId == appConstants.PICK_BACK_BIN || this.props.screenId == appConstants.PICK_BACK_NO_SCAN) && ((compData["ppsbin_blink_state"] != undefined && (compData.ppsbin_blink_state == true || compData.ppsbin_blink_state == "true")))) {
            var binClass = 'bin ';
            return (
                React.createElement("div", {className: "bin  selected blink1", 
                    style: compData["ppsbin_light_color"] ? { borderColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, 
                    binParams.iconToShow, 
                    binParams.ppsBinCount, 
                    React.createElement("div", {className: "pptl selected blink", 
                        onClick: this.pressPptl.bind(this, compData.ppsbin_id, compData.ppsbin_state), 
                        style: compData["ppsbin_light_color"] ? { backgroundColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, compData.ppsbin_id)
                )
            );

        }


        else if ((this.props.screenId == appConstants.PICK_BACK_PACKING_BOX || this.props.screenId == appConstants.PICK_BACK_SCAN || this.props.screenId == appConstants.PICK_BACK_BIN || this.props.screenId == appConstants.PICK_BACK_NO_SCAN) && (compData["ppsbin_blue_state"] != undefined && (compData.ppsbin_blue_state == true || compData.ppsbin_blue_state == "true"))) {
            var tote = '', binClass = '';
            binClass = compData.ppsbin_state == "error" ? " binError" : "";
            return (
                React.createElement("div", {className: "bin selected " + (compData['pps_blink_state'] ? 'blink1' : ' ') + binClass, 
                    style: compData["ppsbin_light_color"] ? { borderColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, 
                    binParams.iconToShow, 
                    binParams.ppsBinCount, 
                    React.createElement("div", {className: "pptl selected " + (compData['ppsbin_blink_state'] ? 'blink' : ' ') + binClass, 
                        onClick: this.pressPptl.bind(this, compData.ppsbin_id, compData.ppsbin_state), 
                        style: compData["ppsbin_light_color"] ? { backgroundColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, compData.ppsbin_id)
                )
            );
        }

        else if ((this.props.screenId == appConstants.PICK_BACK_SCAN || this.props.screenId == appConstants.PICK_BACK_BIN)) {
            return (
                React.createElement("div", {className: "bin " + (compData['ppsbin_blink_state'] ? 'blink1' : ''), 
                    style: compData["ppsbin_light_color"] ? { borderColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, 
                    binParams.iconToShow, 
                    binParams.ppsBinCount, 
                    React.createElement("div", {className: "pptl " + (compData['ppsbin_blink_state'] ? 'blink' : ''), 
                        style: compData["ppsbin_light_color"] ? { backgroundColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, compData.ppsbin_id)
                )
            );
        }
        else if ((compData.selected_state == true || compData.selected_state == "true") && (this.props.screenId == appConstants.PICK_FRONT_PPTL_PRESS)) {
            return (
                React.createElement("div", {className: "bin selected " + (compData['ppsbin_blink_state'] ? 'blink1' : ''), 
                    style: compData["ppsbin_light_color"] ? { borderColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, 
                    React.createElement("span", {className: "glyphicon glyphicon-info-sign info-icon grey-icon", 
                        onClick: this.showModal.bind(this, compData.bin_info, "bin-info")}
                    ), 
                    binParams.ppsBinCount, 
                    React.createElement("div", {className: "pptl selected " + (compData['ppsbin_blink_state'] ? 'blink' : ''), 
                        onClick: this.pressPptl.bind(this, compData.ppsbin_id, compData.ppsbin_state), 
                        style: compData["ppsbin_light_color"] ? { backgroundColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, compData.ppsbin_id)
                )
            );
        }
        else if ((compData.selected_state == true || compData.selected_state == "true") && (this.props.screenId == appConstants.PICK_FRONT_MORE_ITEM_SCAN || this.props.screenId == appConstants.PICK_FRONT_PACKING_BOX)) {
            return (
                React.createElement("div", {className: "bin selected " + (compData['ppsbin_blink_state'] ? 'blink1' : ''), 
                    style: compData["ppsbin_light_color"] ? { borderColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, 
                    React.createElement("span", {className: "glyphicon glyphicon-info-sign info-icon grey-icon", 
                        onClick: this.showModal.bind(this, compData.bin_info, "bin-info")}
                    ), 
                    binParams.ppsBinCount, 
                    React.createElement("div", {className: "pptl selected " + (compData['ppsbin_blink_state'] ? 'blink' : ''), 
                        style: compData["ppsbin_light_color"] ? { backgroundColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, compData.ppsbin_id)
                )
            );
        }
        else if ((compData.selected_state == false || compData.selected_state == "false") && ((this.props.screenId == appConstants.PICK_FRONT_PPTL_PRESS || this.props.screenId == appConstants.PICK_FRONT_MORE_ITEM_SCAN || this.props.screenId == appConstants.PICK_FRONT_PACKING_BOX) && (compData.ppsbin_state == 'pick_processed' || compData.ppsbin_state == 'pick_allowed' || compData.ppsbin_state == 'order_front_complete'))) {
            return (
                React.createElement("div", {className: "bin " + (compData['ppsbin_blink_state'] ? 'blink1' : ''), 
                    style: compData["ppsbin_light_color"] ? { borderColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, 
                    binParams.iconToShow, 
                    binParams.ppsBinCount, 
                    React.createElement("div", {className: "pptl " + (compData['ppsbin_blink_state'] ? 'blink' : ''), 
                        style: compData["ppsbin_light_color"] ? { backgroundColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, compData.ppsbin_id)
                )
            );
        }

        else if ((compData.selected_state == true || compData.selected_state == "true") && (this.props.screenId == appConstants.PUT_BACK_SCAN || this.props.screenId == appConstants.PUT_BACK_PRESS_PPTL_TOTE)) {
            return (
                React.createElement("div", {className: "bin selected " + (compData['ppsbin_blink_state'] ? 'blink1' : ''), 
                    style: compData["ppsbin_light_color"] ? { borderColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, 
                    binParams.ppsBinCount, 
                    React.createElement("div", {className: "pptl selected " + (compData['ppsbin_blink_state'] ? 'blink' : ''), 
                        onClick: this.pressPptl.bind(this, compData.ppsbin_id, compData.ppsbin_state), 
                        style: compData["ppsbin_light_color"] ? { backgroundColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, compData.ppsbin_id)
                )
            );
        }
        else if ((compData.selected_state == true || compData.selected_state == "true") && (this.props.screenId == appConstants.PUT_FRONT_SCAN || this.props.screenId == appConstants.PICK_FRONT_MORE_ITEM_SCAN || this.props.screenId == appConstants.PICK_FRONT_PACKING_BOX || this.props.screenId == appConstants.PUT_FRONT_PLACE_ITEMS_IN_RACK || this.props.screenId == appConstants.PICK_FRONT_SCAN_ITEM_AND_PLACE_IN_BIN)) {
            return (
                React.createElement("div", {
                    className: (compData.ppsbin_count > 0 ? "bin selected " : "bin empty ") + (compData['ppsbin_blink_state'] ? 'blink1' : ''), 
                    style: compData["ppsbin_light_color"] ? { borderColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, 
                    binParams.iconToShow, 
                    binParams.ppsBinCount, 
                    React.createElement("div", {
                        className: (compData.ppsbin_count > 0 ? "pptl selected " : "pptl ") + (compData['ppsbin_blink_state'] ? 'blink' : ''), 
                        style: compData["ppsbin_light_color"] ? { backgroundColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, compData.ppsbin_id)
                )
            );
        }
        else if (compData.ppsbin_count > 0 && (this.props.screenId == appConstants.PUT_BACK_STAGE || this.props.screenId == appConstants.PUT_BACK_SCAN_TOTE || this.props.screenId == appConstants.PUT_BACK_NO_SCAN_TOTE) && compData.ppsbin_state != 'error') {
            var placeHolder = "";
            if (this.props.screenId == appConstants.PUT_BACK_NO_SCAN_TOTE) {
                placeHolder = binParams.iconToShow;
            } else {
                placeHolder = React.createElement("span", {className: "glyphicon glyphicon-info-sign info-icon", 
                    onClick: this.showModal.bind(this, compData.bin_info, "bin-info")}
                )
            }
            return (
                React.createElement("div", {className: "bin use " + (compData['ppsbin_blink_state'] ? 'blink1' : ''), 
                    onClick: this._toggleBinSelection.bind(this, compData.ppsbin_id), 
                    style: compData["ppsbin_light_color"] ? { borderColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, 
                    placeHolder, 
                    binParams.ppsBinCount, 
                    React.createElement("div", {className: "pptl " + (compData['ppsbin_blink_state'] ? 'blink' : ''), 
                        style: compData["ppsbin_light_color"] ? { backgroundColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, compData.ppsbin_id)
                )
            );
        }

        else if ((compData.ppsbin_blue_state == true || compData.ppsbin_blue_state == "true") && (this.props.screenId == appConstants.PICK_BACK_EXCEPTION_SKIP_PRINTING) && compData.ppsbin_state != 'error')
            return (
                React.createElement("div", {className: "bin selected " + (compData['ppsbin_blink_state'] ? 'blink1' : ''), 
                    style: compData["ppsbin_light_color"] ? { borderColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}, 
                    onClick: this._toggleBinSelection.bind(this, compData.ppsbin_id)}, 
                    binParams.ppsBinCount, 
                    React.createElement("div", {className: "pptl selected " + (compData['ppsbin_blink_state'] ? 'blink' : ''), 
                        style: compData["ppsbin_light_color"] ? { backgroundColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, compData.ppsbin_id)
                )
            );

        else if (compData.ppsbin_count > 0 && (this.props.screenId == appConstants.PUT_BACK_SCAN || this.props.screenId == appConstants.PUT_FRONT_SCAN || this.props.screenId == appConstants.PUT_FRONT_PLACE_ITEMS_IN_RACK)) {
            return (
                React.createElement("div", {className: "bin use " + (compData['ppsbin_blink_state'] ? 'blink1' : ''), 
                    style: compData["ppsbin_light_color"] ? { borderColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, 
                    binParams.iconToShow, 
                    React.createElement("span", {className: "glyphicon glyphicon-info-sign info-icon", 
                        onClick: this.showModal.bind(this, compData.bin_info, "bin-info")}
                    ), 
                    React.createElement("div", {className: "item-count"}, compData.ppsbin_count), 
                    React.createElement("div", {className: "pptl " + (compData['ppsbin_blink_state'] ? 'blink' : ''), 
                        style: compData["ppsbin_light_color"] ? { backgroundColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, compData.ppsbin_id)
                )
            );
        }
        else if ((this.props.screenId === appConstants.PUT_FRONT_PPTL_PRESS) && compData.selected_state === true && compData.ppsbin_count > 0) {
            return (
                React.createElement("div", {className: "bin selected " + (compData['ppsbin_blink_state'] ? 'blink1' : ''), 
                    style: compData["ppsbin_light_color"] ? { borderColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, 
                    binParams.iconToShow, 
                    binParams.ppsBinCount, 
                    React.createElement("div", {className: "pptl selected " + (compData['ppsbin_blink_state'] ? 'blink' : ''), 
                        style: compData["ppsbin_light_color"] ? { backgroundColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}, 
                        onClick: this.pressPptl.bind(this, compData.ppsbin_id, compData.ppsbin_state)}, compData.ppsbin_id)
                )
            );
        }
        else if (this.props.screenId === appConstants.PUT_FRONT_PPTL_PRESS && compData.selected_state === true) {
            return (
                React.createElement("div", {className: "bin pick_processed " + (compData['ppsbin_blink_state'] ? 'blink1' : ''), 
                    style: compData["ppsbin_light_color"] ? { borderColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, 
                    binParams.ppsBinCount, 
                    binParams.iconToShow, 
                    React.createElement("div", {className: "pptl pick_processed " + (compData['ppsbin_blink_state'] ? 'blink' : ''), 
                        onClick: this.pressPptl.bind(this, compData.ppsbin_id, compData.ppsbin_state), 
                        style: compData["ppsbin_light_color"] ? { backgroundColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, compData.ppsbin_id)
                )
            );
        }
        else if (this.props.screenId === appConstants.PUT_FRONT_PPTL_PRESS) {
            return (
                React.createElement("div", {className: "bin " + (compData['ppsbin_blink_state'] ? 'blink1' : ''), 
                    style: compData["ppsbin_light_color"] ? { borderColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, 
                    binParams.ppsBinCount, 
                    binParams.iconToShow, 
                    React.createElement("div", {className: "pptl " + (compData['ppsbin_blink_state'] ? 'blink' : ''), 
                        style: compData["ppsbin_light_color"] ? { backgroundColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, compData.ppsbin_id)
                )
            );
        } else if (compData.selected_state && (this.props.screenId === appConstants.PUT_FRONT_BIN_WAREHOUSE_FULL || this.props.screenId === appConstants.PUT_FRONT_WAREHOUSE_FULL_IRT_SCAN)) {
            var pptl;
            if (this.props.screenId === appConstants.PUT_FRONT_WAREHOUSE_FULL_IRT_SCAN) {
                pptl = (React.createElement("div", {className: "pptl " + (compData['ppsbin_blink_state'] ? 'blink' : ''), 
                    style: compData["ppsbin_light_color"] ? { backgroundColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, compData.ppsbin_id));
            }
            else {
                pptl = (React.createElement("div", {className: "pptl " + (compData['ppsbin_blink_state'] ? 'blink' : ''), 
                    onClick: this.pressPptl.bind(this, compData.ppsbin_id, compData.ppsbin_state), 
                    style: compData["ppsbin_light_color"] ? { backgroundColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, compData.ppsbin_id));
            }

            return (
                React.createElement("div", {className: "bin " + (compData['ppsbin_blink_state'] ? 'blink1' : ''), 
                    style: compData["ppsbin_light_color"] ? { borderColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, 
                    binParams.ppsBinCount, 
                    binParams.iconToShow, 
                    pptl
                )
            );
        } else if (compData.selected_state && (this.props.screenId === appConstants.PICK_FRONT_BIN_PRINTOUT || this.props.screenId === appConstants.PICK_FRONT_ROLLCAGE_PRINTOUT)) {
            return (
                React.createElement("div", {className: "bin " + (compData['ppsbin_blink_state'] ? 'blink1' : ''), 
                    style: compData["ppsbin_light_color"] ? { borderColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, 
                    binParams.ppsBinCount, 
                    binParams.iconToShow, 
                    React.createElement("div", {className: "pptl " + (compData['ppsbin_blink_state'] ? 'blink' : ''), 
                        onClick: this.pressPptl.bind(this, compData.ppsbin_id, compData.ppsbin_state), 
                        style: compData["ppsbin_light_color"] ? { backgroundColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, compData.ppsbin_id)
                )
            );
        }
        else if (compData.ppsbin_count == 0 || compData.ppsbin_state == "empty") {
            var tote = '', pptl = '';
            if (compData.put_complete && (this.props.screenId === appConstants.PUT_BACK_SCAN_TOTE || this.props.screenId === appConstants.PUT_BACK_NO_SCAN_TOTE)) {
                pptl = React.createElement("div", {className: "pptl " + (compData['ppsbin_blink_state'] ? 'blink' : ''), onClick: this.pressPptl.bind(this, compData.ppsbin_id, compData.ppsbin_state), 
                    style: compData["ppsbin_light_color"] ? { backgroundColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, compData.ppsbin_id

                )
            } else {
                pptl = React.createElement("div", {className: "pptl " + (compData['ppsbin_blink_state'] ? 'blink' : ''), 
                    style: compData["ppsbin_light_color"] ? { backgroundColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, compData.ppsbin_id

                )
            }
            return (
                React.createElement("div", {className: "bin empty " + (compData['ppsbin_blink_state'] ? 'blink1' : ''), 
                    style: compData["ppsbin_light_color"] ? { borderColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, 
                    binParams.iconToShow, 
                    binParams.ppsBinCount, 
                    pptl
                )
            );
        }
        else {
            return (
                React.createElement("div", {className: "bin empty " + (compData['ppsbin_blink_state'] ? 'blink1' : ''), 
                    style: compData["ppsbin_light_color"] ? { borderColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, 
                    binParams.iconToShow, 
                    binParams.ppsBinCount, 
                    React.createElement("div", {className: "pptl " + (compData['ppsbin_blink_state'] ? 'blink' : ''), 
                        style: compData["ppsbin_light_color"] ? { backgroundColor: appConstants.BIN_LIGHT_COLOR[compData["ppsbin_light_color"]] } : {}}, compData.ppsbin_id)
                )
            );
        }

    }
});

module.exports = Bin;

},{"../../actions/CommonActions":181,"../../constants/appConstants":242,"../../stores/mainstore":259,"../Modal/Modal":199,"react":179}],184:[function(require,module,exports){
var React = require('react');
var Bin = require('./Bin.react');
//var PutBackStore = require('../../stores/PutBackStore');

var Bins = React.createClass({displayName: "Bins",
    componentDidMount: function() {
        if(this.props.binsData["structure"]){
            this._calculateAndSetBinDimensions(this.props.binsData["structure"]);
        }
        
    },
    _findCoordinatesIndex:function(x,y){
        var i = 0;
        this.props.binsData.ppsbin_list.map(function(value,index){
            if(value.coordinate[0]==x && value.coordinate[1]==y){
                i=index;
                return ;
            }
        });
        return i;
    },
    render: function() {
        if(this.props.binsData["structure"]){
        this._calculateAndSetBinDimensions(this.props.binsData["structure"]);
    }
        var compData = this.props.binsData;
        var dataToDisassociateTote=this.props.dataToDisassociateTote
        var scrnId = this.props.screenId;
        var self = this;
        return (
                 React.createElement("div", {className: "bins"}, 
                    
                        (function(){
                            var l =[]; 
                            for(var j = 0 ;j<compData.structure[0] ;j++){
                            var list = [];
                            var i = 0;
                            for( i = i ; i<compData.structure[1] ; i++){
                                list.push(React.createElement(Bin, {dataToDisassociateTote: dataToDisassociateTote, binData: compData.ppsbin_list[self._findCoordinatesIndex(j+1,i+1)], screenId: scrnId}));
                            }
                            l.push((
                                React.createElement("div", {className: "bin-row"}, 
                                    list
                                )
                                ));
                        }
                        return l;
                        })()
                    
                 )
        );
    },

    _calculateAndSetBinDimensions: function(dimension){
        var myElements = document.querySelectorAll(".bin");
        for (var i = 0; i < myElements.length; i++) {
            myElements[i].style.height = 0 + "px";
            myElements[i].style.width = 0 + "px";
        }
        var clientHeight = $('.bins').height();
        var clientWidth = $('.bins').width();
        var boxSize = Math.min(clientHeight/dimension[0],clientWidth/dimension[1]);
        for (var i = 0; i < myElements.length; i++) {
            myElements[i].style.height = boxSize + "px";
            myElements[i].style.width = boxSize + "px";
        }
    }
});

module.exports = Bins;

},{"./Bin.react":183,"react":179}],185:[function(require,module,exports){
var React = require('react');
var ActionCreators = require('../../actions/CommonActions');
var Modal = require('../Modal/Modal');
var appConstants = require('../../constants/appConstants');
var MainStore = require('../../stores/mainstore');

var Bin = React.createClass({displayName: "Bin",
  _toggleBinSelection: function(bin_id, e) {
    ActionCreators.toggleBinSelection(bin_id);
    e.stopPropagation();
    return false;
  },
  pressPptl: function(bin_id, binState) {
    var data = {
      event_name: '',
      event_data: {},
      source: ''
    };
    data['event_name'] = 'process_ppsbin_event';
    data['event_data']['ppsbin_id'] = bin_id;
    data['event_data']['ppsbin_state'] = binState;
    data['event_data']['ppsbin_event'] = MainStore.getPPTLEvent();
    data['source'] = 'ui';
    ActionCreators.postDataToInterface(data);
  },
  pressPptlExceptionDataSend: function(bin_id, binState) {
    var data = {
      event_name: '',
      event_data: {}
    };
    data['event_name'] = 'pick_back_exception';
    data['event_data']['ppsbin_id'] = bin_id;
    data['event_data']['type'] = MainStore.getExceptionType();
    ActionCreators.postDataToInterface(data);
  },
  showModal: function(data, type, e) {
    ActionCreators.showModal({
      data: data,
      type: type
    });
    $('.modal').modal();
    e.stopPropagation();
    return false;
  },
  getBinParams: function(compData) {
    var iconToShow = '',
      infoIcon = '',
      ppsBinCount = '',
      tote = '',
      packingBox = '';

    ppsBinCount = (
      React.createElement("div", {className: "item-count"}, 
        compData.ppsbin_count < 1 ? '-' : compData.ppsbin_count
      )
    );

    if (compData.selected_state === true && compData.ppsbin_count > 0) {
      infoIcon = (
        React.createElement("span", {
          className: "glyphicon glyphicon-info-sign info-icon", 
          onClick: this.showModal.bind(this, compData.bin_info, 'bin-info')}
        )
      );
    }

    tote = (
      React.createElement("div", {className: "tote"}, 
        React.createElement("span", {className: "bin-icon tote-icon"}), 
        infoIcon
      )
    );
    packingBox = (
      React.createElement("div", {className: "tote"}, 
        React.createElement("img", {
          className: "bin-icon packingBox-icon", 
          src: "./assets/images/packingbox_icon.png"}
        ), 
        infoIcon
      )
    );

    if (
      compData['totes_associated'] != undefined &&
      (compData.totes_associated == true || compData.totes_associated == 'true')
    ) {
      iconToShow = tote;
    } else if (
      compData['packing_box'] != undefined &&
      (compData.packing_box == true || compData.packing_box == 'true')
    ) {
      iconToShow = packingBox;
    }
    return {
      iconToShow: iconToShow,
      ppsBinCount: ppsBinCount
    };
  },
  render: function() {
    var compData = this.props.binData;
    var binParams = this.getBinParams(compData);

    if (this.props.screenId == appConstants.PICK_BACK_EXCEPTION_REPRINT) {
      return (
        React.createElement("div", {
          className: 
            'bin ' +
            (compData['pps_blink_state']
              ? 'selected blink1 '
              : 'no-excess-item')
          
        }, 
          binParams.iconToShow, 
          binParams.ppsBinCount, 
          React.createElement("div", {
            className: 
              'pptl ' +
              (compData['pps_blink_state']
                ? 'selected blink '
                : 'no-excess-item'), 
            
            style: 
              compData['ppsbin_light_color']
                ? {
                    backgroundColor:
                      appConstants.BIN_LIGHT_COLOR[
                        compData['ppsbin_light_color']
                      ]
                  }
                : {}
            
          }, 
            compData.ppsbin_id
          )
        )
      );
    } else if (
      (this.props.screenId == appConstants.PUT_BACK_STAGE ||
        this.props.screenId == appConstants.PUT_BACK_SCAN_TOTE ||
        this.props.screenId === appConstants.PUT_BACK_NO_SCAN_TOTE) &&
      compData.ppsbin_state == 'error'
    ) {
      return (
        React.createElement("div", {
          className: 
            'bin selected binError ' +
            (compData['pps_blink_state'] ? 'blink1 ' : ''), 
          
          style: 
            compData['ppsbin_light_color']
              ? {
                  borderColor:
                    appConstants.BIN_LIGHT_COLOR[compData['ppsbin_light_color']]
                }
              : {}
          
        }, 
          binParams.ppsBinCount, 
          React.createElement("div", {
            className: 
              'pptl selected binError ' +
              (compData['pps_blink_state'] ? 'blink ' : ''), 
            
            style: 
              compData['ppsbin_light_color']
                ? {
                    backgroundColor:
                      appConstants.BIN_LIGHT_COLOR[
                        compData['ppsbin_light_color']
                      ]
                  }
                : {}, 
            
            onClick: this.pressPptl.bind(
              this,
              compData.ppsbin_id,
              compData.ppsbin_state
            )
          }, 
            compData.ppsbin_id
          )
        )
      );
    } else if (
      this.props.screenId == appConstants.PRE_PUT_SCAN ||
      this.props.screenId == appConstants.PRE_PUT_STAGE ||
      this.props.screenId == appConstants.PRE_PUT_RELEASE
    ) {
      return (
        React.createElement("div", {
          className: 'bin ' + (compData['pps_blink_state'] ? 'blink1 ' : ''), 
          style: 
            compData['ppsbin_light_color']
              ? {
                  borderColor:
                    appConstants.BIN_LIGHT_COLOR[compData['ppsbin_light_color']]
                }
              : {}
          
        }, 
          binParams.iconToShow, 
          binParams.ppsBinCount, 
          React.createElement("div", {
            className: 'pptl ' + (compData['pps_blink_state'] ? 'blink ' : ''), 
            style: 
              compData['ppsbin_light_color']
                ? {
                    backgroundColor:
                      appConstants.BIN_LIGHT_COLOR[
                        compData['ppsbin_light_color']
                      ]
                  }
                : {}
            
          }, 
            compData.ppsbin_id
          )
        )
      );
    } else if (
      this.props.screenId === appConstants.PUT_FRONT_PPTL_PRESS &&
      compData.selected_state === true &&
      compData.ppsbin_count > 0
    ) {
      return (
        React.createElement("div", {
          className: 
            'bin selected ' + (compData['pps_blink_state'] ? 'blink1 ' : ''), 
          
          style: 
            compData['ppsbin_light_color']
              ? {
                  borderColor:
                    appConstants.BIN_LIGHT_COLOR[compData['ppsbin_light_color']]
                }
              : {}
          
        }, 
          binParams.iconToShow, 
          binParams.ppsBinCount, 
          React.createElement("div", {
            className: 
              'pptl selected ' + (compData['pps_blink_state'] ? 'blink ' : ''), 
            
            style: 
              compData['ppsbin_light_color']
                ? {
                    backgroundColor:
                      appConstants.BIN_LIGHT_COLOR[
                        compData['ppsbin_light_color']
                      ]
                  }
                : {}, 
            
            onClick: this.pressPptl.bind(
              this,
              compData.ppsbin_id,
              compData.ppsbin_state
            )
          }, 
            compData.ppsbin_id
          )
        )
      );
    } else if (
      this.props.screenId == appConstants.PUT_FRONT_PPTL_PRESS &&
      compData.selected_state == true
    ) {
      return (
        React.createElement("div", {
          className: 
            'bin pick_processed ' +
            (compData['ppsbin_blink_state'] ? 'blink1' : ''), 
          
          style: 
            compData['ppsbin_light_color']
              ? {
                  borderColor:
                    appConstants.BIN_LIGHT_COLOR[compData['ppsbin_light_color']]
                }
              : {}
          
        }, 
          React.createElement("div", {className: "item-count"}, '-'), 
          binParams.iconToShow, 
          React.createElement("div", {
            className: 
              'pptl pick_processed ' +
              (compData['ppsbin_blink_state'] ? 'blink' : ''), 
            
            onClick: this.pressPptl.bind(
              this,
              compData.ppsbin_id,
              compData.ppsbin_state
            ), 
            style: 
              compData['ppsbin_light_color']
                ? {
                    backgroundColor:
                      appConstants.BIN_LIGHT_COLOR[
                        compData['ppsbin_light_color']
                      ]
                  }
                : {}
            
          }, 
            compData.ppsbin_id
          )
        )
      );
    } else if (this.props.screenId == appConstants.PUT_FRONT_PPTL_PRESS) {
      return (
        React.createElement("div", {
          className: 'bin ' + (compData['ppsbin_blink_state'] ? 'blink1' : ''), 
          style: 
            compData['ppsbin_light_color']
              ? {
                  borderColor:
                    appConstants.BIN_LIGHT_COLOR[compData['ppsbin_light_color']]
                }
              : {}
          
        }, 
          binParams.ppsBinCount, 
          binParams.iconToShow, 
          React.createElement("div", {
            className: 
              'pptl ' + (compData['ppsbin_blink_state'] ? 'blink' : ''), 
            
            style: 
              compData['ppsbin_light_color']
                ? {
                    backgroundColor:
                      appConstants.BIN_LIGHT_COLOR[
                        compData['ppsbin_light_color']
                      ]
                  }
                : {}
            
          }, 
            compData.ppsbin_id
          )
        )
      );
    } else if (
      this.props.screenId == appConstants.PICK_BACK_EXCEPTION_SKIP_PRINTING
    ) {
      if (
        compData['ppsbin_blue_state'] != undefined &&
        (compData.ppsbin_blue_state == true ||
          compData.ppsbin_blue_state == 'true') &&
        compData.ppsbin_state != 'error'
      ) {
        return (
          React.createElement("div", {
            className: 
              'bin selected ' +
              (compData['selected_for_staging'] ? 'excess-select ' : '') +
              (compData['pps_blink_state'] ? 'blink1 ' : ''), 
            
            onClick: this._toggleBinSelection.bind(this, compData.ppsbin_id), 
            style: 
              compData['ppsbin_light_color']
                ? {
                    borderColor:
                      appConstants.BIN_LIGHT_COLOR[
                        compData['ppsbin_light_color']
                      ]
                  }
                : {}
            
          }, 
            binParams.iconToShow, 
            binParams.ppsBinCount, 
            React.createElement("div", {
              className: 
                'pptl selected ' + (compData['pps_blink_state'] ? 'blink ' : ''), 
              
              style: 
                compData['ppsbin_light_color']
                  ? {
                      backgroundColor:
                        appConstants.BIN_LIGHT_COLOR[
                          compData['ppsbin_light_color']
                        ]
                    }
                  : {}
              
            }, 
              compData.ppsbin_id
            )
          )
        );
      } else {
        return (
          React.createElement("div", {
            className: 
              'bin no-excess-item ' +
              (compData['pps_blink_state'] ? 'blink1 ' : ''), 
            
            style: 
              compData['ppsbin_light_color']
                ? {
                    borderColor:
                      appConstants.BIN_LIGHT_COLOR[
                        compData['ppsbin_light_color']
                      ]
                  }
                : {}
            
          }, 
            binParams.iconToShow, 
            React.createElement("div", {className: "item-count"}, compData.ppsbin_count), 
            React.createElement("div", {
              className: 
                'pptl no-excess-item ' +
                (compData['pps_blink_state'] ? 'blink ' : ''), 
              
              style: 
                compData['ppsbin_light_color']
                  ? {
                      backgroundColor:
                        appConstants.BIN_LIGHT_COLOR[
                          compData['ppsbin_light_color']
                        ]
                    }
                  : {}
              
            }, 
              compData.ppsbin_id
            )
          )
        );
      }
    } else if (this.props.screenId == appConstants.PICK_BACK_CHANGE_PBOX_BIN) {
      if (
        compData['packing_box'] != undefined &&
        (compData.packing_box == true || compData.packing_box == 'true') &&
        compData.ppsbin_state != 'error'
      ) {
        return (
          React.createElement("div", {
            className: 
              'bin excess-item ' +
              (compData['selected_for_staging'] ? 'excess-select ' : ' ') +
              (compData['pps_blink_state'] ? 'blink1 ' : ''), 
            
            onClick: this.pressPptlExceptionDataSend.bind(
              this,
              compData.ppsbin_id
            ), 
            style: 
              compData['ppsbin_light_color']
                ? {
                    borderColor:
                      appConstants.BIN_LIGHT_COLOR[
                        compData['ppsbin_light_color']
                      ]
                  }
                : {}
            
          }, 
            binParams.iconToShow, 
            binParams.ppsBinCount, 
            React.createElement("div", {
              className: 
                'pptl selected ' + (compData['pps_blink_state'] ? 'blink ' : ''), 
              
              style: 
                compData['ppsbin_light_color']
                  ? {
                      backgroundColor:
                        appConstants.BIN_LIGHT_COLOR[
                          compData['ppsbin_light_color']
                        ]
                    }
                  : {}
              
            }, 
              compData.ppsbin_id
            )
          )
        );
      } else {
        return (
          React.createElement("div", {
            className: 
              'bin no-excess-item ' +
              (compData['pps_blink_state'] ? 'blink1' : ''), 
            
            style: 
              compData['ppsbin_light_color']
                ? {
                    borderColor:
                      appConstants.BIN_LIGHT_COLOR[
                        compData['ppsbin_light_color']
                      ]
                  }
                : {}
            
          }, 
            binParams.iconToShow, 
            binParams.ppsBinCount, 
            React.createElement("div", {
              className: 
                'pptl no-excess-item ' +
                (compData['ppsbin_blink_state'] ? 'blink' : ''), 
              
              style: 
                compData['ppsbin_light_color']
                  ? {
                      backgroundColor:
                        appConstants.BIN_LIGHT_COLOR[
                          compData['ppsbin_light_color']
                        ]
                    }
                  : {}
              
            }, 
              compData.ppsbin_id
            )
          )
        );
      }
    } else if (
      this.props.screenId == appConstants.PICK_BACK_EXCEPTION_OVERRIDE_TOTE
    ) {
      if (
        compData['ppsbin_blue_state'] != undefined &&
        (compData.ppsbin_blue_state == true ||
          compData.ppsbin_blue_state == 'true') &&
        compData.ppsbin_state != 'error'
      ) {
        if (
          compData['totes_associated'] == true ||
          compData['totes_associated'] == 'true' ||
          (compData['packing_box'] == true || compData['packing_box'] == 'true')
        ) {
          return (
            React.createElement("div", {
              className: 
                'bin excess-item ' +
                (compData['pps_blink_state'] ? 'blink1 ' : ''), 
              
              style: 
                compData['ppsbin_light_color']
                  ? {
                      borderColor:
                        appConstants.BIN_LIGHT_COLOR[
                          compData['ppsbin_light_color']
                        ]
                    }
                  : {}
              
            }, 
              binParams.iconToShow, 
              binParams.ppsBinCount, 
              React.createElement("div", {
                className: 
                  'pptl excess-item ' +
                  (compData['pps_blink_state'] ? 'blink1 ' : ''), 
                
                style: 
                  compData['ppsbin_light_color']
                    ? {
                        backgroundColor:
                          appConstants.BIN_LIGHT_COLOR[
                            compData['ppsbin_light_color']
                          ]
                      }
                    : {}
                
              }, 
                compData.ppsbin_id
              )
            )
          );
        } else {
          return (
            React.createElement("div", {
              className: 
                'bin selected ' +
                (compData['selected_for_staging'] ? 'excess-select ' : '') +
                (compData['pps_blink_state'] ? 'blink1 ' : ''), 
              
              onClick: this._toggleBinSelection.bind(this, compData.ppsbin_id), 
              style: 
                compData['ppsbin_light_color']
                  ? {
                      borderColor:
                        appConstants.BIN_LIGHT_COLOR[
                          compData['ppsbin_light_color']
                        ]
                    }
                  : {}
              
            }, 
              binParams.iconToShow, 
              binParams.ppsBinCount, 
              React.createElement("div", {
                className: 
                  'pptl selected ' +
                  (compData['pps_blink_state'] ? 'blink ' : ''), 
                
                style: 
                  compData['ppsbin_light_color']
                    ? {
                        backgroundColor:
                          appConstants.BIN_LIGHT_COLOR[
                            compData['ppsbin_light_color']
                          ]
                      }
                    : {}
                
              }, 
                compData.ppsbin_id
              )
            )
          );
        }
      } else {
        return (
          React.createElement("div", {
            className: 
              'bin no-excess-item ' +
              (compData['pps_blink_state'] ? 'blink1 ' : ''), 
            
            style: 
              compData['ppsbin_light_color']
                ? {
                    borderColor:
                      appConstants.BIN_LIGHT_COLOR[
                        compData['ppsbin_light_color']
                      ]
                  }
                : {}
            
          }, 
            binParams.iconToShow, 
            binParams.ppsBinCount, 
            React.createElement("div", {
              className: 
                'pptl no-excess-item ' +
                (compData['pps_blink_state'] ? 'blink ' : ''), 
              
              style: 
                compData['ppsbin_light_color']
                  ? {
                      backgroundColor:
                        appConstants.BIN_LIGHT_COLOR[
                          compData['ppsbin_light_color']
                        ]
                    }
                  : {}
              
            }, 
              compData.ppsbin_id
            )
          )
        );
      }
    } else if (
      this.props.screenId == appConstants.PICK_BACK_EXCEPTION_DIS_ASSOCIATE_TOTE
    ) {
      if (
        compData['totes_associated'] != undefined &&
        this.props.dataToDisassociateTote &&
        this.props.dataToDisassociateTote.indexOf(compData.ppsbin_id) > -1 &&
        compData.ppsbin_state != 'error'
      ) {
        return (
          React.createElement("div", {
            className: 
              'bin excess-item ' +
              (compData['selected_for_staging'] ? 'excess-select ' : '') +
              (compData['pps_blink_state'] ? 'blink1 ' : ''), 
            
            style: 
              compData['ppsbin_light_color']
                ? {
                    borderColor:
                      appConstants.BIN_LIGHT_COLOR[
                        compData['ppsbin_light_color']
                      ]
                  }
                : {}, 
            
            onClick: this._toggleBinSelection.bind(this, compData.ppsbin_id)
          }, 
            binParams.iconToShow, 
            binParams.ppsBinCount, 
            React.createElement("div", {
              className: 
                'pptl excess-item ' +
                (compData['ppsbin_blink_state'] ? 'blink' : ''), 
              
              style: 
                compData['ppsbin_light_color']
                  ? {
                      backgroundColor:
                        appConstants.BIN_LIGHT_COLOR[
                          compData['ppsbin_light_color']
                        ]
                    }
                  : {}
              
            }, 
              compData.ppsbin_id
            )
          )
        );
      } else {
        return (
          React.createElement("div", {
            className: 
              'bin no-excess-item ' +
              (compData['ppsbin_blink_state'] ? 'blink1' : ''), 
            
            style: 
              compData['ppsbin_light_color']
                ? {
                    borderColor:
                      appConstants.BIN_LIGHT_COLOR[
                        compData['ppsbin_light_color']
                      ]
                  }
                : {}
            
          }, 
            binParams.iconToShow, 
            binParams.ppsBinCount, 
            React.createElement("div", {
              className: 
                'pptl no-excess-item ' +
                (compData['ppsbin_blink_state'] ? 'blink' : ''), 
              
              style: 
                compData['ppsbin_light_color']
                  ? {
                      backgroundColor:
                        appConstants.BIN_LIGHT_COLOR[
                          compData['ppsbin_light_color']
                        ]
                    }
                  : {}
              
            }, 
              compData.ppsbin_id
            )
          )
        );
      }
    } else if (
      this.props.screenId ==
        appConstants.PUT_BACK_EXCEPTION_EXCESS_ITEMS_IN_BINS &&
      !compData.put_complete
    )
      return (
        React.createElement("div", {
          className: 
            'bin no-excess-item ' +
            (compData['ppsbin_blink_state'] ? 'blink1' : ''), 
          
          style: 
            compData['ppsbin_light_color']
              ? {
                  borderColor:
                    appConstants.BIN_LIGHT_COLOR[compData['ppsbin_light_color']]
                }
              : {}
          
        }, 
          binParams.ppsBinCount, 
          React.createElement("div", {
            className: 
              'pptl ' + (compData['ppsbin_blink_state'] ? 'blink' : ''), 
            
            style: 
              compData['ppsbin_light_color']
                ? {
                    backgroundColor:
                      appConstants.BIN_LIGHT_COLOR[
                        compData['ppsbin_light_color']
                      ]
                  }
                : {}
            
          }, 
            compData.ppsbin_id
          )
        )
      );
    else if (
      this.props.screenId ==
        appConstants.PUT_BACK_EXCEPTION_EXCESS_ITEMS_IN_BINS &&
      compData.put_complete
    )
      return (
        React.createElement("div", {
          className: 
            'bin excess-item ' +
            (compData['selected_for_staging'] ? 'excess-select ' : '') +
            (compData['pps_blink_state'] ? 'blink1 ' : ''), 
          
          onClick: this._toggleBinSelection.bind(this, compData.ppsbin_id), 
          style: 
            compData['ppsbin_light_color']
              ? {
                  borderColor:
                    appConstants.BIN_LIGHT_COLOR[compData['ppsbin_light_color']]
                }
              : {}
          
        }, 
          binParams.ppsBinCount, 
          React.createElement("div", {
            className: 
              'pptl ' + (compData['ppsbin_blink_state'] ? 'blink' : ''), 
            
            style: 
              compData['ppsbin_light_color']
                ? {
                    backgroundColor:
                      appConstants.BIN_LIGHT_COLOR[
                        compData['ppsbin_light_color']
                      ]
                  }
                : {}
            
          }, 
            compData.ppsbin_id
          )
        )
      );
    else if (compData.ppsbin_state == 'staged')
      return (
        React.createElement("div", {
          className: 
            'bin staged ' + (compData['ppsbin_blink_state'] ? 'blink1' : ''), 
          
          style: 
            compData['ppsbin_light_color']
              ? {
                  borderColor:
                    appConstants.BIN_LIGHT_COLOR[compData['ppsbin_light_color']]
                }
              : {}
          
        }, 
          binParams.ppsBinCount, 
          React.createElement("div", {
            className: 
              'pptl ' + (compData['ppsbin_blink_state'] ? 'blink' : ''), 
            
            style: 
              compData['ppsbin_light_color']
                ? {
                    backgroundColor:
                      appConstants.BIN_LIGHT_COLOR[
                        compData['ppsbin_light_color']
                      ]
                  }
                : {}
            
          }, 
            compData.ppsbin_id
          )
        )
      );
    else if (compData.ppsbin_state == 'completed')
      return (
        React.createElement("div", {
          className: 
            'bin completed ' + (compData['ppsbin_blink_state'] ? 'blink1' : ''), 
          
          style: 
            compData['ppsbin_light_color']
              ? {
                  borderColor:
                    appConstants.BIN_LIGHT_COLOR[compData['ppsbin_light_color']]
                }
              : {}
          
        }, 
          binParams.ppsBinCount, 
          React.createElement("div", {
            className: 
              'pptl completed ' +
              (compData['ppsbin_blink_state'] ? 'blink' : ''), 
            
            style: 
              compData['ppsbin_light_color']
                ? {
                    backgroundColor:
                      appConstants.BIN_LIGHT_COLOR[
                        compData['ppsbin_light_color']
                      ]
                  }
                : {}
            
          }, 
            compData.ppsbin_id
          )
        )
      );
    else if (
      compData.ppsbin_count > 0 &&
      (compData['selected_for_staging'] != undefined &&
        compData['selected_for_staging'] == true) &&
      (this.props.screenId == appConstants.PUT_BACK_STAGE ||
        this.props.screenId == appConstants.PUT_BACK_SCAN_TOTE ||
        this.props.screenId === appConstants.PUT_BACK_NO_SCAN_TOTE) &&
      compData.ppsbin_state != 'error'
    )
      return (
        React.createElement("div", {
          className: 
            'bin use selected-staging ' +
            (compData['ppsbin_blink_state'] ? 'blink1' : ''), 
          
          onClick: this._toggleBinSelection.bind(this, compData.ppsbin_id), 
          style: 
            compData['ppsbin_light_color']
              ? {
                  borderColor:
                    appConstants.BIN_LIGHT_COLOR[compData['ppsbin_light_color']]
                }
              : {}
          
        }, 
          binParams.ppsBinCount, 
          React.createElement("div", {
            className: 
              'pptl ' + (compData['ppsbin_blink_state'] ? 'blink' : ''), 
            
            style: 
              compData['ppsbin_light_color']
                ? {
                    backgroundColor:
                      appConstants.BIN_LIGHT_COLOR[
                        compData['ppsbin_light_color']
                      ]
                  }
                : {}
            
          }, 
            compData.ppsbin_id
          )
        )
      );
    else if (
      (this.props.screenId == appConstants.PICK_BACK_PACKING_BOX ||
        this.props.screenId == appConstants.PICK_BACK_SCAN ||
        this.props.screenId == appConstants.PICK_BACK_BIN ||
        this.props.screenId == appConstants.PICK_BACK_NO_SCAN) &&
      (compData['ppsbin_blink_state'] != undefined &&
        (compData.ppsbin_blink_state == true ||
          compData.ppsbin_blink_state == 'true'))
    ) {
      var binClass = 'bin ';
      return (
        React.createElement("div", {
          className: "bin  selected blink1", 
          style: 
            compData['ppsbin_light_color']
              ? {
                  borderColor:
                    appConstants.BIN_LIGHT_COLOR[compData['ppsbin_light_color']]
                }
              : {}
          
        }, 
          binParams.iconToShow, 
          binParams.ppsBinCount, 
          React.createElement("div", {
            className: "pptl selected blink", 
            onClick: this.pressPptl.bind(
              this,
              compData.ppsbin_id,
              compData.ppsbin_state
            ), 
            style: 
              compData['ppsbin_light_color']
                ? {
                    backgroundColor:
                      appConstants.BIN_LIGHT_COLOR[
                        compData['ppsbin_light_color']
                      ]
                  }
                : {}
            
          }, 
            compData.ppsbin_id
          )
        )
      );
    } else if (
      (this.props.screenId == appConstants.PICK_BACK_PACKING_BOX ||
        this.props.screenId == appConstants.PICK_BACK_SCAN ||
        this.props.screenId == appConstants.PICK_BACK_BIN ||
        this.props.screenId == appConstants.PICK_BACK_NO_SCAN) &&
      (compData['ppsbin_blue_state'] != undefined &&
        (compData.ppsbin_blue_state == true ||
          compData.ppsbin_blue_state == 'true'))
    ) {
      var tote = '',
        binClass = '';
      binClass = compData.ppsbin_state == 'error' ? ' binError' : '';
      return (
        React.createElement("div", {
          className: 
            'bin selected ' +
            (compData['ppsbin_blink_state'] ? 'blink1' : '') +
            binClass, 
          
          style: 
            compData['ppsbin_light_color']
              ? {
                  borderColor:
                    appConstants.BIN_LIGHT_COLOR[compData['ppsbin_light_color']]
                }
              : {}
          
        }, 
          binParams.iconToShow, 
          binParams.ppsBinCount, 
          React.createElement("div", {
            className: 
              'pptl selected ' +
              (compData['ppsbin_blink_state'] ? 'blink' : '') +
              binClass, 
            
            onClick: this.pressPptl.bind(
              this,
              compData.ppsbin_id,
              compData.ppsbin_state
            ), 
            style: 
              compData['ppsbin_light_color']
                ? {
                    backgroundColor:
                      appConstants.BIN_LIGHT_COLOR[
                        compData['ppsbin_light_color']
                      ]
                  }
                : {}
            
          }, 
            compData.ppsbin_id
          )
        )
      );
    } else if (
      this.props.screenId == appConstants.PICK_BACK_SCAN ||
      this.props.screenId == appConstants.PICK_BACK_BIN
    ) {
      return (
        React.createElement("div", {
          className: 'bin ' + (compData['ppsbin_blink_state'] ? 'blink1' : ''), 
          style: 
            compData['ppsbin_light_color']
              ? {
                  borderColor:
                    appConstants.BIN_LIGHT_COLOR[compData['ppsbin_light_color']]
                }
              : {}
          
        }, 
          binParams.iconToShow, 
          binParams.ppsBinCount, 
          React.createElement("div", {
            className: 
              'pptl ' + (compData['ppsbin_blink_state'] ? 'blink' : ''), 
            
            style: 
              compData['ppsbin_light_color']
                ? {
                    backgroundColor:
                      appConstants.BIN_LIGHT_COLOR[
                        compData['ppsbin_light_color']
                      ]
                  }
                : {}
            
          }, 
            compData.ppsbin_id
          )
        )
      );
    } else if (
      (compData.selected_state == true || compData.selected_state == 'true') &&
      this.props.screenId == appConstants.PICK_FRONT_PPTL_PRESS
    ) {
      return (
        React.createElement("div", {
          className: 
            'bin selected ' + (compData['ppsbin_blink_state'] ? 'blink1' : ''), 
          
          style: 
            compData['ppsbin_light_color']
              ? {
                  borderColor:
                    appConstants.BIN_LIGHT_COLOR[compData['ppsbin_light_color']]
                }
              : {}
          
        }, 
          React.createElement("span", {
            className: "glyphicon glyphicon-info-sign info-icon grey-icon", 
            onClick: this.showModal.bind(this, compData.bin_info, 'bin-info')}
          ), 
          binParams.ppsBinCount, 
          React.createElement("div", {
            className: 
              'pptl selected ' + (compData['ppsbin_blink_state'] ? 'blink' : ''), 
            
            onClick: this.pressPptl.bind(
              this,
              compData.ppsbin_id,
              compData.ppsbin_state
            ), 
            style: 
              compData['ppsbin_light_color']
                ? {
                    backgroundColor:
                      appConstants.BIN_LIGHT_COLOR[
                        compData['ppsbin_light_color']
                      ]
                  }
                : {}
            
          }, 
            compData.ppsbin_id
          )
        )
      );
    } else if (
      (compData.selected_state == true || compData.selected_state == 'true') &&
      (this.props.screenId == appConstants.PICK_FRONT_MORE_ITEM_SCAN ||
        this.props.screenId == appConstants.PICK_FRONT_PACKING_BOX)
    ) {
      return (
        React.createElement("div", {
          className: 
            'bin selected ' + (compData['ppsbin_blink_state'] ? 'blink1' : ''), 
          
          style: 
            compData['ppsbin_light_color']
              ? {
                  borderColor:
                    appConstants.BIN_LIGHT_COLOR[compData['ppsbin_light_color']]
                }
              : {}
          
        }, 
          React.createElement("span", {
            className: "glyphicon glyphicon-info-sign info-icon grey-icon", 
            onClick: this.showModal.bind(this, compData.bin_info, 'bin-info')}
          ), 
          binParams.ppsBinCount, 
          React.createElement("div", {
            className: 
              'pptl selected ' + (compData['ppsbin_blink_state'] ? 'blink' : ''), 
            
            style: 
              compData['ppsbin_light_color']
                ? {
                    backgroundColor:
                      appConstants.BIN_LIGHT_COLOR[
                        compData['ppsbin_light_color']
                      ]
                  }
                : {}
            
          }, 
            compData.ppsbin_id
          )
        )
      );
    } else if (
      (compData.selected_state == true || compData.selected_state == 'true') &&
      this.props.screenId == appConstants.PICK_FRONT_PACKING_BOX
    ) {
      return (
        React.createElement("div", {
          className: 
            'bin selected ' + (compData['ppsbin_blink_state'] ? 'blink1' : ''), 
          
          style: 
            compData['ppsbin_light_color']
              ? {
                  borderColor:
                    appConstants.BIN_LIGHT_COLOR[compData['ppsbin_light_color']]
                }
              : {}
          
        }, 
          React.createElement("span", {
            className: "glyphicon glyphicon-info-sign info-icon grey-icon", 
            onClick: this.showModal.bind(this, compData.bin_info, 'bin-info')}
          ), 
          binParams.ppsBinCount, 
          React.createElement("div", {
            className: 
              'pptl selected ' + (compData['ppsbin_blink_state'] ? 'blink' : ''), 
            
            style: 
              compData['ppsbin_light_color']
                ? {
                    backgroundColor:
                      appConstants.BIN_LIGHT_COLOR[
                        compData['ppsbin_light_color']
                      ]
                  }
                : {}
            
          }, 
            compData.ppsbin_id
          )
        )
      );
    } else if (
      (compData.selected_state == false ||
        compData.selected_state == 'false') &&
      ((this.props.screenId == appConstants.PICK_FRONT_PPTL_PRESS ||
        this.props.screenId == appConstants.PICK_FRONT_MORE_ITEM_SCAN ||
        this.props.screenId == appConstants.PICK_FRONT_PACKING_BOX) &&
        (compData.ppsbin_state == 'pick_processed' ||
          compData.ppsbin_state == 'pick_allowed' ||
          compData.ppsbin_state == 'order_front_complete'))
    ) {
      return (
        React.createElement("div", {
          className: 
            'bin pick_processed ' +
            (compData['ppsbin_blink_state'] ? 'blink1' : ''), 
          
          style: 
            compData['ppsbin_light_color']
              ? {
                  borderColor:
                    appConstants.BIN_LIGHT_COLOR[compData['ppsbin_light_color']]
                }
              : {}
          
        }, 
          binParams.iconToShow, 
          binParams.ppsBinCount, 
          React.createElement("div", {
            className: 
              'pptl pick_processed ' +
              (compData['ppsbin_blink_state'] ? 'blink' : ''), 
            
            style: 
              compData['ppsbin_light_color']
                ? {
                    backgroundColor:
                      appConstants.BIN_LIGHT_COLOR[
                        compData['ppsbin_light_color']
                      ]
                  }
                : {}
            
          }, 
            compData.ppsbin_id
          )
        )
      );
    } else if (
      (compData.selected_state == true || compData.selected_state == 'true') &&
      (this.props.screenId == appConstants.PUT_BACK_SCAN ||
        this.props.screenId == appConstants.PUT_BACK_PRESS_PPTL_TOTE)
    ) {
      return (
        React.createElement("div", {
          className: 
            'bin selected ' + (compData['ppsbin_blink_state'] ? 'blink1' : ''), 
          
          style: 
            compData['ppsbin_light_color']
              ? {
                  borderColor:
                    appConstants.BIN_LIGHT_COLOR[compData['ppsbin_light_color']]
                }
              : {}
          
        }, 
          binParams.ppsBinCount, 
          React.createElement("div", {
            className: 
              'pptl selected ' + (compData['ppsbin_blink_state'] ? 'blink' : ''), 
            
            onClick: this.pressPptl.bind(
              this,
              compData.ppsbin_id,
              compData.ppsbin_state
            ), 
            style: 
              compData['ppsbin_light_color']
                ? {
                    backgroundColor:
                      appConstants.BIN_LIGHT_COLOR[
                        compData['ppsbin_light_color']
                      ]
                  }
                : {}
            
          }, 
            compData.ppsbin_id
          )
        )
      );
    } else if (
      (compData.selected_state == true || compData.selected_state == 'true') &&
      (this.props.screenId == appConstants.PUT_FRONT_SCAN ||
        this.props.screenId == appConstants.PICK_FRONT_MORE_ITEM_SCAN ||
        this.props.screenId == appConstants.PICK_FRONT_PACKING_BOX ||
        this.props.screenId == appConstants.PUT_FRONT_PLACE_ITEMS_IN_RACK ||
        this.props.screenId ==
          appConstants.PICK_FRONT_SCAN_ITEM_AND_PLACE_IN_BIN)
    ) {
      var iconToShow = '';
      var applyClassNameOnTote = '';
      if (
        compData.totes_associated == true ||
        compData.totes_associated == 'true'
      ) {
        applyClassNameOnTote = 'bin-icon tote-icon ';
      } else if (
        compData.packing_box == true ||
        compData.packing_box == 'true'
      ) {
        applyClassNameOnTote = 'bin-icon packingBox-icon ';
      }
      if (
        this.props.binCoordinatePlotting == true ||
        this.props.binCoordinatePlotting == 'true'
      ) {
        applyClassNameOnTote =
          applyClassNameOnTote + 'bin-coordinate-plotting-enabled';
      }
      iconToShow = (
        React.createElement("div", {className: "tote"}, 
          applyClassNameOnTote.search('packingBox-icon') !== -1 ? (
            React.createElement("img", {
              className: applyClassNameOnTote, 
              src: "./assets/images/packing_box_icon.png"}
            )
          ) : (
            React.createElement("span", {className: applyClassNameOnTote})
          ), 
          React.createElement("span", {
            className: "glyphicon glyphicon-info-sign info-icon", 
            onClick: this.showModal.bind(this, compData.bin_info, 'bin-info')}
          )
        )
      );
      return (
        React.createElement("div", {
          className: 
            (compData.ppsbin_count > 0 ? 'bin selected ' : 'bin empty ') +
            (compData['ppsbin_blink_state'] ? 'blink1' : ''), 
          
          style: 
            compData['ppsbin_light_color']
              ? {
                  borderColor:
                    appConstants.BIN_LIGHT_COLOR[compData['ppsbin_light_color']]
                }
              : {}
          
        }, 
          iconToShow, 
          binParams.ppsBinCount, 
          React.createElement("div", {
            className: 
              (compData.ppsbin_count > 0 ? 'pptl selected ' : 'pptl ') +
              (compData['ppsbin_blink_state'] ? 'blink' : ''), 
            
            style: 
              compData['ppsbin_light_color']
                ? {
                    backgroundColor:
                      appConstants.BIN_LIGHT_COLOR[
                        compData['ppsbin_light_color']
                      ]
                  }
                : {}
            
          }, 
            compData.ppsbin_id
          )
        )
      );
    } else if (
      compData.ppsbin_count > 0 &&
      (this.props.screenId == appConstants.PUT_BACK_STAGE ||
        this.props.screenId == appConstants.PUT_BACK_SCAN_TOTE ||
        this.props.screenId == appConstants.PUT_BACK_NO_SCAN_TOTE) &&
      compData.ppsbin_state != 'error'
    ) {
      var placeHolder = '';
      if (this.props.screenId == appConstants.PUT_BACK_NO_SCAN_TOTE) {
        placeHolder = binParams.iconToShow;
      } else {
        placeHolder = (
          React.createElement("span", {
            className: "glyphicon glyphicon-info-sign info-icon", 
            onClick: this.showModal.bind(this, compData.bin_info, 'bin-info')}
          )
        );
      }
      return (
        React.createElement("div", {
          className: 
            'bin use ' + (compData['ppsbin_blink_state'] ? 'blink1' : ''), 
          
          onClick: this._toggleBinSelection.bind(this, compData.ppsbin_id), 
          style: 
            compData['ppsbin_light_color']
              ? {
                  borderColor:
                    appConstants.BIN_LIGHT_COLOR[compData['ppsbin_light_color']]
                }
              : {}
          
        }, 
          placeHolder, 
          React.createElement("div", {className: "item-count"}, compData.ppsbin_count), 
          React.createElement("div", {
            className: 
              'pptl ' + (compData['ppsbin_blink_state'] ? 'blink' : ''), 
            
            style: 
              compData['ppsbin_light_color']
                ? {
                    backgroundColor:
                      appConstants.BIN_LIGHT_COLOR[
                        compData['ppsbin_light_color']
                      ]
                  }
                : {}
            
          }, 
            compData.ppsbin_id
          )
        )
      );
    } else if (
      (compData.ppsbin_blue_state == true ||
        compData.ppsbin_blue_state == 'true') &&
      this.props.screenId == appConstants.PICK_BACK_EXCEPTION_SKIP_PRINTING &&
      compData.ppsbin_state != 'error'
    )
      return (
        React.createElement("div", {
          className: 
            'bin selected ' + (compData['ppsbin_blink_state'] ? 'blink1' : ''), 
          
          style: 
            compData['ppsbin_light_color']
              ? {
                  borderColor:
                    appConstants.BIN_LIGHT_COLOR[compData['ppsbin_light_color']]
                }
              : {}, 
          
          onClick: this._toggleBinSelection.bind(this, compData.ppsbin_id)
        }, 
          binParams.ppsBinCount, 
          React.createElement("div", {
            className: 
              'pptl selected ' + (compData['ppsbin_blink_state'] ? 'blink' : ''), 
            
            style: 
              compData['ppsbin_light_color']
                ? {
                    backgroundColor:
                      appConstants.BIN_LIGHT_COLOR[
                        compData['ppsbin_light_color']
                      ]
                  }
                : {}
            
          }, 
            compData.ppsbin_id
          )
        )
      );
    else if (
      compData.ppsbin_count > 0 &&
      (this.props.screenId == appConstants.PUT_BACK_SCAN ||
        this.props.screenId == appConstants.PUT_FRONT_SCAN ||
        this.props.screenId == appConstants.PUT_FRONT_PLACE_ITEMS_IN_RACK)
    ) {
      var iconToShow = '';
      var applyClassNameOnTote = '';
      if (
        compData.totes_associated == true ||
        compData.totes_associated == 'true'
      ) {
        applyClassNameOnTote = 'bin-icon tote-icon';
      } else if (
        compData.packing_box == true ||
        compData.packing_box == 'true'
      ) {
        applyClassNameOnTote = 'bin-icon packingBox-icon ';
      }
      if (
        this.props.binCoordinatePlotting == true ||
        this.props.binCoordinatePlotting == 'true'
      ) {
        applyClassNameOnTote =
          applyClassNameOnTote + 'bin-coordinate-plotting-enabled';
      }

      iconToShow = (
        React.createElement("div", {className: "tote"}, 
          applyClassNameOnTote.search('packingBox-icon') !== -1 ? (
            React.createElement("img", {
              className: applyClassNameOnTote, 
              src: "./assets/images/packing_box_icon.png"}
            )
          ) : (
            React.createElement("span", {className: applyClassNameOnTote})
          )
        )
      );
      return (
        React.createElement("div", {
          className: 
            'bin use ' + (compData['ppsbin_blink_state'] ? 'blink1' : ''), 
          
          style: 
            compData['ppsbin_light_color']
              ? {
                  borderColor:
                    appConstants.BIN_LIGHT_COLOR[compData['ppsbin_light_color']]
                }
              : {}
          
        }, 
          iconToShow, 
          React.createElement("span", {
            className: "glyphicon glyphicon-info-sign info-icon", 
            onClick: this.showModal.bind(this, compData.bin_info, 'bin-info')}
          ), 
          React.createElement("div", {className: "item-count"}, compData.ppsbin_count), 
          React.createElement("div", {
            className: 
              'pptl ' + (compData['ppsbin_blink_state'] ? 'blink' : ''), 
            
            style: 
              compData['ppsbin_light_color']
                ? {
                    backgroundColor:
                      appConstants.BIN_LIGHT_COLOR[
                        compData['ppsbin_light_color']
                      ]
                  }
                : {}
            
          }, 
            compData.ppsbin_id
          )
        )
      );
    } else if (
      compData.selected_state &&
      (this.props.screenId === appConstants.PICK_FRONT_BIN_PRINTOUT ||
        this.props.screenId === appConstants.PICK_FRONT_ROLLCAGE_PRINTOUT)
    ) {
      return (
        React.createElement("div", {
          className: 
            'bin selected ' + (compData['ppsbin_blink_state'] ? 'blink1' : ''), 
          
          style: 
            compData['ppsbin_light_color']
              ? {
                  borderColor:
                    appConstants.BIN_LIGHT_COLOR[compData['ppsbin_light_color']]
                }
              : {}
          
        }, 
          binParams.ppsBinCount, 
          React.createElement("div", {
            className: 
              'pptl selected ' + (compData['ppsbin_blink_state'] ? 'blink' : ''), 
            
            onClick: this.pressPptl.bind(
              this,
              compData.ppsbin_id,
              compData.ppsbin_state
            ), 
            style: 
              compData['ppsbin_light_color']
                ? {
                    backgroundColor:
                      appConstants.BIN_LIGHT_COLOR[
                        compData['ppsbin_light_color']
                      ]
                  }
                : {}
            
          }, 
            compData.ppsbin_id
          )
        )
      );
    } else if (compData.ppsbin_count == 0 || compData.ppsbin_state == 'empty') {
      var tote = '',
        pptl = '';
      if (
        compData.put_complete &&
        (this.props.screenId === appConstants.PUT_BACK_SCAN_TOTE ||
          this.props.screenId === appConstants.PUT_BACK_NO_SCAN_TOTE)
      ) {
        pptl = (
          React.createElement("div", {
            className: 
              'pptl ' + (compData['ppsbin_blink_state'] ? 'blink' : ''), 
            
            onClick: this.pressPptl.bind(
              this,
              compData.ppsbin_id,
              compData.ppsbin_state
            ), 
            style: 
              compData['ppsbin_light_color']
                ? {
                    backgroundColor:
                      appConstants.BIN_LIGHT_COLOR[
                        compData['ppsbin_light_color']
                      ]
                  }
                : {}
            
          }, 
            compData.ppsbin_id
          )
        );
      } else {
        pptl = (
          React.createElement("div", {
            className: 
              'pptl ' + (compData['ppsbin_blink_state'] ? 'blink' : ''), 
            
            style: 
              compData['ppsbin_light_color']
                ? {
                    backgroundColor:
                      appConstants.BIN_LIGHT_COLOR[
                        compData['ppsbin_light_color']
                      ]
                  }
                : {}
            
          }, 
            compData.ppsbin_id
          )
        );
      }

      return (
        React.createElement("div", {
          className: 
            'bin empty ' + (compData['ppsbin_blink_state'] ? 'blink1' : ''), 
          
          style: 
            compData['ppsbin_light_color']
              ? {
                  borderColor:
                    appConstants.BIN_LIGHT_COLOR[compData['ppsbin_light_color']]
                }
              : {}
          
        }, 
          binParams.iconToShow, 
          binParams.ppsBinCount, 
          pptl
        )
      );
    } else if (
      compData.selected_state &&
      this.props.screenId === appConstants.PUT_FRONT_BIN_WAREHOUSE_FULL
    ) {
      return (
        React.createElement("div", {
          className: 'bin ' + (compData['ppsbin_blink_state'] ? 'blink1' : ''), 
          style: 
            compData['ppsbin_light_color']
              ? {
                  borderColor:
                    appConstants.BIN_LIGHT_COLOR[compData['ppsbin_light_color']]
                }
              : {}
          
        }, 
          React.createElement("div", {className: "item-count"}, compData.ppsbin_count), 
          binParams.iconToShow, 
          React.createElement("div", {
            className: 
              'pptl ' + (compData['ppsbin_blink_state'] ? 'blink' : ''), 
            
            onClick: this.pressPptl.bind(
              this,
              compData.ppsbin_id,
              compData.ppsbin_state
            ), 
            style: 
              compData['ppsbin_light_color']
                ? {
                    backgroundColor:
                      appConstants.BIN_LIGHT_COLOR[
                        compData['ppsbin_light_color']
                      ]
                  }
                : {}
            
          }, 
            compData.ppsbin_id
          )
        )
      );
    } else {
      return (
        React.createElement("div", {
          className: 
            'bin empty ' + (compData['ppsbin_blink_state'] ? 'blink1' : ''), 
          
          style: 
            compData['ppsbin_light_color']
              ? {
                  borderColor:
                    appConstants.BIN_LIGHT_COLOR[compData['ppsbin_light_color']]
                }
              : {}
          
        }, 
          binParams.iconToShow, 

          binParams.ppsBinCount, 
          React.createElement("div", {
            className: 
              'pptl ' + (compData['ppsbin_blink_state'] ? 'blink' : ''), 
            
            style: 
              compData['ppsbin_light_color']
                ? {
                    backgroundColor:
                      appConstants.BIN_LIGHT_COLOR[
                        compData['ppsbin_light_color']
                      ]
                  }
                : {}
            
          }, 
            compData.ppsbin_id
          )
        )
      );
    }
  }
});

module.exports = Bin;

},{"../../actions/CommonActions":181,"../../constants/appConstants":242,"../../stores/mainstore":259,"../Modal/Modal":199,"react":179}],186:[function(require,module,exports){
var React = require('react');
var Bin = require('./BinsFlex.react');
//var PutBackStore = require('../../stores/PutBackStore');

var Bins = React.createClass({displayName: "Bins",

    getInitialState: function(){
        return this._sortBins(this.props.binsData.ppsbin_list,false);
    },
    componentWillReceiveProps: function() {
        this._sortBins(this.props.binsData.ppsbin_list,true);
    },

      _sortBins:function (aBins,shouldSetState){
         if (!aBins || (aBins.constructor !== Array && aBins.length < 1)){
            //no bins found
            return;
         }

        var totalBins = aBins.length;
        var totalWidth =0, totalHeight=0, lastHBin = {}, lastVBin={};


        lastHBin = aBins.reduce(function(oBinPrev,oBinCurr){
            if (oBinPrev.orig_coordinate[0] < oBinCurr.orig_coordinate[0]){
                return oBinCurr;
            }else if (oBinPrev.orig_coordinate[0] === oBinCurr.orig_coordinate[0]){
                return oBinCurr;
            }else{
                return oBinPrev;
            }
        });
        lastVBin = aBins.reduce(function(oBinPrev,oBinCurr){
            if (oBinPrev.orig_coordinate[1] < oBinCurr.orig_coordinate[1]){
                return oBinCurr;
            }else if (oBinPrev.orig_coordinate[1] === oBinCurr.orig_coordinate[1]){
                return oBinCurr;
            }else{
                return oBinPrev;
            }
        });
        if(shouldSetState){
            this.setState({
                aBins:aBins,
                lastHBin:lastHBin,
                lastVBin: lastVBin,
            });
        }
        else{
            return{
                 aBins:aBins,
                lastHBin:lastHBin,
                lastVBin: lastVBin
            }
        }
    },

    _createBinLayouts: function(aBins, lastHBin, lastVBin,  seatType, screenId, binCoordinatePlotting,dataToDisassociateTote) {
        if ((aBins.constructor !== Array && aBins.length < 1) || !(lastHBin.length) || !(lastVBin.length)){
            //no bins found
            return;
         }
         var aHTMLBins =[];
         // since the total width would be 100% but the bins would be divided into
         // ratios, hence each of the bin would have to have the factor into % of the
         // .bins container.
         // for reference orig_coordinate[0] === x axis and orig_coordinate[1] === y axis
         var horFactor = parseFloat(100/(Number(lastHBin.orig_coordinate[0]) + Number(lastHBin.length)));
         var vertFactor = parseFloat(100/(Number(lastVBin.orig_coordinate[1]) + Number(lastVBin.height)));

         var totalPpsWidth = Number(lastHBin.orig_coordinate[0]) + Number(lastHBin.length)


         for (var i =0; i<aBins.length ;i++){
                var binWidth = aBins[i].length * horFactor +'%';
                var binHeight = aBins[i].height * vertFactor +'%';
                var ileft=0;
                var itop=0;

                // if the seat type is front then we have to modify the x co-ordinate as per the formula:
                // the new x coordinate of a ppsbin is (Total length of pps - xcoordinate - length of bin)

                ileft = (seatType ==='back')? (aBins[i].orig_coordinate[0] * horFactor +'%'):
                    (totalPpsWidth - aBins[i].orig_coordinate[0] - aBins[i].length) * horFactor +'%';
                itop = aBins[i].orig_coordinate[1] * vertFactor+'%';

                if(binCoordinatePlotting == true || binCoordinatePlotting == "true"){
                  aHTMLBins.push(
                                   React.createElement("div", {className: "bin-container", 
                                     style: {
                                        width: binWidth,
                                        height:binHeight,
                                        top: itop,
                                        left:ileft
                                      }}, 
                                      React.createElement(Bin, {dataToDisassociateTote: dataToDisassociateTote, binData: aBins[i], screenId: screenId, binCoordinatePlotting: true})
                                   )
                                   )
                }
                else{
                  aHTMLBins.push(
                                   React.createElement("div", {className: "bin-container", 
                                      style: {
                                        width: binWidth,
                                        height:binHeight,
                                        top: itop,
                                        left:ileft
                                      }}, 
                                      React.createElement(Bin, {dataToDisassociateTote: dataToDisassociateTote, binData: aBins[i], screenId: screenId})
                                   )
                                   )
                }
              }
        return aHTMLBins;
    },

    render: function() {
        
        var aHTMLBins = this._createBinLayouts(this.state.aBins,
                                               this.state.lastHBin,
                                               this.state.lastVBin,

                                               this.props.seatType,

                                               this.props.screenId,
                                               this.props.binCoordinatePlotting,this.props.dataToDisassociateTote);
        var self = this;
        return (
                 React.createElement("div", {className: "bins-flex", style: {width:document.body.clientWidth/1.7, height:document.body.clientHeight/2}}, 
                        aHTMLBins
                 )
        );
    }
});

module.exports = Bins;

},{"./BinsFlex.react":185,"react":179}],187:[function(require,module,exports){
var React = require("react");
var allresourceConstants = require('../constants/resourceConstants');

var BoxSerial = React.createClass({displayName: "BoxSerial",
	render : function(){

		var boxList =this.props.boxData;
		var eachBoxSerial = [];

		eachBoxSerial = boxList.map(function(row,index){
				return(
						React.createElement("tr", null, 
							React.createElement("td", null, 
								(index+1) + ". " + row
							)
						)
					);
		});


		return (
				React.createElement("div", {className: "boxSerial"}, 
					React.createElement("table", {className: "table"}, 
						React.createElement("thead", null, 
							React.createElement("div", {className: "boxHeader"}, 
								allresourceConstants.TBL_HEADER
							)
						), 
						React.createElement("tbody", null, 
							eachBoxSerial
						)
					)
				)
			);
	}
});

module.exports  = BoxSerial;

},{"../constants/resourceConstants":244,"react":179}],188:[function(require,module,exports){
var React = require('react');
var ActionCreators = require('../../actions/CommonActions');
var appConstants = require('../../constants/appConstants');
var mainstore = require('../../stores/mainstore');

function closeModalBox() {
  $('.modal').modal('hide');
}

var Button1 = React.createClass({displayName: "Button1",
  _checklistClass: '',
  removeTextField: function () {
    $('.modal-body')
      .find('input:text')
      .val('');
  },

  performAction: function (module, action, screenId) {
    var peripheralId;
    var data = {
      // event_name: '',
      // event_data: {}
    };
    var peripheralData = {
      peripheral_id: '',
      peripheral_type: ''
    };

    switch (module) {
      case appConstants.ERROR_NOTIFICATION:
        var notification_data = mainstore.getNotificationData();
        var saltParamModule =
          notification_data && notification_data.saltParams
            ? notification_data.saltParams.module
            : null;
        var data = {
          event_name: 'remove_gui_alert',
          event_data: {
            ui_event: mainstore.getScreenEvent()
          },
          source: 'ui'
        };
        if (
          (notification_data &&
            notification_data.type !== appConstants.CLIENT_NOTIFICATION) ||
          (notification_data && saltParamModule === appConstants.BIN_FULL)
        ) {
          if (saltParamModule === appConstants.BIN_FULL) {
            data = {};
            data['event_name'] = appConstants.CANCEL_BIN_FULL_REQUEST;
            data['event_data'] = null;
          }

          ActionCreators.postDataToInterface(data);
        }

        ActionCreators.clearNotification();
        $('.modal.notification-error').data('bs.modal').options.backdrop = true;
        $('.modal-backdrop').remove();
        $('.modal.notification-error').modal('hide');
        $('.modal').removeClass('notification-error');
        break;

      case appConstants.PICK_FRONT:
        switch (action) {
          case appConstants.CANCEL_SCAN:
            console.log("=====> cancel button clicked====>");
            data["name"] = "cancel_clicked";
            data["data"] = null;
            data["screen_id"] = screenId;
            ActionCreators.postDataToInterface(data, mainstore.getCurrentStationId());
            break;
          
          case appConstants.CANCEL_SCAN:
            console.log("=====> cancel button clicked====>");
            data["name"] = "cancel_clicked";
            data["data"] = null;
            data["screen_id"] = screenId;
            ActionCreators.postDataToInterface(data, mainstore.getCurrentStationId());
            break;
          
          case appConstants.REMOVE_ALL_BUTTON:
            console.log("=====>  remove all buttons clicked====>");
            data['name'] = 'all_totes_removed';
            data["data"] = null;
            data["screen_id"] = screenId;
            ActionCreators.postDataToInterface(data);
            break;
          
          case appConstants.REMOVE_ALL_BUTTON_WITHOUT_TOTE_MODAL:
              this.showModal(
                appConstants.PICK_FRONT,
                appConstants.REMOVE_ALL_BUTTON_CONFIRMATION
              );
              break;
        
          case appConstants.CANCEL_REMOVE_ALL_ENTITIES:
            // data['event_name'] = appConstants.CANCEL_BOX_FULL_REQUEST;
            // data['event_data'] = null;
            // ActionCreators.postDataToInterface(data);
            closeModalBox();
            break;

          case appConstants.CONFIRM_REMOVE_ALL_ENTITIES:
            data["name"] = "confirm_clicked";
            data["data"] = null;
            data["screen_id"] = screenId;
            ActionCreators.postDataToInterface(data, mainstore.getCurrentStationId());
            closeModalBox();
            break;

          case appConstants.CONFIRM_LOGOUT_REQUEST:
            data['event_name'] = appConstants.CONFIRM_REPRINT_LAST_REQUEST;
            if (mainstore.getLogoutState() === "false" || mainstore.getLogoutState() === false) {
              return false;
            }else {
              ActionCreators.logoutSession(true);
            }
            break;
          default:
            return true;
        }
        break;
      
      default:
        return true;
    }
  },
  showModal: function (data, type) {
    ActionCreators.showModal({
      data: data,
      type: type
    });
    $('.modal').modal();
  },
  render: function () {
    if (this.props.disabled == false)
      return (
        React.createElement("a", {
          className: 
            this.props.color == 'orange'
              ? 'custom-button orange '
              : 'custom-button black ', 
          
          onClick: this.performAction.bind(
            this,
            this.props.module,
            this.props.action,
            this.props.screenId
          )
        }, 
          ' ', 
          this.props.text, ' '
        )
      );
    else
      return (
        React.createElement("a", {
          className: 
            this.props.color == 'orange'
              ? 'custom-button disabled orange'
              : 'custom-button disabled black'
          
        }, 
          ' ', 
          this.props.text, ' '
        )
      );
  }
});

module.exports = Button1;

},{"../../actions/CommonActions":181,"../../constants/appConstants":242,"../../stores/mainstore":259,"react":179}],189:[function(require,module,exports){
var React = require('react');
var ActionCreators = require('../../actions/CommonActions');
var appConstants = require('../../constants/appConstants');
//var AuditStore = require('../../stores/AuditStore');

var IconButton = React.createClass({displayName: "IconButton",
    showModal: function(data,type) {
         ActionCreators.showModal({
            data:data,
            type:type
         });
         $('.modal').modal();
         return false;
     },
    performAction:function(module,action){
        var data = {
                    "event_name": "",
                    "event_data": {},
                    "source": "ui"
                };
        switch(module){
            case appConstants.AUDIT:
                switch(action){
                    case appConstants.FINISH_BOX:
                        data["event_name"] = "audit_actions";
                        data["event_data"]["type"] = "finish_box";
                        ActionCreators.postDataToInterface(data);
                        break;    
                     default:
                        return true; 
                }
            break;
             default:
                return true; 
        }
    },
    render: function() { 
            if(this.props.type == "finish" && this.props.status == true)
                return (
                    React.createElement("div", {className: "success-icon", onClick: this.performAction.bind(this,this.props.module,this.props.action)}, 
                        React.createElement("div", {className: "border-glyp"}, 
                            React.createElement("span", {className: "glyphicon glyphicon-ok-circle"})
                        )
                    )
                );
            else if(this.props.type == "finish" && this.props.status == false)
                return (
                    React.createElement("div", {className: "success-icon disabled"}, 
                        React.createElement("div", {className: "border-glyp"}, 
                            React.createElement("span", {className: "glyphicon glyphicon-ok-circle"})
                        )
                    )
                );
            else if(this.props.type == "edit")
                return (
                React.createElement("div", {className: "edit-icon", onClick: this.performAction.bind(this,this.props.module,this.props.action)}, 
                        React.createElement("div", {className: "border-glyp"}, 
                            React.createElement("span", {className: "glyphicon glyphicon-pencil"})
                        )
                )
            );     
            else if(this.props.type == "action" )
                return (
               React.createElement("div", {className: "audit-actions"}, 
                        React.createElement("button", {disabled: !this.props.status, className: "audit-action done", type: "button", onClick: this.performAction.bind(this,this.props.module,this.props.action)}, _("Done"))
                    )
            );                 
    }
});

module.exports = IconButton;

},{"../../actions/CommonActions":181,"../../constants/appConstants":242,"react":179}],190:[function(require,module,exports){
var React = require('react');
var utils = require('../utils/utils.js');
var Button1 = require("./Button/Button");
var appConstants = require('../constants/appConstants');

var CheckList = React.createClass({displayName: "CheckList",

    getTableRows: function () {
        var checklistData = this.props.checklistData;
        var checklistIndex = this.props.checklistIndex;
        var eachRow = [];
        var dataToDisplay = ""; var iconToDisplay = ""; var applyClass = "boldText"; var localeInd = 0;
        if (checklistData) {
            var selectedLocale = utils.getCurrentLang();
            checklistData.map(function (key, index) {
                if (checklistData[index]["action_parameters"]) {
                    let findOutLocale = (checklistData[index]["action_parameters"]["display_data"]).map(function (keyArray, indexValue) {
                        if (keyArray.locale === selectedLocale) {
                            localeInd = indexValue;
                        }
                    })
                }

                if (index === parseInt(checklistIndex, 10)) {
                    dataToDisplay = checklistData[index]["action_results"] && checklistData[index]["action_results"]["value"] ? checklistData[index]["action_results"]["value"] : ""
                    if (checklistData[index]["action_results"] && checklistData[index]["action_results"]["errors"] && checklistData[index]["action_results"]["errors"] !== null) /* error is present */ {
                        iconToDisplay = React.createElement("img", {className: "img-responsive", src: "assets/images/error_checklist.png"});
                    }
                    else {
                        iconToDisplay = React.createElement("img", {className: "img-responsive", src: "assets/images/current_checklist.png"});
                    }
                }
                else if (index < parseInt(checklistIndex, 10)) {
                    if (checklistData[index]["action_results"] && checklistData[index]["action_results"]["errors"] && checklistData[index]["action_results"]["errors"] !== null) /* error is present */ {
                        dataToDisplay = "";
                        iconToDisplay = React.createElement("img", {className: "img-responsive", src: "assets/images/error_checklist.png"});
                    }
                    else {
                        dataToDisplay = checklistData[index]["action_results"]["value"];
                        iconToDisplay = React.createElement("img", {className: "img-responsive", src: "assets/images/done_checklist.png"});
                    }
                }
                else {
                    dataToDisplay = checklistData[index]["action_results"] && checklistData[index]["action_results"]["value"] ? checklistData[index]["action_results"]["value"] : "";
                    iconToDisplay = React.createElement("img", {className: "img-responsive", src: "assets/images/toBeDone_checklist.png"});
                    applyClass = "greyText";
                }
                eachRow.push(
                    React.createElement("tr", null, 
                        React.createElement("td", {className: applyClass}, " ", checklistData[index]["action_parameters"] ? checklistData[index]["action_parameters"]["display_data"][localeInd].display_name + ": " + dataToDisplay : dataToDisplay, " "), 
                        React.createElement("td", {className: "value"}, " ", iconToDisplay, " ")
                    )
                );
            });
            return eachRow;
        }
    },

    render: function () {
        var skipDockingButton;
        var tableData = this.getTableRows();
        var skipDockingBtnEnable = this.props.skipDockingBtnStatus ? this.props.skipDockingBtnStatus : "";
        if (skipDockingBtnEnable) {
            skipDockingButton = (React.createElement("div", {className: "btn-actions-skip-docking"}, 
                React.createElement(Button1, {disabled: !skipDockingBtnEnable, 
                    text: _("Skip docking"), 
                    module: appConstants.PICK_FRONT, 
                    action: appConstants.SKIP_DOCKING, 
                    color: "black"})
            ));
        }
        else {
            skipDockingButton = "";
        }

        return (
            React.createElement("div", {className: "table-wrapper-checklist"}, 
                React.createElement("div", {className: "tableHeader"}, this.props.checklistHeader ? this.props.checklistHeader + ":" : ""), 
                React.createElement("table", {className: "tableWrapper"}, 
                    React.createElement("tbody", null, 
                        tableData
                    )
                ), 
                skipDockingButton
            )
        );
    }
});

module.exports = CheckList;

},{"../constants/appConstants":242,"../utils/utils.js":260,"./Button/Button":188,"react":179}],191:[function(require,module,exports){
var React = require('react');
var allresourceConstants = require('../constants/resourceConstants');

var CurrentMtu = React.createClass({displayName: "CurrentMtu",
    render:function(){  
        return (
                React.createElement("div", {className: "current-mtu-wrapper"}, 
                    React.createElement("div", {className: "current-mtu-index"}, " ", this.props.currentMtu, " "), 
                    React.createElement("div", {className: "current-mtu-text"}, " ", _(allresourceConstants.CURRENT_MTU), " ")
                )
            );
    }
});

module.exports = CurrentMtu;

},{"../constants/resourceConstants":244,"react":179}],192:[function(require,module,exports){
var React = require('react');
var Header = require('./Header');
var allresourceConstants = require('../constants/resourceConstants');

var CurrentSlot = React.createClass({displayName: "CurrentSlot",
	render:function(){	
		var range='';
		var slotArr=this.props.slotDetails ||[];
		finalArray=[],finalString='';
		if(slotArr.length){
			slotArr.forEach( function (arrayItem)
				{
					var arrdata=arrayItem.split('.');
					var splitData=arrdata[arrdata.length-2]+'.'+arrdata[arrdata.length-1];
					finalArray.push(splitData);
				});
		range=finalArray.join(',');
		}		
		return (
				React.createElement("div", {className: "currentSlotWrapper"}, 
					React.createElement("div", {className: "slotRange"}, range), 
					React.createElement("div", {className: "slotFooter"}, " ", _(allresourceConstants.CURR_SLOT), " ")
				)
						
					
				
			);
	}
});

module.exports = CurrentSlot;

},{"../constants/resourceConstants":244,"./Header":197,"react":179}],193:[function(require,module,exports){
var React = require('react');[]
var ExceptionHeader = require('./ExceptionHeader');
var ExceptionList = require('./ExceptionList');

var Exception = React.createClass({displayName: "Exception", 
    render: function() {
        return (
            React.createElement("div", {className: "exception"}, 
                React.createElement(ExceptionHeader, {data: _("EXCEPTION")}), 
                React.createElement(ExceptionList, {data: this.props.data.list, action: this.props.action})
            )
        );
    },
});

module.exports = Exception;

},{"./ExceptionHeader":194,"./ExceptionList":195,"react":179}],194:[function(require,module,exports){
var React = require('react');

var ExceptionHeader = React.createClass({displayName: "ExceptionHeader", 
    
    render: function() {
        return (
            React.createElement("div", {className: "exception-header"}, 
               this.props.data
      		)
        );
    },
});

module.exports = ExceptionHeader;

},{"react":179}],195:[function(require,module,exports){
var React = require('react');
var ExceptionListItem = require('./ExceptionListItem');

var ExceptionList = React.createClass({displayName: "ExceptionList", 
    _exceptionListItems:[],
    getExceptionListItems:function(){
    	var comp =[];
        var self = this;
    	this.props.data.map(function(value,index){
    		comp.push((React.createElement(ExceptionListItem, {data: value, action: self.props.action})));
    	})
    	this._exceptionListItems = comp;
    },
    render: function() {
    	this.getExceptionListItems();
        return (
            React.createElement("div", {className: "exception-list"}, 
               this._exceptionListItems
            )
        );
    },
});

module.exports = ExceptionList;

},{"./ExceptionListItem":196,"react":179}],196:[function(require,module,exports){
var React = require('react');
var CommonActions = require('../../actions/CommonActions');
var mainstore = require('../../stores/mainstore');

function getState(){
  return {
      navMessages : mainstore.getServerMessages()
  }
}

var ExceptionListItem = React.createClass({displayName: "ExceptionListItem", 
	_component:[],
  getInitialState: function(){
    return getState();
  },
	setCurrentException:function(data){
     var data1 = {
        "event_name": "",
        "event_data": {},
        "source": "ui"
    };
    data1["event_name"] = "exception";
    data1["event_data"]["event"] = data["event"];
    CommonActions.postDataToInterface(data1);
		CommonActions.setActiveException(data.text);
	},

  /**
   * gets the header message for the list item.
   * @return {String} Text message to be displayed for the exception item
   * */
  _getHeaderMessage: function (){
     var server_message = this.props.data.text;
      var navMessagesJson = this.state.navMessages;
      var errorCode = this.props.data.exception_id;
      var message_args  = this.props.data.details.slice(0);
   if(navMessagesJson != undefined){
    message_args.unshift(navMessagesJson[errorCode]);
    if(message_args[0] == undefined){
      return server_message;  
                            }else{
                            var header_message = _.apply(null, message_args);
                            return header_message;
                            }
                        }
  },
 /**
  * creates the div needed for the exception list item and returns it
  * @return {<div>} div which is needed to be displayed
  */
  _getExceptionItemDiv: function (){

    var clickHandler = null;
    if(this.props.action!=undefined && this.props.action == true){
      clickHandler = this.setCurrentException.bind(this,this.props.data);
    }

    return(
        React.createElement("div", {className: this.props.data.selected==true?"exception-list-item selected":
          (this.props.data.disabled === true?"exception-list-item disabled":"exception-list-item"), 
             onClick: clickHandler}, 
               this._getHeaderMessage()
                
        ));
    
  },

  render: function() {
    var exceptionItemDiv = this._getExceptionItemDiv();
    
    return  exceptionItemDiv;
    },
});

module.exports = ExceptionListItem;

},{"../../actions/CommonActions":181,"../../stores/mainstore":259,"react":179}],197:[function(require,module,exports){
var React = require("react")
var allSvgConstants = require("../constants/svgConstants")
var CommonActions = require("../actions/CommonActions")
var mainstore = require("../stores/mainstore")
var virtualKeyBoard_header = null
var appConstants = require("../constants/appConstants")

function getState() {
  return {
    spinner: mainstore.getSpinnerState(),
    systemIsIdle: mainstore.getSystemIdleState(),
    logoutState: mainstore.getLogoutState(),
    scanAllowed: mainstore.getScanAllowedStatus(),
    ppsMode: mainstore.getPpsMode(),
    ppsId: mainstore.getSeatName()
  }
}
var Header = React.createClass({displayName: "Header",
  virtualKeyBoard: "",
  exceptionMenu: "",
  searchMenu: "",
  getInitialState: function() {
    return getState()
  },
  openKeyboard: function() {
    var currentStationId = mainstore.getCurrentStationId();
    var screenId = mainstore.getScreenId();
    $("#actionMenu").hide()
    $(".form-control").blur()
    virtualKeyBoard_header = $("#barcode").keyboard({
      layout: "custom",
      customLayout: {
        default: [
          "! @ # $ % ^ & * + _",
          "1 2 3 4 5 6 7 8 9 0 {b}",
          "q w e r t y u i o p",
          "a s d f g h j k l",
          "{shift} z x c v b n m . {shift}",
          "{space}",
          "{a} {c}"
        ],
        shift: [
          "( ) { } [ ] = ~ ` -",
          "< > | ? / \" : ; , ' {b}",
          "Q W E R T Y U I O P",
          "A S D F G H J K L",
          "{shift} Z X C V B N M . {shift}",
          "{space}",
          "{a} {c}"
        ]
      },
      css: {
        container:
          "ui-widget-content ui-widget ui-corner-all ui-helper-clearfix custom-keypad"
      },
      reposition: true,
      alwaysOpen: false,
      initialFocus: true,
      position: {
        of: $(".keyboard-actions"),
        my: "center top",
        at: "center top"
      },
      visible: function(e, keypressed, el) {
        el.value = ""
      },
      accepted: function(e, keypressed, el) {
        if (e.target.value === "") {
        } else {
          var data = {
            "name": "scanned",
            "data": e.target.value.trim(),
            "screen_id": mainstore.getScreenId()
          }
          CommonActions.postDataToInterface(data, currentStationId)
        }
      }
    })
    $("#barcode")
      .data("keyboard")
      .reveal()
  },
  logoutSession: function() {
    $("#actionMenu").hide()
    if (
      mainstore.getLogoutState() === "false" ||
      mainstore.getLogoutState() === false
    ) {
      return false
    } else {
      CommonActions.logoutSession(true)
    }
  },
  componentDidMount: function() {},
  enableException: function() {
    CommonActions.enableException(true)
    var data = {}
    data["code"] = null
    data["level"] = "error"
    CommonActions.generateNotification(data)
    $("#actionMenu").hide()
  },
  enableSearch: function() {
    CommonActions.updateSeatData([], "itemSearch")
    $("#actionMenu").hide()
  },
  showMenu: function() {
    $("#actionMenu").toggle()
    $(".subMenu").hide()
  },
  refresh: function() {
    location.reload()
  },
  componentWillMount: function() {
    mainstore.addChangeListener(this.onChange)
  },
  onChange: function() {
    if (virtualKeyBoard_header != null) {
      virtualKeyBoard_header.getkeyboard().close()
    }
    this.setState(getState())
  },
  getExceptionMenu: function() {
    var x = "",
      screenId = mainstore.getScreenId()
    for (var prop in appConstants) {
      if (appConstants.hasOwnProperty(prop)) {
        if (appConstants[prop] == screenId) {
          x = prop
          break
        }
      }
    }
    if (
      x.search("EXCEPTION") != -1 ||
      screenId === appConstants.PUT_FRONT_EXCEPTION_DAMAGED_ENTITY ||
      screenId === appConstants.PICK_FRONT_EXCEPTION_DAMAGED_ENTITY ||
      screenId === appConstants.PUT_BACK_PHYSICALLY_DAMAGED_ITEMS ||
      screenId === appConstants.PUT_FRONT_EXCESS_ITEMS_PPSBIN ||
      screenId === appConstants.PICK_FRONT_MISSING_DAMAGED_UNSCANNABLE_ENTITY ||
      screenId === appConstants.PICK_FRONT_IRT_BIN_CONFIRM ||
      screenId === appConstants.PUT_FRONT_MISSING_DAMAGED_UNSCANNABLE_ENTITY ||
      screenId === appConstants.PUT_FRONT_ITEMS_TO_IRT_BIN
    )
      this.exceptionMenu = ""
    else if (mainstore.getExceptionAllowed().length > 0)
      this.exceptionMenu = (
        React.createElement("div", {className: "actionItem", onClick: this.enableException}, 
          _("Exception")
        )
      )
    else
      this.exceptionMenu = (
        React.createElement("div", {className: "actionItem disable"}, _("Exception"))
      )
  },
  getSearchItemMenu: function() {
    if (mainstore.orphanSearchAllowed()) {
      this.searchMenu = (
        React.createElement("div", {className: "actionItem", onClick: this.enableSearch}, 
          _("Item Search")
        )
      )
    }
  },

  peripheralData: function(type) {
    CommonActions.getPeriPheralData(type)
    $("#actionMenu").hide()
  },
  utilityMenu: function() {
    $(".subMenu").toggle()
    //CommonActions.displayperipheralMenu();
  },
  notifyTower: function() {
    var data = {
      pps_id: this.state.ppsId
    }
    CommonActions.postDataToTower(data)
  },
  render: function() {
    var logoutClass
    var cssClass
    var disableScanClass
    var invoiceFlow =
      mainstore.getScreenId() === appConstants.PUT_BACK_INVOICE ? true : false
      if (this.state.scanAllowed == true) {
        cssClass = "keyboard-actions";
        disableScanClass = "";
      } else {
        cssClass = "keyboard-actions hide-manual-barcode";
        disableScanClass = "disableScanClass";
      }
    //this.getExceptionMenu()
    //this.getSearchItemMenu()
    // if (this.state.spinner || this.state.systemIsIdle || invoiceFlow) {
    //   cssClass = "keyboard-actions hide-manual-barcode"
    // } else {
    //   cssClass = "keyboard-actions"
    // }
    // if (
    //   mainstore.getLogoutState() === "false" ||
    //   mainstore.getLogoutState() === false
    // ) {
    //   logoutClass = "actionItem disable"
    // } else {
    //   logoutClass = "actionItem"
    // }
    
    return (
      React.createElement("div", null, 
        React.createElement("div", {className: "head"}, 
          React.createElement("div", {className: "logo"}, 
            React.createElement("img", {src: allSvgConstants.logo, style: { width: "142px"}})
          ), 
          /* <div className="ppsMode">
            {" "}
            PPS Mode : {this.state.ppsMode.toUpperCase()}{" "}
          </div> */
          React.createElement("div", {className: cssClass, onClick: this.openKeyboard}, 
            React.createElement("img", {
              src: allSvgConstants.scanHeader, 
              className: disableScanClass}
            ), 
            React.createElement("input", {id: "barcode", type: "text", value: ""})
          ), 
          React.createElement("div", {className: "header-actions", onClick: this.showMenu}, 
            React.createElement("img", {src: allSvgConstants.menu})
          )
        ), 
        React.createElement("div", {className: "actionMenu", id: "actionMenu"}, 
          /* {this.exceptionMenu} */
          /* <div className="actionItem" onClick={this.utilityMenu}>
            {_("Utility")}
            <div
              className="subMenu"
              onClick={this.peripheralData.bind(this, "pptl")}
            >
              {_("PPTL Management")}
            </div>
            <div
              className="subMenu"
              onClick={this.peripheralData.bind(this, "barcode_scanner")}
            >
              {_("Scanner Management")}
            </div>
          </div> */
          /* {this.searchMenu}
          <div className={logoutClass} onClick={this.notifyTower}>
            {_("Call for Help")}
          </div> */
          React.createElement("div", {className: logoutClass, onClick: this.logoutSession}, 
            _("Logout")
          )
        )
      )
    )
  }
})

module.exports = Header

},{"../actions/CommonActions":181,"../constants/appConstants":242,"../constants/svgConstants":245,"../stores/mainstore":259,"react":179}],198:[function(require,module,exports){
var React = require('react');
var LinkedStateMixin = require('react-addons-linked-state-mixin');
var mainstore = require('../../stores/mainstore');
var loginstore = require('../../stores/loginstore');
var CommonActions = require('../../actions/CommonActions');
var Operator = require('../Operator');
var allSvgConstants = require('../../constants/svgConstants');
var resourceConstants = require('../../constants/resourceConstants');
var utils = require('../../utils/utils.js');
var appConstants = require('../../constants/appConstants');
var configConstants = require('../../constants/configConstants');


var _seat_name = null;
var _mode = null;
var _role = null;

function getState() {
  console.log("====> + LoginPage.js ==> getState () ");
  return {
    flag: loginstore.getFlag(),
    stationList: loginstore.stationList(),
    username: '',
    password: '',
    showError: loginstore.getErrorMessage(),
    getLang: loginstore.getLang(),
    getCurrentLang: loginstore.getCurrentLang(),
  };
}

var LoginPage = React.createClass({displayName: "LoginPage",
  mixins: [LinkedStateMixin],
  getInitialState: function() {
    return getState();
  },

  componentWillMount: function() {
    console.log("====> + LoginPage.js ==> componentWillMount () ");
    virtualKeyBoard_login = $('#username, #password').keyboard({
      layout: 'custom',
      customLayout: {
        default: [
          '! @ # $ % ^ & * + _',
          '1 2 3 4 5 6 7 8 9 0 {b}',
          'q w e r t y u i o p',
          'a s d f g h j k l',
          '{shift} z x c v b n m . {shift}',
          '{space}',
          '{a} {c}'
        ],
        shift: [
          '( ) { } [ ] = ~ ` -',
          '< > | ? / " : ; , \' {b}',
          'Q W E R T Y U I O P',
          'A S D F G H J K L',
          '{shift} Z X C V B N M . {shift}',
          '{space}',
          '{a} {c}'
        ]
      },
      css: {
        container:
          'ui-widget-content ui-widget ui-corner-all ui-helper-clearfix custom-keypad'
      },
      reposition: true,
      alwaysOpen: false,
      initialFocus: true,
      visible: function(e, keypressed, el) {
        el.value = '';
      },

      accepted: function(e, keypressed, el) {
        var usernameValue = document.getElementById('username').value;
        var passwordValue = document.getElementById('password').value;
        if (
          usernameValue != null &&
          usernameValue != '' &&
          passwordValue != null &&
          passwordValue != ''
        ) {
          $('#loginBtn').prop('disabled', false);
        } else {
          $('#loginBtn').prop('disabled', true);
        }
      }
    });
  },

  componentDidMount: function() {
    console.log("====> + LoginPage.js ==> componentDidMount () ");
    var self = this;
    $("#loginBtn").hide();

    /* if enter key is hit from keyboard, do NOT call the API and vice-versa */
    $('body').on('keypress', function(e) {
      if (e.which === 13) {
        var hiddenTextValue = document.getElementById('hiddenText').value;
        if (hiddenTextValue.trim()) {
          self.handleLogin();
          document.getElementById('hiddenText').value = ''; // empty the previous scanned value
        }
      }
    });

    /* Shifting focus to hiddenText if user clicks/taps on any other place other than input selectors */
    $('body').on('click', function(e) {
      var currentFocusedElement = document.activeElement.tagName;
      if (currentFocusedElement === 'BODY') {
        if (self.refs.hiddenText) {
          self.refs.hiddenText.focus();
        }
      }
    });

    mainstore.addChangeListener(this.onChange);
    loginstore.addChangeListener(this.onChange);

    // <START> 
    /*  condition to Auto login on page REFRESH, before session expiration */ 
    if(sessionStorage.getItem("stationId")){
      CommonActions.webSocketConnection(sessionStorage.getItem("stationId"))
    }
    // <END>

     // get list of Station Ids
     CommonActions.listSeats(); 
    
    // CommonActions.setLanguage(); //Dispatch setLanguage action
    // if (this.state.getLang) {
    //   CommonActions.changeLanguage(this.state.getLang);
    // } else if (this.state.getCurrentLang) {
    //   CommonActions.changeLanguage(this.state.getCurrentLang);
    // }

    virtualKeyBoard_login = $('#username, #password').keyboard({
      layout: 'custom',
      customLayout: {
        default: [
          '! @ # $ % ^ & * + _',
          '1 2 3 4 5 6 7 8 9 0 {b}',
          'q w e r t y u i o p',
          'a s d f g h j k l',
          '{shift} z x c v b n m . {shift}',
          '{space}',
          '{a} {c}'
        ],
        shift: [
          '( ) { } [ ] = ~ ` -',
          '< > | ? / " : ; , \' {b}',
          'Q W E R T Y U I O P',
          'A S D F G H J K L',
          '{shift} Z X C V B N M . {shift} ',
          '{space}',
          '{a} {c}'
        ]
      },
      css: {
        container:
          'ui-widget-content ui-widget ui-corner-all ui-helper-clearfix custom-keypad'
      },
      reposition: true,
      alwaysOpen: false,
      initialFocus: true,

      visible: function(e, keypressed, el) {
        el.value = '';
      },

      accepted: function(e, keypressed, el) {
        var usernameValue = document.getElementById('username').value;
        var passwordValue = document.getElementById('password').value;
        if (
          usernameValue != null &&
          usernameValue != '' &&
          passwordValue != null &&
          passwordValue != ''
        ) {
          $('#loginBtn').prop('disabled', false);
        } else {
          $('#loginBtn').prop('disabled', true);
        }
      }
    });
  },
  
  onChange: function() {
    console.log("===================> componentWillMount () ");
    this.setState(getState());
  },

  componentDidUpdate: function() {
    if (this.refs.hiddenText) {
      this.refs.hiddenText.focus();
    }
  },

  componentWillUnmount: function() {
    mainstore.removeChangeListener(this.onChange);
    loginstore.removeChangeListener(this.onChange);
  },

  handleLogin: function() {
    console.log("===================> handlelOgin () ");
    var _self = this;
    if (_seat_name == null) {
      _seat_name = this.refs.seat_name.value;
    }
    var data = {
      data_type: 'auth',
      data: {
        username: _self.refs.username.value,
        password: _self.refs.password.value,
        seat_name: _seat_name,
        //role: _role
      }
    };
      utils.generateSessionId(data);
      CommonActions.login(data);
  },

  disableLoginButton: function() {
    $('#loginBtn').prop('disabled', true);
  },
  changeLanguage: function() {
    CommonActions.changeLanguage(this.refs.language.value);
    this.disableLoginButton();
  },
  removeNotify: function() {
    $('.errorNotify').css('display', 'none');
  },

  onStationIdChange: function(){
    console.log("=======> this.state.stationid is " + this.state.stationId)
    console.log(" =======> this.refs.seat_name is =======>" + this.refs.seat_name.value)
    if(this.refs.seat_name.value !== "0"){
      $("#loginBtn").show();
      CommonActions.webSocketConnection(this.state.stationId);
    }
    else{
      $("#loginBtn").hide();
    }
    

    //save the current station id
    CommonActions.setCurrentStationId(this.state.stationId);

    // create a web-socket connection for current station id
    // if (
    //   this.state.stationId !== "0"  // select station id
    // ) {
    //   CommonActions.webSocketConnection(this.state.stationId); 
    //   $('#loginBtn').prop('disabled', false);
    // } else {
    //   $('#loginBtn').prop('disabled', true);
    // }
  },

  ChangeStationId: function(e){
    this.setState({stationId: e.target.value}, this.onStationIdChange);
  },

  render: function() {
    console.log("====> + LoginPage.js ==> render () ");

    
    var currentDate = new Date();
    var currentYear = currentDate.getFullYear();
    if (this.state.stationList.length > 0) {
      var parseSeatID, ppsOption, showTiltButton;
      
      /******** list of stations **********/
          //var stationList = [1];
          seatData = this.state.stationList.map(function(eachItem, index){
            return(
              React.createElement("option", {key: 'station' + index, value: eachItem}, 
              "Station Id ", eachItem
            )
            );
          })
          seatData.unshift(React.createElement("option", {key: 'station', value: 0}, "Select Station Id"));
       /***********************/
       
      /******************************* */
      // seatData = this.state.stationList.map(function(data, index) {
      //   if (data.hasOwnProperty('seat_type')) {
      //     parseSeatID = null;
      //     return (
      //       <option key={'pps' + index} value={data.seat_name}>
      //         PPS {data.seat_name.split('_').join(' ')}
      //       </option>
      //     );
      //   } else {
      //     /* only VALID when in production */
      //     parseSeatID = data.split('_');
      //     _seat_name = data;
      //     seat_name = parseSeatID[0] + ' ' + parseSeatID[1];
      //     if (seat_name.charAt(seat_name.length - 1) == '#') {
      //       seat_name = seat_name.substr(0, seat_name.length - 1);
      //     }
      //     if (_seat_name.charAt(_seat_name.length - 1) == '#') {
      //       _seat_name = _seat_name.substr(0, _seat_name.length - 1);
      //     }
      //     return (
      //       <header className='ppsSeat' key={'pps' + index}>
      //         PPS {data.split('_').join(' ')}
      //       </header>
      //     );
      //   }
      // });
      /*********************/

      if (parseSeatID != null) {
        ppsOption = (
          React.createElement("span", {style: { 'font-size': '24px', 'font-weight': '400'}}, 
            seatData
          )
        );
        showTiltButton = '';
      } else {
        _seat_name = null;
        ppsOption = (
          React.createElement("select", {
            value: _seat_name, 
            onChange: this.ChangeStationId, 
            className: false ? 'selectPPS error' : 'selectPPS', 
            ref: "seat_name"
          }, 
            seatData
          )
        );
        showTiltButton = React.createElement("span", {className: "tiltButton"});
      }
    } else {
    }
    // var _languageDropDown = (
    //   <div className='selectWrapper'>
    //     <select
    //       className='selectLang'
    //       value={this.state.getCurrentLang}
    //       ref='language'
    //       onChange={this.changeLanguage}
    //     >
    //       <option value='en-US'>{'English (United States)'}</option>
    //       <option value='ja-JP'>{'日本語'}</option>
    //       <option value='de-DE'>{'Deutsche'}</option>
    //       <option value='zh-ZH'>{'中文'}</option>
    //       <option value='fr-FR'>{'Français'}</option>
    //       <option value='es-ES'>{'Español'}</option>
    //       <option value='nl'>{'Dutch'}</option>
    //     </select>
    //     <span className='tiltButton' />
    //   </div>
    // );

    

    if (this.state.flag === false) {
      if (this.state.showError != null) {
        if (_mode === appConstants.SCANNER) {
          scannerErrorClass = 'scannerErrorMsg showErr';
          rightUpper = 'rightUpper showErr';
          leftUpper = 'leftUpper showErr';
          rightBelow = 'rightBelow showErr';
          leftBelow = 'leftBelow showErr';
          plusIconClass = 'plusIcon showErr';
          errorClass = 'ErrorMsg';
        } else {
          errorClass = 'ErrorMsg showErr';
          scannerErrorClass = 'scannerErrorMsg';
          rightUpper = 'rightUpper';
          leftUpper = 'leftUpper';
          rightBelow = 'rightBelow';
          leftBelow = 'leftBelow';
          plusIconClass = 'plusIcon';
        }
        this.disableLoginButton();
      } else {
        // when user lands on the login page, don't show any error kind of error
        errorClass = 'ErrorMsg';
        scannerErrorClass = 'scannerErrorMsg';
        rightUpper = 'rightUpper';
        leftUpper = 'leftUpper';
        rightBelow = 'rightBelow';
        leftBelow = 'leftBelow';
        plusIconClass = 'plusIcon';
      }

      //if (isScannerLoginEnabled) {
        //var keyboardLoginClass = 'keyboardLogin'; // show keyboard login + scanner login
      //} else {
        var keyboardLoginClass = 'keyboardLogin alignCenter'; // show keyboard login only
      //}

      return (
        React.createElement("div", {className: "containerLogin"}, 
          React.createElement("header", {className: "heading"}, 
            React.createElement("div", {className: "logo"}, 
              React.createElement("img", {className: "imgLogo", src: allSvgConstants.logo})
            )
            /* <div className='languageDropDown'>
              <span className='langText'>{_(appConstants.LANGUAGE)}</span>
              {this.state.getLang ? '' : _languageDropDown}
            </div> */
          ), 
          React.createElement("div", {className: "subHeading"}, 
            React.createElement("div", {className: "langText"}, 
              _(appConstants.LOGINTO) + ' ' + appConstants.EXTRACTION_UI
            ), 
            React.createElement("div", {className: "selectWrapper"}, 
              ppsOption, 
              showTiltButton
            )
          ), 

          React.createElement("main", null, 
            React.createElement("div", {className: keyboardLoginClass}, 
              React.createElement("div", {className: "unameContainer"}, 
                React.createElement("label", {className: "usernmeText"}, 
                  _(resourceConstants.USERNAME)
                ), 
                React.createElement("div", {
                  className: 
                    this.state.showError && _mode === appConstants.KEYBOARD
                      ? 'textboxContainer error'
                      : 'textboxContainer'
                  
                }, 
                  React.createElement("span", {className: "iconPlace"}), 
                  React.createElement("input", {
                    type: "text", 
                    className: "form-control", 
                    id: "username", 
                    placeholder: _('Enter username'), 
                    ref: "username", 
                    valueLink: this.linkState('username')}
                  )
                )
              ), 

              React.createElement("div", {className: "passContainer"}, 
                React.createElement("label", {className: "usernmeText"}, 
                  _(resourceConstants.PASSWORD)
                ), 
                React.createElement("div", {
                  className: 
                    this.state.showError && _mode === appConstants.KEYBOARD
                      ? 'textboxContainer error'
                      : 'textboxContainer'
                  
                }, 
                  React.createElement("span", {className: "iconPlace"}), 
                  React.createElement("input", {
                    type: "password", 
                    className: "form-control", 
                    id: "password", 
                    placeholder: _('Enter password'), 
                    ref: "password", 
                    valueLink: this.linkState('password')}
                  )
                ), 
                React.createElement("div", {className: errorClass}, 
                  React.createElement("span", null, _(this.state.showError))
                )
              ), 

              React.createElement("div", {className: "buttonContainer"}, 
                React.createElement("input", {
                  type: "button", 
                  className: "loginButton", 
                  id: "loginBtn", 
                  onClick: this.handleLogin, 
                  value: _('LOGIN')}
                )
              )
            )

            /* {isScannerLoginEnabled ? _dividerWrapper : ''}

            {isScannerLoginEnabled ? (
              <div className='scanIdLogin'>
                <div className='outerDiv'>
                  <div className={rightUpper} />
                  <div className={leftUpper} />
                  <div className={rightBelow} />
                  <div className={leftBelow} />
                  <div className='scanLogo' />
                  <span className={plusIconClass}>&#43;</span>
                  <div style={{ fontSize: '2vh' }}>
                    {' '}
                    {_('Scan ID card to login.')}
                  </div>
                  <div className={scannerErrorClass}>
                    <span>{_(this.state.showError)}</span>
                  </div>
                </div>
              </div>
            ) : (
              ''
            )} */
            /* <input
              type='text'
              id='hiddenText'
              ref='hiddenText'
              style={{ width: '2px', opacity: '0' }}
            /> */
          ), 
          React.createElement("footer", null, "Copyright © ", currentYear, " GreyOrange Pte Ltd")
        )
      );
    } else {
      return (
        React.createElement("div", {className: "main"}, 
          React.createElement(Operator, null)
        )
      );
    }
  }
});

module.exports = LoginPage;

},{"../../actions/CommonActions":181,"../../constants/appConstants":242,"../../constants/configConstants":243,"../../constants/resourceConstants":244,"../../constants/svgConstants":245,"../../stores/loginstore":258,"../../stores/mainstore":259,"../../utils/utils.js":260,"../Operator":206,"react":179,"react-addons-linked-state-mixin":22}],199:[function(require,module,exports){
var React = require('react');
var mainstore = require('../../stores/mainstore');
var ModalHeader = require('./ModalHeader');
var PickFrontStore = require('../../stores/PickFrontStore');
var ModalFooter = require('./ModalFooter');
var Button1 = require('../Button/Button');
var appConstants = require('../../constants/appConstants');
var allSvgConstants = require('../../constants/svgConstants');
var NumericIndicator = require('../ProductDetails/NumericIndicator');
var bootstrap = require('bootstrap');
var jqueryPosition = require('jquery-ui/position');
var virtualkeyboard = require('virtual-keyboard');
var utils = require('../../utils/utils.js');
var component, title;

function getStateData(ths) {
  var modalType = mainstore.getModalType();
  var modalData = mainstore.getModalContent();
  //var ToteId= mainstore.getToteId()
  if (modalData) {
    for (let i = 0; i < modalData.length; i++) {
      if (
        modalData[i].type !== undefined &&
        modalData[i].product_sku !== undefined &&
        modalData[i].serial !== undefined &&
        modalData[i].quantity !== undefined
      ) {
        modalData[i] = {
          type: modalData[i].type,
          product_sku: modalData[i].product_sku,
          serial: modalData[i].serial,
          quantity: modalData[i].quantity
        };
        if (modalData[i].serial.length === 0) {
          modalData[i].serial = '--';
        } else {
          for (let j = 0; j < modalData[i].serial.length; j++) {
            if (modalData[i].serial[j].length > 10) {
              modalData[i].serial[j] =
                modalData[i].serial[j].slice(0, 5) +
                '...' +
                modalData[i].serial[j].slice(-5);
            }
          }
        }
      }
    }
  }
  loadComponent(modalType, modalData, ths);
  return {
    data: modalData,
    type: modalType
  };
}

function attachKeyboard(id) {
  virtualKeyBoard1 = $('#' + id).keyboard({
    layout: 'custom',
    customLayout: {
      default: [
        '! @ # $ % ^ & * + _',
        '1 2 3 4 5 6 7 8 9 0 {b}',
        'q w e r t y u i o p',
        'a s d f g h j k l',
        '{shift} z x c v b n m . {shift}',
        '{space}',
        '{a} {c}'
      ],
      shift: [
        '( ) { } [ ] = ~ ` -',
        '< > | ? / " : ; , \' {b}',
        'Q W E R T Y U I O P',
        'A S D F G H J K L',
        '{shift} Z X C V B N M . {shift}',
        '{space}',
        '{a} {c}'
      ]
    },
    css: {
      container:
        'ui-widget-content ui-widget ui-corner-all ui-helper-clearfix custom-keypad'
    },
    reposition: true,
    alwaysOpen: false,
    initialFocus: true,
    visible: function(e, keypressed, el) {
      el.value = '';
    },
    accepted: function(e, keypressed, el) {}
  });
  $('#' + id)
    .data('keyboard')
    .reveal();
}

function attachNumpad(id) {
  virtualKeyBoard1 = $('#' + id).keyboard({
    layout: 'custom',
    customLayout: {
      default: ['1 2 3', '4 5 6', '7 8 9', '. 0 {b}', '{a} {c}']
    },
    reposition: true,
    alwaysOpen: false,
    initialFocus: true,
    accepted: function(e, keypressed, el) {},
    visible: function(e, keypressed, el) {
      el.value = '';
    }
  });
  $('#' + id)
    .data('keyboard')
    .reveal();
}

function attachDateTime(id, toggleTime) {
  if (toggleTime === 'true' || toggleTime === true) {
    $('#' + id)
      .datetimepicker({ timepicker: toggleTime })
      .datetimepicker('show');
  } else {
    $('#' + id)
      .datetimepicker({ timepicker: toggleTime, format: 'Y/m/d' })
      .datetimepicker('show');
  }
}

function removeTextField() {
  $('.modal-body')
    .find('input:text')
    .val('');
}

function loadComponent(modalType, modalData, ths) {
  switch (modalType) {
    case 'product-detail':
      component = [];
      for (var key in modalData) {
        if (modalData.hasOwnProperty(key)) {
          component.push(
            React.createElement("div", {className: "row"}, 
              React.createElement("div", {className: "col-md-6 key"}, key), 
              React.createElement("div", {className: "col-md-6 value"}, modalData[key])
            )
          );
        }
      }
      title = _('Product Information');
      break;

    case 'bin-info':
      component = [];
      var headerArray = [];
      for (var key in modalData[0]) {
        if (modalData[0].hasOwnProperty(key)) {
          keys = mainstore.getServerMessages();
          key = keys[key];
          //component.push((<div className="col-md-4 heading">{key} </div>));
          headerArray.push(React.createElement("th", null, _(key)));
        }
      }
      var tr = [];
      modalData.map(function(value, index) {
        var rowData = [];
        var serialNumbers = [];
        for (var key in value) {
          if (value.hasOwnProperty(key)) {
            if (value[key].constructor.name === 'Array') {
              value[key].map(function(val, id) {
                serialNumbers.push(React.createElement("div", null, val));
              });
            }
            rowData.push(
              React.createElement("td", null, 
                value[key].constructor.name === 'Array'
                  ? serialNumbers
                  : value[key]
              )
            );
          }
        }
        tr.push(React.createElement("tr", null, rowData));
      });
      component.push(
        React.createElement("div", {className: "binInfoValue"}, 
          React.createElement("table", {className: "table"}, 
            React.createElement("thead", {className: "heading"}, 
              React.createElement("tr", null, headerArray)
            ), 
            React.createElement("tbody", null, tr)
          )
        )
      );
      title = _('Bin Info');

      break;

    case 'scan_bin_barcode':
      component = [];
      footer = [];
      component.push(
        React.createElement("div", null, 
          React.createElement("div", {className: "modalContent removeBorder"}, 
            React.createElement("div", {className: "image1"}, 
              React.createElement("img", {src: allSvgConstants.iconBar})
            ), 
            React.createElement("div", {className: "content1"}, _('Scan Bin Barcode')), 
            React.createElement("div", {className: "clearfix"})
          ), 
          React.createElement("div", {className: "modal-footer removeBorder"}, 
            React.createElement("div", {className: "buttonContainer center-block"}, 
              React.createElement(Button1, {
                disabled: false, 
                text: _('Cancel'), 
                module: appConstants.PICK_BACK, 
                action: appConstants.CANCEL_SCAN, 
                barcode: modalData.tote_barcode, 
                color: 'black'}
              )
            )
          )
        )
      );

      title = _('Associate tote with bin');
      break;
    case 'message':
      component = [];
      component.push(
        React.createElement("div", {className: "col-md-12 value"}, modalData['message'], " ")
      );
      component.push(
        React.createElement("div", {className: "extraEntity"}, 
          React.createElement(Button1, {
            disabled: false, 
            text: _('Confirm'), 
            module: appConstants.AUDIT, 
            action: appConstants.CLOSE_MODAL, 
            color: 'orange'}
          )
        )
      );
      title = _('Extra Entity Found');
      break;
    case 'pick_checklist':
      component = [];
      footer = [];
      rowData = [];
      title = _('Input Extra Details');
      var modalData = modalData;
      var rowData = modalData.checklist_data.map(function(data, index) {
        serial = index;
        if (
          modalData.checklist_index === index + 1 ||
          (modalData.checklist_index === 'all' &&
            index < mainstore.scanDetails()['current_qty'])
        ) {
          var d = data.map(function(data1, index1) {
            var keyvalue = Object.keys(data1);
            var inputBoxValue = data1[keyvalue]['value'];
            if (
              modalData.checklist_data[index][index1][keyvalue[0]].Format ==
                'Integer' ||
              modalData.checklist_data[index][index1][keyvalue[0]].Format ==
                'Float'
            ) {
              var inputBox = (
                React.createElement("input", {
                  className: "center-block", 
                  type: "text", 
                  id: 'checklist_field' + index1 + '-' + index, 
                  value: inputBoxValue, 
                  onClick: attachKeyboard.bind(
                    this,
                    'checklist_field' + index1 + '-' + index
                  )}
                )
              );
            } else if (
              modalData.checklist_data[index][index1][keyvalue[0]].Format ==
              'String'
            ) {
              var inputBox = (
                React.createElement("input", {
                  className: "center-block", 
                  type: "text", 
                  id: 'checklist_field' + index1 + '-' + index, 
                  value: inputBoxValue, 
                  onClick: attachKeyboard.bind(
                    this,
                    'checklist_field' + index1 + '-' + index
                  )}
                )
              );
            } else {
              if (
                modalData.checklist_data[index][index1][keyvalue[0]].Format ==
                'Datetime'
              ) {
                var inputBox = (
                  React.createElement("input", {
                    className: "center-block", 
                    type: "text", 
                    id: 'checklist_field' + index1 + '-' + index, 
                    value: inputBoxValue, 
                    onClick: attachDateTime.bind(
                      this,
                      'checklist_field' + index1 + '-' + index,
                      true
                    )}
                  )
                );
              } else if (
                modalData.checklist_data[index][index1][keyvalue[0]].Format ==
                'Date'
              ) {
                var inputBox = (
                  React.createElement("input", {
                    className: "center-block", 
                    type: "text", 
                    id: 'checklist_field' + index1 + '-' + index, 
                    value: inputBoxValue, 
                    onClick: attachDateTime.bind(
                      this,
                      'checklist_field' + index1 + '-' + index,
                      false
                    )}
                  )
                );
              }
            }

            return (
              React.createElement("div", {className: "col-md-6"}, 
                React.createElement("div", {className: "dataCaptureHead removeBorder"}, keyvalue), 
                React.createElement("div", {className: "dataCaptureInput removeBorder"}, inputBox)
              )
            );
          });
          return (
            React.createElement("div", {className: "row item-input"}, 
              React.createElement("div", {className: "col-md-12"}, 
                React.createElement("div", {className: "col-md-1 serial"}, serial + 1, "."), 
                React.createElement("div", {className: "col-md-11"}, d)
              )
            )
          );
        } else {
        }
      });
      return component.push(
        React.createElement("div", null, 
          React.createElement("header", null, modalData.product_details.product_sku), 
          rowData, 
          React.createElement("div", {className: "modal-footer removeBorder"}, 
            React.createElement("div", {className: "buttonContainer center-block chklstButtonContainer"}, 
              React.createElement("div", {className: "row removeBorder"}, 
                React.createElement("div", {className: "col-md-6"}, 
                  React.createElement(Button1, {
                    disabled: false, 
                    text: _('Clear All'), 
                    color: 'black', 
                    module: appConstants.PICK_FRONT, 
                    action: appConstants.CHECKLIST_CLEARALL}
                  )
                ), 
                React.createElement("div", {className: "col-md-6"}, 
                  React.createElement(Button1, {
                    disabled: false, 
                    text: _('Submit'), 
                    color: 'orange', 
                    buttonChecklist: 'checklist', 
                    checkListData: modalData, 
                    module: appConstants.PICK_FRONT, 
                    action: appConstants.CHECKLIST_SUBMIT}
                  )
                )
              )
            )
          )
        )
      );

      break;
    // case appConstants.BOX_FULL:
    //   component = [];
    //   component.push(
    //     <div>
    //       <div className='row'>
    //         <p>
    //           {_('Last item scan will be cancelled. Do you want to continue?')}
    //         </p>
    //       </div>
    //       <div className='modal-footer removeBorder'>
    //         <div className='buttonContainer center-block chklstButtonContainer'>
    //           <div className='row removeBorder'>
    //             <div className='col-md-6'>
    //               <Button1
    //                 disabled={false}
    //                 text={_('Cancel')}
    //                 color={'black'}
    //                 module={appConstants.PICK_FRONT}
    //                 action={appConstants.CANCEL_REMOVE_ALL_ENTITIES}
    //               />
    //             </div>
    //             <div className='col-md-6'>
    //               <Button1
    //                 disabled={false}
    //                 text={_('Continue')}
    //                 color={'orange'}
    //                 module={appConstants.PICK_FRONT}
    //                 action={appConstants.CONFIRM_REMOVE_ALL_ENTITIES}
    //               />
    //             </div>
    //           </div>
    //         </div>
    //       </div>
    //     </div>
    //   );
    //   title = _('Box Full');
    //   break;
    case appConstants.BIN_FULL:
      component = [];
      component.push(
        React.createElement("div", null, 
          React.createElement("div", {className: "rowMiddle"}, 
            React.createElement("p", null, _('Enter items that can fit in the bin'))
          ), 
          React.createElement("div", {className: "modal-footer removeBorder fixedWidth"}, 
            React.createElement("div", {className: "buttonContainer50 center-block fixedHeight"}, 
              !ths.props.cancelClicked && (
                React.createElement(NumericIndicator, {
                  Formattingclass: 'widerComponent', 
                  execType: appConstants.DEFAULT, 
                  scanDetails: mainstore.getScanDetails()}
                )
              ), 
              React.createElement("div", {className: "removeBorder fixedBottom"}, 
                React.createElement("div", {className: "col-md-6"}, 
                  React.createElement(Button1, {
                    disabled: false, 
                    text: _('Cancel'), 
                    color: 'black', 
                    module: appConstants.PICK_FRONT, 
                    action: appConstants.CANCEL_BIN_FULL_REQUEST}
                  )
                ), 
                React.createElement("div", {className: "col-md-6"}, 
                  React.createElement(Button1, {
                    disabled: false, 
                    text: _('Continue'), 
                    color: 'orange', 
                    module: appConstants.PICK_FRONT, 
                    action: appConstants.CONFIRM_BIN_FULL_REQUEST}
                  )
                )
              )
            )
          )
        )
      );
      title = _('Bin Full');
      break;
    case appConstants.REPRINT_REQUEST:
      component = [];
      component.push(
        React.createElement("div", null, 
          React.createElement("div", {className: "row"}, 
            React.createElement("p", null, _('Choose how many labels to reprint?'))
          ), 
          React.createElement("div", {className: "modal-footer removeBorder"}, 
            React.createElement("div", {className: "buttonContainer center-block chklstButtonContainer"}, 
              React.createElement("div", {className: "row removeBorder"}, 
                React.createElement("div", {className: "col-md-4"}, 
                  React.createElement(Button1, {
                    disabled: false, 
                    text: _('Cancel'), 
                    color: 'black', 
                    module: appConstants.PICK_FRONT, 
                    action: appConstants.CANCEL_REPRINT_REQUEST}
                  )
                ), 
                React.createElement("div", {className: "col-md-4"}, 
                  React.createElement(Button1, {
                    disabled: false, 
                    text: _('Reprint all'), 
                    color: 'orange', 
                    module: appConstants.PICK_FRONT, 
                    action: appConstants.CONFIRM_REPRINT_ALL_REQUEST}
                  )
                ), 
                React.createElement("div", {className: "col-md-4"}, 
                  React.createElement(Button1, {
                    disabled: false, 
                    text: _('Reprint last'), 
                    color: 'orange', 
                    module: appConstants.PICK_FRONT, 
                    action: appConstants.CONFIRM_REPRINT_LAST_REQUEST}
                  )
                )
              )
            )
          )
        )
      );
      title = _('Reprint Label');
      break;
    // case appConstants.DISCARD_PACKING_BOX:
    //   component = [];
    //   component.push(
    //     <div>
    //       <div className='row'>
    //         <p>
    //           {_(
    //             'All item scan will be cancelled. Do you want to discard packing box?'
    //           )}
    //         </p>
    //       </div>
    //       <div className='modal-footer removeBorder'>
    //         <div className='buttonContainer center-block chklstButtonContainer'>
    //           <div className='row removeBorder'>
    //             <div className='col-md-6'>
    //               <Button1
    //                 disabled={false}
    //                 text={_('Cancel')}
    //                 color={'black'}
    //                 module={appConstants.PICK_FRONT}
    //                 action={appConstants.CANCEL_REMOVE_ALL_ENTITIES}
    //               />
    //             </div>
    //             <div className='col-md-6'>
    //               <Button1
    //                 disabled={false}
    //                 text={_('Continue')}
    //                 color={'orange'}
    //                 module={appConstants.PICK_FRONT}
    //                 action={appConstants.CONFIRM_REMOVE_ALL_ENTITIES}
    //               />
    //             </div>
    //           </div>
    //         </div>
    //       </div>
    //     </div>
    //   );
    //   title = _('Discard Box');
      break;
    case appConstants.EXIT_INVOICE:
      var invoiceStringArg = [];
      invoiceStringArg[0] = mainstore.getInvoiceStatus()
        ? mainstore.getInvoiceStatus().invoiceId
        : '';
      invoiceStringArg[1] = mainstore.getInvoiceType()
        ? mainstore.getInvoiceType()
        : '';
      component = [];
      component.push(
        React.createElement("div", null, 
          React.createElement("div", {className: "row"}, 
            React.createElement("p", null, utils.frntStringTransform('FRNT.PBIM.01', invoiceStringArg))
          ), 
          React.createElement("div", {className: "modal-footer removeBorder"}, 
            React.createElement("div", {className: "buttonContainer center-block chklstButtonContainer"}, 
              React.createElement("div", {className: "row removeBorder"}, 
                React.createElement("div", {className: "col-md-6"}, 
                  React.createElement(Button1, {
                    disabled: false, 
                    text: _('Exit'), 
                    color: 'black', 
                    module: appConstants.PUT_BACK, 
                    action: appConstants.CONFIRM_EXIT_INVOICE}
                  )
                ), 
                React.createElement("div", {className: "col-md-6"}, 
                  React.createElement(Button1, {
                    disabled: false, 
                    text: _('Cancel'), 
                    color: 'orange', 
                    module: appConstants.PUT_BACK, 
                    action: appConstants.DECLINE_CANCEL_INVOICE}
                  )
                )
              )
            )
          )
        )
      );
      title = _('Exit invoice and stage all bins');
      break;

    case 'enter_barcode':
      component = [];
      component.push(
        React.createElement("div", null, 
          React.createElement("div", {className: "row"}, 
            React.createElement("div", {className: "col-md-12"}, 
              React.createElement("div", {className: "title-textbox"}, _('Enter Scanner Id')), 
              React.createElement("div", {className: "textBox-div"}, 
                React.createElement("input", {
                  className: "width95", 
                  type: "text", 
                  id: "add_scanner", 
                  onClick: attachKeyboard.bind(this, 'add_scanner')}
                )
              )
            )
          ), 
          React.createElement("div", {className: "modal-footer removeBorder"}, 
            React.createElement("div", {className: "buttonContainer center-block chklstButtonContainer"}, 
              React.createElement("div", {className: "row removeBorder"}, 
                React.createElement("div", {className: "col-md-6"}, 
                  React.createElement(Button1, {
                    disabled: false, 
                    text: _('Cancel'), 
                    color: 'black', 
                    module: appConstants.PERIPHERAL_MANAGEMENT, 
                    action: appConstants.CANCEL_CLOSE_SCANNER}
                  )
                ), 
                React.createElement("div", {className: "col-md-6"}, 
                  React.createElement(Button1, {
                    disabled: false, 
                    text: _('Submit'), 
                    color: 'orange', 
                    module: appConstants.PERIPHERAL_MANAGEMENT, 
                    action: appConstants.ADD_SCANNER_DETAILS}
                  )
                )
              )
            )
          )
        )
      );

      title = _('Add Scanner');
      break;
    case 'cancel_exception':
      component = [];
      component.push(
        React.createElement("div", null, 
          React.createElement("div", {className: "row"}, 
            React.createElement("div", {className: "col-md-12"}, 
              React.createElement("div", {className: "title-textbox"}, 
                _('Are you sure you want to cancel the exception?')
              )
            )
          ), 
          React.createElement("div", {className: "modal-footer removeBorder"}, 
            React.createElement("div", {className: "buttonContainer center-block chklstButtonContainer"}, 
              React.createElement("div", {className: "row removeBorder"}, 
                React.createElement("div", {className: "col-md-6"}, 
                  React.createElement(Button1, {
                    disabled: false, 
                    text: _('Yes'), 
                    color: 'orange', 
                    module: modalData, 
                    action: appConstants.CANCEL_EXCEPTION_TO_SERVER}
                  )
                ), 
                React.createElement("div", {className: "col-md-6"}, 
                  React.createElement(Button1, {
                    disabled: false, 
                    text: _('No'), 
                    color: 'black', 
                    module: modalData, 
                    action: appConstants.CLOSE_CANCEL_EXCEPTION}
                  )
                )
              )
            )
          )
        )
      );
      title = _('Cancel Exception');
      break;

    case appConstants.NEW_CARRYING_UNIT:
      component = [];
      component.push(
        React.createElement("div", null, 
          React.createElement("div", {className: "row"}, 
            React.createElement("div", {className: "col-md-12"}, 
              React.createElement("div", {className: "title-textbox"}, 
                _('Are you sure you want to request a new carrying unit?')
              )
            )
          ), 
          React.createElement("div", {className: "modal-footer removeBorder"}, 
            React.createElement("div", {className: "buttonContainer center-block chklstButtonContainer"}, 
              React.createElement("div", {className: "row removeBorder"}, 
                React.createElement("div", {className: "col-md-6"}, 
                  React.createElement(Button1, {
                    disabled: false, 
                    text: _('Cancel'), 
                    color: 'black', 
                    module: modalData, 
                    action: appConstants.CANCEL_TOTE_SEND_TO_SERVER_MODAL}
                  )
                ), 
                React.createElement("div", {className: "col-md-6"}, 
                  React.createElement(Button1, {
                    disabled: false, 
                    text: _('Confirm'), 
                    color: 'orange', 
                    module: modalData, 
                    action: appConstants.CONFIRM_TOTE_SEND_TO_SERVER_MODAL}
                  )
                )
              )
            )
          )
        )
      );
      title = _('New carrying unit');
      break;
    
      // BSS-14025 confirm logout for pick ara flow
      case appConstants.CONFIRM_LOGOUT:
      component = [];
      component.push(
        React.createElement("div", null, 
          React.createElement("div", {className: "row"}, 
            React.createElement("p", null, _('Are you sure you would like to logout?'))
          ), 
          React.createElement("div", {className: "modal-footer removeBorder"}, 
            React.createElement("div", {className: "buttonContainer center-block chklstButtonContainer"}, 
              React.createElement("div", {className: "row removeBorder"}, 
                React.createElement("div", {className: "col-md-6"}, 
                  React.createElement(Button1, {
                    disabled: false, 
                    text: _('Cancel'), 
                    color: 'black', 
                    module: appConstants.PICK_FRONT, 
                    action: appConstants.CANCEL_LOGOUT_REQUEST}
                  )
                ), 
                React.createElement("div", {className: "col-md-6"}, 
                  React.createElement(Button1, {
                    disabled: false, 
                    text: _('Confirm'), 
                    color: 'orange', 
                    module: appConstants.PICK_FRONT, 
                    action: appConstants.CONFIRM_LOGOUT_REQUEST}
                  )
                )
              )
            )
          )
        )
      );
      title = _('Confirm Logout');
      break;

    
    case appConstants.SKIP_DOCKING:
      component = [];
      component.push(
        React.createElement("div", null, 
          React.createElement("div", {className: "row"}, 
            React.createElement("div", {className: "col-md-12"}, 
              React.createElement("div", {className: "title-textbox"}, 
                _(
                  'Are you sure you would like to proceed without docking bins?'
                )
              )
            )
          ), 
          React.createElement("div", {className: "modal-footer removeBorder"}, 
            React.createElement("div", {className: "buttonContainer center-block chklstButtonContainer"}, 
              React.createElement("div", {className: "row removeBorder"}, 
                React.createElement("div", {className: "col-md-6"}, 
                  React.createElement(Button1, {
                    disabled: false, 
                    text: _('Cancel'), 
                    color: 'black', 
                    module: modalData, 
                    action: 
                      appConstants.CANCEL_SKIP_DOCKING_SEND_TO_SERVER_MODAL
                    }
                  )
                ), 
                React.createElement("div", {className: "col-md-6"}, 
                  React.createElement(Button1, {
                    disabled: false, 
                    text: _('Confirm'), 
                    color: 'orange', 
                    module: modalData, 
                    action: 
                      appConstants.CONFIRM_SKIP_DOCKING_SEND_TO_SERVER_MODAL
                    }
                  )
                )
              )
            )
          )
        )
      );
      title = _('Skip docking');
      break;

      case appConstants.REMOVE_ALL_BUTTON_CONFIRMATION:
        component = [];
        component.push(
          React.createElement("div", null, 
            React.createElement("div", {className: "row"}, 
              React.createElement("div", {className: "col-md-12"}, 
                React.createElement("div", {className: "title-textbox"}, 
                  _(
                    'Are you sure all Entities are removed from the MTU? MTU will auto undock after confirmation'
                  )
                )
              )
            ), 
            React.createElement("div", {className: "modal-footer removeBorder"}, 
              React.createElement("div", {className: "buttonContainer center-block chklstButtonContainer"}, 
                React.createElement("div", {className: "row removeBorder"}, 
                  React.createElement("div", {className: "col-md-6"}, 
                    React.createElement(Button1, {
                      disabled: false, 
                      text: _('Cancel'), 
                      color: 'black', 
                      module: appConstants.PICK_FRONT, 
                      action: 
                        appConstants.CANCEL_REMOVE_ALL_ENTITIES
                      }
                    )
                  ), 
                  React.createElement("div", {className: "col-md-6"}, 
                    React.createElement(Button1, {
                      disabled: false, 
                      text: _('Confirm'), 
                      color: 'orange', 
                      module: appConstants.PICK_FRONT, 
                      action: 
                        appConstants.REMOVE_ALL_BUTTON
                      }
                    )
                  )
                )
              )
            )
          )
        );
        title = _('All Entities removed');
        break;

    case appConstants.CANCEL_SCAN_ALL:
      component = [];
      component.push(
        React.createElement("div", null, 
          React.createElement("div", {className: "row"}, 
            React.createElement("div", {className: "col-md-12"}, 
              React.createElement("div", {className: "title-textbox"}, 
                _('All scan and print will be cancelled. Confirm to cancel?')
              )
            )
          ), 
          React.createElement("div", {className: "modal-footer removeBorder"}, 
            React.createElement("div", {className: "buttonContainer center-block chklstButtonContainer"}, 
              React.createElement("div", {className: "row removeBorder"}, 
                React.createElement("div", {className: "col-md-6"}, 
                  React.createElement(Button1, {
                    disabled: false, 
                    text: _('Confirm'), 
                    color: 'orange', 
                    module: modalData, 
                    action: appConstants.CANCEL_SCAN_SEND_TO_SERVER_MODAL}
                  )
                ), 
                React.createElement("div", {className: "col-md-6"}, 
                  React.createElement(Button1, {
                    disabled: false, 
                    text: _('Cancel'), 
                    color: 'black', 
                    module: modalData, 
                    action: appConstants.CLOSE_CANCEL_SCAN}
                  )
                )
              )
            )
          )
        )
      );
      title = _('Cancel Scan');
      break;

    case appConstants.ERROR_NOTIFICATION:
      component = [];
      component.push(
        React.createElement("div", null, 
          React.createElement("div", {className: "row"}, 
            React.createElement("div", {className: "col-md-12"}, 
              React.createElement("div", {className: "title-textbox"}, modalData)
            )
          ), 
          React.createElement("div", {className: "modal-footer removeBorder"}, 
            React.createElement("div", {className: "buttonContainer center-block chklstButtonContainer"}, 
              React.createElement("div", {className: "row removeBorder"}, 
                React.createElement("div", {className: "col-md-4 col-md-offset-4"}, 
                  React.createElement(Button1, {
                    disabled: false, 
                    text: _('OK'), 
                    color: 'orange', 
                    module: appConstants.ERROR_NOTIFICATION, 
                    action: appConstants.HIDE_ERROR_NOTIFICATION}
                  )
                )
              )
            )
          )
        )
      );
      title = (
        React.createElement("span", null, 
          React.createElement("span", {className: "glyphicon glyphicon-exclamation-sign"}), 
          _('Error')
        )
      );
      break;
    default:
      component = null;
      title = null;
      return true;
  }
}

var Modal = React.createClass({displayName: "Modal",
  virtualKeyBoard1: '',
  componentDidMount: function(id) {
    /*$(".modal").click(function(e){
      e.stopPropagation();
        return false;
    });*/
  },

  componentWillMount: function() {
    mainstore.addChangeListener(this.onChange);
  },
  componentWillUnmount: function() {
    mainstore.removeChangeListener(this.onChange);
  },
  onChange: function() {
    this.setState(getStateData(this));
  },
  render: function() {
    return (
      React.createElement("div", {className: "modal"}, 
        React.createElement("div", {className: "modal-dialog"}, 
          React.createElement("div", {className: "modal-content"}, 
            React.createElement(ModalHeader, {title: title}), 
            React.createElement("div", {className: "modal-body"}, component)
          )
        )
      )
    );
  }
});

module.exports = Modal;

},{"../../constants/appConstants":242,"../../constants/svgConstants":245,"../../stores/PickFrontStore":257,"../../stores/mainstore":259,"../../utils/utils.js":260,"../Button/Button":188,"../ProductDetails/NumericIndicator":217,"./ModalFooter":200,"./ModalHeader":201,"bootstrap":1,"jquery-ui/position":18,"react":179,"virtual-keyboard":180}],200:[function(require,module,exports){
var React = require('react');
var ModalFooter = React.createClass({displayName: "ModalFooter",
  render: function () {
    return (
      React.createElement("div", {className: "modal-footer"}
      )
    )
  }
});

module.exports = ModalFooter;

},{"react":179}],201:[function(require,module,exports){
var React = require('react');
var ModalHeader = React.createClass({displayName: "ModalHeader",
  render: function () {
    return (
      React.createElement("div", {className: "modal-header"}, 
      	React.createElement("div", {className: "modal-title"}, 
        this.props.title
        )
      )
    )
  }
});

module.exports = ModalHeader;

},{"react":179}],202:[function(require,module,exports){
var React = require('react');
var appConstants = require('../../constants/appConstants');
var ActiveNavigation = React.createClass({displayName: "ActiveNavigation",
    render: function() {
        var server_message = this.props.serverNavData.description;
        var navMessagesJson = this.props.navMessagesJson;
        var compData = this.props.data;
        var message_args  = this.props.serverNavData.details ? this.props.serverNavData.details.slice(0) : [];
        var errorCode = this.props.serverNavData.code;
        var navId = this.props.navId;
        var level;
        var exceptionImg=(React.createElement("img", {src: compData.image}));

        if(compData.level == null){
            level ='' ;
        }else{
            level = (React.createElement("div", {className: "index"}, React.createElement("span", null, compData.level))); 
        }
        return (
            	React.createElement("div", {className: "active-navigation"}, 
                    
                        (function(){
                            if(compData.showImage)
                            return (
                                    React.createElement("div", {className: "nav-detail"}, 
                                    level, 
                                    (function(){
                                        if(navId !== appConstants.PUT_BACK_INVALID_TOTE_ITEM &&  navId !== appConstants.PPTL_MANAGEMENT && navId !== appConstants.SCANNER_MANAGEMENT)
                                            return exceptionImg;
                                    })()
                                    )
                                );
                        })(), 
                    
            		React.createElement("div", {className: "action"}, 
                    (function(){
                        if(navId == appConstants.PUT_BACK_INVALID_TOTE_ITEM || navId == appConstants.PPTL_MANAGEMENT || navId == appConstants.SCANNER_MANAGEMENT)
                            return (React.createElement("img", {className: "exceptionImg", src: compData.image}));
                        })(), 
            		(function(){
                        if(navMessagesJson != undefined){
                            message_args.unshift(navMessagesJson[errorCode]);
                            if(message_args[0] == undefined){
                              return _(server_message);  
                            }else{
                            var header_message = _.apply(null, message_args);
                            return _(header_message);
                            }
                        }
                       
                        }
                    )(), 
                    this.props.subMessage && React.createElement("div", {className: "sub-message"}, _(this.props.subMessage)), 
            		this.props.showSpinner
                    )
            	)
        );
    },
});

module.exports = ActiveNavigation;

},{"../../constants/appConstants":242,"react":179}],203:[function(require,module,exports){
var React = require('react');
var ActiveNavigation = require('./ActiveNavigation.react');
var PassiveNavigation = require('./PassiveNavigation.react');

var Navigation = React.createClass({displayName: "Navigation", 
    
    render: function() {
        return (
            React.createElement("div", {className: "navigation"}, 
                this.props.navData.map(function(value,index){
                    if(value.type == "active"){
                        return (
                                React.createElement(ActiveNavigation, {key: index, navId: this.props.navData[0].screen_id, 
                                                  data: value, serverNavData: this.props.serverNavData, 
                                                  navMessagesJson: this.props.navMessagesJson, 
                                                  subMessage: this.props.subMessage, 
                                                  showSpinner: this.props.showSpinner})
                            );
                    }
                    else{
                        return (
                                React.createElement(PassiveNavigation, {key: index, data: value})
                            );
                    }
                },this)
      		)
        );
    },
});

module.exports = Navigation;

},{"./ActiveNavigation.react":202,"./PassiveNavigation.react":204,"react":179}],204:[function(require,module,exports){
var React = require('react');

var PassiveNavigation = React.createClass({displayName: "PassiveNavigation",
    render: function() {
        return (
            	React.createElement("div", {className: "passive-navigation"}, 
                    React.createElement("div", {className: "nav-detail"}, 
                        React.createElement("div", {className: "index"}, React.createElement("span", null, this.props.data.level)), 
                        React.createElement("div", {className: "image"}, 
                        React.createElement("img", {src: this.props.data.image})
                        ), 
                        React.createElement("div", {className: "info"}, _(this.props.data.message))
                    )
                )
        );
    },
});

module.exports = PassiveNavigation;

},{"react":179}],205:[function(require,module,exports){
var React = require('react');
var ActionCreators = require('../../actions/CommonActions');
var appConstants = require('../../constants/appConstants');
var mainstore = require('../../stores/mainstore');
var Modal = require('../Modal/Modal');

var Notification = React.createClass({displayName: "Notification",

    getInitialState: function() {
        return{
            errorPopupDisabled: mainstore.getErrorPopupDisabledStatus()
        }
    },

    render: function() {
        var _this = this;
        var navMessagesJson = this.props.navMessagesJson;
        var compData = this.props.notification;
        var message_args  = this.props.notification.details ? this.props.notification.details.slice(0): []
        var errorCode = this.props.notification.code;
        if(this.props.notification.level!=undefined && this.props.notification.level == "error"){
            var appendClass = 'notify-error';
            var appendClass1 = 'error-icon';
            var appendClass2 = 'glyphicon-remove';
        }
         
        else if(this.props.notification.level==="warning"){
             var appendClass = 'notify-warning';
             var appendClass1 = 'warning-icon';
             var appendClass2 = 'glyphicon-alert';
         }
        else{
            var appendClass = 'notify';
            var appendClass1 = 'success-icon';
            var appendClass2 = 'glyphicon-ok';
        }

        let message=(function(){
                        if(navMessagesJson){
                            message_args.unshift(navMessagesJson[errorCode]);
                            if(message_args[0] == undefined){
                                return _(compData.description);
                            }else{
                                var notification_message = _.apply(null, message_args);
                                return _(notification_message);
                            }
                        }

                    }
                )();

        var notificationMessage = (
            React.createElement("div", {className: appendClass, role: "alert"}, 
                React.createElement("div", {className: appendClass1}, 
                    React.createElement("div", {className: "border-glyp"}, 
                        React.createElement("span", {className: "glyphicon "+appendClass2})
                    )
                ), 
                message
            )
        );

        if(this.props.notification.level!=undefined && this.props.notification.level == "error" && errorCode){
            if(this.state.errorPopupDisabled === true || this.state.errorPopupDisabled === undefined || this.state.errorPopupDisabled === null){
                return notificationMessage;
            }
            else{
                if(!$(".modal.notification-error").is(":visible")){
                {message}
                setTimeout((function(){ActionCreators.showModal({
                    data:message,
                    type:appConstants.ERROR_NOTIFICATION,
                    saltParams:_this.props.notification.saltParams
                });
                $(".modal-backdrop").each(function(element){
                    $(element).remove()
                });
                     $('.modal').modal({});
                    $(".modal").addClass("notification-error")
                    $('.modal.notification-error').data('bs.modal').options.backdrop = 'static';
                }),0)
            }
            return null
            }
        }else {
            if($(".modal.notification-error").is(":visible")){
                setTimeout((function(){
                    $('.modal.notification-error').data('bs.modal').options.backdrop=true
                    $(".modal-backdrop").remove()
                    $(".modal.notification-error").modal("hide");
                    $(".modal").removeClass("notification-error")

                }),0)
                return null
            }
            // BSS-5937: condition for clicking outside of Modal with notification_list=> level: "info"
            else if($(".modal.in").is(":visible")){
                setTimeout((function(){
                    if($('.modal.in').find("div").hasClass("modal-footer")){
                        //check when errorcode is true and modal has buttons
                        $('.modal.in').data('bs.modal').options.backdrop='static';
                    }
                    else{
                        //check when errorcode is true and modal has NO buttons
                        $('.modal.in').data('bs.modal').options.backdrop=true;
                    }
                }),0)
                return null
            }
            else if(errorCode !== null){
                return notificationMessage;
            }else{
                return null;
            }
        }
    }
});

module.exports = Notification;

},{"../../actions/CommonActions":181,"../../constants/appConstants":242,"../../stores/mainstore":259,"../Modal/Modal":199,"react":179}],206:[function(require,module,exports){
var React = require('react');
var mainstore = require('../stores/mainstore');
var PickFront = require('./PickFront');

function getState(){
  console.log("=======> operator.js -> getState()");
  return {
      currentSeat: mainstore.getCurrentSeat(),
      isMobile:mainstore._getMobileFlag(),
      spinner : mainstore.getSpinnerState(),
      systemIsIdle : mainstore.getSystemIdleState(),
      navMessages : mainstore.getServerMessages()
  }
}
var Operator = React.createClass({displayName: "Operator",
  _spinner : null,
  _currentSeat:'',
  getInitialState: function(){
    return getState();
  },
  componentDidMount: function(){
    mainstore.addChangeListener(this.onChange);
  },
  componentWillMount: function(){
     mainstore.addChangeListener(this.onChange);
  },
  componentWillUnmount: function(){
    mainstore.removeChangeListener(this.onChange);
  },
  onChange: function(){ 
   this.setState(getState());
  },
  getSeatType:function(seat){
  console.log("....seat" + seat);
  console.log("=======> operator.js -> getSeatType ()");
     //switch(seat){
      //case appConstants.PICK_FRONT:
          this._currentSeat = React.createElement(PickFront, {navMessagesJson: this.state.navMessages});
       // break;
      //case appConstants.MTU_SUBSYSTEM:
            //this._currentSeat = <MtuSubsystem navMessagesJson={this.state.navMessages}/>;   
        //    break;            
      //default:
        //return true; 
      //}
  },

  render: function(data){ 
    console.log("=======> operator.js -> render ()");
     //if(this.state.currentSeat){
       this.getSeatType(this.state.currentSeat);
       return (
        React.createElement("div", null, 
          this._currentSeat
        ) 

      )
    //}
    //  else{
    //   return (
    //     <div>
    //       <Spinner />
    //     </div> 

    //   )
    //  }
     
     
      
     
  }
});

module.exports = Operator;

},{"../stores/mainstore":259,"./PickFront":210,"react":179}],207:[function(require,module,exports){
var React = require("react");
var allresourceConstants = require('../../constants/resourceConstants');
var appConstants = require('../../constants/appConstants');
var OrderRow = require('./OrderRow');

var OrderDetails = React.createClass({displayName: "OrderDetails",
	render : function(){

		var orderData =this.props.orderData;
		var orderRowArr = [];
		var orderValue ;
		var volumeUnit = appConstants.VOLUME_UNIT;

		for(var k in orderData){
			if(k === volumeUnit){
				continue;
			}
			if(k === appConstants.VOLUME){
				orderValue = orderData[k] + " "+(orderData[volumeUnit] || "");
			}
			else{
				orderValue = orderData[k]
			}
			orderRowArr.push((React.createElement(OrderRow, {orderKey: k, orderValue: orderValue})))
		}
		return (
				React.createElement("div", {className: "orderDetailsWrapper"}, 
					orderRowArr
				)
			);
	}
});

module.exports  = OrderDetails;

},{"../../constants/appConstants":242,"../../constants/resourceConstants":244,"./OrderRow":208,"react":179}],208:[function(require,module,exports){
var React = require("react");
var resourceConstants = require('../../constants/resourceConstants');

var OrderRow = React.createClass({displayName: "OrderRow",
	render : function(){
		
		return (
				React.createElement("ul", {className: "orderDetails"}, 
				React.createElement("li", {className: "orderParam"}, 
				_(resourceConstants[this.props.orderKey]), ":"
				), 
				React.createElement("li", {className: "orderValue"}, 
					this.props.orderValue
				)
				)
					
			);
	}
});

module.exports  = OrderRow;

},{"../../constants/resourceConstants":244,"react":179}],209:[function(require,module,exports){
/**
 * Created by gaurav.m on 8/8/17.
 */
var React = require('react');
var allSvgConstants = require('./../../constants/svgConstants');

var Pallet = React.createClass({displayName: "Pallet",

    render: function () {

        return (React.createElement("div", {className: "palletWrapper"}, 
            React.createElement("div", {className: "palletHeader"}, 
                React.createElement("div", {className: "iconPlaceHolder"}), 
                React.createElement("div", {className: "textPlaceHolder"}, _("PICK FROM TOP & LEFT TO RIGHT"))
            ), 
            React.createElement("img", {src: allSvgConstants.pallet})
        ))
    }
});
module.exports = Pallet;

},{"./../../constants/svgConstants":245,"react":179}],210:[function(require,module,exports){
var React = require('react')
var mainstore = require('../stores/mainstore')
var Header = require('./Header')
var KQ = require('./ProductDetails/KQ')
var Navigation = require('./Navigation/Navigation.react')
var Spinner = require('./Spinner/LoaderButler')
var Notification = require('./Notification/Notification')
var Bins = require('./Bins/Bins.react')
var BinsFlex = require('./Bins/BinsFlexArrange.react')
var Button1 = require('./Button/Button')
var Wrapper = require('./ProductDetails/Wrapper')
var WrapperSplitRoll = require('./ProductDetails/WrapperSplitRoll')
var appConstants = require('../constants/appConstants')
var Rack = require('./Rack/MsuRack.js')
var BoxSerial = require('./BoxSerial.js')
var Modal = require('./Modal/Modal')
var CurrentSlot = require('./CurrentSlot')
var BinMap = require('./BinMap')
var PrdtDetails = require('./PrdtDetails/ProductDetails.js')
var CommonActions = require('../actions/CommonActions')
var Exception = require('./Exception/Exception')
var TabularData = require('./TabularData')
var OrderDetails = require('./OrderDetails/OrderDetails.js')
var Pallet = require('./Pallet/pallet')
var CheckList = require('./CheckList.js')
var utils = require('../utils/utils.js')
var PackingDetails = require('./PrdtDetails/PackingDetails.js')
var SplitPPS = require('./SplitPPS')
var PreviousDetails = require('./PreviousDetails')
var TextEditor = require('./ProductDetails/textEditor')
var ItemTable = require('./itemTable')
var CurrentMtu = require('./CurrentMtu')
var ColorCodeMtu = require("./colorCodeMtu")

var checkListOpen = false

function getStateData() {
  var screenData = mainstore.getScreenData()
  var splitPPSData = {
    groupInfo: mainstore._getBinMapDetails(),
    groupOrientation: mainstore._getBinMapOrientation()
  }

  return Object.assign({}, screenData, splitPPSData)
}

var PickFront = React.createClass({displayName: "PickFront",
  _notification: '',
  _component: '',
  _navigation: '',
  getInitialState: function () {
    return getStateData()
  },
  componentWillMount: function () {
    // if (
    //   this.state.PickFrontScreenId === appConstants.PICK_FRONT_MORE_ITEM_SCAN ||
    //   this.state.PickFrontScreenId === appConstants.PICK_FRONT_PPTL_PRESS ||
    //   this.state.PickFrontScreenId === appConstants.PICK_FRONT_PACKING_BOX
    // ) {
    //   this.showModal(
    //     this.state.PickFrontChecklistDetails,
    //     this.state.PickFrontChecklistIndex
    //   )
    // }
    mainstore.addChangeListener(this.onChange)
  },
  componentWillUnmount: function () {
    mainstore.removeChangeListener(this.onChange)
  },
  onChange: function () {
    this.setState(getStateData())
    // if (
    //   this.state.PickFrontScreenId === appConstants.PICK_FRONT_MORE_ITEM_SCAN ||
    //   this.state.PickFrontScreenId === appConstants.PICK_FRONT_PPTL_PRESS ||
    //   this.state.PickFrontScreenId === appConstants.PICK_FRONT_PACKING_BOX
    // ) {
    //   this.showModal(
    //     this.state.PickFrontChecklistDetails,
    //     this.state.PickFrontChecklistIndex
    //   )
    // }
  },

  getNotificationComponent: function () {
    if (this.state.PickFrontNotification != undefined) {
      this._notification = (
        React.createElement(Notification, {
          notification: this.state.PickFrontNotification, 
          navMessagesJson: this.props.navMessagesJson}
        )
      )
    } else {
      if ($('.modal.notification-error').is(':visible')) {
        setTimeout(function () {
          $('.modal.notification-error').data(
            'bs.modal'
          ).options.backdrop = true
          $('.modal-backdrop').remove()
          $('.modal.notification-error').modal('hide')
          $('.modal').removeClass('notification-error')
        }, 0)

        return null
      } else if ($('.modal.in').is(':visible')) {
        setTimeout(function () {
          if (
            $('.modal.in')
              .find('div')
              .hasClass('modal-footer')
          ) {
            //check when errorcode is true and modal has buttons
            $('.modal.in').data('bs.modal').options.backdrop = 'static'
          } else {
            //check when errorcode is true and modal has NO buttons
            $('.modal.in').data('bs.modal').options.backdrop = true
          }
        }, 0)
        return null
      }
      this._notification = ''
    }
  },
  // showModal: function (data, index, manual) {
  //   if (manual == true) checkListOpen = false
  //   var data = {
  //     checklist_data: data,
  //     checklist_index: index,
  //     product_details: this.state.PickFrontProductDetails
  //   }
  //   console.log(this.state.PickFrontChecklistOverlayStatus, checkListOpen)
  //   if (
  //     this.state.PickFrontChecklistOverlayStatus === true &&
  //     checkListOpen == false
  //   ) {
  //     checkListOpen = true
  //     setTimeout(function () {
  //       CommonActions.showModal({
  //         data: data,
  //         type: 'pick_checklist'
  //       })
  //       $('.modal').modal()
  //       //$('.modal').data('bs.modal').escape(); // reset keyboard
  //       $('.modal').data('bs.modal').options.backdrop = 'static'
  //       return false
  //     }, 0)
  //   } else if (
  //     this.state.PickFrontChecklistOverlayStatus === false &&
  //     checkListOpen == true
  //   ) {
  //     setTimeout(function () {
  //       $('.modal').modal('hide')

  //       $('.modal')
  //         .data('bs.modal')
  //         .escape() // reset keyboard
  //       $('.modal').data('bs.modal').options.backdrop = true
  //       $('button.close', $('.modal')).show()
  //     }, 0)
  //     checkListOpen = false
  //   }
  // },
  getExceptionComponent: function () {
    var _rightComponent = ''
    this._navigation = ''
    return (
      React.createElement("div", {className: "grid-container exception"}, 
        React.createElement(Modal, null), 
        React.createElement(Exception, {data: this.state.PickFrontExceptionData, action: true}), 
        React.createElement("div", {className: "exception-right"}), 
        React.createElement("div", {className: "cancel-scan"}, 
          React.createElement(Button1, {
            disabled: false, 
            text: _('Cancel Exception'), 
            module: appConstants.PICK_FRONT, 
            action: appConstants.CANCEL_EXCEPTION, 
            color: 'black'}
          )
        )
      )
    )
  },
  callAPItoGetData: function (data) {
    CommonActions.getOrphanItemData(data)
  },

  getScreenComponent: function (screen_id) {
    switch (screen_id) {
        case appConstants.WAIT_FOR_MTU:
          console.log("%c     => wait for mtu =? screen", "color: green")
          this._navigation = (
            React.createElement(Navigation, {
              navData: this.state.PickFrontNavData, 
              serverNavData: this.state.PickFrontServerNavData, 
              navMessagesJson: this.props.navMessagesJson}
            )
          )

          this._component = (
            React.createElement("div", {style: {"opacity": "0.2"}, className: "grid-container"}, 
              React.createElement("div", {className: "main-container"}, 
                React.createElement("div", {style: {"display": "flex", "flexFlow": "column", "width":"70%"}}, 
                  React.createElement(SplitPPS, {
                    displayBinId: true, 
                    groupInfo: this.state.udpBinMapDetails}
                  ), 
                  React.createElement(ColorCodeMtu, null)
                )
              )
            )
          )
        break;

        case appConstants.SELECT_MTU_POINT:
          console.log("%c     => select mtu point =? screen", "color: green")
            this._navigation = (
              React.createElement(Navigation, {
                navData: this.state.PickFrontNavData, 
                serverNavData: this.state.PickFrontServerNavData, 
                navMessagesJson: this.props.navMessagesJson}
              )
            )
  
            this._component = (
              React.createElement("div", {className: "grid-container"}, 
                React.createElement("div", {className: "main-container"}, 
                  React.createElement("div", {style: {"display": "flex", "flexFlow": "column", "width":"70%"}}, 
                    React.createElement(SplitPPS, {
                      displayBinId: true, 
                      groupInfo: this.state.udpBinMapDetails}
                    ), 
                    React.createElement(ColorCodeMtu, null)
                  )
                )
              )
            )
          break;

          case appConstants.REMOVE_ALL_TOTES:
            if (this.state.isToteFlowEnabled) { // for Tote flow
              var removeAllButton = (
                React.createElement(Button1, {
                  disabled: false, 
                  text: _('Remove All'), 
                  module: appConstants.PICK_FRONT, 
                  action: appConstants.REMOVE_ALL_BUTTON, 
                  screenId: mainstore.getScreenId(), 
                  color: 'orange'}
                )
              )
            } else { // for Non-Tote Flow
              var removeAllButton = (
                React.createElement(Button1, {
                  disabled: false, 
                  text: _('Remove All'), 
                  module: appConstants.PICK_FRONT, 
                  action: appConstants.REMOVE_ALL_BUTTON_WITHOUT_TOTE_MODAL, 
                  screenId: mainstore.getScreenId(), 
                  color: 'orange'}
                )
              )
            }

            this._navigation = (
              React.createElement(Navigation, {
                navData: this.state.PickFrontNavData, 
                serverNavData: this.state.PickFrontServerNavData, 
                navMessagesJson: this.props.navMessagesJson}
              )
            )
  
            this._component = (
              React.createElement("div", {className: "grid-container"}, 
                React.createElement(Modal, null), 
                 this.state.getCurrentMtu ? React.createElement(CurrentMtu, {currentMtu: this.state.getCurrentMtu}) :" ", 
                  React.createElement("div", {className: "splitPps-zoomed-out"}, 
                    React.createElement(SplitPPS, {
                      displayBinId: true, 
                      groupInfo: this.state.udpBinMapDetails}
                    )
                    
                  ), 
                  React.createElement("div", {className: "main-container"}, 
                  React.createElement(Rack, {
                      isDrawer: this.state.isDrawer, 
                      slotType: this.state.SlotType, 
                      rackData: this.state.PickFrontRackDetails}
                    )
                  ), 
                  React.createElement("div", {className: "cancel-scan"}, 
                      React.createElement(Button1, {
                        disabled: false, 
                        text: _("Cancel"), 
                        module: appConstants.PICK_FRONT, 
                        action: appConstants.CANCEL_SCAN, 
                        screenId: mainstore.getScreenId(), 
                        color: "black"})
                  ), 
                  removeAllButton
                )
            )
          break;

          case appConstants.SCAN_EMPTY_TOTE:
            this._navigation = (
              React.createElement(Navigation, {
                navData: this.state.PickFrontNavData, 
                serverNavData: this.state.PickFrontServerNavData, 
                navMessagesJson: this.props.navMessagesJson}
              )
            )
  
            this._component = (
              React.createElement("div", {className: "grid-container"}, 
                  this.state.getCurrentMtu ? React.createElement(CurrentMtu, {currentMtu: this.state.getCurrentMtu}) :" ", 
                  React.createElement("div", {className: "splitPps-zoomed-out"}, 
                    React.createElement(SplitPPS, {
                      displayBinId: true, 
                      groupInfo: this.state.udpBinMapDetails}
                    )
                    
                  ), 
                  React.createElement("div", {className: "main-container"}, 
                  React.createElement(Rack, {
                      //isDrawer={this.state.isDrawer}
                      slotType: this.state.SlotType, 
                      rackData: this.state.PickFrontRackDetails}
                    )
                  )
                )
            )
          break;

          case appConstants.SCAN_EMPTY_SLOT:
            this._navigation = (
              React.createElement(Navigation, {
                navData: this.state.PickFrontNavData, 
                serverNavData: this.state.PickFrontServerNavData, 
                navMessagesJson: this.props.navMessagesJson}
              )
            )
  
            this._component = (
              React.createElement("div", {className: "grid-container"}, 
                  this.state.getCurrentMtu ? React.createElement(CurrentMtu, {currentMtu: this.state.getCurrentMtu}) :" ", 
                  React.createElement("div", {className: "splitPps-zoomed-out"}, 
                    React.createElement(SplitPPS, {
                      displayBinId: true, 
                      groupInfo: this.state.udpBinMapDetails}
                    )
                    
                  ), 
                  React.createElement("div", {className: "main-container"}, 
                  React.createElement(Rack, {
                      //isDrawer={this.state.isDrawer}
                      slotType: this.state.SlotType, 
                      rackData: this.state.PickFrontRackDetails}
                    )
                  )
                )
            )
          break;

          case appConstants.PUT_TOTE_IN_MTU:
            this._navigation = (
              React.createElement(Navigation, {
                navData: this.state.PickFrontNavData, 
                serverNavData: this.state.PickFrontServerNavData, 
                navMessagesJson: this.props.navMessagesJson}
              )
            )
  
            this._component = (
              React.createElement("div", {className: "grid-container"}, 
                  React.createElement(CurrentMtu, null), 
                  React.createElement("div", {className: "splitPps-zoomed-out"}, 
                    React.createElement(SplitPPS, {
                      displayBinId: true, 
                      groupInfo: this.state.udpBinMapDetails}
                    )
                    
                  ), 
                  React.createElement("div", {className: "main-container"}, 
                    React.createElement(Rack, {
                      isDrawer: this.state.isDrawer, 
                      slotType: this.state.SlotType, 
                      rackData: this.state.PickFrontRackDetails}
                    )
                  ), 
                  React.createElement("div", {className: "cancel-scan"}, 
                      React.createElement(Button1, {
                        disabled: false, 
                        text: _("Cancel"), 
                        module: appConstants.PICK_FRONT, 
                        action: appConstants.CANCEL_SCAN, 
                        screenId: mainstore.getScreenId(), 
                        color: "black"})
                  )
                )
            )
          break;
      default:
        return true
    }
  },

  render: function (data) {
    this.getNotificationComponent()
    this.getScreenComponent(this.state.PickFrontScreenId)

    return (
      React.createElement("div", {className: "main"}, 
        React.createElement(Header, null), 
        this._navigation, 
        this._component, 
        this._notification
      )
    )
  }
})

module.exports = PickFront

},{"../actions/CommonActions":181,"../constants/appConstants":242,"../stores/mainstore":259,"../utils/utils.js":260,"./BinMap":182,"./Bins/Bins.react":184,"./Bins/BinsFlexArrange.react":186,"./BoxSerial.js":187,"./Button/Button":188,"./CheckList.js":190,"./CurrentMtu":191,"./CurrentSlot":192,"./Exception/Exception":193,"./Header":197,"./Modal/Modal":199,"./Navigation/Navigation.react":203,"./Notification/Notification":205,"./OrderDetails/OrderDetails.js":207,"./Pallet/pallet":209,"./PrdtDetails/PackingDetails.js":211,"./PrdtDetails/ProductDetails.js":212,"./PreviousDetails":215,"./ProductDetails/KQ":216,"./ProductDetails/Wrapper":220,"./ProductDetails/WrapperSplitRoll":221,"./ProductDetails/textEditor":222,"./Rack/MsuRack.js":225,"./Spinner/LoaderButler":230,"./SplitPPS":232,"./TabularData":236,"./colorCodeMtu":237,"./itemTable":240,"react":179}],211:[function(require,module,exports){
var React = require('react');

var PackingDetails = React.createClass({displayName: "PackingDetails",
  
  render: function(data){ 
    var boxTypeInfo = this.props.boxTypeInfo||"";
    var emptyPlace= React.createElement("span", null, " ");
    if(boxTypeInfo.length > 5){
      boxTypeInfo = boxTypeInfo.substr(-3);
    }

    return (
        React.createElement("div", {className: "packingBoxTableInfo"}, 
            React.createElement("div", {className: "packingBoxImage"}, 
               React.createElement("img", {className: "img-responsive", src: "./assets/images/packing_box.png"})
            ), 
            React.createElement("div", {className: "detailsOuterWrapper"}, 
                React.createElement("div", {className: "detailsInnerWrapper"}, 
                  React.createElement("span", {className: "detailsDispName"}, " ", _("Box Type: "), " "), 
                  React.createElement("span", {className: "detailsDispVal"}, this.props.boxTypeInfo)
                ), 
                React.createElement("div", {className: "detailsDispValShort"}, boxTypeInfo===""?emptyPlace:boxTypeInfo)
            )
        )
    );
  }

});

module.exports = PackingDetails;

},{"react":179}],212:[function(require,module,exports){
var React = require("react")

var mainstore = require("../../stores/mainstore")
var ProductInfo = require("./ProductInfo")
var ProductImage = require("./ProductImage")
var utils = require("../../utils/utils")
var appConstants = require("../../constants/appConstants")

var product_info_locale = {}
var image_url = {}
var ProductDetails = React.createClass({displayName: "ProductDetails",
  displayLocale: function(data, uomConversionFactor = 1, uomDisplayUnit = "") {
    product_info_locale = {}
    image_url = {}
    var language_locale = sessionStorage.getItem("localeData")
    var locale
    if (language_locale == "null" || language_locale == null) {
      locale = "en-US"
    } else {
      locale = JSON.parse(language_locale)["data"]["locale"]
    }
    data.map(function(value, index) {
      var keyValue = ""
      var imageKey
      for (var key in value[0]) {
        if (key === "product_dimensions") {
          var dimension = value[0][key]
          for (var i = 0; i < dimension.length; i++) {
            if (i === 0) {
              keyValue =
                Math.round(dimension[i] * uomConversionFactor * 10) / 10 + ""
            } else {
              keyValue =
                keyValue +
                " X " +
                Math.round(dimension[i] * uomConversionFactor * 10) / 10
            }
          }
          uomDisplayUnit !== ""
            ? (keyValue =
                keyValue + " (" + appConstants.IN + uomDisplayUnit + ")")
            : (keyValue = keyValue)
        } else if (key != "display_data" && key != "product_local_image_url") {
          keyValue = value[0][key] + " "
        } else if (key != "display_data" && key == "product_local_image_url") {
          imageKey = value[0][key]
        }
      }
      value[0].display_data.map(function(data_locale, index1) {
        if (data_locale.locale == locale) {
          if (data_locale.display_name != "product_local_image_url") {
            product_info_locale[data_locale.display_name] = keyValue
          }
        }
        if (data_locale.display_name == "product_local_image_url") {
          if (
            imageKey === "outer_each" ||
            imageKey === "inner_each" ||
            imageKey === "outer_inner"
          ) {
            image_url[data_locale.display_name] =
              "assets/images/" + imageKey + ".gif"
          } else if (imageKey === "outer" || imageKey === "inner") {
            image_url[data_locale.display_name] =
              "assets/images/" + imageKey + ".png"
          } else image_url[data_locale.display_name] = imageKey
        }
      })
    })
  },
  displayCode: function(data) {
    var language_locale = sessionStorage.getItem("localeData")
    var locale
    if (language_locale == "null" || language_locale == null) {
      locale = "en-US"
    } else {
      locale = JSON.parse(language_locale)["data"]["locale"]
    }
    var code = []
    data.map(function(value, index) {
      var obj = {}
      var arrKeyNames = Object.keys(value[0])
      if (arrKeyNames.indexOf("product_barcodes") > -1) {
        arrKeyNames.map(function(eachValueName, index) {
          value[0][eachValueName].map(function(nestedName, index) {
            if (value[0][eachValueName].constructor !== "Array") {
              obj.displayvalue = nestedName
            }
            if (nestedName.locale == locale) {
              obj.displayName = nestedName.display_name
            }
          })
        })
        code.push(obj)
      }
    })
    return code
  },
  render: function() {
    var flag = this.props.QLCodeDetails
    var barcodeArr = flag ? this.displayCode(this.props.productInfo) : ""
    var isUnitConversionAllowed = mainstore.isUnitConversionAllowed()
    var uomConversionFactor, uomDisplayUnit
    var trailedDisplayText = flag
      ? utils.get3dotTrailedText(barcodeArr[0].displayvalue, 5, 5, 10)
      : ""
    var trailedDisplayKeyText = flag ? barcodeArr[0].displayName : ""
    if (isUnitConversionAllowed) {
      uomConversionFactor = mainstore.getUOMConversionFactor()
      uomDisplayUnit = mainstore.getUOMDisplayUnit()
      this.displayLocale(
        this.props.productInfo,
        uomConversionFactor,
        uomDisplayUnit
      )
    } else {
      this.displayLocale(this.props.productInfo)
    }

    return (
      React.createElement("div", {className: flag ? "productTableInfo qlDetails" : "productTableInfo"}, 
        React.createElement(ProductImage, {srcURL: image_url.product_local_image_url}), 
        flag ? (
          React.createElement("div", {className: "detailsOuterWrapper"}, 
            React.createElement("div", {className: "detailsInnerWrapper"}, 
              React.createElement("span", {
                className: "detailsDispName", 
                title: barcodeArr[0].displayName
              }, 
                trailedDisplayKeyText
              ), 
              React.createElement("span", {className: "colorSeparator"}, ":"), 
              React.createElement("span", {
                className: "detailsDispVal", 
                title: barcodeArr[0].displayvalue
              }, 
                trailedDisplayText
              )
            ), 
            React.createElement("div", {className: "detailsDispValShort"}, 
              React.createElement("span", null, 
                barcodeArr[0].displayvalue.substr(
                  barcodeArr[0].displayvalue.length - 3
                )
              )
            )
          )
        ) : (
          React.createElement("div", null, 
            React.createElement("div", {className: "productHeader"}, _("Details")), 
            React.createElement(ProductInfo, {infoDetails: product_info_locale, flag: "codeDetails"})
          )
        )
      )
    )
  }
})

module.exports = ProductDetails

},{"../../constants/appConstants":242,"../../stores/mainstore":259,"../../utils/utils":260,"./ProductImage":213,"./ProductInfo":214,"react":179}],213:[function(require,module,exports){
var React = require('react');

var ProductImage = React.createClass({displayName: "ProductImage",
	render:function(){
		var srcURL = this.props.srcURL;
		var details = this.props.details;
		if(srcURL !=undefined)
		return(
			React.createElement("div", {className: "productImage"}, 
				React.createElement("img", {className: "img-responsive", src: srcURL})
			)
			);
		else
			return(
				React.createElement("div", {className: "productImage holder"}, 
					 React.createElement("span", {className: "glyphicon glyphicon-picture"})
				)
			);
	}
});

module.exports = ProductImage;

},{"react":179}],214:[function(require,module,exports){
var React = require('react');

var ProductInfo = React.createClass({displayName: "ProductInfo",
    render: function() {
        var infoDetails = this.props.infoDetails;
        var arr1 = [];
        $.each(infoDetails, function(key, value) {
            return arr1.push(
                React.createElement("tr", null, 
	  				React.createElement("td", {className: "key"}, " ", key, " "), 
	  				React.createElement("td", {className: "value"}, value, " ")
  				)

            );
        });

        return (
            React.createElement("div", {className: "table-wrapper"}, 
				React.createElement("table", {className: "table"}, 									
					React.createElement("tbody", null, 
						arr1
					)
				)
			)
        );
    }
});

module.exports = ProductInfo;

},{"react":179}],215:[function(require,module,exports){
var React = require('react');

var PreviousDetails = React.createClass({displayName: "PreviousDetails",
  getInitialState: function () {
    return {
      product_info_locale: null
    }
  },
  displayLocale: function (data) {
    var product_info_locale = {}
    var image_url = {};
    var language_locale = sessionStorage.getItem('localeData');
    var locale;
    if (language_locale == 'null' || language_locale == null) {
      locale = 'en-US';
    } else {
      locale = JSON.parse(language_locale)["data"]["locale"];
    }
    data.map(function (value, index) {
      var keyValue = "";
      var imageKey;
      for (var key in value[0]) {
        if (key === "product_dimensions") {
          var dimension = value[0][key];
          for (var i = 0; i < dimension.length; i++) {
            if (i === 0) {
              keyValue = dimension[i] + "";
            }
            else {
              keyValue = keyValue + " X " + dimension[i]
            }
          }
        }
        else if (key != 'display_data' && key != 'product_local_image_url') {
          keyValue = value[0][key] + ' ';
        } else if (key != 'display_data' && key == 'product_local_image_url') {
          imageKey = value[0][key];
        }
      }
      value[0].display_data.map(
        function (data_locale, index1) {
          if (data_locale.locale == locale) {
            if (data_locale.display_name != 'product_local_image_url') {
              product_info_locale[data_locale.display_name] = keyValue;
            }
          }
          if (data_locale.display_name == 'product_local_image_url') {
            image_url[data_locale.display_name] = imageKey;
          }
        }
      )
    });
    return product_info_locale;
  },
  render: function () {
    var type = this.props.type || "";
    var typeToShow = (type === "pick") ? _("Previous Pick Details") : _("Previous Put Details")
    var customizeClass = this.props.customizeClass;
    var previousDetails = this.displayLocale(this.props.previousDetails);
    var showPrevLocation = false;
    return (
      React.createElement("div", {className: customizeClass ? "p-put-details " + customizeClass : "p-put-details"}, 
        React.createElement("div", {className: "p-put-head"}, 
          typeToShow.toUpperCase()
        ), 
        React.createElement("div", {className: "p-put-content"}, 
          Object.keys(previousDetails).map(function (key, idx) {
            if (idx === 0) {
              var str = previousDetails[key].trim();
              if (str) {
                var txtToDisplay = [];
                var frmStart = (React.createElement("span", {className: "p-put-value"}, str.substring(0, str.length - 3)));
                var frmLast = (React.createElement("span", {className: "p-put-value-extra"}, str.substring(str.length - 3, str.length)));
                txtToDisplay.push(frmStart, frmLast);
              }
              return (React.createElement("section", {key: key + idx, className: "p-put-row"}, 
                React.createElement("p", {className: "p-put-key"}, _(key) + " :"), 
                React.createElement("p", {style: { "display": "flex", "flexFlow": "row", "alignItems": "center"}}, 
                  str ? txtToDisplay : "--"
                )
              ))
            }
            else if (idx === 1) {
              return (React.createElement("section", {key: key + idx, className: "p-put-row"}, 
                React.createElement("p", {className: "p-put-key"}, _(key) + " :"), 
                React.createElement("p", {className: "p-put-value"}, (previousDetails[key]).trim() || "--")
              ))
            }
            else if (idx === 2) {
              showPrevLocation = true;
            }
          })
        ), 
        showPrevLocation === true ?
          (React.createElement("div", null, 
            React.createElement("div", {className: "p-put-head"}, 
              _("PREVIOUS LOCATION").toUpperCase()
            ), 
            React.createElement("div", {className: "p-put-content"}, 
              Object.keys(previousDetails).map(function (key, idx) {
                if (idx === 2) { // comparing with idx & not key as key is client configurable
                  var str = previousDetails[key].trim();
                  return (React.createElement("section", {key: key + idx, className: "p-put-row"}, 
                    str ?
                      React.createElement("p", {className: "p-put-value-location"}, str) : "--"
                    
                  ))
                }
              })
            )
          ))
          : (null)
        
      )
    );
  }
});
module.exports = PreviousDetails

},{"react":179}],216:[function(require,module,exports){
var React = require('react');
var CommonActions = require('../../actions/CommonActions');
var mainstore = require('../../stores/mainstore');
var appConstants = require('../../constants/appConstants');
var resourceConstants = require('../../constants/resourceConstants');
var  _updatedQty = 0,_putPickUpdatedQty=0, _scanDetails = {},_keypress = false;
function generateExcessNotification () {
    var data={};
    data["code"] = resourceConstants.CLIENTCODE_008;
    data["level"] = 'error';
    CommonActions.generateNotification(data);
    return;
};

var KQ = React.createClass({displayName: "KQ",
    _appendClassDown : '',
    _appendClassUp : '',
    _qtyComponent : null,
    _appendClassDown: '',
    _appendClassUp: '',
    virtualKeyboard: null,
    _id : 'keyboard',
    _enableIncrement : true,
    _enableDecrement : true,

     getEnableIncrement : function() {
            return this._enableIncrement;
        },

        disableIncrement : function(data) {
            this._appendClassUp = 'topArrow disable';
            this._enableIncrement = data;
        },

    changeValueIncrement : function(){
        if( parseInt(_updatedQty) >= parseInt(_scanDetails.total_qty) && (parseInt(_scanDetails.total_qty) != 0 || _scanDetails.total_qty != "0") )
        {
            return false;
        }
        _updatedQty++;
        $("#keyboard").val(_updatedQty);
    },
    incrementValue: function(event){
       if(parseInt(_updatedQty)>=9999) {
                generateExcessNotification();
                this.disableIncrement(false);
            }
        else {
            var self = this;
            var interval;
            if (this._enableIncrement === true) {
                _keypress = true;
               if( event.type == "mousedown"){
                    interval = setInterval(this.changeValueIncrement, 300);
                }
                else if(event.type == 'click'){
                    _updatedQty++;
                    console.log(_updatedQty);
                }

                $('.topArrow').mouseup(function() {
                    clearInterval(interval);

                });
                $('.topArrow').mouseout(function(event) {
                    clearInterval(interval);
                });

                if(mainstore.getScreenId() === appConstants.AUDIT_EACH_UNSCANNABLE_EXCEPTION || mainstore.getScreenId() == appConstants.PUT_BACK_EXCEPTION_DAMAGED_BARCODE || mainstore.getScreenId() == appConstants.AUDIT_EXCEPTION_BOX_DAMAGED_BARCODE
                    || mainstore.getScreenId() == appConstants.PUT_BACK_EXCEPTION_EXTRA_ITEM_QUANTITY_UPDATE || mainstore.getScreenId() ==appConstants.AUDIT_EXCEPTION_LOOSE_ITEMS_DAMAGED_EXCEPTION
                    || mainstore.getScreenId() == appConstants.PUT_FRONT_EXCEPTION_SPACE_NOT_AVAILABLE || mainstore.getScreenId() == appConstants.AUDIT_EXCEPTION_ITEM_IN_BOX_EXCEPTION ){


                }
                else if(parseInt(_updatedQty) > parseInt(_scanDetails.total_qty) && (parseInt(_scanDetails.total_qty) != 0 || _scanDetails.total_qty != "0" )) {
                   _updatedQty = _updatedQty - 1;
                }
                if(interval == undefined){
                   _keypress = false;
                }
                console.log(interval);
                self.handleIncrement();
            }
        }

    },
    changeValueDecrement : function(){

        if(_updatedQty <= 0 ){
            _updatedQty = 0;
        }else{
            _updatedQty--;
        }
        if((_updatedQty === 0) && (mainstore.getScreenId() == appConstants.PUT_BACK_SCAN ||
                mainstore.getScreenId() == appConstants.PICK_FRONT_MORE_ITEM_SCAN ||
                mainstore.getScreenId() == appConstants.PUT_FRONT_PLACE_ITEMS_IN_RACK)){
            _updatedQty = 1;
        }

        $("#keyboard").val(_updatedQty);
    },
    decrementValue: function(event){
        var self = this;
        var interval;
        if (this._enableDecrement === true) {
            _keypress = true;
            if( event.type == "mousedown" ){
                interval = setInterval(this.changeValueDecrement, 300);

            }else if(event.type == 'click') {
               if(_updatedQty <= 0){
                _updatedQty = 0;
                }else{
                _updatedQty--;
                }

            }
            $('.downArrow').mouseup(function(){
                clearInterval(interval);
            });

            $('.downArrow').mouseout(function(event) {
                clearInterval(interval);
            });
             if((_updatedQty === 0) && (mainstore.getScreenId() == appConstants.PUT_BACK_SCAN ||
                mainstore.getScreenId() == appConstants.PICK_FRONT_MORE_ITEM_SCAN ||
                mainstore.getScreenId() == appConstants.PUT_FRONT_PLACE_ITEMS_IN_RACK )){
                _updatedQty = 1;
            }

            if(interval == undefined){
                _keypress = false
            }
            self.handleDecrement();
        }

    },

    handleIncrement: function(event, qty) { console.log(_keypress);
        if (this._enableIncrement === true && _keypress == false) {
          if((parseInt(_updatedQty) >= parseInt(_scanDetails.total_qty)) && (parseInt(_scanDetails.total_qty) != 0 || _scanDetails.total_qty != "0")){
          }

            var data = {};
            if(mainstore.getScreenId() === appConstants.AUDIT_EACH_UNSCANNABLE_EXCEPTION || mainstore.getScreenId() == appConstants.PUT_BACK_EXCEPTION_DAMAGED_BARCODE || 
                mainstore.getScreenId() == appConstants.AUDIT_EXCEPTION_BOX_DAMAGED_BARCODE || 
                mainstore.getScreenId() == appConstants.AUDIT_EXCEPTION_LOOSE_ITEMS_DAMAGED_EXCEPTION  || 
                mainstore.getScreenId() == appConstants.PUT_FRONT_EXCEPTION_SPACE_NOT_AVAILABLE || 
                mainstore.getScreenId() == appConstants.AUDIT_EXCEPTION_ITEM_IN_BOX_EXCEPTION ||
                mainstore.getScreenId() == appConstants.AUDIT_PACK_UNSCANNABLE_EXCEPTION ||
                mainstore.getScreenId() == appConstants.AUDIT_SUB_PACK_UNSCANNABLE_EXCEPTION)
            {
                CommonActions.updateKQQuantity(parseInt(_updatedQty));
                return true;
            }

             if(mainstore.getScreenId() ==appConstants.AUDIT_SCAN_SR || mainstore.getScreenId() ==appConstants.AUDIT_SCAN){
                 data = {
                    "event_name": appConstants.QUANTITY_UPDATE_AUDIT_SEAT,
                    "event_data": {
                        "type": "change_qty",
                        "quantity": parseInt(_updatedQty)
                    }
                };
            }

            else if (mainstore.getCurrentSeat() == "audit_front") {

                data = {
                    "event_name": "audit_actions",
                    "event_data": {
                        "type": "change_qty",
                        "quantity": parseInt(_updatedQty)
                    }
                };
            }
            else if (mainstore.getScreenId() == appConstants.PUT_BACK_EXCEPTION_EXTRA_ITEM_QUANTITY_UPDATE) {
                data = {
                    "event_name": "put_back_exception",
                    "event_data": {
                        "action": "confirm_quantity_update",
                        "quantity": parseInt(_updatedQty),
                        "event":mainstore.getExceptionType()
                    }
                };
            }
            else if (mainstore.getScreenId() == appConstants.PUT_BACK_EXCEPTION_OVERSIZED_ITEMS || mainstore.getScreenId() === appConstants.PUT_BACK_PHYSICALLY_DAMAGED_ITEMS) {
                data = {
                    "event_name": "put_back_exception",
                    "event_data": {
                        "action": "confirm_quantity_update",
                        "quantity": parseInt(_updatedQty),
                        "event":mainstore.getExceptionType()
                    }
                };
            }
            else {
                data = {
                    "event_name": "quantity_update_from_gui",
                    "event_data": {
                        "item_uid": this.props.itemUid,
                        "quantity_updated": parseInt(_updatedQty)
                    },
                    "source": "ui"
                };
            }
            mainstore.setShowModal(false);
            CommonActions.postDataToInterface(data);
        }
    },
    handleDecrement: function(event) {
        if (this._enableDecrement === true && _keypress == false ) {
            if (parseInt(_updatedQty) >= 0 ) {
                var data = {};
                 if(mainstore.getScreenId() === appConstants.AUDIT_EACH_UNSCANNABLE_EXCEPTION || mainstore.getScreenId() == appConstants.PUT_BACK_EXCEPTION_DAMAGED_BARCODE || 
                    mainstore.getScreenId() == appConstants.AUDIT_EXCEPTION_BOX_DAMAGED_BARCODE || 
                    mainstore.getScreenId() ==appConstants.AUDIT_EXCEPTION_LOOSE_ITEMS_DAMAGED_EXCEPTION || 
                    mainstore.getScreenId() == appConstants.PUT_FRONT_EXCEPTION_SPACE_NOT_AVAILABLE || 
                    mainstore.getScreenId() == appConstants.AUDIT_EXCEPTION_ITEM_IN_BOX_EXCEPTION||
                mainstore.getScreenId() == appConstants.AUDIT_PACK_UNSCANNABLE_EXCEPTION ||
                mainstore.getScreenId() == appConstants.AUDIT_SUB_PACK_UNSCANNABLE_EXCEPTION)
                    {
                    CommonActions.updateKQQuantity(parseInt(_updatedQty) );
                     return true;
                }
                 if(mainstore.getScreenId() ==appConstants.AUDIT_SCAN_SR || mainstore.getScreenId() ==appConstants.AUDIT_SCAN){
                 data = {
                    "event_name": appConstants.QUANTITY_UPDATE_AUDIT_SEAT,
                    "event_data": {
                        "type": "change_qty",
                        "quantity": parseInt(_updatedQty)
                    }
                };
            }

            else if (mainstore.getCurrentSeat() == "audit_front") {
                    data = {
                        "event_name": "audit_actions",
                        "event_data": {
                            "type": "change_qty",
                            "quantity": parseInt(_updatedQty)
                        }
                    };
                }
                else if (mainstore.getScreenId() == appConstants.PUT_BACK_EXCEPTION_EXTRA_ITEM_QUANTITY_UPDATE) {
                data = {
                    "event_name": "put_back_exception",
                    "event_data": {
                        "action": "confirm_quantity_update",
                        "quantity": parseInt(_updatedQty),
                        "event":mainstore.getExceptionType()
                    }
                };
                }
                else if (mainstore.getScreenId() == appConstants.PUT_BACK_EXCEPTION_OVERSIZED_ITEMS || mainstore.getScreenId() == appConstants.PUT_BACK_PHYSICALLY_DAMAGED_ITEMS) {
                data = {
                    "event_name": "put_back_exception",
                    "event_data": {
                        "action": "confirm_quantity_update",
                        "quantity": parseInt(_updatedQty),
                        "event":mainstore.getExceptionType()
                    }
                };
                }
                else {
                    data = {
                        "event_name": "quantity_update_from_gui",
                        "event_data": {
                            "item_uid": this.props.itemUid,
                            "quantity_updated": parseInt(_updatedQty)
                        },
                        "source": "ui"
                    };
                }
                CommonActions.postDataToInterface(data);
            }
        }
  },
  componentDidMount: function() {
    mainstore.removeChangeListener(this.onChange);
  },
  componentWillMount: function(){
    mainstore.removeChangeListener(this.onChange);
  },
  openNumpad : function(id){
    var self = this;
    var action = this.props.action;
    if (_scanDetails.kq_allowed == true) {
        var qty = _scanDetails.current_qty;
        var itemUid = this.props.itemUid;
        /**
         * { T2766- Removed disabled attribute when true }
         */
        $('#'+id).removeAttr("disabled");
          setTimeout(function(){ $('#'+id).keyboard({
            layout: 'custom',
            customLayout: {
                'default': ['1 2 3', '4 5 6', '7 8 9', '. 0 {b}', '{a} {c}']
            },
            reposition: true,
            alwaysOpen: false,
            initialFocus: true,
            visible: function(e, keypressed, el) {
                $(".ui-keyboard-button.ui-keyboard-46").prop('disabled', true);
                $(".ui-keyboard-button.ui-keyboard-46").css('opacity', "0.6");
                $(".ui-keyboard").css("width","230px");
                $(".ui-keyboard-preview-wrapper .ui-keyboard-preview").css("font-size","30px");
                $(".ui-keyboard-button").css("width","74px");
                $(".ui-keyboard-accept,.ui-keyboard-cancel").css("width","110px");
                //$(".current-quantity").val("");
                //$(".ui-widget-content").val("");
                $("#"+id).val("");
                $("input.ui-keyboard-preview:visible").val("");
            },
            change : function(e, keypressed, el){
                var data ={}
               if(_scanDetails.kq_allowed == false){
                    $('.ui-keyboard-preview').val("");
                    data["code"] = resourceConstants.CLIENTCODE_013;
                    data["level"] = 'error'
                    CommonActions.generateNotification(data);
                }
                else if(parseInt(keypressed.last.val) > 9999){
                    self.disableIncrement(false);
                    generateExcessNotification();
                    $('.ui-keyboard-preview').val(9999);
               }else if((parseInt(keypressed.last.val) <= 0) &&  (mainstore.getScreenId() != appConstants.AUDIT_SCAN && mainstore.getScreenId() != appConstants.AUDIT_EXCEPTION_BOX_DAMAGED_BARCODE &&
                    mainstore.getScreenId() != appConstants.PUT_BACK_EXCEPTION_DAMAGED_BARCODE && mainstore.getScreenId() != appConstants.AUDIT_EXCEPTION_LOOSE_ITEMS_DAMAGED_EXCEPTION  && mainstore.getScreenId() != appConstants.PUT_FRONT_EXCEPTION_SPACE_NOT_AVAILABLE &&
                      mainstore.getScreenId() != appConstants.AUDIT_EXCEPTION_ITEM_IN_BOX_EXCEPTION && mainstore.getScreenId() != appConstants.SEARCH_ENTITY_SCAN ) ){
                    data["code"] = resourceConstants.CLIENTCODE_009;
                    data["level"] = 'error'
                    CommonActions.generateNotification(data);
                    if(parseInt(keypressed.last.val) <= 9999)
                        $('.ui-keyboard-preview').val(_updatedQty);
                    else
                        $('.ui-keyboard-preview').val(9999);
                }else{
                    data["code"] = null;
                    data["level"] = 'error'
                    CommonActions.generateNotification(data);
                }
            },
            accepted: function(e, keypressed, el) {
               var regex = /^[1-9]\d*$/g 
               if (!regex.test(e.target.value)&& mainstore.getScreenId() != appConstants.SEARCH_ENTITY_SCAN) {
                    CommonActions.resetNumpadVal(parseInt(_updatedQty));
                } else  {
                    var data = {};
                     if( mainstore.getScreenId() == appConstants.AUDIT_EXCEPTION_BOX_DAMAGED_BARCODE ||  
                        mainstore.getScreenId() == appConstants.PUT_BACK_EXCEPTION_DAMAGED_BARCODE || 
                        mainstore.getScreenId() == appConstants.AUDIT_EXCEPTION_LOOSE_ITEMS_DAMAGED_EXCEPTION ||
                        mainstore.getScreenId() == appConstants.PUT_FRONT_EXCEPTION_SPACE_NOT_AVAILABLE ||
                         mainstore.getScreenId() == appConstants.AUDIT_EXCEPTION_ITEM_IN_BOX_EXCEPTION ||
                mainstore.getScreenId() == appConstants.AUDIT_PACK_UNSCANNABLE_EXCEPTION ||
                mainstore.getScreenId() == appConstants.AUDIT_SUB_PACK_UNSCANNABLE_EXCEPTION){
                        CommonActions.updateKQQuantity(parseInt(e.target.value));
                         return true;
                    }
                    
                      if(mainstore.getScreenId() ==appConstants.AUDIT_SCAN_SR || mainstore.getScreenId() ==appConstants.AUDIT_SCAN){
                 data = {
                    "event_name": appConstants.QUANTITY_UPDATE_AUDIT_SEAT,
                    "event_data": {
                        "type": "change_qty",
                        "quantity": parseInt(e.target.value)
                    }
                };
            }
            else if(mainstore.getScreenId()==appConstants.SEARCH_ENTITY_SCAN){
                data = {
                    "event_name": "quantity_update_from_gui",
                    "event_data": {
                        "quantity_updated": parseInt(e.target.value)
                    },
                    "source": "ui"
                };
            }
            

            else if (mainstore.getCurrentSeat() == "audit_front") {
                        data = {
                            "event_name": "audit_actions",
                            "event_data": {
                                "type": "change_qty",
                                "quantity": parseInt(e.target.value)
                            }
                        };
                    }
                    else if (mainstore.getScreenId() == appConstants.PUT_BACK_EXCEPTION_EXTRA_ITEM_QUANTITY_UPDATE) {
                         data = {
                            "event_name": "put_back_exception",
                            "event_data": {
                                "action": "confirm_quantity_update",
                                "quantity": parseInt(e.target.value),
                                "event":mainstore.getExceptionType()
                            }
                        };
                    }
                    else if (mainstore.getScreenId() == appConstants.PUT_BACK_EXCEPTION_OVERSIZED_ITEMS || mainstore.getScreenId() == appConstants.PUT_BACK_PHYSICALLY_DAMAGED_ITEMS) {
                         data = {
                            "event_name": "put_back_exception",
                            "event_data": {
                                "action": "confirm_quantity_update",
                                "quantity": parseInt(e.target.value),
                                "event":mainstore.getExceptionType()
                            }
                        };
                    }
                    else {
                        data = {
                            "event_name": "quantity_update_from_gui",
                           "event_data": {
                                "item_uid": itemUid,
                                "quantity_updated": parseInt(e.target.value)
                            },
                            "source": "ui"
                        };
                    }
                    CommonActions.postDataToInterface(data);
                }

            }
        }); }, 0)
    }else{
        $('#keyboard').attr("disabled","disabled");
    }

  },

  componentWillUnmount: function(){
    mainstore.removeChangeListener(this.onChange);
    /*
    if(this.virtualKeyboard != null){
      virtualKeyboard.getkeyboard().close();
    }
    */
  },
  onChange: function(){
  },
  checkKqAllowed : function(){
    if(_scanDetails.kq_allowed === true){
        
      if((parseInt(_updatedQty) >= parseInt(_scanDetails.total_qty)) && (parseInt(_scanDetails.total_qty) != 0 || _scanDetails.total_qty != "0") ){

          if((mainstore.getScreenId() == appConstants.PUT_FRONT_PLACE_ITEMS_IN_RACK) && (parseInt(_updatedQty) == 1) ){

              this._appendClassDown = 'downArrow disable';
              this._enableDecrement = false;
              _scanDetails.kq_allowed = false;

          }
          else{
              this._appendClassDown = 'downArrow enable';
              this._enableDecrement = true;
            }
           this._appendClassUp = 'topArrow disable';
           this._enableIncrement = false;
      }
      else{
           if(parseInt(_updatedQty) >= 9999) {
                    this.disableIncrement(false);
            }

           if(parseInt(_updatedQty) < 9999) {
                this._appendClassUp = 'topArrow enable';
                this._enableIncrement = true;
            }
           if (mainstore.getCurrentSeat() == "audit_front"){
               if(_updatedQty== 0){
                  this._appendClassDown = 'downArrow disable';
                    this._enableDecrement = false;
                }else{
                  this._appendClassDown = 'downArrow enable';
                  this._enableDecrement = true;
                }
            }else if(mainstore.getScreenId() === appConstants.AUDIT_EACH_UNSCANNABLE_EXCEPTION ||  
            mainstore.getScreenId() == appConstants.PUT_BACK_EXCEPTION_DAMAGED_BARCODE || 
            mainstore.getScreenId() == appConstants.AUDIT_EXCEPTION_BOX_DAMAGED_BARCODE ||  
            mainstore.getScreenId() ==appConstants.AUDIT_EXCEPTION_LOOSE_ITEMS_DAMAGED_EXCEPTION || 
            mainstore.getScreenId() == appConstants.PUT_FRONT_EXCEPTION_SPACE_NOT_AVAILABLE || 
            mainstore.getScreenId() == appConstants.AUDIT_EXCEPTION_ITEM_IN_BOX_EXCEPTION || 
            mainstore.getScreenId() == appConstants.PUT_FRONT_PLACE_UNMARKED_ENTITY_IN_RACK ||
            mainstore.getScreenId() == appConstants.SEARCH_ENTITY_SCAN ){
                if(_updatedQty == 0){
                  this._appendClassDown = 'downArrow disable';
                  this._enableDecrement = false;
                }else{
                  this._appendClassDown = 'downArrow enable';
                  this._enableDecrement = true;
                }
            }
            else{
                if(_updatedQty == 1){
                  this._appendClassDown = 'downArrow disable';
                  this._enableDecrement = false;
                }else{
                  this._appendClassDown = 'downArrow enable';
                  this._enableDecrement = true;
                }
            }
      }
    }
    else{
        this._appendClassUp = 'topArrow disable';
        this._appendClassDown = 'downArrow disable';

        this._enableDecrement = false;
        this._enableIncrement = false;
    }
  },

  handleTotalQty : function(){

    var hideCounters = !!this.props.hideCounters;
if((mainstore.getScreenId() === appConstants.PUT_FRONT_PLACE_ITEMS_IN_RACK ||  
mainstore.getScreenId() === appConstants.PUT_FRONT_PLACE_UNMARKED_ENTITY_IN_RACK ||
mainstore.getScreenId() ===  appConstants.PUT_FRONT_SCAN_RACK_FOR_UNMARKED_ENTITY ||appConstants.PICK_FRONT_MORE_ITEM_SCAN 
||appConstants.PICK_FRONT_WORKING_TABLE ||appConstants.PICK_FRONT_PACKING_BOX ||appConstants.PICK_FRONT_PACKING_ITEM_SCAN) && _scanDetails.total_qty != 0){
    this._qtyComponent = (
        React.createElement("div", {id: !hideCounters?'textbox':'textbox-counter'}, 
          React.createElement("input", {id: "keyboard", className: "current-quantity", key: "text_1", value: _putPickUpdatedQty, onClick: !this.props.disable ? this.openNumpad.call(null,"keyboard"):null}), 
          React.createElement("span", {className: "separator"}, "/"), 
          React.createElement("span", {className: "total-quantity"}, parseInt(_scanDetails.total_qty))
        )
      );
    
}

    else if(_scanDetails.total_qty != 0){
        this._qtyComponent = (
          React.createElement("div", {id: !hideCounters?'textbox':'textbox-counter'}, 
            React.createElement("input", {id: "keyboard", className: "current-quantity", key: "text_1", value: _updatedQty, onClick: !this.props.disable ? this.openNumpad.call(null,"keyboard"):null}), 
            React.createElement("span", {className: "separator"}, "/"), 
            React.createElement("span", {className: "total-quantity"}, parseInt(_scanDetails.total_qty))
          )
        );
    }
    else if(appConstants.SEARCH_ENTITY_SCAN){
        this._qtyComponent = (
            React.createElement("div", {id: "textbox"}, 
              React.createElement("input", {id: "keyboard", disabled: !!this.props.disable, key: "text_1", value: _putPickUpdatedQty, onClick: !this.props.disable ? this.openNumpad.call(null,"keyboard"):null})
            )
          );
    }
    else{
        this._qtyComponent = (
          React.createElement("div", {id: "textbox"}, 
            React.createElement("input", {id: "keyboard", disabled: !!this.props.disable, key: "text_1", value: _updatedQty, onClick: !this.props.disable ? this.openNumpad.call(null,"keyboard"):null})
          )
        );
    }

    },
    render: function(data) {
        if(this.props.scanDetailsMissing == undefined && this.props.scanDetailsDamaged == undefined && this.props.scanDetailsGood == undefined  ){
             this.checkKqAllowed();
            this.handleTotalQty();
            _putPickUpdatedQty=parseInt(this.props.scanDetails.current_qty);
            _updatedQty = parseInt(this.props.scanDetails.current_qty);
            _scanDetails = this.props.scanDetails;


        }
        else if(this.props.scanDetailsGood != undefined && this.props.scanDetails == undefined){
            _putPickUpdatedQty=parseInt(this.props.scanDetailsGood.current_qty);
            _updatedQty = parseInt(this.props.scanDetailsGood.current_qty);
            _scanDetails = this.props.scanDetailsGood;
            this.checkKqAllowed();
            this.handleTotalQty();
            
        }
        var hideCounters = !!this.props.hideCounters

        return ( React.createElement("div", {className: "kq-wrapper"}, 
            !hideCounters ? React.createElement("a", {href: "#", className: this._appendClassUp, action: this.props.action, onClick: !this.props.disable ? this.incrementValue :null, onMouseDown: !this.props.disable ? this.incrementValue:null}, 
            React.createElement("span", {className: "glyphicon glyphicon-menu-up"}, " "), " "): '', 

            this._qtyComponent, 
            
            !hideCounters ? React.createElement("a", {href: "#", className: this._appendClassDown, action: this.props.action, onClick: !this.props.disable ? this.decrementValue:null, onMouseDown: !this.props.disable? this.decrementValue :null}, 
            React.createElement("span", {className: "glyphicon glyphicon-menu-down"}, " "), " ") :''
            
            )
        )

    }

});
KQ.defaultProps = { disable: false };

module.exports = KQ;

},{"../../actions/CommonActions":181,"../../constants/appConstants":242,"../../constants/resourceConstants":244,"../../stores/mainstore":259,"react":179}],217:[function(require,module,exports){
var React = require("react")
var CommonActions = require("../../actions/CommonActions")
var mainstore = require("../../stores/mainstore")
var appConstants = require("../../constants/appConstants")
var resourceConstants = require("../../constants/resourceConstants")
var _scanDetails = {},
  _keypress = false

var NumericIndicator = React.createClass({displayName: "NumericIndicator",
  _appendClassUp: "gor-plus-sign enable",
  _qtyComponent: null,
  _appendClassDown: "gor-minus-sign enable",
  virtualKeyboard: null,
  _id: "keyboard",
  _enableIncrement: true,
  _enableDecrement: true,
  _updatedQtyGood: 0,
  _updatedQtyDamaged: 0,
  _updatedQtyUnscannble: 0,
  _updatedQtyMissing: 0,
  _qty: 0,
  getInitialState: function() {
    if (this.props.damagedQty !== undefined) {
      this._updatedQtyDamaged = this.props.damagedQty
      this._qty =
        this.props.execType === appConstants.DAMAGED_QUANTITY
          ? this.props.damagedQty
          : 0
    } else {
      this._qty =
        this.props.execType === appConstants.DEFAULT
          ? this.props.scanDetails.current_qty
          : 0
    }
    return {
      goodQuantity: mainstore.getGoodQuantity(),
      value: this._qty
    }
  },
  self: this,
  generateExcessNotification: function() {
    var data = {}
    data["code"] = resourceConstants.CLIENTCODE_008
    data["level"] = "error"
    CommonActions.generateNotification(data)
    return
  },

  changeValueIncrement: function(event) {
    if (
      this.props.execType === appConstants.GOOD_QUANTITY ||
      this.props.execType === appConstants.GOOD_PACK ||
      this.props.execType === appConstants.GOOD_SUB_PACK
    ) {
      this._updatedQtyGood++
      this.setState({
        value: this._updatedQtyGood
      })
    } else if (
      this.props.execType === appConstants.MISSING_QUANTITY ||
      this.props.execType === appConstants.PACK_MISSING ||
      this.props.execType === appConstants.SUB_PACK_MISSING
    ) {
      this._updatedQtyMissing++

      this.setState({
        value: this._updatedQtyMissing
      })
    } else if (
      this.props.execType === appConstants.UNSCANNABLE_QUANTITY ||
      this.props.execType === appConstants.BAD_BARCODE_PACK ||
      this.props.execType === appConstants.BAD_BARCODE_SUB_PACK
    ) {
      this._updatedQtyUnscannble++

      this.setState({
        value: this._updatedQtyUnscannble
      })
    } else if (
      this.props.execType === appConstants.DAMAGED_QUANTITY ||
      this.props.execType === appConstants.DAMAGED_PACK ||
      this.props.execType === appConstants.DAMAGED_SUB_PACK
    ) {
      this._updatedQtyDamaged++

      this.setState({
        value: this._updatedQtyDamaged
      })
    } else {
      this._qty++
      this.setState({
        value: this._qty
      })
    }
  },

  changeValueDecrement: function(event) {
    if (
      this.props.execType === appConstants.GOOD_QUANTITY ||
      this.props.execType === appConstants.GOOD_PACK ||
      this.props.execType === appConstants.GOOD_SUB_PACK
    ) {
      this._updatedQtyGood--
      this.setState({
        value: this._updatedQtyGood
      })
    } else if (
      this.props.execType === appConstants.MISSING_QUANTITY ||
      this.props.execType === appConstants.PACK_MISSING ||
      this.props.execType === appConstants.SUB_PACK_MISSING
    ) {
      this._updatedQtyMissing--

      this.setState({
        value: this._updatedQtyMissing
      })
    } else if (
      this.props.execType === appConstants.UNSCANNABLE_QUANTITY ||
      this.props.execType === appConstants.BAD_BARCODE_PACK ||
      this.props.execType === appConstants.BAD_BARCODE_SUB_PACK
    ) {
      this._updatedQtyUnscannble--

      this.setState({
        value: this._updatedQtyUnscannble
      })
    } else if (
      this.props.execType === appConstants.DAMAGED_QUANTITY ||
      this.props.execType === appConstants.DAMAGED_PACK ||
      this.props.execType === appConstants.DAMAGED_SUB_PACK
    ) {
      this._updatedQtyDamaged--

      this.setState({
        value: this._updatedQtyDamaged
      })
    } else {
      this._qty--
      this.setState({
        value: this._qty
      })
    }
  },

  updateStore: function(event, qty) {
    var total_entered =
      this._updatedQtyGood +
      this._updatedQtyMissing +
      this._updatedQtyDamaged +
      this._updatedQtyUnscannble
    if (this._enableIncrement === true && _keypress === true) {
      var data = {}
      switch (this.props.execType) {
        case appConstants.GOOD_QUANTITY:
        case appConstants.GOOD_PACK:
        case appConstants.GOOD_SUB_PACK:
          CommonActions.updateGoodQuantity(parseInt(this._updatedQtyGood))
          break
        case appConstants.MISSING_QUANTITY:
        case appConstants.PACK_MISSING:
        case appConstants.SUB_PACK_MISSING:
          CommonActions.updateMissingQuantity(parseInt(this._updatedQtyMissing))
          break
        case appConstants.DAMAGED_QUANTITY:
        case appConstants.DAMAGED_PACK:
        case appConstants.DAMAGED_SUB_PACK:
          CommonActions.updateDamagedQuantity(parseInt(this._updatedQtyDamaged))
          break
        case appConstants.UNSCANNABLE_QUANTITY:
        case appConstants.BAD_BARCODE_PACK:
        case appConstants.BAD_BARCODE_SUB_PACK:
          CommonActions.updateUnscannableQuantity(
            parseInt(this._updatedQtyUnscannble)
          )
          break
        default:
          CommonActions.updateKQQuantity(parseInt(this._qty))
      }
      return true
    }
  },
  incrementValue: function(event) {
    var total_entered =
      parseInt(this._updatedQtyGood) +
      parseInt(this._updatedQtyMissing) +
      parseInt(this._updatedQtyDamaged) +
      parseInt(this._updatedQtyUnscannble)
    if (parseInt(total_entered, 10) > 9999) {
      this.generateExcessNotification()
    } else {
      var self = this
      if (this._enableIncrement) {
        _keypress = true
        if (event.type === "mousedown") {
          this.changeValueIncrement(event)
        }
      }
      self.updateStore()
    }
  },

  checkKqAllowed: function() {
    if (this.state.value <= 0) {
      this._appendClassDown = "gor-minus-sign disable"
      this._enableDecrement = false
    } else {
      this._appendClassDown = "gor-minus-sign enable"
      this._enableDecrement = true
    }

    if (this.state.value >= 9999) {
      this._appendClassUp = "gor-plus-sign disable"
      this._enableIncrement = false
    } else {
      this._appendClassUp = "gor-plus-sign enable"
      this._enableIncrement = true
    }
  },

  checkKqAllowedForAuditDamagedQuantity: function(isKQEnabled) {
    if (isKQEnabled) {
      if (this.state.value >= 1) {
        this._appendClassUp = "gor-plus-sign enable"
        this._appendClassDown = "gor-minus-sign enable"
        this._enableIncrement = true
        this._enableDecrement = true
      } else {
        this._appendClassDown = "gor-minus-sign disable"
        this._appendClassUp = "gor-plus-sign enabled"
        this._enableIncrement = true
        this._enableDecrement = false
      }
    } else {
      // case for serialised flow => increment should be disabled and decrement is possible till 0
      if (this.state.value === 0) {
        this._appendClassDown = "gor-minus-sign disable"
        this._enableDecrement = false
      }
      this._appendClassUp = "gor-plus-sign disable"
      this._enableIncrement = false
    }
  },

  decrementValue: function(event) {
    var self = this
    if (this._enableDecrement) {
      _keypress = true
      if (event.type === "mousedown") {
        this.changeValueDecrement(event)
      }

      self.updateStore()
    }
  },

  componentDidMount() {
    ;(function(self) {
      $(".gor_" + self.props.execType).keyboard({
        layout: "custom",
        customLayout: {
          default: ["1 2 3", "4 5 6", "7 8 9", ". 0 {b}", "{a} {c}"]
        },
        reposition: true,
        alwaysOpen: false,
        initialFocus: true,
        visible: function(e, keypressed, el) {
          $(".ui-keyboard-button.ui-keyboard-46").prop("disabled", true)
          $(".ui-keyboard-button.ui-keyboard-46").css("opacity", "0.6")
          $(".ui-keyboard").css("width", "230px")
          $(".ui-keyboard-preview-wrapper .ui-keyboard-preview").css(
            "font-size",
            "30px"
          )
          $(".ui-keyboard-button").css("width", "74px")
          $(".ui-keyboard-accept,.ui-keyboard-cancel").css("width", "110px")
          $("input.ui-keyboard-preview:visible").val("")
        },
        change: function(e, keypressed, el) {
          var data = {}
          if (_scanDetails.kq_allowed === false) {
            $(".ui-keyboard-preview").val("")
            data["code"] = resourceConstants.CLIENTCODE_013
            data["level"] = "error"
            CommonActions.generateNotification(data)
          } else if (parseInt(keypressed.last.val) > 9999) {
            self.generateExcessNotification()
            $(".ui-keyboard-preview").val(9999)
          } else {
            data["code"] = null
            data["level"] = "error"
            CommonActions.generateNotification(data)
          }
        },
        accepted: function(e, keypressed, el) {
          let txtBoxVal = isNaN(parseInt(e.target.value, 10))
            ? 0
            : Math.abs(parseInt(e.target.value, 10))
          if (
            self.props.execType === appConstants.GOOD_QUANTITY ||
            self.props.execType === appConstants.GOOD_PACK ||
            self.props.execType === appConstants.GOOD_SUB_PACK
          ) {
            self._updatedQtyGood = txtBoxVal
            CommonActions.updateGoodQuantity(parseInt(self._updatedQtyGood))
            self.setState({
              value: self._updatedQtyGood
            })
          } else if (
            self.props.execType === appConstants.MISSING_QUANTITY ||
            self.props.execType === appConstants.PACK_MISSING ||
            self.props.execType === appConstants.SUB_PACK_MISSING
          ) {
            self._updatedQtyMissing = txtBoxVal
            CommonActions.updateMissingQuantity(
              parseInt(self._updatedQtyMissing)
            )
            self.setState({
              value: self._updatedQtyMissing
            })
          } else if (
            self.props.execType === appConstants.UNSCANNABLE_QUANTITY ||
            self.props.execType === appConstants.BAD_BARCODE_PACK ||
            self.props.execType === appConstants.BAD_BARCODE_SUB_PACK
          ) {
            self._updatedQtyUnscannble = txtBoxVal
            CommonActions.updateUnscannableQuantity(
              parseInt(self._updatedQtyUnscannble)
            )
            self.setState({
              value: self._updatedQtyUnscannble
            })
          } else if (
            self.props.execType === appConstants.DAMAGED_QUANTITY ||
            self.props.execType === appConstants.DAMAGED_PACK ||
            self.props.execType === appConstants.DAMAGED_SUB_PACK
          ) {
            self._updatedQtyDamaged = txtBoxVal
            CommonActions.updateDamagedQuantity(
              parseInt(self._updatedQtyDamaged)
            )
            self.setState({
              value: self._updatedQtyDamaged
            })
          } else {
            self._qty = txtBoxVal
            CommonActions.updateKQQuantity(parseInt(self._qty))
            self.setState({
              value: self._qty
            })
          }
        }
      })
    })(this)
  },
  callBackForAuditDamagedException: function() {
    //update damaged Quantity in store.
    mainstore.setDamagedQuanity(this._updatedQtyDamaged)
  },
  componentWillReceiveProps(nextProps) {
    if (nextProps.btnValue !== this.props.btnValue) {
      this._updatedQtyDamaged = nextProps.btnValue
      this.setState(
        {
          value: nextProps.btnValue
        },
        this.callBackForAuditDamagedException()
      )
    }
  },
  componentWillMount: function() {
    var self = this
    /*Using settimeout to overcome the flux issue of Invariant Violation 
        when there are two simultaneous dispatches*/
    setTimeout(function() {
      CommonActions.updateKQQuantity(
        parseInt(
          self.props.execType === appConstants.GOOD_QUANTITY
            ? self.state.goodQuantity
            : self.state.value
        )
      )
    }, 0)
  },
  render: function(data) {
    var inputType = this.props.inputType ? this.props.inputType : "text"
    if (this.props.execType === appConstants.GOOD_QUANTITY) {
      return (
        React.createElement("div", {
          className: 
            this.props.Formattingclass
              ? "indicator-wrapper " + this.props.Formattingclass
              : "indicator-wrapper"
          
        }, 
          React.createElement("div", null, 
            React.createElement("span", {
              className: this._appendClassDown + " hideMe", 
              action: this.props.action, 
              onClick: this.decrementValue, 
              onMouseDown: this.decrementValue
            }), 
            React.createElement("input", {
              disabled: true, 
              id: "keyboard", 
              value: this.state.goodQuantity, 
              type: inputType, 
              name: "quantity", 
              className: "gor-quantity-text gor_" + this.props.execType}
            ), 
            React.createElement("span", {
              className: this._appendClassUp + " hideMe", 
              action: this.props.action, 
              onClick: this.incrementValue, 
              onMouseDown: this.incrementValue
            })
          )
        )
      )
    } else {
      if (
        this.props.isKQEnabled !== undefined &&
        this.props.execType === appConstants.DAMAGED_QUANTITY
      ) {
        this.checkKqAllowedForAuditDamagedQuantity(this.props.isKQEnabled)
        return (
          React.createElement("div", {
            className: 
              this.props.Formattingclass
                ? "indicator-wrapper " + this.props.Formattingclass
                : "indicator-wrapper"
            
          }, 
            React.createElement("div", null, 
              React.createElement("span", {
                className: this._appendClassDown, 
                action: this.props.action, 
                onClick: this.decrementValue, 
                onMouseDown: this.decrementValue
              }), 
              React.createElement("input", {
                disabled: true, 
                id: "keyboard", 
                value: this.state.value, 
                type: inputType, 
                name: "quantity", 
                className: "gor-quantity-text gor_" + this.props.execType}
              ), 
              React.createElement("span", {
                className: this._appendClassUp, 
                action: this.props.action, 
                onClick: this.incrementValue, 
                onMouseDown: this.incrementValue
              })
            )
          )
        )
      } else {
        this.checkKqAllowed()
        return (
          React.createElement("div", {
            className: 
              this.props.Formattingclass
                ? "indicator-wrapper " + this.props.Formattingclass
                : "indicator-wrapper"
            
          }, 
            React.createElement("div", null, 
              React.createElement("span", {
                className: this._appendClassDown, 
                action: this.props.action, 
                onClick: this.decrementValue, 
                onMouseDown: this.decrementValue
              }), 
              React.createElement("input", {
                id: "keyboard", 
                value: this.state.value, 
                type: inputType, 
                name: "quantity", 
                className: "gor-quantity-text gor_" + this.props.execType}
              ), 
              React.createElement("span", {
                className: this._appendClassUp, 
                action: this.props.action, 
                onClick: this.incrementValue, 
                onMouseDown: this.incrementValue
              })
            )
          )
        )
      }
    }
  }
})

module.exports = NumericIndicator

},{"../../actions/CommonActions":181,"../../constants/appConstants":242,"../../constants/resourceConstants":244,"../../stores/mainstore":259,"react":179}],218:[function(require,module,exports){
var React = require('react');
var PopUp = React.createClass({displayName: "PopUp", 
  
  componentWillMount: function(){
  },
  componentWillUnmount: function(){
  },
  onChange: function(){ 
  },


  render: function(data){ 
      var productInfo=  this.props.popupData;
      var details = [];
      for (var key in productInfo) {
        if (productInfo.hasOwnProperty(key)) {
           details.push((React.createElement("div", null, React.createElement("div", {className: "col-md-6"}, key, " "), React.createElement("div", {className: "col-md-6"}, productInfo[key]))));
            
        }
      }
      return (
          React.createElement("div", {className: "container1 " + (this.props.popupVisible ? 'active' : '')}, 
            React.createElement("div", {className: "modal fade", id: "myModal", tabIndex: "-1", role: "dialog", "aria-labelledby": "myModalLabel", "data-backdrop": "static", "data-keyboard": "false"}, 
              React.createElement("div", {className: "modal-dialog", role: "document"}, 
                React.createElement("div", {className: "modal-content"}, 
                  React.createElement("div", {className: "modal-header"}, 
                    React.createElement("h4", {className: "modal-title"}, "Product Details")
                  ), 
                  React.createElement("div", {className: "modal-body"}, 
                    React.createElement("table", null, 
                      React.createElement("tbody", null, 
                        details
                      )
                    )
                  )
                )
              )
            )
        ) 
      )
  }
});

module.exports = PopUp;

},{"react":179}],219:[function(require,module,exports){
var React = require('react');
var CommonActions = require('../../actions/CommonActions');
var PopUp = require('./PopUp');
var Modal = require('../Modal/Modal');
var mainstore = require('../../stores/mainstore');
var allresourceConstants = require('../../constants/resourceConstants');


function getPopUpState(){
  return {        
        popupVisible : mainstore.getPopUpVisible()
  };
}
var product_info_locale = {};
var image_url = {};
var ProductInfo = React.createClass({displayName: "ProductInfo",
  getInitialState: function(){
    return getPopUpState();
  },
  showModal: function(data,type) {
         CommonActions.showModal({
            data:data,
            type:type
         });
         $('.modal').modal();
  },
  showPopUp: function(){
    if(this.state.popupVisible === false){
        CommonActions.updateCardVisible(true);
    }
    else 
      CommonActions.updateCardVisible(false);

  },
  componentWillMount: function(){
    mainstore.addChangeListener(this.onChange);
  },
  componentWillUnmount: function(){
    mainstore.removeChangeListener(this.onChange);
  },
  onChange: function(){ 
    this.setState(getPopUpState());
  },
   showPopUp: function(){
    if(this.state.popupVisible === false)
        CommonActions.updatePopupVisible(true);
    else 
      CommonActions.updatePopupVisible(false);
    
  },
  displayLocale : function(data){
    product_info_locale = {};
    image_url = {};
    var language_locale = sessionStorage.getItem('localeData');
    var locale;
    if(language_locale == 'null' || language_locale == null){
      locale = 'en-US';
    }else{
      locale = JSON.parse(language_locale)["data"]["locale"]; 
    } 
    data.map(function(value, index){
      var keyValue;
      var imageKey
      for (var key in value[0]) { 
        if(key != 'display_data' && key != 'product_local_image_url' ){
          keyValue = value[0][key] + ' ';
         }else if(key != 'display_data' && key == 'product_local_image_url' ){
            imageKey = value[0][key];
         }
      }
      value[0].display_data.map(
        function(data_locale, index1){
         if(data_locale.locale == locale){
            if(data_locale.display_name != 'product_local_image_url' ){
              product_info_locale[data_locale.display_name] = keyValue;
            }
          }
          if(data_locale.display_name == 'product_local_image_url' ){
              if(imageKey === "outer_each" || imageKey === "inner_each" || imageKey === "outer_inner"){
                image_url[data_locale.display_name] = "assets/images/" + imageKey + ".gif";
              }
              else if(imageKey === "outer" || imageKey === "inner"){
                image_url[data_locale.display_name] = "assets/images/" + imageKey + ".png";
              }
              else
                image_url[data_locale.display_name] = imageKey;
          }
        
        }

      )
      
    });
  },
  render: function(data){ 
    this.displayLocale(this.props.productDetails);
    return (       
            React.createElement("div", {className: "product-details-wrapper"}, 
              React.createElement("div", {className: "img-container"}, 
                  React.createElement("img", {className: "img-responsive", src: image_url.product_local_image_url})
              ), 
              React.createElement("div", {className: "view-more-link", "data-toggle": "modal", "data-target": "#myModal", onClick: this.showModal.bind(this,product_info_locale,"product-detail")}, 
                React.createElement("span", null, " ", _(allresourceConstants.VIEW_MORE), " "), 
                React.createElement("i", {className: "glyphicon glyphicon-info-sign"})
              )
            )
    )
  }
});

module.exports = ProductInfo;

},{"../../actions/CommonActions":181,"../../constants/resourceConstants":244,"../../stores/mainstore":259,"../Modal/Modal":199,"./PopUp":218,"react":179}],220:[function(require,module,exports){
var React = require('react');
var mainstore = require('../../stores/mainstore');
var KQ = require('./KQ');
var ProductInfo = require('./ProductInfo');
var PopUp = require('./PopUp');

var Wrapper = React.createClass({displayName: "Wrapper",
  getInitialState: function(){
    return {
       
    }
  },
  componentWillMount: function(){
    mainstore.addChangeListener(this.onChange);
  },
  componentWillUnmount: function(){
    mainstore.removeChangeListener(this.onChange);
  },
  onChange: function(){ 
  },
  render: function(data){
      return (
        React.createElement("div", {className: "rightWrapper"}, 
            this.props.productDetails && this.props.productDetails.length ? (React.createElement(ProductInfo, {productDetails: this.props.productDetails})):(React.createElement("div", {className: "product-details-empty"})), 
            React.createElement(KQ, {scanDetails: this.props.scanDetails, itemUid: this.props.itemUid})
        )    
      )
  }
});

module.exports = Wrapper;

},{"../../stores/mainstore":259,"./KQ":216,"./PopUp":218,"./ProductInfo":219,"react":179}],221:[function(require,module,exports){
var React = require('react');
var mainstore = require('../../stores/mainstore');
var KQ = require('./KQ');
var ProductInfo = require('./ProductInfo');
var PopUp = require('./PopUp');

var Wrapper = React.createClass({displayName: "Wrapper",
  getInitialState: function(){
    return {
       
    }
  },
  componentWillMount: function(){
    mainstore.addChangeListener(this.onChange);
  },
  componentWillUnmount: function(){
    mainstore.removeChangeListener(this.onChange);
  },
  onChange: function(){ 
  },
  render: function(data){
      return (
        React.createElement("div", {className: "wrapper-flexible"}, 
            this.props.productDetails && this.props.productDetails.length?(React.createElement(ProductInfo, {productDetails: this.props.productDetails})):(React.createElement("div", {className: "product-details-empty"})), 
            React.createElement(KQ, {scanDetails: this.props.scanDetails, itemUid: this.props.itemUid})
        )    
      )
  }
});

module.exports = Wrapper;

},{"../../stores/mainstore":259,"./KQ":216,"./PopUp":218,"./ProductInfo":219,"react":179}],222:[function(require,module,exports){
var React = require('react');
var CommonActions = require('../../actions/CommonActions');
var mainstore = require('../../stores/mainstore');
var appConstants = require('../../constants/appConstants');
var resourceConstants = require('../../constants/resourceConstants');
var virtualKeyBoard_login; 
function getState(){
    return {
       username : ''
   }
 }
var TextEditor = React.createClass({displayName: "TextEditor",
    getInitialState: function(){
        return getState();
      },
    
    componentDidMount: function(){
        // mainstore.addChangeListener(this.onChange);
        // loginstore.addChangeListener(this.onChange);
      var self=this;
        virtualKeyBoard_login = $('#username').keyboard({
          layout: 'custom',
          customLayout: {
            'default': ['! @ # $ % ^ & * + _', '1 2 3 4 5 6 7 8 9 0 {b}', 'q w e r t y u i o p', 'a s d f g h j k l', '{shift} z x c v b n m . {shift}','{space}', '{a} {c}'],
            'shift':   ['( ) { } [ ] = ~ ` -', '< > | ? / " : ; , \' {b}', 'Q W E R T Y U I O P', 'A S D F G H J K L', '{shift} Z X C V B N M . {shift}','{space}', '{a} {c}']
          },
          css: {
            container: "ui-widget-content ui-widget ui-corner-all ui-helper-clearfix custom-keypad"
          },
          reposition: true,
          alwaysOpen: false,
          initialFocus: true,      
          visible : function(e, keypressed, el){
            el.value = '';
            //$(".authNotify").css("display","none"); 
          },
          
          accepted: function(e, keypressed, el) {
            var usernameValue = document.getElementById('username').value; 
            CommonActions.updateSeatData(true, "orphanSearchStart"); 
            self.props.callAPItoGetData(usernameValue)  ;
          }
        }); 
      },
      componentWillUnmount: function(){
        $('#username_keyboard').remove();
       // mainstore.removeChangeListener(this.onChange);
      },
       componentWillMount:function(){
        virtualKeyBoard_login = $('#username').keyboard({
          layout: 'custom',
          customLayout: {
            'default': ['! @ # $ % ^ & * + _', '1 2 3 4 5 6 7 8 9 0 {b}', 'q w e r t y u i o p', 'a s d f g h j k l', '{shift} z x c v b n m . {shift}','{space}', '{a} {c}'],
            'shift':   ['( ) { } [ ] = ~ ` -', '< > | ? / " : ; , \' {b}', 'Q W E R T Y U I O P', 'A S D F G H J K L', '{shift} Z X C V B N M . {shift}','{space}', '{a} {c}']
          },
          css: {
            container: "ui-widget-content ui-widget ui-corner-all ui-helper-clearfix custom-keypad"
          },
          reposition: true,
          alwaysOpen: false,
          initialFocus: true,      
          visible : function(e, keypressed, el){
            el.value = '';
            //$(".authNotify").css("display","none"); 
          },
          
          accepted: function(e, keypressed, el) {
            var usernameValue = document.getElementById('username').value;  

          }
        });
       },
  onChange: function(){
  },

    render: function(data) {
    
    return ( 
        React.createElement("input", {type: "text", className: "form-control", id: "username", placeholder: _('Scan item or enter barcode details'), ref: "username"})
        )

    }

});
TextEditor.defaultProps = { disable: false };

module.exports = TextEditor;

},{"../../actions/CommonActions":181,"../../constants/appConstants":242,"../../constants/resourceConstants":244,"../../stores/mainstore":259,"react":179}],223:[function(require,module,exports){
var React = require('react');
var DrawerSlot = require('./DrawerSlot');

/**
 * React component to plot a single drawer row
 */
var DrawerRow = React.createClass({displayName: "DrawerRow",
	
	_processData:function(){
		var drawerSlotData = this.props.drawerSlotData
		var totalDrawerHeight= this.props.totalDrawerHeight;
		var selectedSlot= this.props.selectedSlot;
		var eachSlot;
		var isSelected = false;
		var rackRowHeight;
		eachSlot = drawerSlotData.map(function(slot,index){
		var x = Math.round((slot[3]/totalDrawerHeight)*100);
		isSelected = slot[0][0] === selectedSlot ? true :false;
		rackRowHeight = {
			
			flexGrow : x.toString()
		};
		
		return(
				React.createElement("div", {className: "rackRow", style: rackRowHeight}, 
				React.createElement(DrawerSlot, {selectedSlot: isSelected, selectedDrawerSlot: selectedSlot, key: index})
				)
			);
		
	});
		return eachSlot
	},
	render: function(){
		
	var html = this._processData();	
		
	return (React.createElement("div", {className: "drawers drawRack", id: "drSlot"}, 
			html.reverse()
		))
				
				
		
	}
});
DrawerRow.propTypes = {
  "drawerSlotData": React.PropTypes.array,
  "totalDrawerHeight":React.PropTypes.number,
  "selectedSlot":React.PropTypes.string
};
module.exports = DrawerRow;

},{"./DrawerSlot":224,"react":179}],224:[function(require,module,exports){
var React = require('react');

/**
 * React component to plot a single drawer
 */

var DrawerSlot = React.createClass({displayName: "DrawerSlot",
	render : function(){
		
		var slotWidth = {
				width : 100 + '%'
			};
		var slotHTML;
		if(this.props.selectedSlot){
			slotHTML = (React.createElement("div", {className: "singleslot " + (this.props.selectedSlot ? 'activeSlot' : '')}, 
				this.props.selectedDrawerSlot
			))
		}
		else{
			slotHTML = (React.createElement("div", {className: "singleslot " + (this.props.selectedSlot ? 'activeSlot' : '')}
				
			))
		}

		return (
			React.createElement("div", {className: "rackSlot", style: slotWidth}, 
				slotHTML
			)
			
			);
	}
});
DrawerSlot.propTypes = {
  "selectedSlot": React.PropTypes.bool,
  "selectedDrawerSlot":React.PropTypes.string
};
module.exports = DrawerSlot ;

},{"react":179}],225:[function(require,module,exports){
var React = require('react');
var RackRow = require('./RackRow');
var DrawerRow = require('./DrawerRow');
var MsuRackFlex = require('./MsuRackFlex');

var MsuRack = React.createClass({displayName: "MsuRack",

    render: function(){
		return (
				React.createElement("div", {className: "drawRackWrapper"}, 
					React.createElement(MsuRackFlex, {
						rackDetails: this.props.rackData.rack_type_rec, 
						slotBarcodes: this.props.rackData.slot_barcodes, 
						toteStatus:  this.props.rackData.tote_status, 
						rackWidth: this.props.rackData.rack_width, 
						screenId: this.props.screenId, 
						PickFrontProductDetails: this.props.PickFrontProductDetails}
					)
                )
			);
	}
});

module.exports = MsuRack;

},{"./DrawerRow":223,"./MsuRackFlex":226,"./RackRow":227,"react":179}],226:[function(require,module,exports){
var React = require('react')

var MsuRackFlex = React.createClass({displayName: "MsuRackFlex",
  getInitialState: function() {
    return this._getMaxXMaxYCoords(this.props.rackDetails)
  },
  componentWillReceiveProps: function(nextProps) {
    this.setState(this._getMaxXMaxYCoords(nextProps.rackDetails))
  },

  _getMaxXMaxYCoords: function(vSlots) {
    if (!vSlots || (vSlots.constructor !== Array && vSlots.length < 1)) {
      //no slots found
      return
    }

    var lastHSlot = {},
      lastVSlot = {}
    var selectedSlotIndex

    var newBarcodes = [] // for storing post data manipulation
    var selectedSlotIds = '',
      valueToShow = ''
    var barcodeData = this.props.slotBarcodes || []
    var lengthSelectedSlot = barcodeData.length

    if (barcodeData) {
      barcodeData.map(function(slotBarcodes, idx) {
        var str = slotBarcodes,
          delimiter = '.',
          start = 2,
          tokens = str.split(delimiter).slice(start)
        if (tokens.length > 1) result = tokens.join('.')
        //take extra care when we have 3rd "." as delimiter
        else result = tokens.toString()

        newBarcodes.push(result)
      })
    }
    if (newBarcodes.length > 1) {
      valueToShow = newBarcodes[0] + ' - ' + newBarcodes[newBarcodes.length - 1]
    } else if (newBarcodes.length == 1) {
      valueToShow = newBarcodes[0]
    }

    selectedSlotIds = valueToShow

    vSlots.map(function(eachSlot, index) {
      var eachSlotBarcodes = eachSlot.barcodes
      if (!eachSlotBarcodes) return
      if (eachSlotBarcodes.length === newBarcodes.length) {
        if (JSON.stringify(newBarcodes) == JSON.stringify(eachSlotBarcodes)) {
          selectedSlotIndex = index
        }
      }
    })

    lastHSlot = vSlots.reduce(function(prevSlot, currSlot) {
      if (prevSlot.orig_coordinates[0] < currSlot.orig_coordinates[0]) {
        return currSlot
      } else if (
        prevSlot.orig_coordinates[0] === currSlot.orig_coordinates[0]
      ) {
        return currSlot
      } else {
        return prevSlot
      }
    })

    lastVSlot = vSlots.reduce(function(prevSlot, currSlot) {
      if (prevSlot.orig_coordinates[1] < currSlot.orig_coordinates[1]) {
        return currSlot
      } else if (
        prevSlot.orig_coordinates[1] === currSlot.orig_coordinates[1]
      ) {
        return currSlot
      } else {
        return prevSlot
      }
    })

    return {
      vSlots: vSlots,
      lastHSlot: lastHSlot,
      lastVSlot: lastVSlot,
      selectedSlotIndex: selectedSlotIndex,
      selectedSlotIds: selectedSlotIds
    }
  },

  _createSlotLayouts: function(
    vSlots,
    lastHSlot,
    lastVSlot,
    selectedSlotIndex,
    selectedSlotIds
  ) {
    if (
      (vSlots.constructor !== Array && vSlots.length < 1) ||
      !lastHSlot.length ||
      !lastVSlot.length
    ) {
      //no bins found
      return
    }
    var vHTMLSlots = []

    // since the total width would be 100% but the bins would be divided into
    // ratios, hence each of the bin would have to have the factor into % of the
    // .bins container.

    // for reference orig_coordinates[0] === x axis and orig_coordinates[1] === y axis
    var horFactor = parseFloat(100 / Number(this.props.rackWidth))
    var vertFactor = parseFloat(
      100 / (Number(lastVSlot.orig_coordinates[1]) + Number(lastVSlot.height))
    )

    var totalRackHeight =
      Number(lastVSlot.orig_coordinates[1]) + Number(lastVSlot.height)
    var borderLeft, borderTop, borderRight, setSlotBackground;

    for (var i = 0; i < vSlots.length; i++) {
      var toteIcon = ''
      var binWidth = vSlots[i].length * horFactor + '%'
      var binHeight = vSlots[i].height * vertFactor + '%'
      var ileft = 0
      var ibottom = 0

      ileft = vSlots[i].orig_coordinates[0] * horFactor + '%' // 0 on x-axis should start from bottom-left towards right.
      ibottom = vSlots[i].orig_coordinates[1] * vertFactor + '%' // 0 on y-axis should start from bottom-left towards up.

      let sumH = vSlots[i].orig_coordinates[0] + vSlots[i].length
      let sumV = vSlots[i].orig_coordinates[1] + vSlots[i].height
      /* Check for BORDER of bins-flex - START*/

      if (Number(vSlots[i].orig_coordinates[0]) === 0) {
        borderLeft = '0.625vw solid #939598'
      } else {
        borderLeft = '1px solid #939598'
      }
      if (Number(totalRackHeight) === sumV) {
        borderTop = '0.625vw solid #939598'
      } else {
        borderTop = '0.16vw solid #939598'
      }
      if (this.props.rackWidth === sumH) {
        borderRight = '0.625vw solid #939598'
      } else {
        borderRight = '0.16vw solid #939598'
      }

      /* END **********************************/

      if (i === selectedSlotIndex) {
        var setSlotBackground = '#bbbbbb'
        var drawALine = React.createElement("div", {id: "selectedSlot"})
      } else {
        var setSlotBackground = vSlots[i].occupancy_color || '#e8e8e8'
      }


      if (vSlots[i].tote_status === "inventoryItems") {
        setSlotBackground = '#ffffff'
        toteIcon = React.createElement("img", {className: "bin-icon dark-tote-icon", src: "./assets/images/fill_tote.png"})

      }
      else if(vSlots[i].tote_status === "empty"){
        setSlotBackground = '#ffffff'
        toteIcon = React.createElement("img", {className: "bin-icon light-tote-icon", src: "./assets/images/empty_tote.png"})
      }
      else if(vSlots[i].tote_status === "scanned_empty"){
        setSlotBackground = '#D6D6D6';
        toteIcon = React.createElement("img", {className: "bin-icon light-tote-icon", src: "./assets/images/empty_tote.png"})
      }
      else{
        setSlotBackground = '#ffffff'
      }
      

      vHTMLSlots.push(
        React.createElement("div", {
          key: i, 
          className: "subSlot", 
          style: {
            width: binWidth,
            height: binHeight,
            bottom: ibottom,
            left: ileft,
            borderTop: borderTop,
            borderRight: borderRight,
            borderLeft: borderLeft,
            background: setSlotBackground
          }
        }, 
          toteIcon
        )
      )
    }
    //attach legs to Rack
    vHTMLSlots.push(
      React.createElement("div", {key: 'legsSpaceContainer', className: "legsSpaceContainer"}, 
        ' '
      )
    )
    return vHTMLSlots
  },

  render: function() {
    var orientationClass,
      stackText,
      count,
      stackCount,
      fragileClass,
      stackClass,
      nestable_count,
      nestable_direction,
      stackicon
    var putDirection = this.props.putDirectionFlex
    var heavyItemFlag = this.props.HeavyItemFlag
    var QLCodeDetails = this.props.QLCodeDetails
    var vHTMLSlots = this._createSlotLayouts(
      this.state.vSlots,
      this.state.lastHSlot,
      this.state.lastVSlot,
      this.state.selectedSlotIndex,
      this.state.selectedSlotIds
    )

    if (putDirection) {
      nestable_count = putDirection.nestable_count
      nestable_direction = putDirection.nestable_direction
      stackCount = putDirection.stacking_count
        ? putDirection.stacking_count[putDirection.stacking_count.length - 1]
        : null
      if (putDirection.orientation_preference && nestable_count > 1) {
        orientation = 'orientation'
        orientationClass =
          './assets/images/' +
          putDirection.nestable_direction +
          'Nesting.gif?q=' +
          Math.random()
      } else if (putDirection.orientation_preference) {
        orientation = 'orientation'
        orientationClass =
          stackCount && stackCount === 1
            ? './assets/images/' + putDirection.stacking + 'nonStackable.svg'
            : './assets/images/' +
              putDirection.stacking +
              'Stackable.gif?q=' +
              Math.random()
      } else {
        orientation = 'containerHide'
      }
      stackText =
        nestable_count > 1
          ? _('NEST MAX')
          : stackCount && stackCount > 1
          ? _('STACK MAX')
          : _('DO NOT STACK')
      stackicon =
        nestable_count > 1
          ? 'stackicons nestingicon'
          : stackCount && stackCount === 1
          ? 'stackicons nonstackingicon'
          : 'stackicons stackingicon'
      fragileClass = putDirection.fragile ? 'fragile' : 'containerHide'
      stackClass =
        nestable_count > 1
          ? 'stackSize'
          : stackCount && stackCount >= 1
          ? 'stackSize'
          : 'containerHide'
      count =
        nestable_count > 1
          ? nestable_count
          : stackCount && stackCount > 1
          ? stackCount
          : null
    }
    return (
      React.createElement("div", {className: "parent-container"}, 
        React.createElement("div", {className: "slotsFlexContainer"}, vHTMLSlots), 
         React.createElement("div", {className: "right-container"}, 
          this.state.selectedSlotIds && !this.props.hideSlotDetails && (
            React.createElement("div", {id: "slotDisplayArea", className: "slotDisplayArea"}, 
              React.createElement("img", {
                style: { paddingLeft: '5%'}, 
                src: "./assets/images/slot.png"}
              ), 
              React.createElement("span", {style: { marginLeft: '8%'}}, 
                'SLOT ' + this.state.selectedSlotIds
              )
            )
          )
        )
      )
    )
  }
})

module.exports = MsuRackFlex

},{"react":179}],227:[function(require,module,exports){
var React = require('react');
var RackSlot = require('./RackSlot');


var RackRow = React.createClass({displayName: "RackRow",
	render: function(){
		
		var rackRange = this.props.rackRange;
		var slotIndexArray = this.props.slotIndexArray;
		var slotData = this.props.slots;
		var totalRackHeight= this.props.totalRackHeight;
		var noOfRows = this.props.noOfRows;	
		var eachRowHeight = this.props.eachRowHeight;
		var slotType = this.props.slotType;
		var eachSlot =[];	
		var type = this.props.type;
		var rowTotalWidth=this.props.rowTotalWidth
        /*var calculateHeight = (eachRowHeight/totalRackHeight)*100;
        var rackRowHeight = {
				
				height : calculateHeight + "%",
			};*/
			var rackRowHeight;
		eachSlot = slotData.map(function(slot,index){
			var x = Math.round((slot[2]/totalRackHeight)*100);
			rackRowHeight = {
				
				flexGrow : x.toString()
			};
			if(slotIndexArray!==undefined  && slotIndexArray.indexOf(index+1) >= 0)
			return(
					React.createElement(RackSlot, {rowTotalWidth: +rowTotalWidth, totalRackHeight: totalRackHeight, noOfRows: noOfRows, selectedSlot: true, slotHeightData: slot[2], slotWidthData: slot[0], noOfSlotsInRow: slotData.length, slotWidthDataLength: +slot[1], key: index, slotIndexArrays: slotIndexArray, rackRange: rackRange, type: type, slotType: slotType})
					
				);
			else
				return(
					React.createElement(RackSlot, {rowTotalWidth: +rowTotalWidth, totalRackHeight: totalRackHeight, noOfRows: noOfRows, slotHeightData: slot[2], slotWidthData: slot[0], noOfSlotsInRow: slotData.length, slotWidthDataLength: +slot[1], slotIndexArrays: slotIndexArray, key: index, rackRange: rackRange, type: type, slotType: slotType})
					);
		});
		return (
				React.createElement("div", {className: "rackRow", style: rackRowHeight}, 
					eachSlot
				)
			);
	}
});

module.exports = RackRow;

},{"./RackSlot":228,"react":179}],228:[function(require,module,exports){
var React = require('react');
var SingleSlot = require('./SingleSlot');


var RackSlot = React.createClass({displayName: "RackSlot",
	render : function(){
		var rackRange = this.props.rackRange;
		var slotIndexArrays = this.props.slotIndexArrays;
		var totalRackHeight = this.props.totalRackHeight;
		var noOfRows = this.props.noOfRows;
		var calculateWidth = (this.props.slotWidthDataLength*100/this.props.rowTotalWidth)
		var type = this.props.type;
		var slotType = this.props.slotType;
		//var calculateHeight = this.props.slotHeightData;
		var slotWidth = {
				width : calculateWidth + '%',
				//height : calculateHeight/4 + "vh",
			};
		
		
		var singleSlot = this.props.slotWidthData.map(function(singSlot,index){
			//if(slotIndexArrays!==undefined && slotIndexArrays.indexOf(singSlot%10) >= 0)
				if(slotIndexArrays!==undefined && slotIndexArrays.indexOf(parseInt(singSlot.replace(/^0+/, ''))) >= 0)
				return(
						React.createElement(SingleSlot, {selected: true, key: singSlot, rackRange: rackRange, index: singSlot.replace(/^0+/, ''), type: type, slotType: slotType})
					);
				else
				return(
						React.createElement(SingleSlot, {key: index, rackRange: rackRange, type: type, slotType: slotType})
					);
			
		});

		return (
			React.createElement("div", {className: "rackSlot", style: slotWidth}, 
				singleSlot
			)
			);
	}
});

module.exports = RackSlot ;

},{"./SingleSlot":229,"react":179}],229:[function(require,module,exports){
var React = require('react');
var fontSize = {
	"font-size":"2rem"};

var SingleSlot = React.createClass({displayName: "SingleSlot",
	render : function(){
		var rackRange = this.props.rackRange;
		var slotId = this.props.index;
		var slotText = rackRange+slotId;
		var slotContent;
		var hangerIcon = (React.createElement("span", {className: "slot-icon hanger-icon"}));
		if(this.props.slotType === "hanger"){
			slotContent = (React.createElement("span", {className: "slot-text"}, slotText));
		}
		else{
			slotContent = slotText;
		}
		return (
			React.createElement("div", {className: "singleslot " + (this.props.selected ? 'activeSlot' : ''), style: this.props.type=="small"?fontSize:{}}, 
				this.props.selected && slotContent, 
				this.props.selected && this.props.slotType === "hanger" && hangerIcon
			)
			);
	}
});

module.exports = SingleSlot ;

},{"react":179}],230:[function(require,module,exports){
var React = require('react');
var SpinnerButler = require('./SpinnerButler');

var LoaderButler = React.createClass({displayName: "LoaderButler",
	render:function(){
		return (

			React.createElement("div", {className: "loaderButler"}, 
				React.createElement(SpinnerButler, null)
			)
			);
	}
});

module.exports = LoaderButler;

},{"./SpinnerButler":231,"react":179}],231:[function(require,module,exports){
var React = require('react');

var SpinnerButler = React.createClass({displayName: "SpinnerButler",
	render:function(){
		return (
				React.createElement("div", {className: "hexdots-loader"}

				)
			);
	}
});

module.exports = SpinnerButler;

},{"react":179}],232:[function(require,module,exports){
var React = require('react');
var allresourceConstants = require('../constants/resourceConstants');

var SplitPPS = React.createClass({displayName: "SplitPPS",

	processData: function () {
		let groupInfo = this.props.groupInfo && this.props.groupInfo.ppsBinIds ? this.props.groupInfo.ppsBinIds : this.props.groupInfo;
		var data = Object.assign({}, (groupInfo || {}));
		var binColors = Object.assign({}, (this.props.groupInfo.ppsBinIdColors || {}));
		var leftCol = [],
			// dockedGroup = this.props.docked || [],
			// undockAwaited = this.props.undockAwaited || [],
			// printReady = this.props.printReady || [],
			// wrongUndock = this.props.wrongUndock || [],
			// selectedBin = this.props.selectedbin || [],
			rightCol = [], centerCol = [], maxBlockCount = 0, maxLeftCount = 0, maxRightCount = 0, maxBlockHeight = 0, maxCenterCount = 0, style = null, maxWidth = 0;
		//dockedGroup = dockedGroup.filter(val => !selectedBin.includes(val));
		for (var key in data) {
			if (data[key] === allresourceConstants.BIN_GROUP_LEFT) {
				maxLeftCount++;
			}
			else if (data[key] === allresourceConstants.BIN_GROUP_RIGHT) {
				maxRightCount++;
			}
			else if (data[key] === allresourceConstants.BIN_GROUP_CENTER || data[key] === allresourceConstants.BIN_GROUP_CENTER_TOP) {
				maxCenterCount++;
			}
		}

		maxBlockCount = maxCenterCount > 0 ? maxCenterCount : (maxLeftCount > maxRightCount) ? maxLeftCount : maxRightCount;

		maxBlockHeight = maxCenterCount > 0 ? 75 / maxBlockCount : 50 / maxBlockCount;
		maxWidth = ((maxBlockHeight / 100) * 360).toFixed(3);

		style = {
			height: (maxBlockHeight >= 50 ? 25 : maxBlockHeight) + "%",
			width: (maxWidth <= 100 ? maxWidth : 100) + 'px'
		}
		if (this.props.displayBinId) {
			fontSize = maxCenterCount > 0 ? ((70 / 28) * maxBlockHeight) + 'px' : ((50 / 28) * maxBlockHeight) + 'px';
			padding = "0%";

			/* Start =>special condition for pick_front_slot_scan to limit font size when only one bin is there */
			if (parseInt(fontSize, 10) > parseInt("88px", 10)) { fontSize = 62.5 + 'px', padding = 0 + '%'; }
			/* End */

			style = Object.assign({}, style, {
				color: '#fff',
				'fontSize': fontSize,
				'padding': padding
			})
		}
		// var dockedclassName = this.props.ruleset === 'withBorder' ? "dockedCont bottomBorderLeft" : "dockedCont";
		// var undockclassName = this.props.ruleset === 'withBorder' ? "undockedCont bottomBorderLeft" : "undockedCont";
		// var printReadyclassName = this.props.ruleset === 'withBorder' ? "printReadyCont bottomBorderLeft" : "printReadyCont";
		// var wrongUndockclassName = this.props.ruleset === 'withBorder' ? "wrongUndockCont bottomBorderLeft" : "wrongUndockCont";
		// var selectedbinclassName = this.props.ruleset === 'withBorder' ? "selectedbinCont bottomBorderLeft" : "selectedbin";

		// var dockedRightclassName = this.props.ruleset === 'withBorder' ? "dockedCont bottomBorderRight" : "dockedCont";
		// var undockRigtclassName = this.props.ruleset === 'withBorder' ? "undockedCont bottomBorderRight" : "undockedCont";
		// var printReadyRigtclassName = this.props.ruleset === 'withBorder' ? "printReadyCont bottomBorderRight" : "printReadyCont";
		// var wrongUndockRightclassName = this.props.ruleset === 'withBorder' ? "wrongUndockCont bottomBorderRight" : "wrongUndockCont";
		// var selectedbinRightclassName = this.props.ruleset === 'withBorder' ? "selectedbinCont bottomBorderRight" : "selectedbin";

		for (var k in data) {
			if (data.hasOwnProperty(k)) {

				// if (data[k] === allresourceConstants.BIN_GROUP_LEFT) {

				// 	if (dockedGroup.indexOf(k) >= 0) {
				// 		leftCol.push(<li key={k} style={style} className={dockedclassName}>
				// 			<span className={this.props.ruleset === 'withBorder' ? "" : "docked"}>{this.props.displayBinId ? k : null}</span>
				// 		</li>);
				// 	}
				// 	else if (undockAwaited.indexOf(k) >= 0) {
				// 		leftCol.push(<li key={k} style={style} className={undockclassName}>
				// 			<span style={{ backgroundColor: binColors[k] }} className="undock left">&nbsp;</span>
				// 		</li>);
				// 	}
				// 	else if (printReady.indexOf(k) >= 0) {
				// 		leftCol.push(<li key={k} style={style} className={printReadyclassName}>
				// 			<span className="printReady left">&nbsp;</span>
				// 		</li>);
				// 	}
				// 	else if (wrongUndock.indexOf(k) >= 0) {
				// 		leftCol.push(<li key={k} style={style} className={wrongUndockclassName}>
				// 			<span className="wrongUndock left">{this.props.displayBinId ? k : null}</span>
				// 		</li>);
				// 	}
				// 	else if (selectedBin.indexOf(k) >= 0) {
				// 		leftCol.push(<li key={k} style={style} className={selectedbinclassName}>
				// 			<span className="selectedbin">{this.props.displayBinId ? k : null}</span>
				// 		</li>);
				// 	}
				// 	else {
				// 		leftCol.push(<li key={k} style={style} className={this.props.ruleset === 'withBorder' ? "bottomBorderLeft padding noBackGround" : "padding noBackGround"} ><span>{this.props.displayBinId ? k : null}</span></li>);
				// 	}

				// }
				// else if (data[k] === allresourceConstants.BIN_GROUP_RIGHT) {
				// 	if (dockedGroup.indexOf(k) >= 0) {
				// 		rightCol.push(<li key={k} style={style} className={dockedRightclassName}>
				// 			<span className={this.props.ruleset === 'withBorder' ? "" : "docked"}>{this.props.displayBinId ? k : null}</span>
				// 		</li>);
				// 	}
				// 	else if (undockAwaited.indexOf(k) >= 0) {
				// 		rightCol.push(<li key={k} style={style} className={undockRigtclassName}>
				// 			<span style={{ backgroundColor: binColors[k] }} className="undock right">&nbsp;</span>
				// 		</li>);
				// 	}
				// 	else if (printReady.indexOf(k) >= 0) {
				// 		rightCol.push(<li key={k} style={style} className={printReadyRigtclassName}>
				// 			<span className="printReady right">&nbsp;</span>
				// 		</li>);
				// 	} else if (wrongUndock.indexOf(k) >= 0) {
				// 		rightCol.push(<li key={k} style={style} className={wrongUndockRightclassName}>
				// 			<span className="wrongUndock right">{this.props.displayBinId ? k : null}</span>
				// 		</li>);
				// 	}
				// 	else if (selectedBin.indexOf(k) >= 0) {
				// 		rightCol.push(<li key={k} style={style} className={selectedbinRightclassName}>
				// 			<span className="selectedbin">{this.props.displayBinId ? k : null}</span>
				// 		</li>);
				// 	}
				// 	else {
				// 		rightCol.push(<li key={k} style={style} className={this.props.ruleset === 'withBorder' ? "bottomBorderRight padding noBackGround" : "padding noBackGround"} ><span>{this.props.displayBinId ? k : null}</span></li>);
				// 	}

				// }
				//else 
				if (data[k] === allresourceConstants.BIN_GROUP_CENTER || data[k] === allresourceConstants.BIN_GROUP_CENTER_TOP) {
					// if (dockedGroup.indexOf(k) >= 0) {
					// 	centerCol.push(<li key={k} style={style} className="dockedCont">
					// 		<span className={this.props.ruleset === 'withBorder' ? "" : "docked"}>{this.props.displayBinId ? k : null}</span>
					// 	</li>);
					// }
					// else if (undockAwaited.indexOf(k) >= 0) {
					// 	centerCol.push(<li key={k} style={style} className="undockedCont">
					// 		<span >{this.props.displayBinId ? k : null}</span>
					// 		<span style={{ backgroundColor: binColors[k] }} className="undock below">
					// 		</span>
					// 	</li>);
					// }
					// else if (printReady.indexOf(k) >= 0) {
					// 	centerCol.push(<li key={k} style={style} className="printReadyCont">
					// 		<span >{this.props.displayBinId ? k : null}</span>
					// 		<span className="printReady below">
					// 		</span>
					// 	</li>);
					// }
					// else if (wrongUndock.indexOf(k) >= 0) {
					// 	centerCol.push(<li key={k} style={style} className={"wrongUndockCont"}>
					// 		<span className="wrongUndock left">{this.props.displayBinId ? k : null}</span>
					// 	</li>);
					// }
					// else if (selectedBin.indexOf(k) >= 0) {
					// 	centerCol.push(<li key={k} style={style} className={"selectedbinCont"}>
					// 		<span className="selectedbin">{this.props.displayBinId ? k : null}</span>
					// 	</li>);
					// }
					
					// else {
						centerCol.push(React.createElement("li", {key: k, style: {"backgroundColor": binColors[k], ...style}}, React.createElement("span", null, this.props.displayBinId ? k : null)));
					//}

				}

			}
		}
		
		return {
			leftCol: leftCol,
			rightCol: rightCol,
			centerCol: centerCol
		}
	},

	render: function () {
		var mapStructure = this.processData();
		var orientation = Number(this.props.orientation || 0);
		var transformStyle = {
			transform: 'rotate(' + ((orientation + 'deg)'))
		}
		var textTransform = {
			transform: 'rotate(' + (((orientation > 90 ? 180 : 0) + 'deg)'))
		}

		console.log("========= SplitPPS => seatType => else");
		return (
			React.createElement("div", {className: "splitPPSWrapper"}, 
				React.createElement("div", {className: "mapCont"}, 
					React.createElement("div", {className: "col4 three"}, 
						(mapStructure.centerCol).length >= 1 ?
							React.createElement("ul", null, 
								mapStructure.centerCol
							) : ""
						
					), 
					React.createElement("div", {className: "msuSpace", style: textTransform}, " "), 
					React.createElement("div", {className: "col1 three"}, 
						(mapStructure.leftCol).length >= 1 ?
							React.createElement("ul", {className: this.props.ruleset === 'withBorder' ? 'withBorderLeft' : ''}, 
								mapStructure.leftCol
							) : ""
						
					), 
					React.createElement("div", {className: "col2 spriteIcons"}), 
					React.createElement("div", {className: "col3 three"}, 
						(mapStructure.rightCol).length >= 1 ?
							React.createElement("ul", {className: this.props.ruleset === 'withBorder' ? 'withBorder' : ''}, 
								mapStructure.rightCol
							) : ""
						
					)
				)
			)
		);
	}
});

module.exports = SplitPPS;

},{"../constants/resourceConstants":244,"react":179}],233:[function(require,module,exports){
var React = require('react');
var IconButton = require('./Button/IconButton');
var appConstants = require('../constants/appConstants');

var TableFooter = React.createClass({displayName: "TableFooter", 
	_component:[],
    getComponent:function(data){
    	var comp = [];
    	data.map(function(value,index){
            var classes = "table-col ";
            var mode = value.mode == 'peripheral' ? classes = classes+ "table-col-peripheral ": "";
            classes = classes+ "table-col-peripheral-"+value.management+" ";
    		var border = value.border == true ? classes = classes + "border-left " : "";
    		var grow = value.grow == true ? classes = classes + "flex-grow ":"";
    		var selected = value.selected == true ? classes = classes + "selected ":"";
    		var large = value.size == "large" ? classes = classes + "large ":classes = classes + "small ";
    		var bold = value.bold == true ? classes = classes + "bold ":"";
    		var disabled = value.disabled == true ? classes = classes + "disabled ":"";
    		var center = value.centerAlign == true ? classes = classes + "center-align ":"";
            var complete = value.status == "complete" ? classes = classes + "complete ":"";
            var missing = value.status == "missing" ? classes = classes + "missing ":"";
            var extra = value.status == "extra" && value.selected == false ? classes = classes + "extra ":"";
            if((value.type != undefined && value.type=="button"))
                comp.push((React.createElement("div", {className: classes}, React.createElement(IconButton, {type: value.buttonType, module: appConstants.AUDIT, action: appConstants.FINISH_BOX}))));
            else
    		  comp.push((React.createElement("div", {className: classes, title: value.text}, value.text)));
    	});
    	this._component = comp;
    },
    render: function() {
    	this.getComponent(this.props.data);
        return (
            React.createElement("div", {className: "table-footer"}, 
               this._component
      		)
        );
    },
});

module.exports = TableFooter;

},{"../constants/appConstants":242,"./Button/IconButton":189,"react":179}],234:[function(require,module,exports){
var React = require('react');
var IconButton = require('./Button/IconButton');
var appConstants = require('../constants/appConstants');

var TableHeader = React.createClass({displayName: "TableHeader", 
	_component:[],
    getComponent:function(data){
    	var comp = [];
    	data.map(function(value,index){
            var classes = "table-col ";
            var mode = value.mode == 'peripheral' ? classes = classes+ "table-col-peripheral ": "";
            classes = classes+ "table-col-peripheral-"+value.management+" ";
    		var border = value.border == true ? classes = classes + "border-left " : "";
    		var grow = value.grow == true ? classes = classes + "flex-grow ":"";
    		var selected = value.selected == true ? classes = classes + "selected ":"";
    		var large = value.size == "large" ? classes = classes + "large ":classes = classes + "small ";
    		var bold = value.bold == true ? classes = classes + "bold ":"";
    		var disabled = value.disabled == true ? classes = classes + "disabled ":"";
    		var center = value.centerAlign == true ? classes = classes + "center-align ":"";
            var complete = value.status == "complete" ? classes = classes + "complete ":"";
            var missing = value.status == "missing" ? classes = classes + "missing ":"";
            var extra = value.status == "extra" && value.selected == false ? classes = classes + "extra ":"";
            if((value.type != undefined && value.type=="button"))
                comp.push((React.createElement("div", {className: classes}, React.createElement(IconButton, {type: value.buttonType, module: appConstants.AUDIT, action: appConstants.FINISH_BOX}))));
            else
    		  comp.push((React.createElement("div", {className: classes, title: value.text}, value.text)));
    	});
    	this._component = comp;
    },
    render: function() {
    	this.getComponent(this.props.data);
        return (
            React.createElement("div", {className: "table-header"}, 
               this._component
      		)
        );
    },
});

module.exports = TableHeader;

},{"../constants/appConstants":242,"./Button/IconButton":189,"react":179}],235:[function(require,module,exports){
var React = require("react")
var IconButton = require("./Button/IconButton")
var appConstants = require("../constants/appConstants")
var CommonActions = require("../actions/CommonActions")
var mainstore = require("../stores/mainstore")
var NumericIndicator = require("./ProductDetails/NumericIndicator")
var ActionCreators = require("../actions/CommonActions")
var GorSelect = require("./gor-select/gor-select")

var TableRow = React.createClass({displayName: "TableRow",
  _component: [],
  getInitialState: function() {
    return this.getStateData()
  },
  getStateData: function() {
    var screenData = mainstore.getScreenData()
    var localState = {
      customContainerNames: mainstore.getCustomContainerNames(),
      selectedUOM: mainstore.getSelectedUOM() || null,
      isChangeUOMApplicable: mainstore.isChangeUOMApplicable(),
      isDropDownClicked: false
    }
    return Object.assign({}, screenData, localState)
  },
  _onSelect: function(val, txt) {
    var data = {
      event_name: "audit_change_uom",
      event_data: {
        container_level: val
      }
    }
    ActionCreators.postDataToInterface(data)
  },

  peripheralAction: function(action, inc) {
    if (action == _("Update") || action == _("Add")) {
      CommonActions.convertTextBox(action, inc)
    } else if (action == _("Finish")) {
      var data = {
        peripheral_id: document.getElementById("peripheralId").value,
        peripheral_type: "pptl",
        barcode: document.getElementById("barcodePptl").value,
        pps_bin_id: inc
      }
      CommonActions.updateData(data, "POST", inc)
    } else if (action === _("Delete")) {
      if (appConstants.SCANNER_MANAGEMENT == mainstore.getScreenId()) {
        var data = {
          peripheral_id: inc,
          peripheral_type: "barcode_scanner"
        }
      } else {
        var data = {
          peripheral_id: inc,
          peripheral_type: "pptl"
        }
      }
      console.log(data)
      CommonActions.updateData(data, "DELETE", inc)
    }
  },
  openKeyboard_peripheral: function(id) {
    setTimeout(function() {
      $("#" + id).keyboard({
        layout: "custom",
        customLayout: {
          default: [
            "! @ # $ % ^ & * + _",
            "1 2 3 4 5 6 7 8 9 0 {b}",
            "q w e r t y u i o p",
            "a s d f g h j k l",
            "{shift} z x c v b n m . {shift}",
            "{space}",
            "{a} {c}"
          ],
          shift: [
            "( ) { } [ ] = ~ ` -",
            "< > | ? / \" : ; , ' {b}",
            "Q W E R T Y U I O P",
            "A S D F G H J K L",
            "{shift} Z X C V B N M . {shift}",
            "{space}",
            "{a} {c}"
          ]
        },
        css: {
          container:
            "ui-widget-content ui-widget ui-corner-all ui-helper-clearfix custom-keypad"
        },
        reposition: true,
        alwaysOpen: false,
        initialFocus: true,
        visible: function(e, keypressed, el) {
          el.value = ""
          //$(".authNotify").css("display","none");
        },

        accepted: function(e, keypressed, el) {}
      })
    }, 0)
  },

  getUOMDropdownValues: function() {
    var customContainerNames = this.state.customContainerNames,
      options = []
    for (var k in customContainerNames) {
      options.push({
        value: k,
        text: customContainerNames[k]
      })
    }
    return options
  },

  getComponent: function() {
    var _this = this
    var uomOptions = this.getUOMDropdownValues()
    var peripheralAction = this.peripheralAction
    var openKeyboard_peripheral = this.openKeyboard_peripheral
    var comp = []

    this.props.data.map(function(value, index) {
      var classes = "table-col "
      var mode =
        value.mode == "peripheral"
          ? (classes = classes + "table-col-peripheral ")
          : ""
      var action =
        value.actionButton == true
          ? (classes = classes + "table-col-peripheral-min-width ")
          : ""
      classes = classes + "table-col-peripheral-" + value.management + " "
      var border =
        value.border == true ? (classes = classes + "border-left ") : ""
      var grow = value.grow == true ? (classes = classes + "flex-grow ") : ""
      var actualqty =
        value.status == "actualqty" && value.selected !== true
          ? (classes = classes + "actualqty ")
          : ""
      var selected =
        value.selected == true ? (classes = classes + "selected ") : ""
      var large =
        value.size == "large"
          ? (classes = classes + "large ")
          : (classes = classes + "small ")
      var bold = value.bold == true ? (classes = classes + "bold ") : ""
      var disabled =
        value.disabled == true ? (classes = classes + "disabled ") : ""
      var center =
        value.centerAlign == true ? (classes = classes + "center-align ") : ""
      var complete =
        value.status == "complete" ? (classes = classes + "complete ") : ""
      var missing =
        value.status == "missing" ? (classes = classes + "missing ") : ""
      var extra =
        value.status == "extra" && value.selected == false
          ? (classes = classes + "extra ")
          : ""
      var extraqt =
        value.status == "extraqt" && value.selected == false
          ? (classes = classes + "extraqt ")
          : ""
      var verticalAlign =
        value.mode === "verticalAlign"
          ? (classes = classes + "vertical-align")
          : ""

      var borderBottom =
        value.borderBottom == false
          ? (classes = classes + "remove-border ")
          : ""
      //var borderBottom = value.borderBottom == false ? classes = classes + "":"";
      var text_decoration =
        value.text_decoration == true
          ? (classes = classes + "text_decoration ")
          : ""
      var color =
        value.color == "blue" ? (classes = classes + value.color + " ") : ""
      var totalWidth =
        value.totalWidth == true ? (classes = classes + "totalWidth ") : ""

      if (value.type != undefined && value.type == "button")
        comp.push(
          React.createElement("div", {className: classes}, 
            React.createElement(IconButton, {
              type: value.buttonType, 
              module: appConstants.AUDIT, 
              action: appConstants.FINISH_BOX, 
              status: value.buttonStatus}
            )
          )
        )
      else if (value.type != undefined && value.buttonType == "showKQRow") {
        var btnValue = value.text
        var isKQEnabled = value.buttonStatus
        comp.push(
          React.createElement("div", {className: classes, title: value.text}, 
            React.createElement(NumericIndicator, {
              execType: appConstants.DAMAGED_QUANTITY, 
              Formattingclass: "indicator-wrapper-in-tableCol", 
              btnValue: btnValue, 
              isKQEnabled: isKQEnabled, 
              damagedQty: value.text, 
              inputType: "customType"}
            )
          )
        )
      } else if (
        value.type != undefined &&
        value.buttonType == "showUOMDropDown"
      ) {
        comp.push(
          React.createElement("div", {className: classes, title: value.text}, 
            React.createElement("div", {className: "uomDropDownListWrapper"}, 
              React.createElement(GorSelect, {
                options: uomOptions, 
                customData: true, 
                selectedOption: _this.state.selectedUOM, 
                placeholderPrefix: _("Selected UOM: "), 
                onSelectHandler: _this._onSelect, 
                placeholder: 
                  _this.state.customContainerNames[_this.state.selectedUOM] ||
                  _("Select Value")
                
              }, 
                function(_this) {
                  var options = []
                  uomOptions.map(function(el, idx) {
                    options.push(
                      React.createElement("span", {
                        className: "gor-dropdown-option", 
                        key: el.value, 
                        onClick: function() {
                          _this._onSelect(el.value, el.text)
                        }
                      }, 
                        React.createElement("section", null, 
                          React.createElement("span", {className: "icon-cont"}, 
                            React.createElement("img", {
                              src: "./assets/images/" + el.value + ".png", 
                              height: 80, 
                              width: 80}
                            )
                          ), 
                          React.createElement("span", {className: "text-cont"}, el.text), 
                          React.createElement("span", {
                            className: 
                              _this.state.selectedValue === el.value
                                ? "selected-green sel-icon-cont"
                                : "sel-icon-cont"
                            
                          })
                        )
                      )
                    )
                  })
                  return options
                }
              )
            )
          )
        )
      } else {
        if (value.actionButton == true) {
          comp.push(
            React.createElement("div", {
              className: classes, 
              title: value.text, 
              onClick: peripheralAction.bind(null, value.text, value.id)
            }, 
              value.text
            )
          )
        } else if (value.textbox == true) {
          comp.push(
            React.createElement("input", {
              type: "text", 
              id: value.type, 
              className: classes, 
              defaultValue: value.text, 
              onClick: openKeyboard_peripheral.call(null, value.type)}
            )
          )
        } else {
          comp.push(
            React.createElement("div", {className: classes, title: value.text}, 
              value.text
            )
          )
        }
      }
    })
    this._component = comp
  },
  render: function() {
    this.getComponent()
    return React.createElement("div", {className: "table-row"}, this._component)
  }
})

module.exports = TableRow

},{"../actions/CommonActions":181,"../constants/appConstants":242,"../stores/mainstore":259,"./Button/IconButton":189,"./ProductDetails/NumericIndicator":217,"./gor-select/gor-select":239,"react":179}],236:[function(require,module,exports){
var React = require('react');
var TableRow = require('./TableRow');
var TableHeader = require('./TableHeader');
var TableFooter = require('./TableFooter');

var TabularData = React.createClass({displayName: "TabularData",
    _tableRows: [],
    getTableRows: function () {
        var comp = [];
        this.props.data.tableRows.map(function (value, index) {
            comp.push((React.createElement(TableRow, {data: value})));
        })
        this._tableRows = comp;
    },
    render: function () {
        this.getTableRows();
        var classes = "tabular-data ";

        classes += this.props.className ? this.props.className : '';

        var size = this.props.size == "double" ? classes = classes + "double " : "";
        var size = this.props.size == "triple" ? classes = classes + "triple " : "";
        var tbodyClassName = this.props.tbodyClassName ? "customHeight" : "overflow " + (this.props.data.footer ? 'negate-flex' : '');
        return (
            React.createElement("div", {className: classes}, 
                React.createElement(TableHeader, {data: this.props.data.header}), 
                React.createElement("div", {className: tbodyClassName}, 
                    this._tableRows
                ), 
                this.props.data.footer && React.createElement(TableFooter, {data: this.props.data.footer})
            )
        );
    },
});

module.exports = TabularData;

},{"./TableFooter":233,"./TableHeader":234,"./TableRow":235,"react":179}],237:[function(require,module,exports){
var React = require('react');
var allresourceConstants = require('../constants/resourceConstants');

var CurrentMtu = React.createClass({displayName: "CurrentMtu",
    render:function(){  
        return (
            React.createElement("div", {className: "color-conventions"}, 
                React.createElement("div", {className: "col1"}, 
                    React.createElement("span", {className: "colorBox blue"}, "  "), 
                    React.createElement("span", {className: "colorText"}, " MTU docked  ")
                ), 
                React.createElement("div", {className: "col1"}, 
                    React.createElement("span", {className: "colorBox orange"}, "  "), 
                    React.createElement("span", {className: "colorText"}, " Action overdue ")
                ), 
               React.createElement("div", {className: "col1"}, 
                React.createElement("span", {className: "colorBox green"}, "  "), 
                React.createElement("span", {className: "colorText"}, " MTU waiting for bot ")
               )
            )
        );
    }
});

module.exports = CurrentMtu;

},{"../constants/resourceConstants":244,"react":179}],238:[function(require,module,exports){
var React = require('react');

var List = React.createClass({displayName: "List",
    _processOptions: function(){
      var optionList=[], data = this.props.data || [],
    optionsLen=data.length;
    for(let index=0;index<optionsLen;index++){
      
      optionList.push(React.createElement("span", {className: data[index].disabled?"disabled gor-dropdown-option" : "gor-dropdown-option", key: index, onClick: !data[index].disabled ? this.props.optionAction.bind(null,data[index].value,null) : null}, 
                        React.createElement("span", null, data[index].label), 
                        React.createElement("span", {className: this.props.listItemIcon && this.props.placeholder===data[index].label?this.props.listItemIcon:"gor-action-icon-none"})
                      ));
    }
    return optionList;
  },
  componentWillReceiveProps: function(nextProps) {
     if(nextProps.data.length !== this.props.data.length)  {
      this.props.optionAction.call(null,this.props.selectedOption,true);
     }
 },
  componentDidMount: function(){
    this.props.data && this.props.selectedOption ? this.props.optionAction.call(null,this.props.selectedOption,true) : "";
  },
  render: function() {
    var optionList=this._processOptions();
    return (
        React.createElement("span", {className: "gor-option-wrapper", 
         style: this.props.dropDownVisible?{display:'block'}:{display:'none'}}, 
        optionList)  
    );
  }
})

module.exports = List;

},{"react":179}],239:[function(require,module,exports){
var React = require('react');
var ReactDOM = require('react-dom');
var List = require('./List');

var GorSelect = React.createClass({displayName: "GorSelect",
    getInitialState: function(){
        return{
          dropDownVisible:false,
          placeholder:this.props.placeholder,
          defaultPlaceHolder:this.props.placeholder,
          selectedValue:this.props.selectedOption || null
        }
    },
    componentWillReceiveProps: function(nextProps){
        if ((nextProps.placeholder && nextProps.placeholder !== this.state.placeholder) ||
          (nextProps.selectedOption !== nextProps.selectedOption)) {
            this.setState({
                placeholder: nextProps.placeholder,
                defaultPlaceHolder: nextProps.placeholder
            })
        }
    },
    _toggleDropdown(){
        var currentVisibility = this.state.dropDownVisible;
        currentVisibility = !currentVisibility;
        this.setState({dropDownVisible:currentVisibility});
    },
    _onSelect: function(value,text){
      if(!value){
          return
      }

    this.setState({
      dropDownVisible: !this.state.dropDownVisible,
      placeholder:text || this.state.defaultPlaceHolder,
      selectedValue: value
    },function(){
          this.props.onSelectHandler(value);
    })
    
  },
  _handleDocumentClick: function() {
     if (!ReactDOM.findDOMNode(this).contains(event.target)) {
       this.setState({dropDownVisible: false});
     }
    },
    componentDidMount: function(){
      document.addEventListener('click',this._handleDocumentClick,false);
  },

  componentWillUnmount: function() {
      document.removeEventListener("click", this._handleDocumentClick,false)
  },
    render: function(){
        return (
            React.createElement("div", {className: "gor-dropdown-wrapper", onClick: !this.props.disabled ? this._toggleDropdown : null}, 
            React.createElement("span", {className: this.props.disabled?'gor-dropdown':'gor-dropdown gor-enabled'}, React.createElement("span", null, !this.props.resetOnSelect ? ((this.props.placeholderPrefix || '')+this.state.placeholder) : this.state.defaultPlaceHolder)), 
            React.createElement("span", {className: this.state.dropDownVisible ? "gor-dropdown-arrow up" : "gor-dropdown-arrow"}), 
            !this.props.customData ? React.createElement(List, {data: this.props.options, selectedOption: this.props.selectedOption, optionAction: this._onSelect, 
              dropDownVisible: this.state.dropDownVisible}): React.createElement("span", {className: "gor-option-wrapper", 
                       style: this.state.dropDownVisible?{display:'block'}:{display:'none'}}, 
                      this.props.children(this))
            
          )
            )
    }
})

module.exports = GorSelect;

},{"./List":238,"react":179,"react-dom":23}],240:[function(require,module,exports){
var React = require('react');
var utils = require("../utils/utils.js");

var ItemTable = React.createClass({displayName: "ItemTable", 
    _tableRows:[],noofCOlumn:0,
    headerName:[_("Event"),_("Expectation Id"),_("Item Location"),_("UOM Details"),_("Quantity")],
    getTableHeaders:function(data,rowconfig){
        var headerData =[];
        for(var i=0;i<this.noofCOlumn;i++){
        var headerCellData =[];
        headerData.push(React.createElement("div", {style: rowconfig[i], className: "itemCell headerCell"}, React.createElement("span", null, this.headerName[i])))
        }
        return headerData;
    },
    getTableRows:function(data,rowconfig){
        var rowconfig=rowconfig||[];
    	var rowData =[];
    	for(var i=0;i<data.length;i++){
            let location=data[i].location||[];
            this.noofCOlumn= Object.keys(data[i]).length;
            var tableData=[],locationCell=[],UOMCell=[],childData=data[i].uom;
            let eventTypeShort=utils.get3dotTrailedText(data[i].eventType,6,6,15)
            tableData.push(data[i].eventType?React.createElement("div", {className: "outerCell", style: rowconfig[0]}, React.createElement("div", {className: "itemCell cellData", title: data[i].eventType}, eventTypeShort)):React.createElement("div", {className: "outerCell", style: rowconfig[0]}, React.createElement("div", {className: "itemCell"}, "--")));
            var expectationKeys=data[i].requestId;
            let expectationKeysValue=utils.get3dotTrailedText(expectationKeys.value,17,17,40)
            tableData.push(expectationKeys?React.createElement("div", {className: "outerCell", style: rowconfig[1]}, React.createElement("div", {className: "itemCell"}, React.createElement("div", {className: "cellHeader"}, expectationKeys.label, ":"), React.createElement("div", {className: "cellData", title: expectationKeys.value}, expectationKeysValue))):React.createElement("div", {className: "outerCell", style: rowconfig[1]}, React.createElement("div", {className: "itemCell"}, React.createElement("div", {className: "cellData"}, "--"))));
            location.length?data[i].location.forEach(function(x,i){
                let length=location.length;
                let  locationValue="";
                if(length<=1){
                    locationValue=utils.get3dotTrailedText(x,5,5,20);
                }
                else
                {
                    locationValue=utils.get3dotTrailedText(x,4,4,10);
                }
                
                if(i>0){locationCell.push(React.createElement("span", {className: "itemSeparator"}, ">"))}
                locationCell.push(React.createElement("span", {className: "cellData", title: x}, locationValue))
                }):locationCell.push(React.createElement("span", {className: "cellData"}, "--"));
                tableData.push(React.createElement("div", {className: "outerCell", style: rowconfig[2]}, React.createElement("div", {className: "itemCell"}, locationCell)))
                if(childData)
                while(childData.hasOwnProperty('child')){
                   DataItem=childData.child;
                   let DataItemValue=utils.get3dotTrailedText(DataItem.childValue,6,6,15)
                    UOMCell.push(React.createElement("div", {className: "itemCell"}, React.createElement("div", {className: "cellHeader"}, DataItem.childLabel, ":"), React.createElement("div", {className: "cellData", title: DataItem.childValue}, DataItemValue)))
                    childData=childData.child;
                    childData.hasOwnProperty('child')?UOMCell.push(React.createElement("span", {className: "itemSeparator"}, ">")):""
            }
            else{
                UOMCell.push(React.createElement("div", {className: "itemCell"}, React.createElement("div", {className: "cellData"}, "--")))
            }

            tableData.push(React.createElement("div", {className: "outerCell", style: rowconfig[3]}, React.createElement("div", {className: "longCell"}, UOMCell)));
            tableData.push(data[i].quantity?React.createElement("div", {className: "outerCell", style: rowconfig[4]}, React.createElement("span", {className: "itemCell cellData"}, data[i].quantity)):React.createElement("div", {className: "outerCell", style: rowconfig[4]}, React.createElement("span", {className: "itemCell cellData"}, "--")));
            rowData.push(React.createElement("div", {className: "rowData"}, tableData));
        }
        return rowData;
    },

    render: function() {
        var tableData=this.props.data||[];
        var rowDataItem=this.getTableRows(tableData,this.props.rowconfig);
        var headerDataItem=this.getTableHeaders(tableData,this.props.rowconfig);
return ( 
            React.createElement("div", null, 
            tableData.length>0?
            React.createElement("div", null, 
                headerDataItem, 
                React.createElement("div", {style: {"height":"720px","overflow":"scroll"}}, 
                    rowDataItem
      		    )
                  ):React.createElement("div", {className: "itemNotFound"}, _("NO ITEM FOUND"))
            
            )
        );
    },
});

module.exports = ItemTable;

},{"../utils/utils.js":260,"react":179}],241:[function(require,module,exports){
var svgConstants = require('../constants/svgConstants');

var navData = {
    "utility": [
        [{
            "screen_id": "pptl_management",
            "code": "CLIENTCODE_004",
            "image": svgConstants.pptl,
            "message": "Unexpected Item",
            "showImage": true,
            "level": null,
            "type": 'active'
        }],
        [{
            "screen_id": "scanner_management",
            "code": "CLIENTCODE_005",
            "image": svgConstants.scanner,
            "message": "Unexpected Item",
            "showImage": true,
            "level": null,
            "type": 'active'
        }]
    ],
    "putBack": [
        [{
            "screen_id": "put_back_invalid_tote_item",
            "code": "Common.000",
            "image": svgConstants.exception,
            "message": "Unexpected Item",
            "showImage": true,
            "level": null,
            "type": 'active'
        }],
        [{
            "screen_id": ["put_back_stage", "put_back_scan_tote"],
            "code": "Common.000",
            "image": svgConstants.stage,
            "message": "Stage Bin or Scan Item",
            "showImage": true,
            "level": 1,
            "type": 'passive'
        }, {
            "screen_id": ["put_back_scan", "put_back_tote_close"],
            "code": "Common.001",
            "image": svgConstants.scan,
            "message": "Scan & Confirm",
            "showImage": true,
            "level": 2,
            "type": 'passive'
        }], [
            {
                "screen_id": ["put_back_warehouse_full_irt_scan", "put_back_no_scan"],
                "code": "PtF.H.015",
                "message": "Put item into IRT bin and scan the bin",
                "showImage": false,
                "level": 1,
                "type": 'active'
            }],
        [{
            "screen_id": ["put_back_stage", "put_back_scan_tote"],
            "code": "Common.000",
            "image": svgConstants.stage,
            "message": "Stage Bin or Scan Item",
            "showImage": true,
            "level": 1,
            "type": 'passive'
        }, {
            "screen_id": ["put_back_scan", "put_back_tote_close"],
            "code": "Common.001",
            "image": svgConstants.scan,
            "message": "Press PPTL",
            "showImage": true,
            "level": 2,
            "type": 'passive'
        }],
        [{
            "screen_id": ["put_back_stage", "put_back_scan_tote"],
            "code": "Common.000",
            "image": svgConstants.stage,
            "message": "Scan",
            "showImage": true,
            "level": 1,
            "type": 'passive'
        }, {
            "screen_id": ["put_back_pptl_press_tote"],
            "code": "Common.001",
            "image": svgConstants.scan,
            "message": "Press PPTL",
            "showImage": true,
            "level": 2,
            "type": 'passive'
        }], [{
            "screen_id": ["put_back_no_scan_tote"],
            "code": "PtB.H.020",
            "image": svgConstants.stage,
            "message": "Scan",
            "showImage": false,
            "level": 1,
            "type": 'active'
        }]

    ],
    "putFront": [

        [{
            "screen_id": "put_front_waiting_for_rack",
            "code": "Common.000",
            "message": "Wait For MSU",
            "showImage": false,
            "level": 1,
            "type": 'active'
        }],
        [{
            "screen_id": "put_front_scan",
            "code": "Common.000",
            "image": svgConstants.scan,
            "message": "Scan Item From Bin",
            "showImage": true,
            "level": 1,
            "type": 'passive'
        }, {
            "screen_id": "put_front_place_items_in_rack",
            "code": "Common.001",
            "image": svgConstants.rack,
            "message": "Place Item in slot and scan more",
            "showImage": true,
            "level": 2,
            "type": 'passive'
        }],
        [{
            "screen_id": "put_front_waiting_undock",
            "code": "Common.000",
            "message": "Undock Roll Cage if no items remaining",
            "showImage": false,
            "level": 1,
            "type": 'active'
        }],
        [{
            "screen_id": "put_front_pptl_press",
            "code": "Common.000",
            "message": "Place the tote back in bin {0} and press pptl",
            "showImage": false,
            "level": 1,
            "type": 'active'
        }],
        [{
            "screen_id": "put_front_place_unmarked_entity_in_rack",
            "code": "Common.000",
            "message": "Place",
            "showImage": true,
            "level": 1,
            "type": 'passive'
        }, {
            "screen_id": "put_front_scan_rack_for_unmarked_entity",
            "code": "Common.001",
            "message": "Scan slot",
            "showImage": true,
            "level": 2,
            "type": 'passive'
        }],
        [{
            "screen_id": "put_front_exception_warehouse_full",
            "code": "PtF.H.015",
            "message": "Warehouse Full",
            "showImage": false,
            "level": 1,
            "type": 'active'
        }],
        [{
            "screen_id": "put_front_wrong_undock",
            "code": "PtF.H.017",
            "message": "Wrong Undock",
            "showImage": false,
            "level": 1,
            "type": 'active'
        }], [{
            "screen_id": "put_front_bin_warehouse_full",
            "code": "PtF.H.016",
            "message": "Warehouse Full",
            "showImage": false,
            "level": 1,
            "type": 'active'
        }],
        [{
            "screen_id": "put_front_warehouse_full_irt_scan",
            "code": "PtF.H.021",
            "message": "Scan IRT Bin",
            "showImage": false,
            "level": 1,
            "type": 'active'
        }],
        [{
            "screen_id": "ud_put_front_tote_scan",
            "code": "Common.000",
            "message": "Wait For MSU",
            "showImage": true,
            "level": 1,
            "type": 'active'
        }, {
            "screen_id": "",
            "code": "Common.000",
            "message": "Put and confirm",
            "showImage": false,
            "level": 2,
            "type": 'passive'
        }],
        [{
            "screen_id": "",
            "code": "Common.000",
            "message": "Dock Cart",
            "showImage": true,
            "level": 1,
            "type": 'passive'
        }, {
            "screen_id": "ud_put_front_entity_scan",
            "code": "Common.000",
            "message": "Put and confirm",
            "showImage": true,
            "level": 2,
            "type": 'true'
        }],
        [{
            "screen_id": "ud_put_front_bin_scan",
            "code": "Common.000",
            "message": "Scan PPS Bin Barcode",
            "showImage": true,
            "level": 1,
            "type": 'active'
        }, {
            "screen_id": "",
            "code": "Common.000",
            "message": "Put and confirm",
            "showImage": false,
            "level": 2,
            "type": 'passive'
        }],
        [{
            "screen_id": "ud_put_front_waiting_for_rack",
            "code": "UD.H.005",
            "message": "Wait for MSU",
            "showImage": false,
            "level": 1,
            "type": 'active'
        }],
        [{
            "screen_id": "",
            "code": "Common.018",
            "message": "Dock Cart",
            "showImage": true,
            "level": 1,
            "type": 'passive'
        }, {
            "screen_id": "ud_put_front_place_items_in_rack",
            "code": "UD.H.004",
            "message": "Put item in slot and scan slot to confirm",
            "showImage": true,
            "level": 2,
            "type": 'active'
        }],
        [{
            "screen_id": "",
            "code": "Common.018",
            "message": "Dock Cart",
            "showImage": true,
            "level": 1,
            "type": 'passive'
        }, {
            "screen_id": "ud_put_front_missing",
            "code": "UD.H.004",
            "message": "Put item in slot and scan slot to confirm",
            "showImage": true,
            "level": 2,
            "type": 'active'
        }],
        [{
            "screen_id": "",
            "code": "Common.018",
            "message": "Dock Cart",
            "showImage": true,
            "level": 1,
            "type": 'passive'
        }, {
            "screen_id": "ud_put_front_unexpected",
            "code": "UD.H.004",
            "message": "Put item in slot and scan slot to confirm",
            "showImage": true,
            "level": 2,
            "type": 'active'
        }]


    ],
    "pickFront": [
        [{
            "screen_id": ["pick_front_waiting_for_msu", "pick_front_one_step_scan", "pick_front_dock_tote", "pick_front_undock_tote", "pick_front_slot_scan", "pick_front_tote_confirm", "remove_all_totes", "wait_for_mtu", "select_mtu_point", "scan_empty_tote","scan_empty_slot"],
            "code": "Common.000",
            "message": "Wait For MSU",
            "showImage": false,
            "level": 1,
            "type": 'active'
        }],
        [{
            "screen_id": ["pick_front_location_scan", "pick_front_container_scan", "pick_front_item_scan", "pick_front_more_item_scan", "pick_front_container_break", "pick_front_checklist", "pick_front_skip_tote", "pick_front_skip_bin"],
            "code": "Common.000",
            "image": svgConstants.scan,
            "message": "Scan Slot Barcode",
            "showImage": true,
            "level": 1,
            "type": 'passive'
        }, {
            "screen_id": "pick_front_pptl_press",
            "code": "Common.001",
            "image": svgConstants.pptl,
            "message": "PPTL",
            "showImage": true,
            "level": 2,
            "type": 'passive'
        }],
        [{
            "screen_id": "pick_front_no_free_bin",
            "code": "Common.000",
            "image": svgConstants.exception,
            "message": "Wait For MSU",
            "showImage": true,
            "level": null,
            "type": 'active'
        }],
        [{
            "screen_id": ["pick_front_packing_box"],
            "code": "Common.000",
            "image": svgConstants.scan,
            "message": "Scan a packing box and keep in in bin {0}",
            "showImage": true,
            "level": 1,
            "type": 'passive'
        }, {
            "screen_id": "",
            "code": "Common.001",
            "image": svgConstants.pptl,
            "message": "Scan Box",
            "showImage": true,
            "level": 2,
            "type": 'passive'
        },
        {
            "screen_id": "",
            "code": "Common.001",
            "image": svgConstants.pptl,
            "message": "Press PPTL",
            "showImage": true,
            "level": 3,
            "type": 'passive'
        }],
        [
            {
                "screen_id": "",
                "code": "Common.000",
                "image": svgConstants.scan,
                "message": "Scan PB",
                "showImage": true,
                "level": 1,
                "type": 'passive'
            }, {
                "screen_id": ["pick_front_packing_container_scan"],
                "code": "PkF.H.005",
                "image": svgConstants.scan,
                "message": "Scan box from MSU slot",
                "showImage": true,
                "level": 2,
                "type": 'passive'
            }, {
                "screen_id": "",
                "code": "Common.001",
                "image": svgConstants.pptl,
                "message": "Press PPTL",
                "showImage": true,
                "level": 3,
                "type": 'passive'
            }],
        [
            {
                "screen_id": "",
                "code": "Common.000",
                "image": svgConstants.scan,
                "message": "Scan PB",
                "showImage": true,
                "level": 1,
                "type": 'passive'
            }, {
                "screen_id": ["pick_front_packing_item_scan"],
                "code": "Common.001",
                "image": svgConstants.pptl,
                "message": "Scan",
                "showImage": true,
                "level": 2,
                "type": 'passive'
            },
            {
                "screen_id": "",
                "code": "Common.000",
                "image": svgConstants.scan,
                "message": "Press PPTL",
                "showImage": true,
                "level": 3,
                "type": 'passive'
            }],
        [{
            "screen_id": "",
            "code": "Common.000",
            "image": svgConstants.scan,
            "message": "Scan PB",
            "showImage": true,
            "level": 1,
            "type": 'passive'
        }, {
            "screen_id": "",
            "code": "Common.000",
            "image": svgConstants.scan,
            "message": "Scan Box",
            "showImage": true,
            "level": 2,
            "type": 'passive'
        }, {
            "screen_id": ["pick_front_packing_pptl_press"],
            "code": "Common.001",
            "image": svgConstants.pptl,
            "message": "Press PPTL to confirm",
            "showImage": true,
            "level": 3,
            "type": 'passive'
        }],
        [{
            "screen_id": ["pick_front_location_confirm"],
            "code": "Common.000",
            "image": svgConstants.scan,
            "message": "Scan Slot Barcode",
            "showImage": true,
            "level": null,
            "type": 'passive'
        }], [{
            "screen_id": ["pick_front_bin_printout", "pick_front_rollcage_print"],
            "code": "PkF.H.016",
            "message": "Take Printout and Press PPTL",
            "showImage": false,
            "level": 1,
            "type": 'passive'
        }], [{
            "screen_id": "pick_front_scan_packs",
            "code": "PkF.H.017",
            "image": svgConstants.scan,
            "message": "Scan {0} packs",
            "showImage": true,
            "level": 1,
            "type": 'passive'
        }, {
            "screen_id": "",
            "code": "TEST.GAURAV.2", //TODO: Would be changed
            "image": svgConstants.pptl,
            "message": "Press PPTL",
            "showImage": true,
            "level": 2,
            "type": 'passive'
        }],
        [{
            "screen_id": "pick_front_location_scan",
            "code": "Common.000",
            "image": svgConstants.scan,
            "message": "Scan Slot",
            "showImage": true,
            "level": 1,
            "type": 'passive'
        }, {
            "screen_id": ["pick_front_working_table", "pick_front_item_scan"],
            "code": "Common.001",
            "image": svgConstants.pptl,
            "message": "Scan Items",
            "showImage": true,
            "level": 2,
            "type": 'passive'
        }, {
            "screen_id": "pick_front_pptl_press",
            "code": "Common.001",
            "image": svgConstants.pptl,
            "message": "Press PPTL",
            "showImage": true,
            "level": 3,
            "type": 'passive'
        }], [{
            "screen_id": "pick_front_working_table",
            "code": "Common.001",
            "image": svgConstants.pptl,
            "message": "Scan Items",
            "showImage": true,
            "level": 1,
            "type": 'passive'
        }, {
            "screen_id": "pick_front_pptl_press",
            "code": "Common.001",
            "image": svgConstants.pptl,
            "message": "Press PPTL",
            "showImage": true,
            "level": 2,
            "type": 'passive'
        }],
        [{
            "screen_id": "ara_pick_front",
            "code": "Common.000",
            "image": svgConstants.pptl,
            "message": "Operation in progress",
            "showImage": true,
            "type": 'passive'
        }]
    ],
    "pickBack": [
        [{
            "screen_id": "pick_back_scan",
            "code": "Common.001",
            "image": svgConstants.scan,
            "message": "Scan Tote",
            "showImage": true,
            "level": 1,
            "type": 'passive'
        }, {
            "screen_id": "pick_back_bin",
            "code": "Common.000",
            "message": "Remove Item",
            "showImage": true,
            "level": 2,
            "type": 'passive'
        }],
        [{
            "screen_id": "pick_back_no_scan",
            "code": "PtF.H.015",
            "message": "Put item into IRT bin and scan the bin",
            "showImage": false,
            "level": 1,
            "type": 'passive'
        }],
        [{
            "screen_id": "pick_back_scan",
            "code": "Common.001",
            "image": svgConstants.scan,
            "message": "Scan Tote",
            "showImage": true,
            "level": 1,
            "type": 'passive'
        }, {
            "screen_id": "pick_back_bin",
            "code": "Common.000",
            "message": "Scan Bin",
            "level": 2,
            "type": 'passive'
        }],
        [{
            "screen_id": ["pick_back_packing_box"],
            "code": "Common.000",
            "image": svgConstants.scan,
            "message": "Place packing box in bin and scan ID",
            "showImage": true,
            "type": 'passive'
        }],
        [{
            "screen_id": "universal_dock_undock",
            "code": "PkB.H.012",
            "image": "",
            "message": "Wait for next action",
            "showImage": false,
            "type": 'active'
        }]

    ],
    "search": [
        [{
            "screen_id": ["waiting_for_msu"],
            "code": "Common.000",
            "message": "Wait For MSU",
            "showImage": false,
            "level": 1,
            "type": 'active'
        }],
        [{
            "screen_id": "pick_back_scan",
            "code": "Common.001",
            "image": svgConstants.scan,
            "message": "Scan Slot",
            "showImage": true,
            "level": 1,
            "type": 'passive'
        }, {
            "screen_id": "search_entity_scan",
            "code": "Common.000",
            "message": "Remove Item",
            "showImage": true,
            "level": 2,
            "type": 'passive'
        }],
        [{
            "screen_id": "search_irt_confirm",
            "code": "Common.000",
            "message": "Wait For MSU",
            "showImage": false,
            "level": 1,
            "type": 'active'
        }]
    ],
    "audit": [
        [{
            "screen_id": "audit_front_waiting_for_msu",
            "code": "Common.000",
            "message": "Wait For MSU",
            "showImage": false,
            "level": 1,
            "type": 'active'
        }],
        [
            {
                "screen_id": "audit_front_waiting_for_location_scan",
                "code": "Common.001",
                "image": svgConstants.scan,
                "message": "Scan MSU Barcode",
                "showImage": true,
                "level": 1,
                "type": 'passive'
            },
            {
                "screen_id": "audit_scan",
                "code": "Common.001",
                "image": svgConstants.scan,
                "message": "Scan Items",
                "showImage": true,
                "level": 2,
                "type": 'passive'
            },
            , {
                "screen_id": "audit_reconcile",
                "code": "Common.000",
                "image": svgConstants.place,
                "message": "Status",
                "showImage": true,
                "level": 3,
                "type": 'passive'
            }]
    ],
    "sraudit": [
        [{
            "screen_id": "audit_front_waiting_for_msu",
            "code": "Common.000",
            "message": "Wait For MPU",
            "showImage": false,
            "level": 1,
            "type": 'active'
        }],
        [
            {
                "screen_id": "audit_front_waiting_for_location_scan",
                "code": "Common.001",
                "image": svgConstants.scan,
                "message": "Scan slot",
                "showImage": true,
                "level": 1,
                "type": 'passive'
            },
            {
                "screen_id": "audit_scan_sr",
                "code": "Common.001",
                "image": svgConstants.scan,
                "message": "Scan entities",
                "showImage": true,
                "level": 2,
                "type": 'passive'
            },
            , {
                "screen_id": "audit_reconcile",
                "code": "Common.000",
                "image": null,
                "message": "Status",
                "showImage": true,
                "level": 3,
                "type": 'passive'
            }]
    ],

    "prePut": [
        [{
            "screen_id": "pre_put_stage",
            "code": "Common.000",
            "image": svgConstants.stage,
            "message": "Scan tote",
            "showImage": true,
            "level": 1,
            "type": 'passive'
        },
        {
            "screen_id": "pre_put_scan",
            "code": "Common.001",
            "image": svgConstants.scan,
            "message": "Scan slot",
            "showImage": true,
            "level": 2,
            "type": 'passive'
        }],
        [
            {
                "screen_id": "pre_put_release",
                "code": "Common.000",
                "message": "Release MTU",
                "showImage": false,
                "level": 1,
                "type": 'active'
            }]
    ],
    "print": [
        [{
            "screen_id": "per_item_print",
            "code": "Common.000",
            "message": "Paste print out on the item and confirm",
            "showImage": false,
            "level": 1,
            "type": 'active'
        }]
    ],
    "header": []
};

module.exports = navData;

},{"../constants/svgConstants":245}],242:[function(require,module,exports){
var appConstants = {
  WEBSOCKET_CONNECT: "Websocket connection",
  LIST_SEATS: "LIST_SEATS",
  
  LOGIN: "LOGIN",
  API: "/api",
  AUTH: "/auth",
  TOKEN: "/token",
  LOGOUT: "/logout",
  PPS_SEATS: "/pps_seats/",
  MODE: "/mode",
  SEND_DATA: "/send_data",
  COMPONENT: "/components",
  LANG: "/language", //Language from api
  OPERATOR_SEAT: "OPERATOR_SEAT",
  LOGIN_SEAT: "LOGIN_SEAT",
  SCAN_ITEMS: "Scan the item(s)",
  PLACE_ITEMS: "Place",
  TOGGLE_BIN_SELECTION: "TOGGLE_BIN_SELECTION",
  SET_PUT_DATA: "SET_PUT_DATA",
  SET_PICK_BACK_DATA: "SET_PICK_BACK_DATA",
  ARA_PICK_FRONT: "ara_pick_front",
  SET_SEARCH_DATA: "SET_SEARCH_DATA",
  PICK_BACK: "pick_back",
  PICK_FRONT: "pick_front",
  PUT_BACK: "put_back",
  MTU_SUBSYSTEM: "mtu_subsytem",
  PUT_FRONT: "put_front",
  PICK: "pick",
  CLOSE_MODAL: "CLOSE_MODAL",
  PRINT_CONFIRM: "PRINT_CONFIRM",
  CHANGE_AUDIT_EXCEPTION_SCREEN: "CHANGE_AUDIT_EXCEPTION_SCREEN",
  AUDIT_LOCATION_SCAN: "audit_front_waiting_for_location_scan",
  INNER_SUBPACK: "container_level_1",
  OUTER_PACK: "container_level_2",
  QUANTITY_UPDATE_AUDIT_SEAT: "quantity_update_for_audit_seat",
  TOGGLE_BIN_SELECTION: "TOGGLE_BIN_SELECTION",
  CHANGE_DAMAGED_SCREEN_CONFIRM: "CHANGE_DAMAGED_SCREEN_CONFIRM",
  CHANGE_OVERSIZED_SCREEN_CONFIRM: "CHANGE_OVERSIZED_SCREEN_CONFIRM",
  CHANGE_DAMAGED_ENTITY_CONFIRM: "CHANGE_DAMAGED_ENTITY_CONFIRM",
  DAMAGED_ENTITY_CONFIRM: "damaged_entity_confirm",
  MOVE_TO_DAMAGED_CONFIRM: "MOVE_TO_DAMAGED_CONFIRM",
  SET_CURRENT_SEAT: "SET_CURRENT_SEAT",
  SET_PUT_BACK_DATA: "SET_PUT_BACK_DATA",
  SET_PUT_FRONT_DATA: "SET_PUT_FRONT_DATA",
  CHANGE_PUT_BACK_EXCEPTION_SCREEN: "CHANGE_PUT_BACK_EXCEPTION_SCREEN",
  POPUP_VISIBLE: "POPUP_VISIBLE",
  PUT_BACK_STAGE: "put_back_stage",
  REPRINT_INVOICE: "REPRINT_INVOICE",
  EXCEPTION_DATA_SENT: "EXCEPTION_DATA_SENT",
  SKIP_PRINTING: "SKIP_PRINTING",
  DIS_ASSOCIATE_TOTE: "DIS_ASSOCIATE_TOTE",
  OVERRIDE_TOTE: "OVERRIDE_TOTE",
  BACK_BUTTON_PRESS: "BACK_BUTTON_PRESS",
  CONFIRM_BUTTON: "CONFIRM_BUTTON",
  PICK_FINISH_EXCEPTION_ENTITY: "PICK_FINISH_EXCEPTION_ENTITY",
  PICK_BACK_EXCEPTION_REPRINT: "pick_back_reprint_required",
  PICK_BACK_EXCEPTION_SKIP_PRINTING: "pick_back_skip_print",
  PICK_BACK_EXCEPTION_DIS_ASSOCIATE_TOTE: "pick_back_tote_deassociation",
  PICK_BACK_EXCEPTION_OVERRIDE_TOTE: "pick_back_override_tote_required",
  PICK_BACK_PACKING_BOX: "pick_back_packing_box",
  PUT_BACK_SCAN: "put_back_scan",
  PUT_BACK_TOTE_CLOSE: "put_back_tote_close",
  PUT_BACK_SCAN_TOTE: "put_back_scan_tote",
  PUT_BACK_EXCEPTION: "put_back_exception",
  PUT_FRONT_WAITING_FOR_RACK: "put_front_waiting_for_rack",
  PUT_FRONT_PLACE_ITEMS_IN_RACK: "put_front_place_items_in_rack",
  PUT_BACK_EXCEPTION_PUT_EXTRA_ITEM_IN_IRT_BIN:
    "put_back_put_extra_item_in_irt_bin",
  PICK_FRONT_REPRINT_EXCEPTION: "pick_front_reprint_exception",
  PUT_BACK_WAREHOUSE_FULL_IRT_SCAN: "put_back_warehouse_full_irt_scan",
  PUT_BACK_PHYSICALLY_DAMAGED_ITEMS: "put_back_physically_damaged_items",
  PHYSICALLY_DAMAGED: "physically_damaged",
  EXTRA_ITEMS: "extra_items",
  CANCEL_SCAN_MODAL: "CANCEL_SCAN_MODAL",
  CANCEL_SCAN_SEND_TO_SERVER_MODAL: "CANCEL_SCAN_SEND_TO_SERVER_MODAL",
  PICK_FRONT_REPRINT: "PICK_FRONT_REPRINT",
  ITEM_SCANNABLE: "item_unscannable",
  ITEM_OVERSIZED: "item_oversized",
  FINISH_DAMAGED_ENTITY_DATA: "FINISH_DAMAGED_ENTITY_DATA",
  FINISH_EXCEPTION_EXTRA_ITEM: "FINISH_EXCEPTION_EXTRA_ITEM",
  PUT_FRONT_EXCEPTION_DAMAGED_ENTITY: "put_front_physically_damaged_items",
  PUT_FRONT_EXCEPTION_EXCESS_TOTE: "put_front_excess_items_tote",
  PUT_FRONT_EXCEPTION_EXCESS_ITEMS: "put_front_excess_items",
  PUT_FRONT_EXCESS_ITEMS_PPSBIN: "put_front_excess_items_ppsbin",
  PUT_FRONT_PPTL_PRESS: "put_front_pptl_press",
  PUT_FRONT_BIN_WAREHOUSE_FULL: "put_front_bin_warehouse_full",
  PUT_FRONT_PLACE_UNMARKED_ENTITY_IN_RACK:
    "put_front_place_unmarked_entity_in_rack",
  PUT_FRONT_SCAN_RACK_FOR_UNMARKED_ENTITY:
    "put_front_scan_rack_for_unmarked_entity",
  PICK_FRONT_EXCEPTION_DAMAGED_ENTITY: "pick_front_physically_damaged",
  PICK_FRONT_MISSING_DAMAGED_UNSCANNABLE_ENTITY:
    "pick_front_missing_or_unscannable_damaged_item",
  PICK_FRONT_MISSING_OR_UNSCANNABLE_DAMAGED_PACK:
    "pick_front_missing_or_unscannable_damaged_pack",
  PICK_FRONT_MISSING_OR_UNSCANNABLE_DAMAGED_SUBPACK:
    "pick_front_missing_or_unscannable_damaged_subpack",
  PUT_FRONT_MISSING_DAMAGED_UNSCANNABLE_ENTITY:
    "put_front_unscannable_or_missing_or_damaged",
  PICK_BACK_CHANGE_PBOX_BIN: "pick_back_change_pbox_bin",
  PICK_BACK_CHANGE_PBOX_SCAN: "pick_back_change_pbox_scan",
  PICK_FRONT_IRT_BIN_CONFIRM: "pick_front_irt_bin_confirm",
  PICK_FRONT_BIN_PRINTOUT: "pick_front_bin_printout",
  PICK_FRONT_ROLLCAGE_PRINTOUT: "pick_front_rollcage_print",
  PICK_FRONT_WORKING_TABLE: "pick_front_working_table",
  PER_ITEM_PRINT: "per_item_print",
  PUT_FRONT_EXCEPTION_SPACE_NOT_AVAILABLE: "put_front_space_unavailable",
  VALIDATE_AND_SEND_DATA_TO_SERVER: "VALIDATE_AND_SEND_DATA_TO_SERVER",
  VALIDATE_AND_SEND_PUT_DATA_TO_SERVER: "VALIDATE_AND_SEND_PUT_DATA_TO_SERVER",
  VALIDATE_AND_SEND_SPACE_UNAVAILABLE_DATA_TO_SERVER:
    "VALIDATE_AND_SEND_SPACE_UNAVAILABLE_DATA_TO_SERVER",
  CONFIRM_ITEM_PLACE_IN_IRT: "CONFIRM_ITEM_PLACE_IN_IRT",
  SEND_MISSING_BOX_EXCEPTION: "SEND_MISSING_BOX_EXCEPTION",
  PUT_FRONT_SCAN: "put_front_scan",
  STAGE_ONE_BIN: "STAGE_ONE_BIN",
  CLOSE_CANCEL_SCAN: "CLOSE_CANCEL_SCAN",
  PICK_FRONT_EXCEPTION_MISSING_BOX: "pick_front_no_containers_found",
  STAGE_ALL: "STAGE_ALL",
  KQ_OPERATION: "KQ_OPERATION",
  CONFIRM_FROM_USER: "CONFIRM_FROM_USER",
  RESET_NUMPAD: "RESET_NUMPAD",
  CANCEL_FINISH_AUDIT: "CANCEL_FINISH_AUDIT",
  FINISH_CURRENT_AUDIT: "FINISH_CURRENT_AUDIT",
  CHANGE_PICK_FRONT_EXCEPTION_SCREEN: "CHANGE_PICK_FRONT_EXCEPTION_SCREEN",
  CANCEL_SCAN: "CANCEL_SCAN",
  CANCEL_SCAN_UDP: "CANCEL_SCAN_UDP",
  FINISH_BOX: "FINISH_BOX",
  GENERATE_REPORT: "GENERATE_REPORT",
  LOAD_MODAL: "load_modal",
  CANCEL_SCAN_ALL: "cancel_scan_all",
  PPTL_PRESS: "PPTL_PRESS",
  SET_PICK_FRONT_DATA: "SET_PICK_FRONT_DATA",
  PUT_FRONT_EXCEPTION_WAREHOUSE_FULL: "put_front_exception_warehouse_full",
  GOOD_QUANTITY: "good_quantity",
  MISSING_QUANTITY: "Missing_quntity",
  UNSCANNABLE_QUANTITY: "Unscannable_quntity",
  UNSCANNABLE: "UNSCANNABLE",
  DAMAGED_QUANTITY: "Damaged_quntity",
  GOOD_PACK: "good_pack",
  GOOD_SUB_PACK: "good_sub_pack",
  UNEXPECTED_PACK: "unexpected_pack",
  UNEXPECTED_SUB_PACK: "unexpected_sub_pack",
  PACK_MISSING: "pack_missing",
  SUB_PACK_MISSING: "sub_pack_missing",
  DAMAGED_PACK: "damaged_pack",
  DAMAGED_SUB_PACK: "damaged_sub_pack",
  BAD_BARCODE_PACK: "bad_barcode_pack",
  BAD_BARCODE_SUB_PACK: "bad_barcode_sub_pack",
  PICK_FRONT_WAITING_FOR_MSU: "pick_front_waiting_for_msu",
  PICK_FRONT_ONE_STEP_SCAN: "pick_front_one_step_scan",
  PICK_FRONT_UNDOCK_TOTE: "pick_front_undock_tote",
  PICK_FRONT_LOCATION_SCAN: "pick_front_location_scan",
  PICK_FRONT_CONTAINER_SCAN: "pick_front_container_scan",
  PICK_FRONT_ITEM_SCAN: "pick_front_item_scan",
  PICK_FRONT_CONTAINER_BREAK: "pick_front_container_break",
  PICK_FRONT_MORE_ITEM_SCAN: "pick_front_more_item_scan",
  PICK_FRONT_PPTL_PRESS: "pick_front_pptl_press",
  PICK_FRONT_NO_FREE_BIN: "pick_front_no_free_bin",
  PICK_FRONT_DOCK_TOTE: "pick_front_dock_tote",
  PUT_BACK_EXCEPTION_OVERSIZED_ITEMS: "put_back_item_oversized",
  PUT_BACK_EXCEPTION_EXCESS_ITEMS_IN_BINS: "put_back_extra_item_bin_select",
  PUT_BACK_INVALID_TOTE_ITEM: "put_back_invalid_tote_item",
  FINISH_EXCEPTION_ITEM_OVERSIZED: "FINISH_EXCEPTION_ITEM_OVERSIZED",
  FINISH_EXCEPTION_ENTITY_DAMAGED: "FINISH_EXCEPTION_ENTITY_DAMAGED",
  PUT_BACK_EXCEPTION_ENITY_IRT_BIN: "put_back_transfer_to_irt_bin",
  PUT_BACK_EXCEPTION_EXTRA_ITEM_QUANTITY_UPDATE:
    "put_back_extra_item_quantity_update",
  PUT_FRONT_WAREHOUSE_FULL_IRT_SCAN: "put_front_warehouse_full_irt_scan",
  SEND_EXTRA_ITEM_QTY: "SEND_EXTRA_ITEM_QTY",
  UNMARKED_DAMAGED: "UNMARKED_DAMAGED",
  EDIT_DETAILS: "EDIT_DETAILS",
  PICK_BACK_BIN: "pick_back_bin",
  PICK_BACK_SCAN: "pick_back_scan",
  SEND_EXCESS_ITEMS_BIN: "SEND_EXCESS_ITEMS_BIN",
  WAREHOUSEFULL_EXCEPTION: "WAREHOUSEFULL_EXCEPTION",
  CONFIRM_PHYSICALLY_DAMAGED_ITEMS: "CONFIRM_PHYSICALLY_DAMAGED_ITEMS",
  SEND_AUDIT_DAMAGED_ENTITY_DETAILS_ON_CONFIRM:
    "SEND_AUDIT_DAMAGED_ENTITY_DETAILS_ON_CONFIRM",
  AUDIT_EXCEPTION_LOOSE_ITEMS_DAMAGED_EXCEPTION:
    "audit_loose_item_damage_exception",
  AUDIT_EXCEPTION_BOX_DAMAGED_BARCODE: "audit_box_damage_exception",
  AUDIT_EXCEPTION_ITEM_IN_BOX_EXCEPTION: "audit_item_in_box_damage_exception",

  AUDIT_PACK_UNSCANNABLE_EXCEPTION: "audit_pack_unscannable_exception",
  AUDIT_SUB_PACK_UNSCANNABLE_EXCEPTION: "audit_sub_pack_unscannable_exception",
  AUDIT_EACH_UNSCANNABLE_EXCEPTION: "audit_each_unscannable_exception",
  AUDIT_DAMAGED_ENTITY_EXCEPTION: "audit_physically_damaged_exception",
  AUDIT_FRONT_IRT_BIN_CONFIRM: "audit_front_irt_bin_confirm",
  DEFAULT: "default",
  AUDIT: "audit_front",
  SET_AUDIT_DATA: "SET_AUDIT_DATA",
  AUDIT_SCAN: "audit_scan",
  AUDIT_SCAN_SR: "audit_scan_sr",
  AUDIT_RECONCILE: "audit_reconcile",
  AUDIT_WAITING_FOR_MSU: "audit_front_waiting_for_msu",
  GET_REVISED_QUANTITY: "GET_REVISED_QUANTITY",
  BARCODE_SCAN: "BARCODE_SCAN",
  GET_SERVER_MESSAGES: "GET_SERVER_MESSAGES",
  SET_SERVER_MESSAGES: "SET_SERVER_MESSAGES",
  CHANGE_PUT_FRONT_EXCEPTION_SCREEN: "CHANGE_PUT_FRONT_EXCEPTION_SCREEN",
  CHANGE_LANGUAGE: "CHANGE_LANGUAGE",
  SET_LANGUAGE: "SET_LANGUAGE",
  CHECKLIST_SUBMIT: "CHECKLIST_SUBMIT",
  UPDATE_KQ_QUANTITY: "UPDATE_KQ_QUANTITY",
  UPDATE_MISSING_QUANTITY: "UPDATE_MISSING_QUANTITY",
  UPDATE_UNSCANNABLE_QUANTITY: "UPDATE_UNSCANNABLE_QUANTITY",
  PUT_FRONT_ITEMS_TO_IRT_BIN: "put_front_items_to_irt_bin",
  PUT_FINISH_EXCEPTION_ENTITY: "PUT_FINISH_EXCEPTION_ENTITY",
  UPDATE_GOOD_QUANTITY: "UPDATE_GOOD_QUANTITY",
  UPDATE_DAMAGED_QUANTITY: "UPDATE_DAMAGED_QUANTITY",
  CANCEL_TOTE: "CANCEL_TOTE",
  CLOSE_TOTE: "CLOSE_TOTE",
  TOTE_ACTION: "TOTE_ACTION",
  POST_DATA_TO_INTERFACE: "POST_DATA_TO_INTERFACE",
  POST_DATA_TO_TOWER: "POST_DATA_TO_TOWER",
  LOG_ERROR: "LOG_ERROR",
  SEND_KQ_QTY: "SEND_KQ_QTY",
  SEND_AUDIT_DAMAGED_ENTITY_DETAILS: "SEND_AUDIT_DAMAGED_ENTITY_DETAILS",
  ENABLE_EXCEPTION: "ENABLE_EXCEPTION",
  ENABLE_SEARCH: "ENABLE_SEARCH",
  CANCEL_EXCEPTION: "CANCEL_EXCEPTION",
  REPRINT: "REPRINT",
  CANCEL_EXCEPTION_TO_SERVER: "CANCEL_EXCEPTION_TO_SERVER",
  LOGOUT_SESSION: "LOGOUT_SESSION",
  SET_ACTIVE_EXCEPTION: "SET_ACTIVE_EXCEPTION",
  DAMAGED_BARCODE: "Damaged Barcode",
  OVERSIZED_ITEMS: "Oversized Items",
  EXCESS_ITEMS_IN_PPS_BINS: "Excess Items in PPS Bins",
  SHOW_ERROR_MESSAGE: "SHOW_ERROR_MESSAGE",
  CONFIRM_TOTE_EXCEPTION: "CONFIRM_TOTE_EXCEPTION",
  CANCEL_TOTE_EXCEPTION: "CANCEL_TOTE_EXCEPTION",
  PERIPHERAL_DATA: "PERIPHERAL_DATA",
  SEARCH_MANAGEMENT: "SEARCH_MANAGEMENT",
  BACK: "BACK",
  ITEM_SEARCH_RESULT: "ITEM_SEARCH_RESULT",
  ITEM_SEARCH_NO_RESULT: "ITEM_SEARCH_NO_RESULT",
  PERIPHERALS: "peripherals",
  UPDATE_SEAT_DATA: "UPDATE_SEAT_DATA",
  PPTL_MANAGEMENT: "pptl_management",
  ITEM_SEARCH: "ITEM_SEARCH",
  ORPHAN_ITEM_DATA: "ORPHAN_ITEM_DATA",
  SCANNER_MANAGEMENT: "scanner_management",
  SEARCH_ITEM_DETAILS: "SEARCH_ITEM_DETAILS",
  CONVERT_TEXTBOX: "convert_textbox",
  UPDATE_PERIPHERAL: "UPDATE_PERIPHERAL",
  ADD: "/add",
  ADD_SCANNER: "ADD_SCANNER",
  PERIPHERAL_MANAGEMENT: "PERIPHERAL_MANAGEMENT",
  ADD_SCANNER_DETAILS: "ADD_SCANNER_DETAILS",
  CANCEL_ADD_SCANNER: "CANCEL_ADD_SCANNER",
  CANCEL_CLOSE_SCANNER: "CANCEL_CLOSE_SCANNER",
  GENERATE_NOTIFICATION: "GENERATE_NOTIFICATION",
  CANCEL_PPTL: "CANCEL_PPTL",
  IDLE_LOGOUT_TIME: 300000, //in millisec
  VALIDATE_UNMARKED_DAMAGED_DATA: "VALIDATE_UNMARKED_DAMAGED_DATA",
  PUT_FRONT_WAITING_UNDOCK: "put_front_waiting_undock",
  PUT_FRONT_WRONG_UNDOCK: "put_front_wrong_undock",
  PRE_PUT_STAGE: "pre_put_stage",
  PRE_PUT_SCAN: "pre_put_scan",
  PRE_PUT_RELEASE: "pre_put_release",
  PRE_PUT: "pre_put_back",
  PRE_PUT_EXCEPTION_EXCESS_TOTE: "pre_put_excess_items_tote",
  PRE_PUT_EXCEPTION_EXCESS_ITEMS: "pre_put_excess_items",
  RELEASE_MTU: "release_mtu",
  BIN_FULL: "bin_full",
  BIN_FULL_REQUEST: "bin_full_request",
  CANCEL_BIN_FULL_REQUEST: "bin_full_cancel",
  CONFIRM_BIN_FULL_REQUEST: "bin_full_confirmed",
  CANCEL_LAST_SCAN: "cancel_last_scan",
  CONFIRM_LOGOUT: "confirm_logout",
  CONFIRM_LOGOUT_REQUEST: "confirm_logout_request",
  CANCEL_LOGOUT_REQUEST: "cancel_logout_request",
  REPRINT_REQUEST: "reprint_request",
  CANCEL_REPRINT_REQUEST: "cancel_reprint_request",
  CONFIRM_REPRINT_LAST_REQUEST: "reprint_last_confirm",
  CONFIRM_REPRINT_ALL_REQUEST: "reprint_all_confirm",
  PICK_FRONT_PACKING_BOX: "pick_front_packing_box",
  PICK_FRONT_PACKING_CONTAINER_SCAN: "pick_front_packing_container_scan",
  PICK_FRONT_PACKING_ITEM_SCAN: "pick_front_packing_item_scan",
  PICK_FRONT_PACKING_PPTL_PRESS: "pick_front_packing_pptl_press",
  PACKING_BOX: "PACKING_BOX",
  BOX_FULL: "BOX_FULL",
  BOX_FULL_REQUEST: "packing_box_full_request",
  BOX_FULL_REQUEST_CONFIRMED: "packing_box_full_confirmed",
  DISCARD_PACKING_BOX: "DISCARD_PACKING_BOX",
  CANCEL_REMOVE_ALL_ENTITIES: "CANCEL_REMOVE_ALL_ENTITIES",
  CANCEL_BOX_FULL_REQUEST: "packing_box_full_cancel",
  CONFIRM_REMOVE_ALL_ENTITIES: "CONFIRM_REMOVE_ALL_ENTITIES",
  CONFIRM_LOCATION: "CONFIRM_LOCATION",
  CONFIRM_LOCATION_PRESS: "container_kept_in_rack",
  HIDE_SPINNER: "HIDE_SPINNER",
  PICK_FRONT_LOCATION_CONFIRM: "pick_front_location_confirm",
  CLOSE_CANCEL_EXCEPTION: "close_cancel_exception",
  CANCEL_EXCEPTION_MODAL: "cancel_exception_modal",
  PUT_BACK_INVOICE: "put_back_invoice",
  EXIT_INVOICE: "EXIT_INVOICE",
  DECLINE_CANCEL_INVOICE: "DECLINE_CANCEL_INVOICE",
  PICK_BACK_REPRINT_TOTE: "pick_back_reprint_tote",
  CONFIRM_EXIT_INVOICE: "CONFIRM_EXIT_INVOICE",
  /*Constants for order details*/
  VOLUME_UNIT: "vol_unit",
  VOLUME: "volume",
  /*Constants for Put back exception*/
  ENTITY_DAMAGED: "entity_damaged",
  PICK_BACK_REPRINT_TOTE: "pick_back_reprint_tote",
  BIN_LIGHT_COLOR: {
    red: "#FF0000",
    blue: "#0390FF",
    green: "#4CAF50",
    pink: "#FF1BA5",
    white: "#FFFFFF",
    cyan: "#00FFFF",
    yellow: "#FFFF00"
  },
  PICK_FRONT_SCAN_PACKS: "pick_front_scan_packs",
  ERROR_NOTIFICATION: "ERROR_NOTIFICATION",
  HIDE_ERROR_NOTIFICATION: "HIDE_ERROR_NOTIFICATION",
  CLIENT_NOTIFICATION: "client",
  PUT_BACK_PRESS_PPTL_TOTE: "put_back_pptl_press_tote",
  PUT_BACK_NO_SCAN_TOTE: "put_back_no_scan_tote",
  PUT_BACK_UNSCANNABLE: "put_back_unscannable",
  PUT_BACK_SCAN_EXCESS_ITEM: "put_back_scan_excess_item",

  UNSCANNABLE_TOTE_ENTITY_QUANTITY: "UNSCANNABLE_TOTE_ENTITY_QUANTITY",
  TOTE_UNSCANNABLE: "tote_unscannable",
  EXCESS_ITEM_BIN: "EXCESS_ITEM_BIN",
  PICK_BACK_TOTE_BIN: "pick_back_tote_bin",
  WAITING_ORDER_TO_COMPLETE_FRONT: "waiting_order_to_complete_front",
  BIN_FULL_RAISED_FRONT: "bin_full_raised_front",
  PRESS_PPTL_TO_CLEAR_BIN: "press_pptl_to_clear_bin",
  CANCEL_SCAN_TOTE: "CANCEL_SCAN_TOTE",
  PICK_BACK_NO_SCAN: "pick_back_no_scan",
  SET_CANCEL_BUTTON_STATUS: "SET_CANCEL_BUTTON_STATUS",
  /*Constants for UDP*/
  UDP_PUT_FRONT_TOTE_SCAN: "ud_put_front_tote_scan",
  UDP_PUT_FRONT_ENTITY_SCAN: "ud_put_front_entity_scan",
  UDP_PUT_FRONT_BIN_SCAN: "ud_put_front_bin_scan",

  SEARCH_PPS_ITEM: "search_item",
  SEARCH_ITEM_CONFIRM: "search_item_confirm",
  SEARCH_ENTITY_SCAN: "search_entity_scan",
  SEARCH_IRT_CONFIRM: "search_irt_confirm",
  SEARCH: "search_front",
  WAITING_FOR_MSU: "waiting_for_msu",
  UDP_PUT_FRONT_WAITING_FOR_RACK: "ud_put_front_waiting_for_rack",
  UDP_PUT_FRONT_PLACE_ITEMS_IN_RACK: "ud_put_front_place_items_in_rack",
  UDP_PUT_FRONT_MISSING: "ud_put_front_missing",
  UDP_PUT_FRONT_UNEXPECTED: "ud_put_front_unexpected",
  UDP_UNEXPECTED_ITEM: "ud_put_front_unexpected",
  CLOSE_UNEXPECTED_SCAN: "CLOSE_UNEXPECTED_SCAN",
  SEND_MSU: "send_msu",
  CLOSE_CART: "close_cart",
  PICK_FRONT_CHECKLIST: "pick_front_checklist",
  /*Constants for Audit*/
  OPEN_AUDIT_MODAL: "OPEN_AUDIT_MODAL",
  SR_SERVICE: "/sr-service",
  PLATFORM_SRMS: "/platform-srms",
  SERVICE_REQUEST: "/service-request",
  SEARCH_ITEM: "/search-item",
  CONFIRM_LOCATION: "CONFIRM_LOCATION",
  PICK_FRONT_SLOT_SCAN: "pick_front_slot_scan",
  PICK_FRONT_TOTE_CONFIRM: "pick_front_tote_confirm",
  NEW_CARRYING_UNIT: "request_tote",
  CANCEL_TOTE: "cancel_tote",
  CONFIRM_TOTE: "confirm_tote",
  CONFIRM_TOTE_SEND_TO_SERVER_MODAL: "CONFIRM_TOTE_SEND_TO_SERVER_MODAL",
  CANCEL_TOTE_SEND_TO_SERVER_MODAL: "CANCEL_TOTE_SEND_TO_SERVER_MODAL",
  LANGUAGE: "Language",
  LOGINTO: "Login to",
  BUTLERSYSTEM: "Butler System",
  PICK_FRONT_SKIP_TOTE: "pick_front_skip_tote",
  SKIP_DOCKING: "skip_bin",
  CANCEL_SKIP_DOCKING: "cancel_bin_skip",
  CONFIRM_SKIP_DOCKING: "confirm_bin_skip",
  CANCEL_SKIP_DOCKING_SEND_TO_SERVER_MODAL:
    "CANCEL_SKIP_DOCKING_SEND_TO_SERVER_MODAL",
  CONFIRM_SKIP_DOCKING_SEND_TO_SERVER_MODAL:
    "CONFIRM_SKIP_DOCKING_SEND_TO_SERVER_MODAL",
  PICK_FRONT_SKIP_BIN: "pick_front_skip_bin",
  GET_BOI_CONFIG: "GET_BOI_CONFIG",
  KEYBOARD: "KEYBOARD",
  SCANNER: "SCANNER",
  UNIVERSAL_DOCK_UNDOCK: "universal_dock_undock",
  PICK_REPRINT_PACKLIST: "pick_reprint_packlist",
  IN: "in ",
  QL_CODE: "QL Code",
  SLOT_ID: "Slot ID",
  PREV_LOCATION: "Location",
  WAIT_FOR_MTU: "wait_for_mtu",
  SELECT_MTU_POINT: "select_mtu_point",
  REMOVE_ALL_TOTES: "remove_all_totes",
  SCAN_EMPTY_TOTE: "scan_empty_tote",
  SCAN_EMPTY_SLOT: "scan_empty_slot",
  PUT_TOTE_IN_MTU: "put_tote_in_mtu",
  SELECT_MTU_TO_PROCEED: "select_mtu_to_proceed",


  //MTU
  API_GATEWAY: "/api-gateway",
  PROCESS_SERVICE: "/process-service",
  WMS_PROCESS: "/wms-process",
  EXTRACTION_APP:"/extraction-app",
  EXTRACTION_UI:"Extraction UI",
  PPS: "/pps",
  NOTIFY: "/notify",
  UI_EVENT: "/ui-event",
  LIST_STATIONS: "LIST_STATIONS",
  REMOVE_ALL_BUTTON: "REMOVE_ALL_BUTTON",
  REMOVE_ALL_BUTTON_WITHOUT_TOTE_MODAL: "REMOVE_ALL_BUTTON_WITHOUT_TOTE_MODAL",
  REMOVE_ALL_BUTTON_CONFIRMATION: "REMOVE_ALL_BUTTON_CONFIRMATION",
  SET_CURRENT_STATION_ID: "SET_CURRENT_STATION_ID"
}

module.exports = appConstants

},{}],243:[function(require,module,exports){
var configConstants = {
   WEBSOCKET_IP: 'ws://192.168.8.193:8080',
   INTERFACE_IP: 'https://192.168.8.193',
   PLATFORM_IP: 'http://192.168.8.193:8080'
};
var BOI_CONFIG =
   configConstants.INTERFACE_IP + '/api/components/get_boi_config';
configConstants['BOI_CONFIG'] = BOI_CONFIG;
module.exports = configConstants;

},{}],244:[function(require,module,exports){

var resourceConstants = {
	BIN: 'Bin',
	SELECTED: 'Selected',
	UNSELECTED: "Unselected",
	SYS_IDLE: 'System is Idle',
	UNDOCK_PUSH: 'Gently push roll cage away from the frame',
	WRONG_UNDOCK: 'Dock roll cage back to proceed the operation',
	CURR_SLOT: 'CURRENT SLOT',
	CURR_BIN: 'CURRENT BIN',
	VIEW_MORE: 'View More',
	TBL_HEADER: 'Box Serial Numbers',
	NO_RECONCILE: 'No Items To Reconcile',
	YES_RECONCILE: 'List Of Items To Reconcile',
	USERNAME: 'Username',
	PASSWORD: 'Password',
	BIN_GROUP_LEFT: "left",
	BIN_GROUP_RIGHT: "right",
	BIN_GROUP_CENTER: "top",
	BIN_GROUP_CENTER_TOP: "center-top",
	order_id: "Order ID",
	rem_qty: "Quantity",
	volume: "Volume",
	CLIENTCODE_001: 'CLIENTCODE_001',
	CLIENTCODE_002: 'CLIENTCODE_002',
	CLIENTCODE_004: 'CLIENTCODE_004',
	CLIENTCODE_005: 'CLIENTCODE_005',
	CLIENTCODE_006: 'CLIENTCODE_006',
	CLIENTCODE_007: 'CLIENTCODE_007',
	CLIENTCODE_008: 'CLIENTCODE_008',
	CLIENTCODE_009: 'CLIENTCODE_009',
	CLIENTCODE_010: 'CLIENTCODE_010',
	CLIENTCODE_011: 'CLIENTCODE_011',
	CLIENTCODE_012: 'CLIENTCODE_012',
	CLIENTCODE_013: 'CLIENTCODE_013',
	CLIENTCODE_014: "CLIENTCODE_014",
	CLIENTCODE_015: "CLIENTCODE_015",
	CLIENTCODE_016: 'CLIENTCODE_016',
	CLIENTCODE_017: 'CLIENTCODE_017',
	CLIENTCODE_018: "CLIENTCODE_018",
	CLIENTCODE_409: "CLIENTCODE_409",
	CLIENTCODE_409_PERIPHERAL: "CLIENTCODE_409_PERIPHERAL",
	CLIENTCODE_400_PERIPHERAL: "CLIENTCODE_400_PERIPHERAL",
	CLIENTCODE_400: "CLIENTCODE_400",
	SERVERMSGCODE_007: "PtF.E.007",
	CLIENTCODE_MODE_CHANGED: "CLIENTCODE_MODE_CHANGED",
	PUSH_TOTE_AWAY: "Scan load unit and gently push it away",
	CURRENT_MTU: "CURRENT MTU"



};
module.exports = resourceConstants;

},{}],245:[function(require,module,exports){
var allSvgConstants = {
	putBackScan: 'assets/images/scan.svg',
	putBackPlace: 'assets/images/place.svg',
	logo: 'assets/images/GO_Orange_Black_Horizontal.svg',
	menu: 'assets/images/menu.png',
	rack: 'assets/images/rack.png',
	gorLogo: 'assets/images/GO_White_Horizontal.svg',
	factoryImg: 'assets/images/factoryImage.png',
	forma1: 'assets/images/Forma1.png',
	headerbg: 'assets/images/headerbg.png',
	scanHeader: 'assets/images/scan_header.png',
	iconBar: 'assets/images/Icon.png',
	tote: 'assets/images/tote.png',
	exception: 'assets/images/exceptionIcon.png',
	scanner: 'assets/images/scanner.png',
	pallet: 'assets/images/pallet.gif',
}

module.exports = allSvgConstants;

},{}],246:[function(require,module,exports){
var Dispatcher = require('flux').Dispatcher;
var AppDispatcher = new Dispatcher();

AppDispatcher.handleAction = function(action){ 
  this.dispatch({
    source: 'VIEW_ACTION',
    action: action
  });
};


module.exports = AppDispatcher;

},{"flux":16}],247:[function(require,module,exports){
(function (global){
global.jQuery = global.$ = require("jquery");
var React = require('react');
var ReactDOM = require('react-dom');
var LoginForm = require('./components/LoginPage/LoginPage');
var ActionCreators = require('./actions/CommonActions');


var App = React.createClass({displayName: "App",
  getInitialState: function(){
    return null;
  },
  
  // componentWillMount: function(){
  //   //ActionCreators.getBOIConfig();
  // },

  render: function(){
    return (
      React.createElement("div", {className: "body-container"}, 
        React.createElement(LoginForm, null)
      )
    );
  }
});


ReactDOM.render(
    React.createElement(App, null),
    document.getElementById('app')
)

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./actions/CommonActions":181,"./components/LoginPage/LoginPage":198,"jquery":19,"react":179,"react-dom":23}],248:[function(require,module,exports){
var obj={"Scan item / Stage PPS Bin":"掃描品項／暫存 PPS 儲料箱","Scan Tote to associate with Bin":"掃描揀貨箱以和儲料箱建立關聯","Press PpsBin Button Or Scan a Tote":"按下 PpsBin 按鈕或掃描揀貨箱","User Name":"使用者名稱","Password":"密碼","Are you sure you want to close Tote":"您確定要關閉揀貨箱？","Details":"詳細資訊","Scan {0} items":"掃描 {0} 件品項","Scan box barcode":"掃描箱盒條碼","Press PpsBin {0} to remove items":"按下 PpsBin {0} 以移除品項","Tote is already scanned.Expecting pptl scan.":"已掃描揀貨箱。須掃描 pptl。","Totes are not required.Please don't scan tote barcode":"無須揀貨箱。請勿掃描揀貨箱條碼","Wrong PPS bin scanned":"掃描了錯誤的 PPS 儲料箱","Please scan the tote first and then scan pptl barcode":"請先掃描揀貨箱，再掃描 pptl 條碼","Tote scanned.Expecting pptl scan.":"已掃描揀貨箱。須掃描 pptl。","Pptl scan not allowed. Totes are not required":"不允許掃描 Pptl。無須揀貨箱","Tote didn't get associated":"揀貨箱未建立關聯","After scannning tote barcode, please scan pptl barcode":"掃描揀貨箱條碼後，請掃描 pptl 條碼","Wrong Ppsbin button pressed.Please press those buttons having color blue":"","Please complete pickback for pending bin and then proceed":"請完成待處理儲料箱的回收，再繼續進行","No totes associated. Pease keep totes in the Bin and then scan":"沒有已建立關聯的揀貨箱。請將揀貨箱留在儲料箱中，再進行掃描","Documents printed Successfully":"文件列印成功","No tote scanned":"沒有已掃描的揀貨箱","Tote cancelled":"已取消的揀貨箱","Tote already associated with ppsbin":"已和 ppsbin 建立關聯的揀貨箱","Incorrect tote barcode scanned. Please try again":"掃描了錯誤的揀貨箱條碼。請再試一次","Please press PPTL button which does not have any totes associated":"請按下尚未和任何揀貨箱建立關聯的 PPTL 按鈕","Tote assigned successfully to ppsbin {0}":"揀貨箱已成功指派給 ppsbin {0}","Bin {0} items removed successfully":"成功移除儲料箱 {0} 的品項","Totes are not required":"無須揀貨箱","Wrong Barcode scanned":"掃描了錯誤的條碼","Tote could not be reserved as already reserved":"由於揀貨箱已經保留，故無法保留","Exception invalid as totes are not required with this PPS":"由於此 PPS 無須揀貨箱，故例外處理無效","Override tote not possible":"無法撤銷揀貨箱","Scanning pptl barcode not allowed":"不允許掃描 pptl 條碼","Please press those buttons having color blink_blue":"請按下blink_blue的按鈕","Unhandled event ocurred":"發生未處理的事件","Barcode didn't match with current tote barcode":"條碼與目前的揀貨箱條碼不符","Testing configuration {0} and {1}":"正在測試配置 {0} 和 {1}","Processing. Please wait and scan later":"處理中。請稍候，並於稍後掃描","Waiting for rack":"等候料架","Current PPS mode does not support back seat. Please logout.":"目前的 PPS 模式不支援後排。請登出。","Scan items and place in bin {0}":"掃描品項並放入儲料箱 {0}","Stage Bin or Scan Entity":"暫存儲料箱或掃描實體","Place Entity in Bin and Press PPTL":"將實體放入儲料箱中並按下 PPTL","Are You Sure You Want to Close Tote?":"您確定要關閉揀貨箱？","Scan Tote or Stage PPS Bin":"掃描揀貨箱或暫存 PPS 儲料箱","Item Not Expected in Tote":"揀貨箱中未預期的品項","Tote already opened. Scan some other tote":"揀貨箱已開啟。掃描其他揀貨箱","Tote already closed. Scan some other tote":"揀貨箱已關閉。掃描其他揀貨箱","No matching tote found":"查無符合的揀貨箱","Wrong entity scanned. Please scan tote":"掃描了錯誤的實體。請掃描揀貨箱","No entities added yet. Scan entities and then press PPTL":"尚未新增實體。掃描實體，接著按下 PPTL","Wrong entity scanned. Please scan Container/Item.":"掃描了錯誤的實體。請掃描貨櫃／品項。","Cannot cancel scan. No scanned box found":"無法取消掃描。查無已掃描的箱盒","Entity scan not expected. Waiting for PPTL press":"無須掃描實體。等候按下 PPTL","Bin selected for put. Cannot be staged":"選為須放置的儲料箱。無法暫存","SKU not present in database. Put into IRT bin.":"SKU 未顯示在資料庫中。放入 IRT 儲料箱。","No free bins. Please scan later":"無可用的儲料箱。請稍後掃描","Wrong PPTL pressed. Please try another":"按錯 PPTL。請試另一個按鈕","Please put entities in exception area and confirm":"請將實體放入例外處理區，然後確認","Wrong bin chosen.Try selecting another bin":"選擇了錯誤的儲料箱。請嘗試選擇另一個儲料箱","Please scan same SKU to complete this exception":"請掃描相同的 SKU，以完成此例外處理","Entity scan not expected.":"無須掃描實體。","Tote not present in database.":"揀貨箱未顯示在資料庫中。","Tote has been opened.Scan all items in tote and then scan tote again to close it":"","PPS is in paused mode. Cannot process new entity. Try after some time":"","Cancel scan successful.":"成功取消掃描。","Tote close successful.":"揀貨箱成功關閉。","Tote not closed.":"揀貨箱未關閉。","Entity scan successful.":"實體掃描成功。","PPTL press successful":"成功按下 PPTL","Data capture valid":"資料擷取有效","Excess item in tote recorded. Now press PPTL":"已記錄揀貨箱中多餘的品項。現在請按 PPTL","Excess item in tote recorded.":"已記錄揀貨箱中多餘的品項。","{0} unscannable entities recorded. WMS notified":"已記錄 {0} 件無法掃描的實體。已通知 WMS","{0} extra entities recorded in bin. WMS notified":"已記錄儲料箱中多出 {0} 件實體。已通知 WMS","{0} oversized entities recorded.WMS notified":"已記錄 {0} 件尺寸過大的實體。已通知 WMS","{0} Physically damaged entity recorded.WMS notified":"","Exception cancelled":"取消例外處理","Box with same serial number already exists in the warehouse":"倉庫中已存在相同序號的箱盒","Entity already scanned.Waiting for PPTL press":"實體已掃描。等候按下 PPTL","No bins available to stage":"無儲料箱可暫存","Bin already staged. Ignoring event":"儲料箱已經暫存。忽略事件","Bin empty. Cannot be staged":"儲料箱未放置物品。無法暫存","Scan Box/Items from Slot":"掃描儲位中的箱盒／品項","Scan Remaining Item In Box":"掃描箱盒內剩餘的品項","Last Box Scan Completed! Scan Remaining Box/Items":"已完成最後箱盒掃描！掃描剩餘的箱盒／品項","Status To Reconcile":"須調和的狀態","This box belongs to some other SKU in the slot.Put it back.Scan next box.":"","This box does not belong to this slot. Remove the box and put in exception area.":"","Waiting for MSU":"等候 MSU","Wrong Barcode":"錯誤的條碼","Box Scan successful":"箱盒掃描成功","Item Scan successful":"品項掃描成功","Item scan successful":"品項掃描成功","Data capture failed at item {0}":"品項 {0} 的資料擷取失敗","Bin {0} selected":"已選擇儲料箱 {0}","Bin {0} unselected":"未選擇儲料箱 {0}","Connection is closed. Connecting...":"連線關閉。連線中...","Extra item found please put back item in Exception bin":"發現多餘的品項。請將品項放回例外處理箱","Enter Unscannable Entity Quantity":"輸入無法掃描的實體數量","Scan Oversized Entity Quantity":"掃描尺寸過大的實體數量","Please Select The Bin With Excess Entity":"請選擇實體過多的儲量箱","Enter Quantity of Excess Entities":"輸入多餘實體的數量","Place Entity in Slot and Scan More":"將實體放入儲位中，然後掃描更多實體","Scan Slot to Confirm":"掃描儲位以進行確認","Wait for MSU":"等候 MSU","Scan Entity From Bin {0}":"掃描儲料箱 {0} 中的實體","Enter Good Quantity to be Put into Slot":"輸入將放入儲位的良好數量","Put Back Entities in the PPS Bin":"將實體放回 PPS 儲料箱","Confirm MSU Release":"確認 MSU 釋放","Scan Slot":"掃描儲位","Scan {0} Items":"掃描 {0} 件品項","Cancel audit successful.Audit Restarted":"成功取消稽核。已重新開始稽核","Scan Box":"掃描箱盒","Scan {0} Items and Place in Bin {0}":"掃描{0} 件品項並放入儲料箱 {0}","Press PPTL to confirm":"按下 PPTL 以確認","Scan Tote to Associate with Bin":"掃描揀貨箱以和儲料箱建立關聯","Press PPTL or Scan a Tote":"按下 PPTL 或掃描揀貨箱","Press bin PPTL to remove entities":"","Press bin PPTL":"按下儲料箱 PPTL","Press PPTL for bin {0} to confirm":"按下儲料箱 {0} 的 PPTL 以確認","Press print button to proceed":"按下列印按鈕以繼續","Select Bin to skip print":"選擇須跳過列印的儲料箱","Select Bin which does not require tote":"選擇無需揀貨箱的儲料箱","Select Bin to disassociate tote":"選擇儲料箱以解除和揀貨箱的關聯","Pick complete. Waiting for next rack.":"揀貨完畢。等候下一個料架。","Location scan successful":"位置掃描成功","Box scan successful":"箱盒掃描成功","Cancel scan successful":"成功取消掃描","Expecting MSU release confirmation from GUI, got invalid event.":"必須是 GUI 的 MSU 釋放確認，出現無效的事件。","Data capture failed at item":"品項資料擷取失敗","Wrong slot location scanned. Please try again":"掃描了錯誤的儲位位置。請再試一次","Wrong box scanned. Please try again":"掃描了錯誤的箱盒。請再試一次","Scan a box first":"請先掃描箱盒","Wrong PPTL pressed. Please press correct PPTL":"按錯 PPTL。請按下正確的 PPTL","Picked quantity more than expected. Put extra items back in MSU":"已揀貨數量超過預期數量。請將多餘的品項放回 MSU","Wrong item quantity update":"錯誤的品項數量更新","Wrong item scanned. Please scan correct item":"掃描了錯誤的品項。請掃描正確的品項","Waiting for MSU. Please wait and scan later":"等候 MSU。請稍候，並於稍後掃描","System Error. Scanned entity details not available at this time":"系統錯誤。掃描的實體詳細資訊此次無法使用","No PPS bins empty. Please empty them from Pickback":"沒有空的 PPS 儲料箱。請自回收區清空儲料箱","PPS mode change requested:scan not allowed":"須變更 PPS 模式：不予許掃描","PPS mode change requested:auto staging all bins":"須變更 PPS 模式：自動暫存所有儲料箱","PPTL press not expected":"不需要按下 PPTL","Scan not expected":"不需要掃描","Barcode didn't match the current tote barcode":"條碼與目前的揀貨箱條碼不符","System not configured for totes":"未針對揀貨箱配置系統","Invalid Exception for this configuration":"此配置下例外無效","No tote associated. Please keep a tote in bin and scan":"無已建立關聯的揀貨箱。請將揀貨箱留在儲料箱中，並掃描之","Wrong PPTL pressed":"按錯 PPTL","Totes are anyway not required.Please proceed further":"無需揀貨箱。請繼續下一步","Tote scan cancelled":"已取消揀貨箱掃描","Documents printed successfully":"文件列印成功","Order removed successfully from bin {0}":"成功將訂單自儲料箱 {0} 中移除","Tote assigned successfully to bin":"揀貨箱已成功指派給儲料箱","Tote association failed. Repeat scan operation":"揀貨箱關聯失敗。請重複掃描作業","Tote associated with another bin":"揀貨箱已和另一個儲料箱建立關聯","Please scan PPTL barcode":"請掃描 PPTL 條碼","Tote disassociated from Bin":"揀貨箱已解除和儲料箱的關聯","Please complete process for pending bin and then proceed":"請完成待處理儲料箱的程序，再繼續進行","Tote already reserved":"揀貨箱已經保留","Wrong barcode scanned":"掃描了錯誤的條碼","Please scan the tote first and then scan PPTL barcode":"請先掃描揀貨箱，再掃描 PPTL 條碼","Override Tote Exception cannot be raised for bins with totes associated":"","PPTL scan not allowed. System not configured for tote":"不允許 PPTL 掃描。未針對揀貨箱配置系統","PPTL scan not allowed":"不允許 PPTL 掃描","Tote scan expected":"必須掃描揀貨箱","Entity scanned is not from bin {0}. Replace and scan from bin {1}":"掃描的實體並非來自儲料箱 {0}。取代並從儲料箱 {1} 中掃描","Wrong entity scanned":"掃描了錯誤的實體","Waiting for MSU scan. Please scan entity later.":"等候 MSU 掃描。請稍後掃描實體。","Expected quantity exceeded.":"超出預期數量。","Wrong scan! Entity scan expected but slot barcode scanned.":"掃描錯誤！預期掃描實體，但掃描了儲位條碼。","Actual put quantity not equal to the sum of Good and Expection quantity.":"","Actual put quantity less than than revised quantity.":"實際放置數量少於修改的數量。","Wrong slot scanned":"掃描了錯誤的儲位","Entity scan successful":"實體掃描成功","Slot scan successful":"儲位掃描成功","Damaged and missing entity recorded.":"已記錄損壞和遺失的實體。","Space unavailable recorded.":"已記錄無法使用的空間。","Please put entity in exception area and confirm":"請將實體放入例外處理區，然後確認","Entity not expected in tote. Please put entity in exception area and confirm":"","{0} excess entities found in tote. Please put entities in exception area and confirm":"","Cancelled excess entity in tote":"取消揀貨箱中多餘的實體","Cancelled invalid entity in tote":"取消揀貨箱中無效的實體","Invalid entity in tote recorded":"已記錄揀貨箱中無效的實體","Wrong enitity scanned. Expecting scan from bin {0}":"掃描了錯誤的實體。必須是從儲料箱 {0} 中掃描","PPTL Management":"PPTL 管理","Scanner Management":"掃描器管理","Entity Oversized":"尺寸過大的實體","Entity Unscannable":"無法掃描的實體","Extra Entities in Bin":"儲料箱中多餘的實體","Entity Missing / Unscannable":"遺失／無法掃描的實體","Space Not Available":"無法使用的空間","Mising Box":"遺失的箱盒","Disassociate Tote":"解除關聯揀貨箱","Overide Tote Required":"須撤銷揀貨箱","Reprint":"重新列印","Skip Print":"跳過列印","Peripheral added successfully":"成功新增周邊設備","Peripheral not added":"未新增周邊設備","Scan Box or Items":"掃描箱盒或品項","Check Count":"檢查計數","You cannot enter value more than 9999":"不可輸入超過 9999 的數值","Please enter a quantity greater than 0":"","Place extra entity in Exception area.":"請將多餘的實體放至例外處理區。","Sum of missing, good and damaged should be equal to {0}":"遺失、良好和損壞的總和應等於 {0}","Scan excess item quantity":"","Quantity should be less than or equal to {0}":"數量應小於或等於 {0}","You are not allowed to keyed in the quantity from the numpad. Force Scan is required.":"","Waiting for Bins to be Cleared at Pick Back":"等候儲料箱於回收區清空","Peripheral deleted successfully":"成功刪除周邊設備","Peripheral not deleted successfully":"未成功刪除周邊設備","Cancel Exception":"取消例外處理","Cancel Scan":"取消掃描","Finish":"完成","Back":"返回","OK":"確定","FINISH":"完成","Print":"列印","Skip Printing":"跳過列印","Override":"撤銷","Add Scanner":"新增掃描器","Edit Details":"編輯詳細資訊","NEXT":"下一個","CONFIRM":"確認","Stage":"暫存","Stage All":"暫存全部","BACK":"返回","CLOSE":"關閉","Cancel":"取消","Confirm":"確認","TOTE":"揀貨箱","Clear All":"清除全部","Submit":"送出","Exceptions":"例外","Next":"","Bin":"儲料箱","Selected":"已選擇","Unselected":"未選擇","System is Idle":"系統閒置","CURRENT SLOT":"目前的儲位","Box Serial Numbers":"箱盒序號","No Items To Reconcile":"無品項須調和","List Of Items To Reconcile":"須調和品項清單","View More":"檢視更多","Please put exception entities in exception area":"","Please put exception entities in IRT bin and scan the bin":"","Product Information":"產品資訊","Bin Info":"儲料箱資訊","Associate tote with bin":"將揀貨箱和儲料箱建立關聯","Extra Entity Found":"發現多餘的實體","Perform Action":"執行動作","Input Extra Details":"輸入額外詳細資訊","Expected":"預期","Actual":"實際","Bin ID":"儲料箱 ID","Barcode":"條碼","Peripheral ID":"周邊設備 ID","Actions":"動作","Scanner ID":"掃描器 ID","Delete":"刪除","Product SKU":"產品 SKU","Expected Quantity":"預期數量","Actual Quantity":"實際數量","Missing":"遺失","Extra":"多餘","Barcode Damage":"條碼毀損","Item in Box Serial Numbers":"箱盒內品項的序號","Loose Items":"散裝品項","Loose Items Serial Numbers":"散裝品項的序號","Product Details":"產品詳細資訊","Product Name":"產品名稱","Product Desc":"產品描述","Product Type":"產品種類","Tote already associated with bin {0}":"揀貨箱已經和儲料箱 {0} 建立關聯","Entity Scan not expected. Press PPTL":"無須是實體掃描。按下 PPTL","Item Missing/Unscannable":"遺失／無法掃描的品項","Missing Box":"遺失的箱盒","Override Tote Required":"須撤銷揀貨箱","Items In Box Unscannable":"箱盒內品項無法掃描","Box Unscannable":"箱盒無法掃描","Loose Items Unscannable":"散裝品項無法掃描","Please put unscannable entities in exception area.":"請將無法掃描的實體放至例外處理區。","Please put oversized entities in exception area.":"請將尺寸過大的實體放至例外處理區。","Take the Items out from the Slot":"將品項從儲位中取出","Pptl press not expected.":"不需要按下 Pptl。","Scan not expected.":"不需要掃描。","Wrong scan.Expecting item scan.":"掃描錯誤。必須掃描品項。","Wrong scan.Expecting container scan.":"掃描錯誤。必須掃描貨櫃。","Wrong scan.Expecting location scan.":"掃描錯誤。必須掃描位置。","Scan Excess Entity Quantity":"掃描多餘實體數量","Entity already scanned.Confirm exception":"實體已掃描。確認例外","Exception":"例外","Logout":"登出","Utility":"效用","EXCEPTION":"例外","Good Quantity":"良好數量","Missing Quantity":"遺失數量","Unscannable Quantity":"無法掃描數量","Remove Item":"移除項目","Item Missing/Bad Barcode":"品項遺失／錯誤條碼","Sum of missing and good quantity should be equal to {0}":"遺失和良好數量的總和應等於 {0}","Login":"登入","Enter Username":"輸入使用者名稱","Enter Password":"輸入密碼","Invalid credentials":"無效的認證","Login not allowed. You're already logged in":"不允許登入。您已經登入","Place Item in slot and scan more":"請將品項放入儲位，然後掃描更多品項","PPTL":"PPTL","Scan Slot Barcode":"掃描儲位條碼","Unexpected Item":"未預期的品項","Stage Bin or Scan Item":"暫存儲料箱或掃描品項","Scan & Confirm":"掃描並確認","Scan Item From Bin":"掃描儲料箱中的品項","Scan Tote":"掃描揀貨箱","Scan MSU Barcode":"掃描 MSU 條碼","Scan Items":"掃描品項","Status":"狀態","Could not connect to PPS.Please try again.":"無法連線至 PPS。請再試一次。","product_sku":"product_sku","type":"種類","quantity":"數量","item":"品項","box":"箱盒","SKU not present in Database.Put in exception area":"SKU 未顯示在資料庫中。請放至例外處理區","Please put extra entities in exception area.":"請將多餘的實體放至例外處理區。","Space Available For":"空間適用於","Tote Details":"揀貨箱詳細資訊","Close current tote first":"請先關閉目前的揀貨箱","CURRENT BIN":"目前的儲料箱","Bad Barcode Quantity":"錯誤的條碼數量","Enter Scanner Id":"輸入掃描器 Id","Back seat not supported for this mode":"後排不支援此模式","Bad Data":"錯誤資料","Peripheral already added":"已新增周邊設備","Scan Bin Barcode":"掃描儲料箱條碼","Update":"更新","Japanese":"日文","English":"英文","Exception Finished":"完成的例外處理","PPS Mode":"PPS 模式","Seat Type":"座位種類","Good Quantity Cannot be Equal to the Total Quantity":"良好數量不可等於總數量","Undock Roll Cage if no items remaining":"","Gently push roll cage away from the frame":"","Scan tote and place it in the slot":"","Scan slot to confirm":"","Release MTU":"","Tote scan successful.":"","Slot barcode scan successful":"","Tote already scanned":"","Tote scanned is not idle":"","Tote scanned is not opened":"","Scan Tote first and then scan rack":"","Invalid Slot scanned":"","Tote already associated with slot.Scan empty slot":"","Please Scan tote which has excess item":"","Tote scan cancelled.":"","Exception finished":"","Unexpected entity scanned":"","Enter excess item quantity":""," items":"","Wrong ppsbin button pressed":"","Total ":"","Place the tote back in bin {0} and press pptl":"","Take out the tote from bin {0} and scan entity":"","Scan tote first and then scan item":"","Scan excess item":"","Scan tote which has excess item":"","Invalid tote scanned":"","Exception entry successful":"","Are you sure you want to exit from {0} invoice and stage all bins":"","Invoice number: {0}":"","Scan or Enter {0} number":"","Please scan or enter {0} number":"","STN scan successful":"","Exit {0}":"","{0} number :":"","Are you sure you want to exit from {0} {1} and stage all bins":"","Scan or Enter the tote barcode to reprint":"","Place container in MSU slot and confirm":"","Place {0} boxes with {1} items from bin {2}":"","Place {0} boxes from bin {2}":"","Place":"","Remove Tote from bin {0} & Press PPTL to confirm no Items Remaining":"","Press PPTL to confirm no Items Remaining in Bin {0}":"","Entities cannot be accommodated! Remove all entities from bin and press PPTL.":"","Entities cannot be accommodated!":"","Take {0} Printout and Press PPTL":"以{0}打印输出并按PPTL","PPS is Closed":"","Place box in MSU slot and confirm":"","Wrong Undock":"","Dock roll cage back to proceed the operation":"","Excess quantity":"","Entity Damaged":"实体受损","Issues with entity":"","Validate and Confirm":"","Wrong Scan. IRT bin scan expected":"","Scan IRT Bin":"","Please put damaged entities in IRT bin and scan the bin":"","Please put damaged entities in exception area":"","Please put extra entities in IRT bin and scan the bin":"","Please put extra entities in exception area":"","Please put unscannable entities in IRT bin and scan the bin":"","Please put unscannable entities in exception area":"","Please put oversized entities in IRT bin and scan the bin":"","Please put oversized entities in exception area":"","Warehouse Full Remove all entities from bin & press PPTL":"","Enter Quantity":"","Are you sure you want to cancel the exception?":"","All scan and print will be cancelled. Confirm to cancel?":"","Yes":"","No":"","Exception with entity reported":"","Please put entities with issues, in exception area":"","Please put entities in IRT and Scan IRT Bin":"","Wrong Scan. Unrecognized barcode.":"","PPS is closed":"","NEST MAX":"","STACK MAX":"","DO NOT STACK":"","FRAGILE":"","Length of {0} should not be greater than {1}":"","Scan {0} packs":"","Scan {0} sub packs":"","Press PPTL":"","Pack Scan Successful":"","Scan {0} more packs and place in bin {1}":"","Scan {0} more sub packs and place in bin {1}":"","Put pack list in trolley and press PPTL to confirm":"","Scan damaged entity":"","Damaged Quantity":"","Wrong Scan. Entity not present in Database":"","Sum of good, missing and damaged should be equal to {0}":"","Last item scan will be cancelled. Do you want to continue?":"","Continue":"","Bin full":"","Please put entities which have issues in exception area":"","Unscannable":"","Invalid Event.Expecting PPTL button press":"","Remove Tote from bin & Press PPTL to confirm no Items Remaining":"","Wrong entity scan.Please scan the correct entity":"","Physically Damaged entity reported.":"","Entity entry successful":"","Bin scan successful":"","Physically Damaged Reported should equal Scanned Quantity":"","SKU not present in Database.":"","Extra entity scan found.":"","Container Already Scanned.":"","Invalid Entity Scanned.":"","Quantity of Physically damaged entities scanned is less.":"","Error":"","Waiting for Bins to be Cleared at Pick Front":"","Processing Next Pick from Rack ":"","Scan Damaged Entity":"","Warehouse Full":"","Scan a packing box and keep in bin {0}":"","Pick box from MSU and press PPTL on Bin {0}":"","Extra details entered are incorrect.Please enter correct details":"","Packing box scan failed":"","Wrong entity Scanned. Bin Scan Expected.":"","Bin Already Scanned":"","Issue with Pack":"","Issue with Sub pack":"","Issue with MPU":"","Space not available":"","Bad barcode on pack":"","Bad barcode on sub pack":"","Unexpected pack":"","Pack missing":"","Sub pack missing":"","Damaged sub pack":"","Good pack":"","Good sub pack":"","Scan not Allowed. PPS close/force close or profile change requested.":"","Pack scan successfully":"","Sub-Pack scan successfully":"","Scan MPU":"","Scan {0} or {1}":"","Continue scanning {0} and {1}":"","Enter Quantity of Unscannable {0}":"","Wait for MPU":"","No Sub-Packs to reconcile":"","Pack Unscannable":"","Sub-Pack Unscannable":"","Damage Barcode":"","Packs":"","Sub-Packs":"","Scan Small Box":"","Scan {0} Box and Place in Bin {1}":"","Scan {0} Small Box and Place in Bin {1}":"","Put Pack list in trolley and press PPTL to confirm":"","Done":"","No more entities to be scanned":"","Type":"","Serial Number":"","Quantity":"","Wrong Bin Scanned. Scan Expected for Roll Cage ready for undocking.":"","Issues with {0}":"","Scan {0} damaged entities":"","Scan {0} {1}":"","Scan {0} {1} and place in Bin {2}":"","Enter Unscannable Tote Quantity":"","Enter items that can fit in the bin":"","{0} scan successfully":"","Place Tote in Bin {0} and Press PPTL":"","Tote in use at front seat":"","Waiting for Tote to be associated from back":"","{0} scan successful":"","Waiting for put_away to complete from front":"","Tote cannot be associated with bin of another seat":"","Waiting for put away to complete from front":"","Scan checklist items to proceed":"","Unexpected Entity In {0}":"","Scan a {0}":"","Scan a {0} or Press PPTL":"","Press PPTL to clear the Bin":"","Place {0} in Bin and scan the Bin barcode":"","Waiting for order to be completed from front":"","Waiting for {0} to be associated from back":"","{0} scan successful.":"","Excess Entity in {0} recorded.":"","{0} unexpected. {0} in use in another location":"","{0} unexpected. Service request not present in {0}.":"","Invalid resource.":"","{0} unexpected. Service request not in correct state.":"","{0} unexpected. Empty {0} scanned.":"","{0} unexpected. Scanned {0} does not exist.":"","{0} unexpected. Service Request does not exist.":"","Wrong scan. Please Scan item or {0}":"","{0} unexpected. {0} is not empty.":"","Bin barcode of other PPS scanned":"","Scan {0}":"","Scan {0} which has excess item":"","Scan {0} first and then scan item":"","Invalid {0} scanned":"","{0} Close Cancelled":"","{0} docked successfully":"","Are You Sure You Want to Close {0}?":"","Scan {0} or Stage PPS Bin":"","Enter Unscannable {0} Quantity":"","Place {0} in Bin {1} and Press PPTL":"","{0} already opened. Scan some other {1}":"","{0} already closed. Scan some other {1}":"","Close current {0} first":"","Wrong entity scanned. Please scan {0}":"","{0} excess entities found in {0}. Please put entities in exception area and confirm":"","Entity not expected in {0}. Please put entity in exception area and confirm":"","Expecting {0} closure.":"","{0} not present in database.":"","{0} matched .":"","Place the {0} back in bin {1} and press PPTL":"","Take out the {0} from bin {1} and scan entity":"","Remove {0} from bin {1} & Press PPTL to confirm no Items Remaining":"","Press PPTL or Scan a {0}":"","Select Bin which does not require {0}":"","Select Bin to disassociate {0}":"","{0} close successful.":"","{0} not closed.":"","Excess item in {0} recorded. Now press PPTL":"","Cancelled excess entity in {0}":"","Cancelled invalid entity in {0}":"","Invalid entity in {0} recorded":"","Scan {0} to associate with Bin":"","Press PpsBin Button Or Scan a {0}":"","{0} is already scanned.Expecting pptl scan.":"","{0} are not required.Please don't scan {1} barcode":"","Please scan the {0} first and then scan pptl barcode":"","{0} scanned.Expecting pptl scan.":"","Pptl scan not allowed. {0} are not required":"","{0} didn't get associated":"","After scannning {0} barcode, please scan pptl barcode":"","No {0} associated. Pease keep {0} in the Bin and then scan":"","No {0} scanned":"","{0} cancelled":"","{0} already associated with ppsbin":"","Please press ppsbin button which does not have any {0} associated":"","{0} assigned successfully to ppsbin {0}":"","{0} are not required":"","{0} could not be reserved as already reserved":"","Exception invalid as {0} are not required with this PPS":"","Override {0} not possible":"","Barcode didn't match with current {0} barcode":"","Incorrect {0} barcode scanned. Please try again":"","System not configured for {0}":"","{0} association required":"","{0} association failed. Repeat scan operation":"","{0} are anyway not required.Please proceed further":"","{0} already associated with bin {0}":"","{0} in use at front seat":"","{0} cannot be associated with bin of another seat":"","{0} assigned successfully to bin":"","{0} disassociated from Bin":"","{0} associated with another bin":"","Please scan the {0} first and then scan PPTL barcode":"","Override {0} Exception cannot be raised for bins with {1} associated":"","PPTL scan not allowed. System not configured for {0}":"","Scan pptl barcode after scannning {0} barcode":"","{0} scanned is not opened":"","{0} already scanned":"","Wrong entity Scanned. {0} Scan Expected.":"","Disassociate {0}":"","Override {0} Required":"","Scan slot":"","Scan or Enter the {0} barcode to reprint":"","{0} scan cancelled.":"","{0} scanned is not idle":"","Scan {0} first and then scan rack":"","{0} already associated with slot.Scan empty slot":"","Invalid {0} scan":"","{0} close successful":"","Scan new {0}":"","Scan item or {0}":"","Additional Information":"","Selected UOM: ":"","Close":"","Select Value":"","{0} already associated with bin":"","Previous Pick Details":"","Previous Put Details":"","Dock {0}":"","Scan {1} or Dock {0}":"","Undock {0}":"","Scan a Tote":"","Scan {0} location":"","Pick complete. Waiting for next pick.":"","Missing barcode scanned. Waiting for confirmation.":"","{0} cannot be associated with inactive bin":"","{0} cleared":"","Scan load unit and gently push it away":"","Box Type":"","Location":"","Place Box":"","Scan":"","Checklist":"","Scan {0} Serial":"","Scan {0} Serial to Open":"","Scan carrying unit and gently push it away":"","Pick all items from slot {0} and scan slot":"","{0} undocked successfully":"","Pick all items from slot and scan slot":"","NO ITEM FOUND":"","Item details":"","Item Search":"","Event":"","Expectation Id":"","Item Location":"","UOM Details":"","Excess Quantity":"","Total: ":"","Scan excess entities":"","Dis-associate":"","Data capture failed":"","No entities to reconcile":"","LOGIN":"登录","Language":"语言","Username":"用户名","Login to Butler System":"登录管家系统","Login to":"登录到","Enter username":"输入用户名","Enter password":"输入密码","Scan ID card to login.":"扫描身份证登录。","{0} Unscannable":"{0}无法扫描","Scan entities":"扫描实体","Waiting for {0} to be docked":"","Put Pack list in {0} and press PPTL to confirm":"","Please scan PPTL which has excess item":"","Please put unscannable tote in exception area":"","Sum of good and exception quantity should be equal to {0}":"","{0} Unscannable entities recorded. WMS notified":"","Scan item or enter barcode details":"","{0} unexpected. Service request not present in {1}.":"","MSU Sent":"","This put request is not supported in current flow":"","Service request not in correct state":"","Multiple Service request found":"","Unknown error":"","Scan item":"","Item unexpected. No service request found for this item":"","Scan entity":"","Put entity in slot and scan slot to confirm":"","Excess detected, remove '{0}' items and confirm again":"","Invalid {0}":"","{0} closed":"","Unknown barcode":"","Unexpected entity":"","Excess quantity detected, remove '{0}' quantity and confirm again":"","Call for Help":"","Tote Unscannable":"","{0} unexpected. Scanned {1} does not exist.":"","HEAVY":"","Scan tote":"","Items In Bin":"","Scan tote location":"","Send MSU":"","Put and confirm":"","Close Cart":"","Dock Cart":"","Are you sure that all the items in the cart were scanned?":"","The following {0} items were found missing":"","OUTER":"","INNER":"","Wrong scan. Please Scan tote":""};module.exports=obj

},{}],249:[function(require,module,exports){
var obj={"Scan item / Stage PPS Bin":"Scan item/zet PPS-bak klaar","Scan Tote to associate with Bin":"Scan draagtas om aan bak te koppelen","Press PpsBin Button Or Scan a Tote":"Druk op de knop PpsBin of scan een draagtas","User Name":"Gebruikersnaam","Password":"Wachtwoord","Are you sure you want to close Tote":"Weet u zeker dat u de draagtas wilt sluiten?","Details":"Details","Scan {0} items":"Scan {0} items","Scan box barcode":"Scan de streepjescode van de doos","Press PpsBin {0} to remove items":"Druk op PpsBin {0} om items te verwijderen","Tote is already scanned.Expecting pptl scan.":"Draagtas is al gescand. Scan van pptl verwacht.","Totes are not required.Please don't scan tote barcode":"Draagtassen zijn niet vereist. Scan geen streepjescode van de draagtas","Wrong PPS bin scanned":"Verkeerde PPS-bak is gescand","Please scan the tote first and then scan pptl barcode":"Scan eerst de draagtas en scan vervolgens de streepjescode van de pptl","Tote scanned.Expecting pptl scan.":"Draagtas is gescand. Scan van pptl verwacht.","Pptl scan not allowed. Totes are not required":"Scan van pptl niet toegestaan. Draagtassen zijn niet vereist","Tote didn't get associated":"Draagtas is niet gekoppeld","After scannning tote barcode, please scan pptl barcode":"Scan na het scannen van de streepjescode van de draagtas de streepjescode van de pptl","Wrong Ppsbin button pressed.Please press those buttons having color blue":"Verkeerde Ppsbin-knop ingedrukt. Druk op de knoppen met de blauwe kleur","Please complete pickback for pending bin and then proceed":"Voltooi de draagwagen voor de in behandeling zijnde bak en ga vervolgens door","No totes associated. Pease keep totes in the Bin and then scan":"Geen draagtassen gekoppeld. Houd de draagtassen in de bak en scan vervolgens","Documents printed Successfully":"Documenten zijn afgedrukt","No tote scanned":"Geen draagtas gescand","Tote cancelled":"Draagtas is geannuleerd","Tote already associated with ppsbin":"Draagtas al aan ppsbin gekoppeld","Incorrect tote barcode scanned. Please try again":"Onjuiste streepjescode van de draagtas gescand. Probeer het nogmaals","Please press PPTL button which does not have any totes associated":"Druk op de PPTL-knop waaraan geen draagtassen zijn gekoppeld","Tote assigned successfully to ppsbin {0}":"Draagtas aan ppsbin {0} toegewezen","Bin {0} items removed successfully":"Bak {0} items zijn verwijderd","Totes are not required":"Draagtassen zijn niet vereist","Wrong Barcode scanned":"Verkeerde streepjescode gescand","Tote could not be reserved as already reserved":"Draagtas kan niet worden gereserveerd omdat deze al gereserveerd is","Exception invalid as totes are not required with this PPS":"Uitzondering ongeldig omdat er met deze PPS geen draagtassen vereist zijn","Override tote not possible":"Negeren draagtas niet mogelijk","Scanning pptl barcode not allowed":"Scannen van streepjescode van de pptl niet toegestaan","Please press those buttons having color blink_blue":"Druk op de knoppen met de blauw knipperende kleur","Unhandled event ocurred":"Niet-afgehandelde gebeurtenis opgetreden","Barcode didn't match with current tote barcode":"Streepjescode kwam niet overeen met de huidige streepjescode van de draagtas","Testing configuration {0} and {1}":"Configuratie {0} en {1} worden getest","Processing. Please wait and scan later":"Verwerken. Een ogenblik geduld en scan later","Waiting for rack":"Wachten op rek","Current PPS mode does not support back seat. Please logout.":"Huidige PPS-modus ondersteunt geen achterstoel. Log uit.","Scan items and place in bin {0}":"Scan items en plaats deze in bak {0}","Stage Bin or Scan Entity":"Zet bak klaar of scan entiteit","Place Entity in Bin and Press PPTL":"Plaats entiteit in bak en druk op PPTL","Are You Sure You Want to Close Tote?":"Weet u zeker dat u de draagtas wilt sluiten?","Scan Tote or Stage PPS Bin":"Scan draagtas of zet PPS-bak klaar","Item Not Expected in Tote":"Item niet verwacht in draagtas","Tote already opened. Scan some other tote":"Draagtas al geopend. Scan een andere draagtas","Tote already closed. Scan some other tote":"Draagtas al gesloten. Scan een andere draagtas","No matching tote found":"Geen overeenkomende draagtas gevonden","Wrong entity scanned. Please scan tote":"Verkeerde entiteit gescand. Scan draagtas","No entities added yet. Scan entities and then press PPTL":"Nog geen entiteiten toegevoegd. Scan entiteiten en druk vervolgens op PPTL","Wrong entity scanned. Please scan Container/Item.":"Verkeerde entiteit gescand. Scan container/item.","Cannot cancel scan. No scanned box found":"Kan scan niet annuleren. Geen gescande doos gevonden","Entity scan not expected. Waiting for PPTL press":"Scan van entiteit niet verwacht. Wachten op drukken op PPTL","Bin selected for put. Cannot be staged":"Bak geselecteerd voor plaatsing. Kan niet worden klaargezet","SKU not present in database. Put into IRT bin.":"SKU niet in de database aanwezig. In de IRT-bak geplaatst.","No free bins. Please scan later":"Geen vrije bakken. Scan later","Wrong PPTL pressed. Please try another":"Verkeerde PPTL ingedrukt. Probeer een andere","Please put entities in exception area and confirm":"Plaats entiteiten in uitzonderingsgebied en bevestig","Wrong bin chosen.Try selecting another bin":"Verkeerde bak gekozen. Probeer een andere bak te selecteren","Please scan same SKU to complete this exception":"Scan dezelfde SKU om deze uitzondering te voltooien","Entity scan not expected.":"Scan van entiteit niet verwacht.","Tote not present in database.":"Draagtas niet in de database aanwezig.","Tote has been opened.Scan all items in tote and then scan tote again to close it":"Draagtas is geopend. Scan alle items in de draagtas en scan de draagtas vervolgens opnieuw om deze te sluiten","PPS is in paused mode. Cannot process new entity. Try after some time":"PPS is in pauzemodus. Kan geen nieuwe entiteit verwerken. Probeer na enige tijd opnieuw","Cancel scan successful.":"Annuleren scan is geslaagd.","Tote close successful.":"Sluiten draagtas is geslaagd.","Tote not closed.":"Draagtas niet gesloten.","Entity scan successful.":"Scan van entiteit is geslaagd.","PPTL press successful":"Drukken op PPTL geslaagd","Data capture valid":"Gegevensvastlegging geldig","Excess item in tote recorded. Now press PPTL":"Overtollig item in draagtas geregistreerd. Druk nu op PPTL","Excess item in tote recorded.":"Overtollig item in draagtas geregistreerd.","{0} unscannable entities recorded. WMS notified":"{0} niet-scanbare entiteiten geregistreerd. WMS geïnformeerd","{0} extra entities recorded in bin. WMS notified":"{0} extra entiteiten geregistreerd in bak. WMS geïnformeerd","{0} oversized entities recorded.WMS notified":"{0} te grote entiteiten geregistreerd. WMS geïnformeerd","{0} Physically damaged entity recorded.WMS notified":"{0} fysiek beschadigde entiteit geregistreerd. WMS geïnformeerd","Exception cancelled":"Uitzondering geannuleerd","Box with same serial number already exists in the warehouse":"Doos met hetzelfde serienummer bestaat al in magazijn","Entity already scanned.Waiting for PPTL press":"Entiteit al gescand. Wachten op drukken op PPTL","No bins available to stage":"Geen bakken beschikbaar om klaar te zetten","Bin already staged. Ignoring event":"Bak al klaargezet. Gebeurtenis negeren","Bin empty. Cannot be staged":"Bak is leeg. Kan niet worden klaargezet","Scan Box/Items from Slot":"Scan doos/items uit sleuf","Scan Remaining Item In Box":"Scan resterende item in doos","Last Box Scan Completed! Scan Remaining Box/Items":"Scannen laatste doos is voltooid. Scan resterende doos/items","Status To Reconcile":"Status om af te stemmen","This box belongs to some other SKU in the slot.Put it back.Scan next box.":"Deze doos hoort bij een andere SKU in de sleuf. Plaats het terug. Scan de volgende doos.","This box does not belong to this slot. Remove the box and put in exception area.":"Deze doos behoort niet tot deze sleuf. Verwijder de doos en plaatst deze in uitzonderingsgebied.","Waiting for MSU":"Wachten op MSU","Wrong Barcode":"Verkeerde streepjescode","Box Scan successful":"Scannen doos is geslaagd","Item Scan successful":"Scannen item is geslaagd","Item scan successful":"Scannen item is geslaagd","Data capture failed at item {0}":"Gegevensvastlegging is mislukt bij item {0}","Bin {0} selected":"Bak {0} geselecteerd","Bin {0} unselected":"Bak {0} gedeselecteerd","Connection is closed. Connecting...":"Verbinding is gesloten. Verbinden...","Extra item found please put back item in Exception bin":"Extra item gevonden, plaats item terug in uitzonderingsbak","Enter Unscannable Entity Quantity":"Voer niet-scanbare entiteitsaantal in","Scan Oversized Entity Quantity":"Scan te grote entiteitsaantal","Please Select The Bin With Excess Entity":"Selecteer de bak met overtollige entiteit","Enter Quantity of Excess Entities":"Voer aantal overtollige entiteit in","Place Entity in Slot and Scan More":"Plaats entiteit in sleuf en scan meer","Scan Slot to Confirm":"Scan sleuf om te bevestigen","Wait for MSU":"Wacht op MSU","Scan Entity From Bin {0}":"Scan entiteit uit bak {0}","Enter Good Quantity to be Put into Slot":"Voer goede aantal in om in sleuf te worden geplaatst","Put Back Entities in the PPS Bin":"Plaats entiteiten terug in de PPS-bak","Confirm MSU Release":"Bevestig MSU-vrijgave","Scan Slot":"Scan sleuf","Scan {0} Items":"Scan {0} items","Cancel audit successful.Audit Restarted":"Annuleren controle geslaagd. Controle opnieuw gestart","Scan Box":"Scan doos","Scan {0} Items and Place in Bin {0}":"Scan {0} items en plaats deze in bak {0}","Press PPTL to confirm":"Druk op PPTL om te bevestigen","Scan Tote to Associate with Bin":"Scan draagtas om aan bak te koppelen","Press PPTL or Scan a Tote":"Druk op PPTL of scan een draagtas","Press bin PPTL to remove entities":"Druk op bak-PPTL om entiteiten te verwijderen","Press bin PPTL":"Druk op bak-PPTL","Press PPTL for bin {0} to confirm":"Druk op PPTL voor bak {0} om te bevestigen","Press print button to proceed":"Druk op de afdrukknop om door te gaan","Select Bin to skip print":"Selecteer bak om afdrukken over te slaan","Select Bin which does not require tote":"Selecteer bak die geen draagtas vereist","Select Bin to disassociate tote":"Selecteer bak om draagtas te ontkoppelen","Pick complete. Waiting for next rack.":"Selecteren voltooid. Wachten op volgende rek.","Location scan successful":"Scan van locatie is geslaagd","Box scan successful":"Scannen doos is geslaagd","Cancel scan successful":"Annuleren scan is geslaagd","Expecting MSU release confirmation from GUI, got invalid event.":"Bevestiging vrijgave MSU verwacht van GUI, ongeldige gebeurtenis gekregen.","Data capture failed at item":"Gegevensvastlegging is mislukt bij item","Wrong slot location scanned. Please try again":"Verkeerde locatie sleuf gescand. Probeer het nogmaals","Wrong box scanned. Please try again":"Verkeerde doos gescand. Probeer het nogmaals","Scan a box first":"Scan eerst een doos","Wrong PPTL pressed. Please press correct PPTL":"Verkeerde PPTL ingedrukt. Druk op de juiste PPTL","Picked quantity more than expected. Put extra items back in MSU":"Geselecteerde aantal meer dan verwacht. Plaats extra items terug in MSU","Wrong item quantity update":"Update verkeerde aantal items","Wrong item scanned. Please scan correct item":"Verkeerde item gescand. Scan juiste item","Waiting for MSU. Please wait and scan later":"Wachten op MSU. Een ogenblik geduld en scan later","System Error. Scanned entity details not available at this time":"Systeemfout. Gescande entiteitsgegevens op dit moment niet beschikbaar","No PPS bins empty. Please empty them from Pickback":"Geen PPS-bakken leeg. Maak ze leeg van draagwagen","PPS mode change requested:scan not allowed":"Wijziging PPS-modus gevraagd:scan niet toegestaan","PPS mode change requested:auto staging all bins":"Wijziging PPS-modus gevraagd:alle bakken automatisch klaarzetten","PPTL press not expected":"Drukken op PPTL niet verwacht","Scan not expected":"Scan niet verwacht","Barcode didn't match the current tote barcode":"Streepjescode kwam niet overeen met de huidige streepjescode van de draagtas","System not configured for totes":"Systeem niet geconfigureerd voor draagtassen","Invalid Exception for this configuration":"Ongeldige uitzondering voor deze configuratie","No tote associated. Please keep a tote in bin and scan":"Geen draagtas gekoppeld. Houd een draagtas in de bak en scan","Wrong PPTL pressed":"Verkeerde PPTL ingedrukt","Totes are anyway not required.Please proceed further":"Draagtassen zijn in ieder geval niet vereist. Ga door","Tote scan cancelled":"Scannen draagtas geannuleerd","Documents printed successfully":"Documenten zijn afgedrukt","Order removed successfully from bin {0}":"Bestelling verwijderd uit bak {0}","Tote assigned successfully to bin":"Draagtas aan bak toegewezen","Tote association failed. Repeat scan operation":"Koppeling draagtas is mislukt. Herhaal scanbewerking","Tote associated with another bin":"Draagtas aan een andere bak gekoppeld","Please scan PPTL barcode":"Scan streepjescode van PPTL","Tote disassociated from Bin":"Draagtas van bak ontkoppeld","Please complete process for pending bin and then proceed":"Voltooi het proces voor de in behandeling zijnde bak en ga vervolgens door","Tote already reserved":"Draagtas al gereserveerd","Wrong barcode scanned":"Verkeerde streepjescode gescand","Please scan the tote first and then scan PPTL barcode":"Scan eerst de draagtas en scan vervolgens de streepjescode van de PPTL","Override Tote Exception cannot be raised for bins with totes associated":"Negeren draagtasuitzondering kan niet worden opgeheven voor bakken met gekoppelde draagtassen","PPTL scan not allowed. System not configured for tote":"Scan van PPTL niet toegestaan. Systeem niet geconfigureerd voor draagtas","PPTL scan not allowed":"Scan van PPTL niet toegestaan","Tote scan expected":"Scan van draagtas verwacht","Entity scanned is not from bin {0}. Replace and scan from bin {1}":"Gescande entiteit is niet van bak {0}. Vervang en scan van bak {1}","Wrong entity scanned":"Verkeerde entiteit gescand","Waiting for MSU scan. Please scan entity later.":"Wachten op MSU-scan. Scan entiteit later.","Expected quantity exceeded.":"Verwacht aantal overschreden.","Wrong scan! Entity scan expected but slot barcode scanned.":"Verkeerde scan! Scan van entiteit verwacht maar streepjescode van de sleuf gescand.","Actual put quantity not equal to the sum of Good and Expection quantity.":"Werkelijk geplaatste aantal niet gelijk aan de som van de goede en verwachte aantal.","Actual put quantity less than than revised quantity.":"Werkelijk geplaatste aantal minder dan de herziene aantal.","Wrong slot scanned":"Verkeerde sleuf is gescand","Entity scan successful":"Scan van entiteit is geslaagd","Slot scan successful":"Scannen sleuf is geslaagd","Damaged and missing entity recorded.":"Beschadigde en ontbrekende entiteit is geregistreerd.","Space unavailable recorded.":"Ruimte onvoldoende is vastgelegd.","Please put entity in exception area and confirm":"Plaats entiteit in uitzonderingsgebied en bevestig","Entity not expected in tote. Please put entity in exception area and confirm":"Entiteit niet verwacht in draagtas. Plaats entiteit in uitzonderingsgebied en bevestig","{0} excess entities found in tote. Please put entities in exception area and confirm":"{0} overtollige entiteiten in draagtas gevonden. Plaats entiteiten in uitzonderingsgebied en bevestig","Cancelled excess entity in tote":"Overtollige entiteit in draagtas geannuleerd","Cancelled invalid entity in tote":"Ongeldige entiteit in draagtas geannuleerd","Invalid entity in tote recorded":"Ongeldige entiteit in draagtas vastgelegd","Wrong enitity scanned. Expecting scan from bin {0}":"Verkeerde entiteit gescand. Verwachte scan uit bak {0}","PPTL Management":"PPTL-beheer","Scanner Management":"Scannerbeheer","Entity Oversized":"Entiteit te groot","Entity Unscannable":"Entiteit niet scanbaar","Extra Entities in Bin":"Extra entiteiten in bak","Entity Missing / Unscannable":"Entiteit ontbreekt/niet scanbaar","Space Not Available":"Ruimte niet beschikbaar","Mising Box":"Ontbrekende doos","Disassociate Tote":"Ontkoppel draagtas","Overide Tote Required":"Negeren draagtas vereist","Reprint":"Opnieuw afdrukken","Skip Print":"Afdrukken overslaan","Peripheral added successfully":"Periferie is toegevoegd","Peripheral not added":"Periferie is niet toegevoegd","Scan Box or Items":"Scan doos of items","Check Count":"Controleer telling","You cannot enter value more than 9999":"U kunt geen waarden meer dan 9999 invoeren","Please enter a quantity greater than 0":"Voer een aantal groter dan 0 in","Place extra entity in Exception area.":"Plaats extra entiteit in uitzonderingsgebied.","Sum of missing, good and damaged should be equal to {0}":"De som van de ontbrekende, goede en beschadigde moet gelijk zijn aan {0}","Scan excess item quantity":"Scan overtollige aantal items","Quantity should be less than or equal to {0}":"Aantal moet minder zijn dan of gelijk zijn aan {0}","You are not allowed to keyed in the quantity from the numpad. Force Scan is required.":"U mag geen aantal invoeren vanaf het toetsenblok. Gedwongen scan is vereist.","Waiting for Bins to be Cleared at Pick Back":"Wachten tot bakken zijn vrijgemaakt bij achteraan selecteren","Peripheral deleted successfully":"Periferie is verwijderd","Peripheral not deleted successfully":"Periferie is niet verwijderd","Cancel Exception":"Annuleer uitzondering","Cancel Scan":"Annuleer scan","Finish":"Voltooien","Back":"Terug","OK":"OK","FINISH":"VOLTOOIEN","Print":"Afdrukken","Skip Printing":"Afdrukken overslaan","Override":"Negeren","Add Scanner":"Voeg scanner toe","Edit Details":"Bewerk gegevens","NEXT":"VOLGENDE","CONFIRM":"BEVESTIGEN","Stage":"Klaarzetten","Stage All":"Zet alle klaar","BACK":"TERUG","CLOSE":"SLUITEN","Cancel":"Annuleren","Confirm":"Bevestigen","TOTE":"DRAAGTAS","Clear All":"Maak alle vrij","Submit":"Indienen","Exceptions":"Uitzonderingen","Next":"Volgende","Bin":"Bak","Selected":"Geselecteerd","Unselected":"Gedeselecteerd","System is Idle":"Systeem is inactief","CURRENT SLOT":"HUIDIGE SLEUF","Box Serial Numbers":"Serienummers doos","No Items To Reconcile":"Geen items om af te stemmen","List Of Items To Reconcile":"Lijst met items om af te stemmen","View More":"Bekijk meer","Please put exception entities in exception area":"Plaats uitzonderingsentiteiten in uitzonderingsgebied","Please put exception entities in IRT bin and scan the bin":"Plaats uitzonderingsentiteiten in IRT-bak en scan de bak","Product Information":"Productinformatie","Bin Info":"Bakgegevens","Associate tote with bin":"Koppel draagtas aan bak","Extra Entity Found":"Extra entiteit gevonden","Perform Action":"Voer actie uit","Input Extra Details":"Voer extra gegevens in","Expected":"Verwacht","Actual":"Werkelijk","Bin ID":"Bak-id","Barcode":"Streepjescode","Peripheral ID":"Periferie-id","Actions":"Acties","Scanner ID":"Scanner-id","Delete":"Verwijderen","Product SKU":"Product-SKU","Expected Quantity":"Verwacht aantal","Actual Quantity":"Werkelijk aantal","Missing":"Ontbreekt","Extra":"Extra","Barcode Damage":"Schade streepjescode","Item in Box Serial Numbers":"Serienummers item in doos","Loose Items":"Losse items","Loose Items Serial Numbers":"Serienummers losse items","Product Details":"Productgegevens","Product Name":"Productnaam","Product Desc":"Productbeschrijving","Product Type":"Producttype","Tote already associated with bin {0}":"Draagtas al aan bak {0} gekoppeld","Entity Scan not expected. Press PPTL":"Scan van entiteit niet verwacht. Druk op PPTL","Item Missing/Unscannable":"Item ontbreekt/niet scanbaar","Missing Box":"Ontbrekende doos","Override Tote Required":"Negeren draagtas vereist","Items In Box Unscannable":"Items in doos niet scanbaar","Box Unscannable":"Doos niet scanbaar","Loose Items Unscannable":"Losse items niet scanbaar","Please put unscannable entities in exception area.":"Plaats niet-scanbare entiteiten in uitzonderingsgebied.","Please put oversized entities in exception area.":"Plaats te grote entiteiten in uitzonderingsgebied.","Take the Items out from the Slot":"Haal de items uit de sleuf","Pptl press not expected.":"Drukken op pptl niet verwacht.","Scan not expected.":"Scan niet verwacht.","Wrong scan.Expecting item scan.":"Verkeerde scan. Verwacht itemscan.","Wrong scan.Expecting container scan.":"Verkeerde scan. Verwacht containerscan.","Wrong scan.Expecting location scan.":"Verkeerde scan. Verwacht locatiescan.","Scan Excess Entity Quantity":"Scan overtollige aantal entiteiten","Entity already scanned.Confirm exception":"Entiteit al gescand. Bevestig uitzondering","Exception":"Uitzondering","Logout":"Uitloggen","Utility":"Hulpprogramma","EXCEPTION":"UITZONDERING","Good Quantity":"Goede aantal","Missing Quantity":"Ontbrekende aantal","Unscannable Quantity":"Niet-scanbare aantal","Remove Item":"Verwijderen item","Item Missing/Bad Barcode":"Item ontbreekt/slechte streepjescode","Sum of missing and good quantity should be equal to {0}":"De som van de ontbrekende en goede aantal moet gelijk zijn aan {0}","Login":"Inloggen","Enter Username":"Gebruikersnaam invoeren","Enter Password":"Wachtwoord invoeren","Invalid credentials":"Ongeldige referenties","Login not allowed. You're already logged in":"Inloggen niet toegestaan. U bent al ingelogd","Place Item in slot and scan more":"Plaats item in sleuf en scan meer","PPTL":"PPTL","Scan Slot Barcode":"Scan streepjescode van de sleuf","Unexpected Item":"Onverwacht item","Stage Bin or Scan Item":"Zet bak klaar of scan item","Scan & Confirm":"Scan en bevestig","Scan Item From Bin":"Scan item van bak","Scan Tote":"Scan draagtas","Scan MSU Barcode":"Scan streepjescode MSU","Scan Items":"Scan items","Status":"Status","Could not connect to PPS.Please try again.":"Kan geen verbinding maken met PPS. Probeer het opnieuw.","product_sku":"product_sku","type":"type","quantity":"aantal","item":"item","box":"doos","SKU not present in Database.Put in exception area":"SKU niet in database aanwezig. Plaats in uitzonderingsgebied","Please put extra entities in exception area.":"Plaats extra entiteiten in uitzonderingsgebied.","Space Available For":"Ruimte beschikbaar voor","Tote Details":"Draagtasgegevens","Close current tote first":"Sluit eerst huidige draagtas","CURRENT BIN":"HUIDIGE BAK","Bad Barcode Quantity":"Aantal slechte streepjescodes","Enter Scanner Id":"Voer scanner-ID in","Back seat not supported for this mode":"Achterstoel niet ondersteund voor deze modus","Bad Data":"Slechte gegevens","Peripheral already added":"Periferie is al toegevoegd","Scan Bin Barcode":"Scan streepjescode","Update":"Bijwerken","Japanese":"Japans","English":"Engels","Exception Finished":"Uitzondering voltooid","PPS Mode":"PPS-modus","Seat Type":"Type stoel","Good Quantity Cannot be Equal to the Total Quantity":"Goede aantal kan niet gelijk zijn aan totale aantal","Undock Roll Cage if no items remaining":"Koppel de rolkooi los als er geen items resteren","Gently push roll cage away from the frame":"Duw de rolkooi voorzichtig van het frame weg","Scan tote and place it in the slot":"Scan draagtas en plaats deze in de sleuf","Scan slot to confirm":"Scan sleuf om te bevestigen","Release MTU":"Geef MTU vrij","Tote scan successful.":"Scannen draagtas is geslaagd.","Slot barcode scan successful":"Scannen streepjescode sleuf is geslaagd","Tote already scanned":"Draagtas al gescand","Tote scanned is not idle":"Gescande draagtas in niet inactief","Tote scanned is not opened":"Gescande draagtas in niet geopend","Scan Tote first and then scan rack":"Scan eerst de draagtas en scan vervolgens het rek","Invalid Slot scanned":"Ongeldige sleuf gescand","Tote already associated with slot.Scan empty slot":"Draagtas al aan sleuf gekoppeld. Scan lege sleuf","Please Scan tote which has excess item":"Scan de draagtas die een overtollig item heeft","Tote scan cancelled.":"Scannen draagtas geannuleerd.","Exception finished":"Uitzondering voltooid","Unexpected entity scanned":"Onverwachte entiteit gescand","Enter excess item quantity":"Voer overtollige aantal items in"," items":" items","Wrong ppsbin button pressed":"Verkeerde ppsbin-knop ingedrukt","Total ":"Totaal ","Place the tote back in bin {0} and press pptl":"Plaats de draagtas terug in bak {0} en druk op pptl","Take out the tote from bin {0} and scan entity":"Haal de draagtas uit bak {0} en scan entiteit","Scan tote first and then scan item":"Scan eerst de draagtas en scan vervolgens het item","Scan excess item":"Scan overtollige item","Scan tote which has excess item":"Scan de draagtas die een overtollig item heeft","Invalid tote scanned":"Ongeldige draagtas gescand","Exception entry successful":"Invoer uitzondering geslaagd","Are you sure you want to exit from {0} invoice and stage all bins":"Weet u zeker dat u factuur {0} wilt verlaten en alle bakken klaarzetten?","Invoice number: {0}":"Factuurnummer: {0}","Scan or Enter {0} number":"Scan {0} nummer of voer dit in","Please scan or enter {0} number":"Scan {0} nummer of voer dit in","STN scan successful":"Scan van STN is geslaagd","Exit {0}":"Afsluiten {0}","{0} number :":"{0} nummer:","Are you sure you want to exit from {0} {1} and stage all bins":"Weet u zeker dat u factuur {0} {1} wilt verlaten en alle bakken klaarzetten?","Scan or Enter the tote barcode to reprint":"Scan de streepjescode van de draagtas of voer deze in om opnieuw af te drukken","Place container in MSU slot and confirm":"Plaats container in MSU-sleuf en bevestig","Place {0} boxes with {1} items from bin {2}":"Plaats {0} dozen met {1} items vanuit bak {2}","Place {0} boxes from bin {2}":"Plaats {0} dozen vanuit bak {2}","Place":"Plaatsen","Remove Tote from bin {0} & Press PPTL to confirm no Items Remaining":"Verwijder draagtas uit bak {0} en druk op PPTL om te bevestigen dat er geen resterende items zijn","Press PPTL to confirm no Items Remaining in Bin {0}":"Druk op PPTL om te bevestigen dat er geen resterende items in bak {0} zijn","Entities cannot be accommodated! Remove all entities from bin and press PPTL.":"Entiteiten kunnen niet worden ondergebracht! Verwijder alle entiteiten uit de bak en druk op PPTL.","Entities cannot be accommodated!":"Entiteiten kunnen niet worden ondergebracht!","Take {0} Printout and Press PPTL":"Maak {0} afdruk en druk op PPTL","PPS is Closed":"PPS is gesloten","Place box in MSU slot and confirm":"Plaats doos in MSU-sleuf en bevestig","Wrong Undock":"Verkeerde loskoppeling","Dock roll cage back to proceed the operation":"Koppel rolkooi weer terug om door te gaan met de bediening","Excess quantity":"Overtollig aantal","Entity Damaged":"Entiteit beschadigd","Issues with entity":"Problemen met de entiteit","Validate and Confirm":"Valideer en bevestig","Wrong Scan. IRT bin scan expected":"Verkeerde scan. Scan van IRT-bak verwacht","Scan IRT Bin":"Scan van IRT-bak","Please put damaged entities in IRT bin and scan the bin":"Plaats beschadigde entiteiten in IRT-bak en scan de bak","Please put damaged entities in exception area":"Plaats beschadigde entiteiten in uitzonderingsgebied","Please put extra entities in IRT bin and scan the bin":"Plaats extra entiteiten in IRT-bak en scan de bak","Please put extra entities in exception area":"Plaats extra entiteiten in uitzonderingsgebied","Please put unscannable entities in IRT bin and scan the bin":"Plaats niet-scanbare entiteiten in IRT-bak en scan de bak","Please put unscannable entities in exception area":"Plaats niet-scanbare entiteiten in uitzonderingsgebied","Please put oversized entities in IRT bin and scan the bin":"Plaats te grote entiteiten in IRT-bak en scan de bak","Please put oversized entities in exception area":"Plaats te grote entiteiten in uitzonderingsgebied","Warehouse Full Remove all entities from bin & press PPTL":"Magazijn vol, verwijder alle entiteiten uit de bak en druk op PPTL","Enter Quantity":"Voer aantal in","Are you sure you want to cancel the exception?":"Weet u zeker dat u de uitzondering wilt annuleren?","All scan and print will be cancelled. Confirm to cancel?":"Alle scans en afdrukken worden geannuleerd. Bevestigen om te annuleren?","Yes":"Ja","No":"Nee","Exception with entity reported":"Uitzondering met entiteit gemeld","Please put entities with issues, in exception area":"Plaats entiteiten met problemen in uitzonderingsgebied","Please put entities in IRT and Scan IRT Bin":"Plaats entiteiten in IRT-bak en scan IRT-bak","Wrong Scan. Unrecognized barcode.":"Verkeerde scan. Niet-herkende streepjescode.","PPS is closed":"PPS is gesloten","NEST MAX":"NEST MAX","STACK MAX":"STACK MAX","DO NOT STACK":"STACK NIET","FRAGILE":"BREEKBAAR","Length of {0} should not be greater than {1}":"Lengte van {0} mag niet groter zijn dan {1}","Scan {0} packs":"Scan {0} pakketten","Scan {0} sub packs":"Scan {0} subpakketten","Press PPTL":"Druk op PPTL","Pack Scan Successful":"Scannen pakket is geslaagd","Scan {0} more packs and place in bin {1}":"Scan nog {0} pakketten en plaats deze in bak {1}","Scan {0} more sub packs and place in bin {1}":"Scan nog {0} subpakketten en plaats deze in bak {1}","Put pack list in trolley and press PPTL to confirm":"Plaats pakbon in trolley en druk op PPTL om te bevestigen","Scan damaged entity":"Scan beschadigde entiteit","Damaged Quantity":"Beschadigde aantal","Wrong Scan. Entity not present in Database":"Verkeerde scan. Entiteit niet in de database aanwezig","Sum of good, missing and damaged should be equal to {0}":"De som van de goede, ontbrekende en beschadigde moet gelijk zijn aan {0}","Last item scan will be cancelled. Do you want to continue?":"Scan laatste item wordt geannuleerd. Wilt u doorgaan?","Continue":"Doorgaan","Bin full":"Bak vol","Please put entities which have issues in exception area":"Plaats entiteiten die problemen hebben in uitzonderingsgebied","Unscannable":"Niet scanbaar","Invalid Event.Expecting PPTL button press":"Ongeldige gebeurtenis. Druk op PPTL-knop verwacht","Remove Tote from bin & Press PPTL to confirm no Items Remaining":"Verwijder draagtas uit bak en druk op PPTL om te bevestigen dat er geen resterende items zijn","Wrong entity scan.Please scan the correct entity":"Scan van verkeerde entiteit. Scan de juiste entiteit","Physically Damaged entity reported.":"Fysiek beschadigde entiteit geregistreerd.","Entity entry successful":"Invoer entiteit is geslaagd","Bin scan successful":"Scannen bak is geslaagd","Physically Damaged Reported should equal Scanned Quantity":"Geregistreerd fysiek beschadigde moet gelijk zijn aan gescande aantal","SKU not present in Database.":"SKU niet in de database aanwezig.","Extra entity scan found.":"Scan extra entiteit gevonden.","Container Already Scanned.":"Container al gescand.","Invalid Entity Scanned.":"Ongeldige entiteit gescand.","Quantity of Physically damaged entities scanned is less.":"Aantal gescande fysiek beschadigde entiteiten is minder.","Error":"Fout","Waiting for Bins to be Cleared at Pick Front":"Wachten tot bakken zijn vrijgemaakt bij vooraan selecteren","Processing Next Pick from Rack ":"Verwerken volgende selectie van rek ","Scan Damaged Entity":"Scan beschadigde entiteit","Warehouse Full":"Magazijn vol","Scan a packing box and keep in bin {0}":"Scan een pakketdoos en bewaar deze in bak {0}","Pick box from MSU and press PPTL on Bin {0}":"Selecteer doos uit MSU en druk op PPTL bij bak {0}","Extra details entered are incorrect.Please enter correct details":"Extra ingevoerde gegevens zijn onjuist. Voer juiste gegevens in","Packing box scan failed":"Scan pakketdoos is mislukt","Wrong entity Scanned. Bin Scan Expected.":"Verkeerde entiteit gescand. Scan bak verwacht.","Bin Already Scanned":"Bak al gescand","Issue with Pack":"Probleem met pakket","Issue with Sub pack":"Probleem met subpakket","Issue with MPU":"Probleem met MPU","Space not available":"Ruimte niet beschikbaar","Bad barcode on pack":"Slechte streepjescodes op pakket","Bad barcode on sub pack":"Slechte streepjescodes op subpakket","Unexpected pack":"Onverwacht pakket","Pack missing":"Pakket ontbreekt","Sub pack missing":"Subpakket ontbreekt","Damaged sub pack":"Beschadigd subpakket","Good pack":"Goed pakket","Good sub pack":"Goed subpakket","Scan not Allowed. PPS close/force close or profile change requested.":"Scan niet toegestaan. Sluiten/sluiten forceren van PPS of profielwijziging gevraagd.","Pack scan successfully":"Scannen pakket is geslaagd","Sub-Pack scan successfully":"Scannen subpakket is geslaagd","Scan MPU":"Scan MPU","Scan {0} or {1}":"Scan {0} of {1}","Continue scanning {0} and {1}":"Doorgaan met scannen van {0} en {1}","Enter Quantity of Unscannable {0}":"Voer aantal niet-scanbare {0} in","Wait for MPU":"Wacht op MPU","No Sub-Packs to reconcile":"Geen subpakketten om af te stemmen","Pack Unscannable":"Pakket niet scanbaar","Sub-Pack Unscannable":"Subpakket niet scanbaar","Damage Barcode":"Schade streepjescode","Packs":"Pakketten","Sub-Packs":"Subpakketten","Scan Small Box":"Scan kleine doos","Scan {0} Box and Place in Bin {1}":"Scan {0} doos en plaats deze in bak {1}","Scan {0} Small Box and Place in Bin {1}":"Scan {0} kleine doos en plaats deze in bak {1}","Put Pack list in trolley and press PPTL to confirm":"Plaats pakbon in trolley en druk op PPTL om te bevestigen","Done":"Gereed","No more entities to be scanned":"Geen te scannen entiteiten meer","Type":"Type","Serial Number":"Serienummer","Quantity":"Aantal","Wrong Bin Scanned. Scan Expected for Roll Cage ready for undocking.":"Verkeerde bak gescand. Scan verwacht voor rolkooi die gereed is voor loskoppeling.","Issues with {0}":"Problemen met {0}","Scan {0} damaged entities":"Scan {0} beschadigde entiteiten","Scan {0} {1}":"Scan {0} {1}","Scan {0} {1} and place in Bin {2}":"Scan {0} {1} en plaats in bak {2}","Enter Unscannable Tote Quantity":"Voer aantal niet-scanbare draagtassen in","Enter items that can fit in the bin":"Voer items in die in de bak passen","{0} scan successfully":"Scan van {0} is geslaagd","Place Tote in Bin {0} and Press PPTL":"Plaats draagtas in bak {0} en druk op PPTL","Tote in use at front seat":"Draagtas in gebruik bij voorstoel","Waiting for Tote to be associated from back":"Wachten tot draagtas vanaf achteraan wordt gekoppeld","{0} scan successful":"{0} scan succesvol","Waiting for put_away to complete from front":"Wachten op put_away om vanaf de voorkant te voltooien","Tote cannot be associated with bin of another seat":"Tote kan niet worden geassocieerd met een bak van een andere stoel","Waiting for put away to complete from front":"Wachten op wegzetten om vanaf de voorkant te voltooien","Scan checklist items to proceed":"Scan controlelijst-items om door te gaan","Unexpected Entity In {0}":"Onverwachte entiteit in {0}","Scan a {0}":"Scan een {0}","Scan a {0} or Press PPTL":"Scan een {0} of druk op PPTL","Press PPTL to clear the Bin":"Druk op PPTL om de prullenbak te wissen","Place {0} in Bin and scan the Bin barcode":"Plaats {0} in de lade en scan de streepjescode van de lade","Waiting for order to be completed from front":"Wachten op bestelling wordt voltooid vanaf de voorkant","Waiting for {0} to be associated from back":"Wachten dat {0} van achteren wordt gekoppeld","{0} scan successful.":"{0} scan succesvol.","Excess Entity in {0} recorded.":"Overtollige entiteit in {0} opgenomen.","{0} unexpected. {0} in use in another location":"{0} onverwacht. {0} in gebruik op een andere locatie","{0} unexpected. Service request not present in {0}.":"{0} onverwacht. Serviceaanvraag niet aanwezig in {0}.","Invalid resource.":"Ongeldige bron.","{0} unexpected. Service request not in correct state.":"{0} onverwacht. Serviceaanvraag niet in correcte staat.","{0} unexpected. Empty {0} scanned.":"{0} onverwacht. Leeg {0} gescand.","{0} unexpected. Scanned {0} does not exist.":"{0} onverwacht. Gescande {0} bestaat niet.","{0} unexpected. Service Request does not exist.":"{0} onverwacht. Serviceaanvraag bestaat niet.","Wrong scan. Please Scan item or {0}":"Verkeerde scan. Scan item of {0}","{0} unexpected. {0} is not empty.":"{0} onverwacht. {0} is niet leeg.","Bin barcode of other PPS scanned":"Bin-streepjescode van andere PPS gescand","Scan {0}":"Scan {0}","Scan {0} which has excess item":"Scan {0} met overtollig artikel","Scan {0} first and then scan item":"Scan eerst {0} en scan vervolgens het item","Invalid {0} scanned":"Ongeldige {0} gescand","{0} Close Cancelled":"{0} Sluiten geannuleerd","{0} docked successfully":"{0} succesvol geplaatst","Are You Sure You Want to Close {0}?":"Weet u zeker dat u {0} wilt sluiten?","Scan {0} or Stage PPS Bin":"Scan {0} of Stage PPS-prullenbak","Enter Unscannable {0} Quantity":"Voer Unscannable {0} Aantal in","Place {0} in Bin {1} and Press PPTL":"Plaats {0} in Bin {1} en druk op PPTL","{0} already opened. Scan some other {1}":"{0} is al geopend. Scan een andere {1}","{0} already closed. Scan some other {1}":"{0} al gesloten. Scan een andere {1}","Close current {0} first":"Sluit eerst de huidige {0}","Wrong entity scanned. Please scan {0}":"Verkeerde entiteit gescand. Scan alstublieft {0}","{0} excess entities found in {0}. Please put entities in exception area and confirm":"{0} overtollige entiteiten gevonden in {1}. Plaats entiteiten in het uitzonderingsgebied en bevestig dit","Entity not expected in {0}. Please put entity in exception area and confirm":"Entiteit niet verwacht in {0}. Plaats de entiteit in het uitzonderingsgebied en bevestig dit","Expecting {0} closure.":"Verwacht {0} sluiting.","{0} not present in database.":"{0} niet aanwezig in database.","{0} matched .":"{0} gekoppeld.","Place the {0} back in bin {1} and press PPTL":"Plaats de {0} terug in lade {1} en druk op PPTL","Take out the {0} from bin {1} and scan entity":"Haal de {0} uit de bak {1} en scan de entiteit","Remove {0} from bin {1} & Press PPTL to confirm no Items Remaining":"Verwijder {0} uit prullenmand {1} & Druk op PPTL om te zien of er nog items over zijn","Press PPTL or Scan a {0}":"Druk op PPTL of Scan a {0}","Select Bin which does not require {0}":"Selecteer Bin waarvoor geen {0} vereist is","Select Bin to disassociate {0}":"Selecteer Bin om {0} te ontkoppelen","{0} close successful.":"{0} sluit succesvol.","{0} not closed.":"{0} niet gesloten.","Excess item in {0} recorded. Now press PPTL":"Overtollige item in {0} opgenomen. Druk nu op PPTL","Cancelled excess entity in {0}":"Overmatige entiteit geannuleerd in {0}","Cancelled invalid entity in {0}":"Geannuleerde entiteit geannuleerd in {0}","Invalid entity in {0} recorded":"Ongeldige entiteit in {0} opgenomen","Scan {0} to associate with Bin":"Scan {0} om te associëren met Bin","Press PpsBin Button Or Scan a {0}":"Druk op de PpsBin-knop of scan een {0}","{0} is already scanned.Expecting pptl scan.":"{0} is al gescand. Op zoek naar pptl-scan.","{0} are not required.Please don't scan {1} barcode":"{0} zijn niet verplicht. Gelieve de streepjescode {1} niet te scannen","Please scan the {0} first and then scan pptl barcode":"Scan eerst de {0} en scan dan de pptl-streepjescode","{0} scanned.Expecting pptl scan.":"{0} gescand. Op zoek naar pptl-scan.","Pptl scan not allowed. {0} are not required":"Pptl-scan niet toegestaan. {0} zijn niet verplicht","{0} didn't get associated":"{0} is niet gekoppeld","After scannning {0} barcode, please scan pptl barcode":"Na het scanneren van {0} barcode, scan pptl barcode","No {0} associated. Pease keep {0} in the Bin and then scan":"Geen {0} gekoppeld. Houd {0} in de prullenbak en scan","No {0} scanned":"Geen {0} gescand","{0} cancelled":"{0} geannuleerd","{0} already associated with ppsbin":"{0} al gekoppeld aan ppsbin","Please press ppsbin button which does not have any {0} associated":"Druk op de ppsbin-knop zonder {0}","{0} assigned successfully to ppsbin {0}":"{0} is toegewezen aan ppsbin {0}","{0} are not required":"{0} zijn niet verplicht","{0} could not be reserved as already reserved":"{0} kan niet worden gereserveerd als al gereserveerd","Exception invalid as {0} are not required with this PPS":"Uitzondering ongeldig omdat {0} niet vereist is met deze PPS","Override {0} not possible":"Overschrijven {0} niet mogelijk","Barcode didn't match with current {0} barcode":"Barcode komt niet overeen met huidige {0} barcode","Incorrect {0} barcode scanned. Please try again":"Onjuiste {0} barcode gescand. Probeer het opnieuw","System not configured for {0}":"Systeem niet geconfigureerd voor {0}","{0} association required":"{0} koppeling vereist","{0} association failed. Repeat scan operation":"{0} associatie mislukt. Herhaal scanbewerking","{0} are anyway not required.Please proceed further":"{0} zijn sowieso niet vereist. Ga verder","{0} already associated with bin {0}":"{0} al gekoppeld aan bin {0}","{0} in use at front seat":"{0} in gebruik op de voorstoel","{0} cannot be associated with bin of another seat":"{0} kan niet worden geassocieerd met een bak van een andere stoel","{0} assigned successfully to bin":"{0} is toegewezen aan de prullenbak","{0} disassociated from Bin":"{0} losgekoppeld van Bin","{0} associated with another bin":"{0} is gekoppeld aan een andere bin","Please scan the {0} first and then scan PPTL barcode":"Scan eerst de {0} en scan vervolgens de PPTL-streepjescode","Override {0} Exception cannot be raised for bins with {1} associated":"Overschrijven {0} Uitzondering kan niet worden opgeheven voor bins met {1} geassocieerd","PPTL scan not allowed. System not configured for {0}":"PPTL-scan niet toegestaan. Systeem niet geconfigureerd voor {0}","Scan pptl barcode after scannning {0} barcode":"Scan pptl-barcode na scannning {0} barcode","{0} scanned is not opened":"{0} gescand wordt niet geopend","{0} already scanned":"{0} al gescand","Wrong entity Scanned. {0} Scan Expected.":"Verkeerde entiteit gescand. {0} Scan verwacht.","Disassociate {0}":"Koppel {0} los","Override {0} Required":"Overschrijven {0} Vereist","Scan slot":"Scan slot","Scan or Enter the {0} barcode to reprint":"Scan of voer de streepjescode {0} in om deze opnieuw af te drukken","{0} scan cancelled.":"{0} scan geannuleerd.","{0} scanned is not idle":"{0} gescand is niet inactief","Scan {0} first and then scan rack":"Scan eerst {0} en scan vervolgens het rack","{0} already associated with slot.Scan empty slot":"{0} al gekoppeld aan slot.Scan leeg slot","Invalid {0} scan":"Ongeldige {0} scan","{0} close successful":"{0} sluit succesvol","Scan new {0}":"Scan nieuw {0}","Scan item or {0}":"Scan item of {0}","Additional Information":"Extra informatie","Selected UOM: ":"Geselecteerde UOM: ","Close":"Sluiten","Select Value":"Selecteer waarde","{0} already associated with bin":"","Previous Pick Details":"","Previous Put Details":"","Dock {0}":"Koppelen {0}","Scan {1} or Dock {0}":"Scannen {1} of koppelen {0}","Undock {0}":"Loskoppelen {0}","Scan a Tote":"Scan een tote","Scan {0} location":"Scan {0} locatie","Pick complete. Waiting for next pick.":"Selecteren voltooid. Wachten op volgende selectie.","Missing barcode scanned. Waiting for confirmation.":"Ontbrekende barcode gescand. Wachten op bevestiging.","{0} cannot be associated with inactive bin":"{0} kan niet gekoppeld worden aan een inactieve bak","{0} cleared":"{0} vrijgemaakt","Scan load unit and gently push it away":"Scan de laadeenheid en duw deze voorzichtig weg","Box Type":"Type doos","Location":"Locatie","Place Box":"Plaats doos","Scan":"Scannen","Checklist":"Controlelijst","Scan {0} Serial":"Scan {0} serie-","Scan {0} Serial to Open":"Scan {0} Te openen serie","Scan carrying unit and gently push it away":"","Pick all items from slot {0} and scan slot":"","{0} undocked successfully":"","Pick all items from slot and scan slot":"","NO ITEM FOUND":"","Item details":"","Item Search":"","Event":"","Expectation Id":"","Item Location":"","UOM Details":"","Excess Quantity":"","Total: ":"","Scan excess entities":"","Dis-associate":"","Data capture failed":"","No entities to reconcile":"","LOGIN":"LOG IN","Language":"Taal","Username":"Gebruikersnaam","Login to Butler System":"","Login to":"Inloggen","Enter username":"Vul je gebruikersnaam in","Enter password":"Voer wachtwoord in","Scan ID card to login.":"Scan ID-kaart om in te loggen.","{0} Unscannable":"{0} Niet scanbaar","Scan entities":"Scan entiteiten","Waiting for {0} to be docked":"","Put Pack list in {0} and press PPTL to confirm":"","Please scan PPTL which has excess item":"","Please put unscannable tote in exception area":"","Sum of good and exception quantity should be equal to {0}":"","{0} Unscannable entities recorded. WMS notified":"","Scan item or enter barcode details":"","{0} unexpected. Service request not present in {1}.":"","MSU Sent":"","This put request is not supported in current flow":"","Service request not in correct state":"","Multiple Service request found":"","Unknown error":"","Scan item":"","Item unexpected. No service request found for this item":"","Scan entity":"","Put entity in slot and scan slot to confirm":"","Excess detected, remove '{0}' items and confirm again":"","Invalid {0}":"","{0} closed":"","Unknown barcode":"","Unexpected entity":"","Excess quantity detected, remove '{0}' quantity and confirm again":"","Call for Help":"","Tote Unscannable":"","{0} unexpected. Scanned {1} does not exist.":"","HEAVY":"","Scan tote":"","Items In Bin":"","Scan tote location":"","Send MSU":"","Put and confirm":"","Close Cart":"","Dock Cart":"","Are you sure that all the items in the cart were scanned?":"","The following {0} items were found missing":"","OUTER":"","INNER":"","Wrong scan. Please Scan tote":""};module.exports=obj

},{}],250:[function(require,module,exports){
var obj={"Scan item / Stage PPS Bin":"Scan item / Stage PPS Bin","Scan Tote to associate with Bin":"Scan Tote to associate with Bin","Press PpsBin Button Or Scan a Tote":"Press PpsBin Button Or Scan a Tote","User Name":"User Name","Password":"Password","Are you sure you want to close Tote":"Are you sure you want to close Tote","Details":"Details","Scan {0} items":"Scan {0} items","Scan box barcode":"Scan box barcode","Press PpsBin {0} to remove items":"Press PpsBin {0} to remove items","Tote is already scanned.Expecting pptl scan.":"Tote is already scanned.Expecting pptl scan.","Totes are not required.Please don't scan tote barcode":"Totes are not required.Please don't scan tote barcode","Wrong PPS bin scanned":"Wrong PPS bin scanned","Please scan the tote first and then scan pptl barcode":"Please scan the tote first and then scan pptl barcode","Tote scanned.Expecting pptl scan.":"Tote scanned.Expecting pptl scan.","Pptl scan not allowed. Totes are not required":"Pptl scan not allowed. Totes are not required","Tote didn't get associated":"Tote didn't get associated","After scannning tote barcode, please scan pptl barcode":"After scannning tote barcode, please scan pptl barcode","Wrong Ppsbin button pressed.Please press those buttons having color blue":"Wrong Ppsbin button pressed.Please press those buttons having color blue","Please complete pickback for pending bin and then proceed":"Please complete pickback for pending bin and then proceed","No totes associated. Pease keep totes in the Bin and then scan":"No totes associated. Pease keep totes in the Bin and then scan","Documents printed Successfully":"Documents printed Successfully","No tote scanned":"No tote scanned","Tote cancelled":"Tote cancelled","Tote already associated with ppsbin":"Tote already associated with ppsbin","Incorrect tote barcode scanned. Please try again":"Incorrect tote barcode scanned. Please try again","Please press PPTL button which does not have any totes associated":"Please press PPTL button which does not have any totes associated","Tote assigned successfully to ppsbin {0}":"Tote assigned successfully to ppsbin {0}","Bin {0} items removed successfully":"Bin {0} items removed successfully","Totes are not required":"Totes are not required","Wrong Barcode scanned":"Wrong Barcode scanned","Tote could not be reserved as already reserved":"Tote could not be reserved as already reserved","Exception invalid as totes are not required with this PPS":"Exception invalid as totes are not required with this PPS","Override tote not possible":"Override tote not possible","Scanning pptl barcode not allowed":"Scanning pptl barcode not allowed","Please press those buttons having color blink_blue":"Please press those buttons having color blink_blue","Unhandled event ocurred":"Unhandled event ocurred","Barcode didn't match with current tote barcode":"Barcode didn't match with current tote barcode","Testing configuration {0} and {1}":"Testing configuration {0} and {1}","Processing. Please wait and scan later":"Processing. Please wait and scan later","Waiting for rack":"Waiting for rack","Current PPS mode does not support back seat. Please logout.":"Current PPS mode does not support back seat. Please logout.","Scan items and place in bin {0}":"Scan items and place in bin {0}","Stage Bin or Scan Entity":"Stage Bin or Scan Entity","Place Entity in Bin and Press PPTL":"Place Entity in Bin and Press PPTL","Are You Sure You Want to Close Tote?":"Are You Sure You Want to Close Tote?","Scan Tote or Stage PPS Bin":"Scan Tote or Stage PPS Bin","Item Not Expected in Tote":"Item Not Expected in Tote","Tote already opened. Scan some other tote":"Tote already opened. Scan some other tote","Tote already closed. Scan some other tote":"Tote already closed. Scan some other tote","No matching tote found":"No matching tote found","Wrong entity scanned. Please scan tote":"Wrong entity scanned. Please scan tote","No entities added yet. Scan entities and then press PPTL":"No entities added yet. Scan entities and then press PPTL","Wrong entity scanned. Please scan Container/Item.":"Wrong entity scanned. Please scan Container/Item.","Cannot cancel scan. No scanned box found":"Cannot cancel scan. No scanned box found","Entity scan not expected. Waiting for PPTL press":"Entity scan not expected. Waiting for PPTL press","Bin selected for put. Cannot be staged":"Bin selected for put. Cannot be staged","SKU not present in database. Put into IRT bin.":"SKU not present in database. Put into IRT bin.","No free bins. Please scan later":"No free bins. Please scan later","Wrong PPTL pressed. Please try another":"Wrong PPTL pressed. Please try another","Please put entities in exception area and confirm":"Please put entities in exception area and confirm","Wrong bin chosen.Try selecting another bin":"Wrong bin chosen.Try selecting another bin","Please scan same SKU to complete this exception":"Please scan same SKU to complete this exception","Entity scan not expected.":"Entity scan not expected.","Tote not present in database.":"Tote not present in database.","Tote has been opened.Scan all items in tote and then scan tote again to close it":"Tote has been opened.Scan all items in tote and then scan tote again to close it","PPS is in paused mode. Cannot process new entity. Try after some time":"PPS is in paused mode. Cannot process new entity. Try after some time","Cancel scan successful.":"Cancel scan successful.","Tote close successful.":"Tote close successful.","Tote not closed.":"Tote not closed.","Entity scan successful.":"Entity scan successful.","PPTL press successful":"PPTL press successful","Data capture valid":"Data capture valid","Excess item in tote recorded. Now press PPTL":"Excess item in tote recorded. Now press PPTL","Excess item in tote recorded.":"Excess item in tote recorded.","{0} unscannable entities recorded. WMS notified":"{0} unscannable entities recorded. WMS notified","{0} extra entities recorded in bin. WMS notified":"{0} extra entities recorded in bin. WMS notified","{0} oversized entities recorded.WMS notified":"{0} oversized entities recorded.WMS notified","{0} Physically damaged entity recorded.WMS notified":"{0} Physically damaged entity recorded.WMS notified","Exception cancelled":"Exception cancelled","Box with same serial number already exists in the warehouse":"Box with same serial number already exists in the warehouse","Entity already scanned.Waiting for PPTL press":"Entity already scanned.Waiting for PPTL press","No bins available to stage":"No bins available to stage","Bin already staged. Ignoring event":"Bin already staged. Ignoring event","Bin empty. Cannot be staged":"Bin empty. Cannot be staged","Scan Box/Items from Slot":"Scan Box/Items from Slot","Scan Remaining Item In Box":"Scan Remaining Item In Box","Last Box Scan Completed! Scan Remaining Box/Items":"Last Box Scan Completed! Scan Remaining Box/Items","Status To Reconcile":"Status To Reconcile","This box belongs to some other SKU in the slot.Put it back.Scan next box.":"This box belongs to some other SKU in the slot.Put it back.Scan next box.","This box does not belong to this slot. Remove the box and put in exception area.":"This box does not belong to this slot. Remove the box and put in exception area.","Waiting for MSU":"Waiting for MSU","Wrong Barcode":"Wrong Barcode","Box Scan successful":"Box Scan successful","Item Scan successful":"Item Scan successful","Item scan successful":"Item scan successful","Data capture failed at item {0}":"Data capture failed at item {0}","Bin {0} selected":"Bin {0} selected","Bin {0} unselected":"Bin {0} unselected","Connection is closed. Connecting...":"Connection is closed. Connecting...","Extra item found please put back item in Exception bin":"Extra item found please put back item in Exception bin","Enter Unscannable Entity Quantity":"Enter Unscannable Entity Quantity","Scan Oversized Entity Quantity":"Scan Oversized Entity Quantity","Please Select The Bin With Excess Entity":"Please Select The Bin With Excess Entity","Enter Quantity of Excess Entities":"Enter Quantity of Excess Entities","Place Entity in Slot and Scan More":"Place Entity in Slot and Scan More","Scan Slot to Confirm":"Scan Slot to Confirm","Wait for MSU":"Wait for MSU","Scan Entity From Bin {0}":"Scan Entity From Bin {0}","Enter Good Quantity to be Put into Slot":"Enter Good Quantity to be Put into Slot","Put Back Entities in the PPS Bin":"Put Back Entities in the PPS Bin","Confirm MSU Release":"Confirm MSU Release","Scan Slot":"Scan Slot","Scan {0} Items":"Scan {0} Items","Cancel audit successful.Audit Restarted":"Cancel audit successful.Audit Restarted","Scan Box":"Scan Box","Scan {0} Items and Place in Bin {0}":"Scan {0} Items and Place in Bin {0}","Press PPTL to confirm":"Press PPTL to confirm","Scan Tote to Associate with Bin":"Scan Tote to Associate with Bin","Press PPTL or Scan a Tote":"Press PPTL or Scan a Tote","Press bin PPTL to remove entities":"Press bin PPTL to remove entities","Press bin PPTL":"Press bin PPTL","Press PPTL for bin {0} to confirm":"Press PPTL for bin {0} to confirm","Press print button to proceed":"Press print button to proceed","Select Bin to skip print":"Select Bin to skip print","Select Bin which does not require tote":"Select Bin which does not require tote","Select Bin to disassociate tote":"Select Bin to disassociate tote","Pick complete. Waiting for next rack.":"Pick complete. Waiting for next rack.","Location scan successful":"Location scan successful","Box scan successful":"Box scan successful","Cancel scan successful":"Cancel scan successful","Expecting MSU release confirmation from GUI, got invalid event.":"Expecting MSU release confirmation from GUI, got invalid event.","Data capture failed at item":"Data capture failed at item","Wrong slot location scanned. Please try again":"Wrong slot location scanned. Please try again","Wrong box scanned. Please try again":"Wrong box scanned. Please try again","Scan a box first":"Scan a box first","Wrong PPTL pressed. Please press correct PPTL":"Wrong PPTL pressed. Please press correct PPTL","Picked quantity more than expected. Put extra items back in MSU":"Picked quantity more than expected. Put extra items back in MSU","Wrong item quantity update":"Wrong item quantity update","Wrong item scanned. Please scan correct item":"Wrong item scanned. Please scan correct item","Waiting for MSU. Please wait and scan later":"Waiting for MSU. Please wait and scan later","System Error. Scanned entity details not available at this time":"System Error. Scanned entity details not available at this time","No PPS bins empty. Please empty them from Pickback":"No PPS bins empty. Please empty them from Pickback","PPS mode change requested:scan not allowed":"PPS mode change requested:scan not allowed","PPS mode change requested:auto staging all bins":"PPS mode change requested:auto staging all bins","PPTL press not expected":"PPTL press not expected","Scan not expected":"Scan not expected","Barcode didn't match the current tote barcode":"Barcode didn't match the current tote barcode","System not configured for totes":"System not configured for totes","Invalid Exception for this configuration":"Invalid Exception for this configuration","No tote associated. Please keep a tote in bin and scan":"No tote associated. Please keep a tote in bin and scan","Wrong PPTL pressed":"Wrong PPTL pressed","Totes are anyway not required.Please proceed further":"Totes are anyway not required.Please proceed further","Tote scan cancelled":"Tote scan cancelled","Documents printed successfully":"Documents printed successfully","Order removed successfully from bin {0}":"Order removed successfully from bin {0}","Tote assigned successfully to bin":"Tote assigned successfully to bin","Tote association failed. Repeat scan operation":"Tote association failed. Repeat scan operation","Tote associated with another bin":"Tote associated with another bin","Please scan PPTL barcode":"Please scan PPTL barcode","Tote disassociated from Bin":"Tote disassociated from Bin","Please complete process for pending bin and then proceed":"Please complete process for pending bin and then proceed","Tote already reserved":"Tote already reserved","Wrong barcode scanned":"Wrong barcode scanned","Please scan the tote first and then scan PPTL barcode":"Please scan the tote first and then scan PPTL barcode","Override Tote Exception cannot be raised for bins with totes associated":"Override Tote Exception cannot be raised for bins with totes associated","PPTL scan not allowed. System not configured for tote":"PPTL scan not allowed. System not configured for tote","PPTL scan not allowed":"PPTL scan not allowed","Tote scan expected":"Tote scan expected","Entity scanned is not from bin {0}. Replace and scan from bin {1}":"Entity scanned is not from bin {0}. Replace and scan from bin {1}","Wrong entity scanned":"Wrong entity scanned","Waiting for MSU scan. Please scan entity later.":"Waiting for MSU scan. Please scan entity later.","Expected quantity exceeded.":"Expected quantity exceeded.","Wrong scan! Entity scan expected but slot barcode scanned.":"Wrong scan! Entity scan expected but slot barcode scanned.","Actual put quantity not equal to the sum of Good and Expection quantity.":"Actual put quantity not equal to the sum of Good and Expection quantity.","Actual put quantity less than than revised quantity.":"Actual put quantity less than than revised quantity.","Wrong slot scanned":"Wrong slot scanned","Entity scan successful":"Entity scan successful","Slot scan successful":"Slot scan successful","Damaged and missing entity recorded.":"Damaged and missing entity recorded.","Space unavailable recorded.":"Space unavailable recorded.","Please put entity in exception area and confirm":"Please put entity in exception area and confirm","Entity not expected in tote. Please put entity in exception area and confirm":"Entity not expected in tote. Please put entity in exception area and confirm","{0} excess entities found in tote. Please put entities in exception area and confirm":"{0} excess entities found in tote. Please put entities in exception area and confirm","Cancelled excess entity in tote":"Cancelled excess entity in tote","Cancelled invalid entity in tote":"Cancelled invalid entity in tote","Invalid entity in tote recorded":"Invalid entity in tote recorded","Wrong enitity scanned. Expecting scan from bin {0}":"Wrong enitity scanned. Expecting scan from bin {0}","PPTL Management":"PPTL Management","Scanner Management":"Scanner Management","Entity Oversized":"Entity Oversized","Entity Unscannable":"Entity Unscannable","Extra Entities in Bin":"Extra Entities in Bin","Entity Missing / Unscannable":"Entity Missing / Unscannable","Space Not Available":"Space Not Available","Mising Box":"Mising Box","Disassociate Tote":"Disassociate Tote","Overide Tote Required":"Overide Tote Required","Reprint":"Reprint","Skip Print":"Skip Print","Peripheral added successfully":"Peripheral added successfully","Peripheral not added":"Peripheral not added","Scan Box or Items":"Scan Box or Items","Check Count":"Check Count","You cannot enter value more than 9999":"You cannot enter value more than 9999","Please enter a quantity greater than 0":"Please enter a quantity greater than 0","Place extra entity in Exception area.":"Place extra entity in Exception area.","Sum of missing, good and damaged should be equal to {0}":"Sum of missing, good and damaged should be equal to {0}","Scan excess item quantity":"Scan excess item quantity","Quantity should be less than or equal to {0}":"Quantity should be less than or equal to {0}","You are not allowed to keyed in the quantity from the numpad. Force Scan is required.":"You are not allowed to keyed in the quantity from the numpad. Force Scan is required.","Waiting for Bins to be Cleared at Pick Back":"Waiting for Bins to be Cleared at Pick Back","Peripheral deleted successfully":"Peripheral deleted successfully","Peripheral not deleted successfully":"Peripheral not deleted successfully","Cancel Exception":"Cancel Exception","Cancel Scan":"Cancel Scan","Finish":"Finish","Back":"Back","OK":"OK","FINISH":"FINISH","Print":"Print","Skip Printing":"Skip Printing","Override":"Override","Add Scanner":"Add Scanner","Edit Details":"Edit Details","NEXT":"NEXT","CONFIRM":"CONFIRM","Stage":"Stage","Stage All":"Stage All","BACK":"BACK","CLOSE":"CLOSE","Cancel":"Cancel","Confirm":"Confirm","TOTE":"TOTE","Clear All":"Clear All","Submit":"Submit","Exceptions":"Exceptions","Next":"Next","Bin":"Bin","Selected":"Selected","Unselected":"Unselected","System is Idle":"System is Idle","CURRENT SLOT":"CURRENT SLOT","Box Serial Numbers":"Box Serial Numbers","No Items To Reconcile":"No Items To Reconcile","List Of Items To Reconcile":"List Of Items To Reconcile","View More":"View More","Please put exception entities in exception area":"Please put exception entities in exception area","Please put exception entities in IRT bin and scan the bin":"Please put exception entities in IRT bin and scan the bin","Product Information":"Product Information","Bin Info":"Bin Info","Associate tote with bin":"Associate tote with bin","Extra Entity Found":"Extra Entity Found","Perform Action":"Perform Action","Input Extra Details":"Input Extra Details","Expected":"Expected","Actual":"Actual","Bin ID":"Bin ID","Barcode":"Barcode","Peripheral ID":"Peripheral ID","Actions":"Actions","Scanner ID":"Scanner ID","Delete":"Delete","Product SKU":"Product SKU","Expected Quantity":"Expected Quantity","Actual Quantity":"Actual Quantity","Missing":"Missing","Extra":"Extra","Barcode Damage":"Barcode Damage","Item in Box Serial Numbers":"Item in Box Serial Numbers","Loose Items":"Loose Items","Loose Items Serial Numbers":"Loose Items Serial Numbers","Product Details":"Product Details","Product Name":"Product Name","Product Desc":"Product Desc","Product Type":"Product Type","Tote already associated with bin {0}":"Tote already associated with bin {0}","Entity Scan not expected. Press PPTL":"Entity Scan not expected. Press PPTL","Item Missing/Unscannable":"Item Missing/Unscannable","Missing Box":"Missing Box","Override Tote Required":"Override Tote Required","Items In Box Unscannable":"Items In Box Unscannable","Box Unscannable":"Box Unscannable","Loose Items Unscannable":"Loose Items Unscannable","Please put unscannable entities in exception area.":"Please put unscannable entities in exception area.","Please put oversized entities in exception area.":"Please put oversized entities in exception area.","Take the Items out from the Slot":"Take the Items out from the Slot","Pptl press not expected.":"Pptl press not expected.","Scan not expected.":"Scan not expected.","Wrong scan.Expecting item scan.":"Wrong scan.Expecting item scan.","Wrong scan.Expecting container scan.":"Wrong scan.Expecting container scan.","Wrong scan.Expecting location scan.":"Wrong scan.Expecting location scan.","Scan Excess Entity Quantity":"Scan Excess Entity Quantity","Entity already scanned.Confirm exception":"Entity already scanned.Confirm exception","Exception":"Exception","Logout":"Logout","Utility":"Utility","EXCEPTION":"EXCEPTION","Good Quantity":"Good Quantity","Missing Quantity":"Missing Quantity","Unscannable Quantity":"Unscannable Quantity","Remove Item":"Remove Item","Item Missing/Bad Barcode":"Item Missing/Bad Barcode","Sum of missing and good quantity should be equal to {0}":"Sum of missing and good quantity should be equal to {0}","Login":"Login","Enter Username":"Enter Username","Enter Password":"Enter Password","Invalid credentials":"Invalid credentials","Login not allowed. You're already logged in":"Login not allowed. You're already logged in","Place Item in slot and scan more":"Place Item in slot and scan more","PPTL":"PPTL","Scan Slot Barcode":"Scan Slot Barcode","Unexpected Item":"Unexpected Item","Stage Bin or Scan Item":"Stage Bin or Scan Item","Scan & Confirm":"Scan & Confirm","Scan Item From Bin":"Scan Item From Bin","Scan Tote":"Scan Tote","Scan MSU Barcode":"Scan MSU Barcode","Scan Items":"Scan Items","Status":"Status","Could not connect to PPS.Please try again.":"Could not connect to PPS.Please try again.","product_sku":"product_sku","type":"type","quantity":"quantity","item":"item","box":"box","SKU not present in Database.Put in exception area":"SKU not present in Database.Put in exception area","Please put extra entities in exception area.":"Please put extra entities in exception area.","Space Available For":"Space Available For","Tote Details":"Tote Details","Close current tote first":"Close current tote first","CURRENT BIN":"CURRENT BIN","Bad Barcode Quantity":"Bad Barcode Quantity","Enter Scanner Id":"Enter Scanner Id","Back seat not supported for this mode":"Back seat not supported for this mode","Bad Data":"Bad Data","Peripheral already added":"Peripheral already added","Scan Bin Barcode":"Scan Bin Barcode","Update":"Update","Japanese":"Japanese","English":"English","Exception Finished":"Exception Finished","PPS Mode":"PPS Mode","Seat Type":"Seat Type","Good Quantity Cannot be Equal to the Total Quantity":"Good Quantity Cannot be Equal to the Total Quantity","Undock Roll Cage if no items remaining":"Undock Roll Cage if no items remaining","Gently push roll cage away from the frame":"Gently push roll cage away from the frame","Scan tote and place it in the slot":"Scan tote and place it in the slot","Scan slot to confirm":"Scan slot to confirm","Release MTU":"Release MTU","Tote scan successful.":"Tote scan successful.","Slot barcode scan successful":"Slot barcode scan successful","Tote already scanned":"Tote already scanned","Tote scanned is not idle":"Tote scanned is not idle","Tote scanned is not opened":"Tote scanned is not opened","Scan Tote first and then scan rack":"Scan Tote first and then scan rack","Invalid Slot scanned":"Invalid Slot scanned","Tote already associated with slot.Scan empty slot":"Tote already associated with slot.Scan empty slot","Please Scan tote which has excess item":"Please Scan tote which has excess item","Tote scan cancelled.":"Tote scan cancelled.","Exception finished":"Exception finished","Unexpected entity scanned":"Unexpected entity scanned","Enter excess item quantity":"Enter excess item quantity"," items":" items","Wrong ppsbin button pressed":"Wrong ppsbin button pressed","Total ":"Total ","Place the tote back in bin {0} and press pptl":"Place the tote back in bin {0} and press pptl","Take out the tote from bin {0} and scan entity":"Take out the tote from bin {0} and scan entity","Scan tote first and then scan item":"Scan tote first and then scan item","Scan excess item":"Scan excess item","Scan tote which has excess item":"Scan tote which has excess item","Invalid tote scanned":"Invalid tote scanned","Exception entry successful":"Exception entry successful","Are you sure you want to exit from {0} invoice and stage all bins":"Are you sure you want to exit from {0} invoice and stage all bins","Invoice number: {0}":"Invoice number: {0}","Scan or Enter {0} number":"Scan or Enter {0} number","Please scan or enter {0} number":"Please scan or enter {0} number","STN scan successful":"STN scan successful","Exit {0}":"Exit {0}","{0} number :":"{0} number :","Are you sure you want to exit from {0} {1} and stage all bins":"Are you sure you want to exit from {0} {1} and stage all bins","Scan or Enter the tote barcode to reprint":"Scan or Enter the tote barcode to reprint","Place container in MSU slot and confirm":"Place container in MSU slot and confirm","Place {0} boxes with {1} items from bin {2}":"Place {0} boxes with {1} items from bin {2}","Place {0} boxes from bin {2}":"Place {0} boxes from bin {2}","Place":"Place","Remove Tote from bin {0} & Press PPTL to confirm no Items Remaining":"Remove Tote from bin {0} & Press PPTL to confirm no Items Remaining","Press PPTL to confirm no Items Remaining in Bin {0}":"Press PPTL to confirm no Items Remaining in Bin {0}","Entities cannot be accommodated! Remove all entities from bin and press PPTL.":"Entities cannot be accommodated! Remove all entities from bin and press PPTL.","Entities cannot be accommodated!":"Entities cannot be accommodated!","Take {0} Printout and Press PPTL":"Take {0} Printout and Press PPTL","PPS is Closed":"PPS is Closed","Place box in MSU slot and confirm":"Place box in MSU slot and confirm","Wrong Undock":"Wrong Undock","Dock roll cage back to proceed the operation":"Dock roll cage back to proceed the operation","Excess quantity":"Excess quantity","Entity Damaged":"Entity Damaged","Issues with entity":"Issues with entity","Validate and Confirm":"Validate and Confirm","Wrong Scan. IRT bin scan expected":"Wrong Scan. IRT bin scan expected","Scan IRT Bin":"Scan IRT Bin","Please put damaged entities in IRT bin and scan the bin":"Please put damaged entities in IRT bin and scan the bin","Please put damaged entities in exception area":"Please put damaged entities in exception area","Please put extra entities in IRT bin and scan the bin":"Please put extra entities in IRT bin and scan the bin","Please put extra entities in exception area":"Please put extra entities in exception area","Please put unscannable entities in IRT bin and scan the bin":"Please put unscannable entities in IRT bin and scan the bin","Please put unscannable entities in exception area":"Please put unscannable entities in exception area","Please put oversized entities in IRT bin and scan the bin":"Please put oversized entities in IRT bin and scan the bin","Please put oversized entities in exception area":"Please put oversized entities in exception area","Warehouse Full Remove all entities from bin & press PPTL":"Warehouse Full Remove all entities from bin & press PPTL","Enter Quantity":"Enter Quantity","Are you sure you want to cancel the exception?":"Are you sure you want to cancel the exception?","All scan and print will be cancelled. Confirm to cancel?":"All scan and print will be cancelled. Confirm to cancel?","Yes":"Yes","No":"No","Exception with entity reported":"Exception with entity reported","Please put entities with issues, in exception area":"Please put entities with issues, in exception area","Please put entities in IRT and Scan IRT Bin":"Please put entities in IRT and Scan IRT Bin","Wrong Scan. Unrecognized barcode.":"Wrong Scan. Unrecognized barcode.","PPS is closed":"PPS is closed","NEST MAX":"NEST MAX","STACK MAX":"STACK MAX","DO NOT STACK":"DO NOT STACK","FRAGILE":"FRAGILE","Length of {0} should not be greater than {1}":"Length of {0} should not be greater than {1}","Scan {0} packs":"Scan {0} packs","Scan {0} sub packs":"Scan {0} sub packs","Press PPTL":"Press PPTL","Pack Scan Successful":"Pack Scan Successful","Scan {0} more packs and place in bin {1}":"Scan {0} more packs and place in bin {1}","Scan {0} more sub packs and place in bin {1}":"Scan {0} more sub packs and place in bin {1}","Put pack list in trolley and press PPTL to confirm":"Put pack list in trolley and press PPTL to confirm","Scan damaged entity":"Scan damaged entity","Damaged Quantity":"Damaged Quantity","Wrong Scan. Entity not present in Database":"Wrong Scan. Entity not present in Database","Sum of good, missing and damaged should be equal to {0}":"Sum of good, missing and damaged should be equal to {0}","Last item scan will be cancelled. Do you want to continue?":"Last item scan will be cancelled. Do you want to continue?","Continue":"Continue","Bin full":"Bin full","Please put entities which have issues in exception area":"Please put entities which have issues in exception area","Unscannable":"Unscannable","Invalid Event.Expecting PPTL button press":"Invalid Event.Expecting PPTL button press","Remove Tote from bin & Press PPTL to confirm no Items Remaining":"Remove Tote from bin & Press PPTL to confirm no Items Remaining","Wrong entity scan.Please scan the correct entity":"Wrong entity scan.Please scan the correct entity","Physically Damaged entity reported.":"Physically Damaged entity reported.","Entity entry successful":"Entity entry successful","Bin scan successful":"Bin scan successful","Physically Damaged Reported should equal Scanned Quantity":"Physically Damaged Reported should equal Scanned Quantity","SKU not present in Database.":"SKU not present in Database.","Extra entity scan found.":"Extra entity scan found.","Container Already Scanned.":"Container Already Scanned.","Invalid Entity Scanned.":"Invalid Entity Scanned.","Quantity of Physically damaged entities scanned is less.":"Quantity of Physically damaged entities scanned is less.","Error":"Error","Waiting for Bins to be Cleared at Pick Front":"Waiting for Bins to be Cleared at Pick Front","Processing Next Pick from Rack ":"Processing Next Pick from Rack ","Scan Damaged Entity":"Scan Damaged Entity","Warehouse Full":"Warehouse Full","Scan a packing box and keep in bin {0}":"Scan a packing box and keep in bin {0}","Pick box from MSU and press PPTL on Bin {0}":"Pick box from MSU and press PPTL on Bin {0}","Extra details entered are incorrect.Please enter correct details":"Extra details entered are incorrect.Please enter correct details","Packing box scan failed":"Packing box scan failed","Wrong entity Scanned. Bin Scan Expected.":"Wrong entity Scanned. Bin Scan Expected.","Bin Already Scanned":"Bin Already Scanned","Issue with Pack":"Issue with Pack","Issue with Sub pack":"Issue with Sub pack","Issue with MPU":"Issue with MPU","Space not available":"Space not available","Bad barcode on pack":"Bad barcode on pack","Bad barcode on sub pack":"Bad barcode on sub pack","Unexpected pack":"Unexpected pack","Pack missing":"Pack missing","Sub pack missing":"Sub pack missing","Damaged sub pack":"Damaged sub pack","Good pack":"Good pack","Good sub pack":"Good sub pack","Scan not Allowed. PPS close/force close or profile change requested.":"Scan not Allowed. PPS close/force close or profile change requested.","Pack scan successfully":"Pack scan successfully","Sub-Pack scan successfully":"Sub-Pack scan successfully","Scan MPU":"Scan MPU","Scan {0} or {1}":"Scan {0} or {1}","Continue scanning {0} and {1}":"Continue scanning {0} and {1}","Enter Quantity of Unscannable {0}":"Enter Quantity of Unscannable {0}","Wait for MPU":"Wait for MPU","No Sub-Packs to reconcile":"No Sub-Packs to reconcile","Pack Unscannable":"Pack Unscannable","Sub-Pack Unscannable":"Sub-Pack Unscannable","Damage Barcode":"Damage Barcode","Packs":"Packs","Sub-Packs":"Sub-Packs","Scan Small Box":"Scan Small Box","Scan {0} Box and Place in Bin {1}":"Scan {0} Box and Place in Bin {1}","Scan {0} Small Box and Place in Bin {1}":"Scan {0} Small Box and Place in Bin {1}","Put Pack list in trolley and press PPTL to confirm":"Put Pack list in trolley and press PPTL to confirm","Done":"Done","No more entities to be scanned":"No more entities to be scanned","Type":"Type","Serial Number":"Serial Number","Quantity":"Quantity","Wrong Bin Scanned. Scan Expected for Roll Cage ready for undocking.":"Wrong Bin Scanned. Scan Expected for Roll Cage ready for undocking.","Issues with {0}":"Issues with {0}","Scan {0} damaged entities":"Scan {0} damaged entities","Scan {0} {1}":"Scan {0} {1}","Scan {0} {1} and place in Bin {2}":"Scan {0} {1} and place in Bin {2}","Enter Unscannable Tote Quantity":"Enter Unscannable Tote Quantity","Enter items that can fit in the bin":"Enter items that can fit in the bin","{0} scan successfully":"{0} scan successfully","Place Tote in Bin {0} and Press PPTL":"Place Tote in Bin {0} and Press PPTL","Tote in use at front seat":"Tote in use at front seat","Waiting for Tote to be associated from back":"Waiting for Tote to be associated from back","{0} scan successful":"{0} scan successful","Waiting for put_away to complete from front":"Waiting for put_away to complete from front","Tote cannot be associated with bin of another seat":"Tote cannot be associated with bin of another seat","Waiting for put away to complete from front":"Waiting for put away to complete from front","Scan checklist items to proceed":"Scan checklist items to proceed","Unexpected Entity In {0}":"Unexpected Entity In {0}","Scan a {0}":"Scan a {0}","Scan a {0} or Press PPTL":"Scan a {0} or Press PPTL","Press PPTL to clear the Bin":"Press PPTL to clear the Bin","Place {0} in Bin and scan the Bin barcode":"Place {0} in Bin and scan the Bin barcode","Waiting for order to be completed from front":"Waiting for order to be completed from front","Waiting for {0} to be associated from back":"Waiting for {0} to be associated from back","{0} scan successful.":"{0} scan successful.","Excess Entity in {0} recorded.":"Excess Entity in {0} recorded.","{0} unexpected. {0} in use in another location":"{0} unexpected. {0} in use in another location","{0} unexpected. Service request not present in {0}.":"{0} unexpected. Service request not present in {0}.","Invalid resource.":"Invalid resource.","{0} unexpected. Service request not in correct state.":"{0} unexpected. Service request not in correct state.","{0} unexpected. Empty {0} scanned.":"{0} unexpected. Empty {0} scanned.","{0} unexpected. Scanned {0} does not exist.":"{0} unexpected. Scanned {0} does not exist.","{0} unexpected. Service Request does not exist.":"{0} unexpected. Service Request does not exist.","Wrong scan. Please Scan item or {0}":"Wrong scan. Please Scan item or {0}","{0} unexpected. {0} is not empty.":"{0} unexpected. {0} is not empty.","Bin barcode of other PPS scanned":"Bin barcode of other PPS scanned","Scan {0}":"Scan {0}","Scan {0} which has excess item":"Scan {0} which has excess item","Scan {0} first and then scan item":"Scan {0} first and then scan item","Invalid {0} scanned":"Invalid {0} scanned","{0} Close Cancelled":"{0} Close Cancelled","{0} docked successfully":"{0} docked successfully","Are You Sure You Want to Close {0}?":"Are You Sure You Want to Close {0}?","Scan {0} or Stage PPS Bin":"Scan {0} or Stage PPS Bin","Enter Unscannable {0} Quantity":"Enter Unscannable {0} Quantity","Place {0} in Bin {1} and Press PPTL":"Place {0} in Bin {1} and Press PPTL","{0} already opened. Scan some other {1}":"{0} already opened. Scan some other {1}","{0} already closed. Scan some other {1}":"{0} already closed. Scan some other {1}","Close current {0} first":"Close current {0} first","Wrong entity scanned. Please scan {0}":"Wrong entity scanned. Please scan {0}","{0} excess entities found in {0}. Please put entities in exception area and confirm":"{0} excess entities found in {0}. Please put entities in exception area and confirm","Entity not expected in {0}. Please put entity in exception area and confirm":"Entity not expected in {0}. Please put entity in exception area and confirm","Expecting {0} closure.":"Expecting {0} closure.","{0} not present in database.":"{0} not present in database.","{0} matched .":"{0} matched .","Place the {0} back in bin {1} and press PPTL":"Place the {0} back in bin {1} and press PPTL","Take out the {0} from bin {1} and scan entity":"Take out the {0} from bin {1} and scan entity","Remove {0} from bin {1} & Press PPTL to confirm no Items Remaining":"Remove {0} from bin {1} & Press PPTL to confirm no Items Remaining","Press PPTL or Scan a {0}":"Press PPTL or Scan a {0}","Select Bin which does not require {0}":"Select Bin which does not require {0}","Select Bin to disassociate {0}":"Select Bin to disassociate {0}","{0} close successful.":"{0} close successful.","{0} not closed.":"{0} not closed.","Excess item in {0} recorded. Now press PPTL":"Excess item in {0} recorded. Now press PPTL","Cancelled excess entity in {0}":"Cancelled excess entity in {0}","Cancelled invalid entity in {0}":"Cancelled invalid entity in {0}","Invalid entity in {0} recorded":"Invalid entity in {0} recorded","Scan {0} to associate with Bin":"Scan {0} to associate with Bin","Press PpsBin Button Or Scan a {0}":"Press PpsBin Button Or Scan a {0}","{0} is already scanned.Expecting pptl scan.":"{0} is already scanned.Expecting pptl scan.","{0} are not required.Please don't scan {1} barcode":"{0} are not required.Please don't scan {1} barcode","Please scan the {0} first and then scan pptl barcode":"Please scan the {0} first and then scan pptl barcode","{0} scanned.Expecting pptl scan.":"{0} scanned.Expecting pptl scan.","Pptl scan not allowed. {0} are not required":"Pptl scan not allowed. {0} are not required","{0} didn't get associated":"{0} didn't get associated","After scannning {0} barcode, please scan pptl barcode":"After scannning {0} barcode, please scan pptl barcode","No {0} associated. Pease keep {0} in the Bin and then scan":"No {0} associated. Pease keep {0} in the Bin and then scan","No {0} scanned":"No {0} scanned","{0} cancelled":"{0} cancelled","{0} already associated with ppsbin":"{0} already associated with ppsbin","Please press ppsbin button which does not have any {0} associated":"Please press ppsbin button which does not have any {0} associated","{0} assigned successfully to ppsbin {0}":"{0} assigned successfully to ppsbin {0}","{0} are not required":"{0} are not required","{0} could not be reserved as already reserved":"{0} could not be reserved as already reserved","Exception invalid as {0} are not required with this PPS":"Exception invalid as {0} are not required with this PPS","Override {0} not possible":"Override {0} not possible","Barcode didn't match with current {0} barcode":"Barcode didn't match with current {0} barcode","Incorrect {0} barcode scanned. Please try again":"Incorrect {0} barcode scanned. Please try again","System not configured for {0}":"System not configured for {0}","{0} association required":"{0} association required","{0} association failed. Repeat scan operation":"{0} association failed. Repeat scan operation","{0} are anyway not required.Please proceed further":"{0} are anyway not required.Please proceed further","{0} already associated with bin {0}":"{0} already associated with bin {0}","{0} in use at front seat":"{0} in use at front seat","{0} cannot be associated with bin of another seat":"{0} cannot be associated with bin of another seat","{0} assigned successfully to bin":"{0} assigned successfully to bin","{0} disassociated from Bin":"{0} disassociated from Bin","{0} associated with another bin":"{0} associated with another bin","Please scan the {0} first and then scan PPTL barcode":"Please scan the {0} first and then scan PPTL barcode","Override {0} Exception cannot be raised for bins with {1} associated":"Override {0} Exception cannot be raised for bins with {1} associated","PPTL scan not allowed. System not configured for {0}":"PPTL scan not allowed. System not configured for {0}","Scan pptl barcode after scannning {0} barcode":"Scan pptl barcode after scannning {0} barcode","{0} scanned is not opened":"{0} scanned is not opened","{0} already scanned":"{0} already scanned","Wrong entity Scanned. {0} Scan Expected.":"Wrong entity Scanned. {0} Scan Expected.","Disassociate {0}":"Disassociate {0}","Override {0} Required":"Override {0} Required","Scan slot":"Scan slot","Scan or Enter the {0} barcode to reprint":"Scan or Enter the {0} barcode to reprint","{0} scan cancelled.":"{0} scan cancelled.","{0} scanned is not idle":"{0} scanned is not idle","Scan {0} first and then scan rack":"Scan {0} first and then scan rack","{0} already associated with slot.Scan empty slot":"{0} already associated with slot.Scan empty slot","Invalid {0} scan":"Invalid {0} scan","{0} close successful":"{0} close successful","Scan new {0}":"Scan new {0}","Scan item or {0}":"Scan item or {0}","Additional Information":"Additional Information","Selected UOM: ":"Selected UOM: ","Close":"Close","Select Value":"Select Value","{0} already associated with bin":"{0} already associated with bin","Previous Pick Details":"Previous Pick Details","Previous Put Details":"Previous Put Details","Dock {0}":"Dock {0}","Scan {1} or Dock {0}":"Scan {1} or Dock {0}","Undock {0}":"Undock {0}","Scan a Tote":"Scan a Tote","Scan {0} location":"Scan {0} location","Pick complete. Waiting for next pick.":"Pick complete. Waiting for next pick.","Missing barcode scanned. Waiting for confirmation.":"Missing barcode scanned. Waiting for confirmation.","{0} cannot be associated with inactive bin":"{0} cannot be associated with inactive bin","{0} cleared":"{0} cleared","Scan load unit and gently push it away":"Scan load unit and gently push it away","Box Type":"Box Type","Location":"Location","Place Box":"Place Box","Scan":"Scan","Checklist":"Checklist","Scan {0} Serial":"Scan {0} Serial","Scan {0} Serial to Open":"Scan {0} Serial to Open","Scan carrying unit and gently push it away":"Scan carrying unit and gently push it away","Pick all items from slot {0} and scan slot":"Pick all items from slot {0} and scan slot","{0} undocked successfully":"{0} undocked successfully","Pick all items from slot and scan slot":"Pick all items from slot and scan slot","NO ITEM FOUND":"NO ITEM FOUND","Item details":"Item details","Item Search":"Item Search","Event":"Event","Expectation Id":"Expectation Id","Item Location":"Item Location","UOM Details":"UOM Details","Excess Quantity":"Excess Quantity","Total: ":"Total: ","Scan excess entities":"Scan excess entities","Dis-associate":"Dis-associate","Data capture failed":"Data capture failed","No entities to reconcile":"No entities to reconcile","LOGIN":"LOGIN","Language":"Language","Username":"Username","Login to Butler System":"Login to Butler System","Login to":"Login to","Enter username":"Enter username","Enter password":"Enter password","Scan ID card to login.":"Scan ID card to login.","{0} Unscannable":"{0} Unscannable","Scan entities":"Scan entities","Waiting for {0} to be docked":"Waiting for {0} to be docked","Put Pack list in {0} and press PPTL to confirm":"Put Pack list in {0} and press PPTL to confirm","Please scan PPTL which has excess item":"Please scan PPTL which has excess item","Please put unscannable tote in exception area":"Please put unscannable tote in exception area","Sum of good and exception quantity should be equal to {0}":"Sum of good and exception quantity should be equal to {0}","{0} Unscannable entities recorded. WMS notified":"{0} Unscannable entities recorded. WMS notified","Scan item or enter barcode details":"Scan item or enter barcode details","{0} unexpected. Service request not present in {1}.":"{0} unexpected. Service request not present in {1}.","MSU Sent":"MSU Sent","This put request is not supported in current flow":"This put request is not supported in current flow","Service request not in correct state":"Service request not in correct state","Multiple Service request found":"Multiple Service request found","Unknown error":"Unknown error","Scan item":"Scan item","Item unexpected. No service request found for this item":"Item unexpected. No service request found for this item","Scan entity":"Scan entity","Put entity in slot and scan slot to confirm":"Put entity in slot and scan slot to confirm","Excess detected, remove '{0}' items and confirm again":"Excess detected, remove '{0}' items and confirm again","Invalid {0}":"Invalid {0}","{0} closed":"{0} closed","Unknown barcode":"Unknown barcode","Unexpected entity":"Unexpected entity","Excess quantity detected, remove '{0}' quantity and confirm again":"Excess quantity detected, remove '{0}' quantity and confirm again","Call for Help":"","Tote Unscannable":"","{0} unexpected. Scanned {1} does not exist.":"","HEAVY":"","Scan tote":"","Items In Bin":"","Scan tote location":"","Send MSU":"","Put and confirm":"","Close Cart":"","Dock Cart":"","Are you sure that all the items in the cart were scanned?":"","The following {0} items were found missing":"","OUTER":"","INNER":"","Wrong scan. Please Scan tote":""};module.exports=obj

},{}],251:[function(require,module,exports){
var obj={"Scan item / Stage PPS Bin":"Scanner l'élément / Organiser la Corbeille PPS","Scan Tote to associate with Bin":"Scannez le Sac pour le mettre dans la Corbeille","Press PpsBin Button Or Scan a Tote":"Appuyez sur le Bouton Corbeille Pps ou Scannez un Sac","User Name":"Nom d'Utilisateur","Password":"Mot de passe","Are you sure you want to close Tote":"Êtes-vous sûr de vouloir fermer le Sac","Details":"Détails","Scan {0} items":"Scannez {0} les éléments","Scan box barcode":"Vérifiez le code-barres de la boîte","Press PpsBin {0} to remove items":"Appuyez sur la Corbeille Pps {0} pour enlever les éléments","Tote is already scanned.Expecting pptl scan.":"Le sac a déjà été scanné. En Attendant le scan du pptl.","Totes are not required.Please don't scan tote barcode":"Les sacs ne sont pas obligatoires. Veuillez ne pas scanner le code-barres du sac","Wrong PPS bin scanned":"Erreur de scan de poubelle PPS","Please scan the tote first and then scan pptl barcode":"Veuillez scanner le sac d'abord, puis scannez le code-barres du pptl","Tote scanned.Expecting pptl scan.":"Sac scanné. En Attente du scan pptl.","Pptl scan not allowed. Totes are not required":"Scan du Pptl non autorisé. Les sacs ne sont pas obligatoires","Tote didn't get associated":"Le sac n'est pas associé","After scannning tote barcode, please scan pptl barcode":"Après avoir scanné le code-barres du sac, veuillez scanner le code-barres du pptl","Wrong Ppsbin button pressed.Please press those buttons having color blue":"Le mauvais bouton corbeille Pps a été choisi. Veuillez appuyer sur les boutons de couleur bleue","Please complete pickback for pending bin and then proceed":"Veuillez terminer le ramassage de la corbeille en cours, et continuez.","No totes associated. Pease keep totes in the Bin and then scan":"Pas de sacs associés.  Veuillez conserver les sacs dans la Corbeille, puis scannez-les","Documents printed Successfully":"Documents imprimés avec Succès","No tote scanned":"Pas de sac scanné","Tote cancelled":"Sac annulé","Tote already associated with ppsbin":"Le sac est déjà associé à la corbeille pps","Incorrect tote barcode scanned. Please try again":"Scan du code-barres incorrect. Veuillez réessayer","Please press PPTL button which does not have any totes associated":"Veuillez appuyez sur le bouton PPTL qui n'a pas de sac associé","Tote assigned successfully to ppsbin {0}":"Sac attribué avec succès à la corbeille pps {0}","Bin {0} items removed successfully":" {0} Eléments de la corbeille supprimés avec succès","Totes are not required":"Les sacs ne sont pas obligatoires","Wrong Barcode scanned":"Code-barres scanné Faux","Tote could not be reserved as already reserved":"Le sac ne pourrait pas être réservé puisqu'il est déjà réservé","Exception invalid as totes are not required with this PPS":"Exception non valide,  car les sacs ne sont pas obligatoires avec ce PPS","Override tote not possible":"Remplacement du sac impossible","Scanning pptl barcode not allowed":"Scan du code-barres pptl non autorisé","Please press those buttons having color blink_blue":"Veuillez appuyez sur les boutons de couleur blink_blue","Unhandled event ocurred":"Un incident non traité s'est produit","Barcode didn't match with current tote barcode":"Le code-barres ne correspondait pas au code-barres actuel du sac","Testing configuration {0} and {1}":"Test de configuration {0} et {1}","Processing. Please wait and scan later":"En cours de traitement. Veuillez patientez et scannez plus tard","Waiting for rack":"En attente de stockage","Current PPS mode does not support back seat. Please logout.":"Le mode PPS actuel ne prend pas en charge le siège arrière. Veuillez vous déconnectez.","Scan items and place in bin {0}":"Scannez les éléments et placez-les dans la poubelle {0}","Stage Bin or Scan Entity":"Organisez la corbeille ou scannez l'entité","Place Entity in Bin and Press PPTL":"Placez l'entité dans la corbeille et Appuyez sur PPTL","Are You Sure You Want to Close Tote?":"Êtes-vous Sûr de Vouloir Fermer le Sac","Scan Tote or Stage PPS Bin":"Scannez le Sac ou Organisez la Corbeille PPS","Item Not Expected in Tote":"Élément non Attendu dans le Sac","Tote already opened. Scan some other tote":"Sac déjà ouvert. Scannez un autre sac","Tote already closed. Scan some other tote":"Sac déjà fermé. Scannez un autre sac","No matching tote found":"Pas de concordance de sac trouvé","Wrong entity scanned. Please scan tote":"Entité scannée fausse. Veuillez scanner le sac.","No entities added yet. Scan entities and then press PPTL":" Aucune entité n'a encore été ajoutée. Scannez les entités et appuyez ensuite sur PPTL","Wrong entity scanned. Please scan Container/Item.":"Entité scannée fausse. Veuillez scanner le Conteneur/Élément.","Cannot cancel scan. No scanned box found":"Impossible d'annuler le scan. Aucune boîte scannée trouvée","Entity scan not expected. Waiting for PPTL press":"Scan de l'entité non attendu. En attente pour appuyer sur PPTL","Bin selected for put. Cannot be staged":"Corbeille sélectionnée pour déposer. Impossible d'être organisée","SKU not present in database. Put into IRT bin.":"SKU n'est pas présent dans la base de données. Déposez dans la corbeille IRT.","No free bins. Please scan later":"Pas de corbeilles libres. Veuillez scanner plus tard","Wrong PPTL pressed. Please try another":"PPTL appuyé incorrect. Veuillez en essayer un autre","Please put entities in exception area and confirm":"Veuillez déposer les entités en zone d'exception et confirmez","Wrong bin chosen.Try selecting another bin":"Corbeille choisie fausse. Essayez de sélectionner une autre corbeille.","Please scan same SKU to complete this exception":"Veuillez scanner le même SKU pour terminer cette exception","Entity scan not expected.":"Scan de l'entité non attendu.","Tote not present in database.":"Sac non présent dans la base de données.","Tote has been opened.Scan all items in tote and then scan tote again to close it":"Le sac a été ouvert. Scannez tous les éléments du sac, puis scannez encore le sac pour le fermer","PPS is in paused mode. Cannot process new entity. Try after some time":"PPS est en mode pause. Impossible de traiter une nouvelle entité. Essayez après un certain temps. ","Cancel scan successful.":"Annulation du scan réussie.","Tote close successful.":"Sac fermé avec succès.","Tote not closed.":"Sac non fermé.","Entity scan successful.":"Entité scannée avec succès.","PPTL press successful":"PPTL appuyée avec succès","Data capture valid":"Capture de données valide","Excess item in tote recorded. Now press PPTL":"Élément en excès dans le sac enregistré. Appuyez Maintenant sur PPTL","Excess item in tote recorded.":"Excédent d'élément dans le sac enregistré.","{0} unscannable entities recorded. WMS notified":"{0} entités non scannées enregistrées. WMS notifié","{0} extra entities recorded in bin. WMS notified":"{0} Entités supplémentaires enregistrées dans la corbeille. WMS notifié","{0} oversized entities recorded.WMS notified":"{0} entités surdimensionnées enregistrées. WMS notifié","{0} Physically damaged entity recorded.WMS notified":"","Exception cancelled":"Exception annulée","Box with same serial number already exists in the warehouse":"Une boîte avec le même numéro de série existe déjà dans l'entrepôt","Entity already scanned.Waiting for PPTL press":"Entité déjà scannée. En attente d'appuyer sur PPTL","No bins available to stage":"Pas de corbeille disponible à organiser","Bin already staged. Ignoring event":"Corbeille déjà organisée. Ignorer l'événement","Bin empty. Cannot be staged":"Corbeille vide. Ne peut pas être organisée","Scan Box/Items from Slot":"Scannez la Boîte/Éléments issus de la Fente","Scan Remaining Item In Box":"Scannez l'Élément Restant dans la Boîte","Last Box Scan Completed! Scan Remaining Box/Items":"Dernier Scan de la Boîte Terminé! Scannez la boîte restant/Éléments ","Status To Reconcile":"Statut à Rapprocher","This box belongs to some other SKU in the slot.Put it back.Scan next box.":"Cette boîte appartient à un autre SKU dans la Fente. Remettez-la. Scannez la boîte suivante.","This box does not belong to this slot. Remove the box and put in exception area.":"Cette boîte n'appartient pas à cette Fente. Retirez la boîte et mettez dans la zone d'exception.","Waiting for MSU":"En attente de MSU","Wrong Barcode":"Code-barres Faux","Box Scan successful":"Scan de la Boîte réussi.","Item Scan successful":"Scan de l'Élément réussi.","Item scan successful":"Scan de l'Élément réussi.","Data capture failed at item {0}":"La capture de données a échoué à l'élément {0}","Bin {0} selected":"Corbeille {0} sélectionnée","Bin {0} unselected":"Corbeille {0} Non sélectionnée","Connection is closed. Connecting...":"La connexion est fermée. Connexion en cours…","Extra item found please put back item in Exception bin":"Élément supplémentaire trouvé veuillez remettre l'Élément dans la corbeille d'Exception","Enter Unscannable Entity Quantity":"Saisissez la quantité de l'entité non scannable","Scan Oversized Entity Quantity":"Scannez la Quantité d'Entité Surdimensionnée","Please Select The Bin With Excess Entity":"Veuillez Sélectionner La Corbeille Avec Entité En Excédent","Enter Quantity of Excess Entities":"Entrez la quantité d'entités excédentaires","Place Entity in Slot and Scan More":"Placez l'Entité dans la Carte et Scannez","Scan Slot to Confirm":"Scannez la Fente à confirmer","Wait for MSU":"En attente de MSU","Scan Entity From Bin {0}":"Scannez l'Entité à partir de la Corbeille {0}","Enter Good Quantity to be Put into Slot":"Entrez la Bonne Quantité à Placer dans la Fente","Put Back Entities in the PPS Bin":"Remettez les Entités dans la corbeille PPS","Confirm MSU Release":"Confirmez la version MSU","Scan Slot":"Scannez la Fente","Scan {0} Items":"Scannez {0} Éléments","Cancel audit successful.Audit Restarted":"Annulation de l'audit réussie. Audit redémarré","Scan Box":"Scannez la Boîte","Scan {0} Items and Place in Bin {0}":"Scanner {0} Éléments et Organiser dans la Corbeille {0}","Press PPTL to confirm":"Appuyez sur PPTL pour confirmer","Scan Tote to Associate with Bin":"Scannez le Sac pour l'Associer avec la corbeille","Press PPTL or Scan a Tote":"Appuyez sur PPTL ou Scannez un Sac","Press bin PPTL to remove entities":"","Press bin PPTL":"Appuyez sur la corbeille PPTL ","Press PPTL for bin {0} to confirm":"Appuyez sur PPTL pour la corbeille  {0} à confirmer","Press print button to proceed":"Appuyez sur le bouton impression pour continuer.","Select Bin to skip print":"Sélectionnez la Corbeille pour ignorer l'impression","Select Bin which does not require tote":"Sélectionnez la Corbeille qui ne nécessite pas de sac","Select Bin to disassociate tote":"Sélectionner la Corbeille pour se dissocier du sac.","Pick complete. Waiting for next rack.":"Choix terminé. En attente de la  prochaine étagère.","Location scan successful":"Scan de l'emplacement réussi","Box scan successful":"Scan de la Boîte réussi","Cancel scan successful":"Annulation du scan réussie.","Expecting MSU release confirmation from GUI, got invalid event.":"En attente de la confirmation de la version MSU de GUI, a obtenu un événement non valide.","Data capture failed at item":"La capture de données a échoué pour l'élément","Wrong slot location scanned. Please try again":"Emplacement de carte scanné incorrect. Veuillez réessayer","Wrong box scanned. Please try again":"Boîte scannée fausse. Veuillez réessayer","Scan a box first":"Scannez une boîte d'abord","Wrong PPTL pressed. Please press correct PPTL":"PPTL mal appuyé. Veuillez appuyez sur PPTL correctement. ","Picked quantity more than expected. Put extra items back in MSU":"Quantité choisie plus grande que prévu. Remettre les articles en excès dans MSU","Wrong item quantity update":"Mauvaise mise à jour de la quantité d'élément","Wrong item scanned. Please scan correct item":"Mauvais élément scanné. Veuillez scanner l'élément correct","Waiting for MSU. Please wait and scan later":"En attente de MSU. Veuillez patientez et scanner plus tard","System Error. Scanned entity details not available at this time":"Erreur système. Détails de l'entité scannée non disponibles pour le moment","No PPS bins empty. Please empty them from Pickback":"Pas de corbeilles PPS vides. Veuillez les vider depuis Pickback","PPS mode change requested:scan not allowed":"Changement de mode PPS requis : scan non autorisé","PPS mode change requested:auto staging all bins":"Changement de mode PPS requis : organisation automatique de toutes les corbeilles","PPTL press not expected":"PPTL appuyé non attendu","Scan not expected":"Scan non attendu","Barcode didn't match the current tote barcode":"Code-barre ne correspondait pas au code-barre actuel du sac","System not configured for totes":"Système non configuré pour les sacs","Invalid Exception for this configuration":"Exception invalide pour cette configuration","No tote associated. Please keep a tote in bin and scan":"Pas de sac associé. Veuillez garder un sac dans la corbeille et scanner","Wrong PPTL pressed":"PPTL mal appuyé","Totes are anyway not required.Please proceed further":"Les sacs ne sont exigés en aucune façon. Veuillez continuer plus loin","Tote scan cancelled":"Scan du sac annulé","Documents printed successfully":"Documents imprimés avec succès","Order removed successfully from bin {0}":"Commande retirée avec succès de la corbeille {0}","Tote assigned successfully to bin":"Sac attribué avec succès à la corbeille","Tote association failed. Repeat scan operation":"L'Association de sac a échoué. Répéter l'opération de scan","Tote associated with another bin":"Sac associé à une autre corbeille","Please scan PPTL barcode":"Veuillez scanner le code-barre PPTL","Tote disassociated from Bin":"Sac dissocié de la corbeille","Please complete process for pending bin and then proceed":"Veuillez terminer la procédure pour la corbeille en attente. Ensuite, continuez.","Tote already reserved":"Sac déjà réservé","Wrong barcode scanned":"Code-barre incorrect scanné","Please scan the tote first and then scan PPTL barcode":"Veuillez scanner d'abord le sac. Ensuite, scanner le code-barre PPTL","Override Tote Exception cannot be raised for bins with totes associated":"L'Exception sac de remplacement ne peut être soulevée pour les corbeilles avec les sacs associés","PPTL scan not allowed. System not configured for tote":"Scan PPTL non autorisé. Système non configuré pour sac","PPTL scan not allowed":"Scannage PPTL non autorisé","Tote scan expected":"Scan de sac attendu","Entity scanned is not from bin {0}. Replace and scan from bin {1}":"L'Entité scannée n'est pas issue de la corbeille {0}. Remplacer et scanner à partir de la corbeille {1}","Wrong entity scanned":"Entité scannée fausse","Waiting for MSU scan. Please scan entity later.":"En attente du scan MSU. Veuillez scanner l'entité ultérieurement","Expected quantity exceeded.":"Quantité attendue dépassée.","Wrong scan! Entity scan expected but slot barcode scanned.":"Scan incorrect! Scan de l'entité attendu mais le code-barre de la carte est scanné.","Actual put quantity not equal to the sum of Good and Expection quantity.":"Quantité mise réelle pas égale à la somme des quantités Marchandises et Attente","Actual put quantity less than than revised quantity.":"Quantité mise réelle inférieure à la quantité modifiée","Wrong slot scanned":"Carte scannée fausse","Entity scan successful":"Scan de l'entité réussi","Slot scan successful":"Scan de carte réussi","Damaged and missing entity recorded.":"Entité manquante et endommagée enregistrée.","Space unavailable recorded.":"Espace indisponible enregistré","Please put entity in exception area and confirm":"Veuillez mettre l'entité dans la zone d'exception et confirmez","Entity not expected in tote. Please put entity in exception area and confirm":"Entité imprévue en sac. Veuillez mettre l'entité dans la zone d'exception et confirmez","{0} excess entities found in tote. Please put entities in exception area and confirm":"{0} entités excédentaires trouvées dans le sac. Veuillez mettre les entités dans la zone d'exception et confirmez","Cancelled excess entity in tote":"Entité excédentaire en sac annulée","Cancelled invalid entity in tote":"Entité invalide en sac annulée","Invalid entity in tote recorded":"Entité invalide en sac enregistrée","Wrong enitity scanned. Expecting scan from bin {0}":"Entité incorrecte scannée. En attente de scan de la corbeille {0}","PPTL Management":"Gestion PPTL ","Scanner Management":"Gestion Scanner","Entity Oversized":"Entité Surdimensionnée","Entity Unscannable":"Entité Non Scannable","Extra Entities in Bin":"Entités Supplémentaires dans la Corbeille","Entity Missing / Unscannable":"Entité Manquante/Non scannable","Space Not Available":"Espace Non Disponible","Mising Box":"Boîte Manquante","Disassociate Tote":"Dissocier le Sac","Overide Tote Required":"Sac de remplacement exigé","Reprint":"Imprimer à nouveau","Skip Print":"Ignorer Impression","Peripheral added successfully":"Périphérique ajouté avec succès","Peripheral not added":"Périphérique non ajouté","Scan Box or Items":"Scanner la Boîte ou les Éléments","Check Count":"Vérifier le Nombre","You cannot enter value more than 9999":"Vous ne pouvez pas entrer de valeur supérieure à 9999","Please enter a quantity greater than 0":"","Place extra entity in Exception area.":"Veuillez mettre les entités supplémentaires dans la zone d'exception","Sum of missing, good and damaged should be equal to {0}":"Somme des quantités manquantes, bonnes et endommagées doit être égale à {0}","Scan excess item quantity":"","Quantity should be less than or equal to {0}":"La quantité doit être inférieure ou égale à {0}","You are not allowed to keyed in the quantity from the numpad. Force Scan is required.":"Vous n'êtes pas autorisé à entrer la quantité à partir du pavé numérique. Force Scan est exigé","Waiting for Bins to be Cleared at Pick Back":"En attente que les corbeilles soient dégagées au Pick Back","Peripheral deleted successfully":"Périphérique effacé avec succès","Peripheral not deleted successfully":"Périphérique non effacé avec succès","Cancel Exception":"Annuler Exception","Cancel Scan":"Annuler Scan","Finish":"Terminer","Back":"RETOUR","OK":"OK","FINISH":"TERMINER","Print":"Imprimer","Skip Printing":"Ignorer Impression","Override":"Remplacer","Add Scanner":"Ajouter le Scanner","Edit Details":"Modifier les Informations","NEXT":"SUIVANT","CONFIRM":"CONFIRMER","Stage":"Organiser","Stage All":"Organiser Tout","BACK":"RETOUR","CLOSE":"FERMER","Cancel":"Annuler","Confirm":"Confirmer","TOTE":"SAC","Clear All":"Effacer Tout","Submit":"Soumettre","Exceptions":"Exceptions","Next":"","Bin":"Corbeille","Selected":"Sélectionné","Unselected":"Non Sélectionné","System is Idle":"Le Système est inactif","CURRENT SLOT":"CARTE ACTUELLE","Box Serial Numbers":"Numéros de série de la Boîte","No Items To Reconcile":"Pas d'éléments à recouper","List Of Items To Reconcile":"Liste d'éléments à recouper","View More":"Voir Davantage","Please put exception entities in exception area":"","Please put exception entities in IRT bin and scan the bin":"","Product Information":"Information Produit","Bin Info":"Informations Corbeille","Associate tote with bin":"Associer le sac à la Corbeille","Extra Entity Found":"Entité Supplémentaire Trouvée","Perform Action":"Réaliser l'Action","Input Extra Details":"Saisir les Informations Supplémentaires","Expected":"Attendu","Actual":"Réel","Bin ID":"Identifiant Corbeille","Barcode":"Code-barre","Peripheral ID":"Identifiant Périphérique","Actions":"Actions","Scanner ID":"Identifiant Scanner","Delete":"Effacer","Product SKU":"Produit SKU","Expected Quantity":"Quantité Attendue","Actual Quantity":"Quantité Réelle","Missing":"Manquant","Extra":"Supplément","Barcode Damage":"Dommage Code-barre","Item in Box Serial Numbers":"Elément de Numéros de série de Boîte ","Loose Items":"Détacher les éléments ","Loose Items Serial Numbers":"Détacher les numéros de série d'Eléments            ","Product Details":"Coordonnées du Produit","Product Name":"Nom du Produit","Product Desc":"Description du Produit","Product Type":"Type de Produit","Tote already associated with bin {0}":"Sac déjà associé à la corbeille {0}","Entity Scan not expected. Press PPTL":"Scan de l'entité non requis. Appuyez sur PPTL","Item Missing/Unscannable":"Élément Manquant/Non scannable","Missing Box":"Boîte Manquante","Override Tote Required":"Sac de remplacement exigé","Items In Box Unscannable":"Éléments dans boîte non scannable","Box Unscannable":"Boîte Non Scannable","Loose Items Unscannable":"Détacher les éléments Non Scannables","Please put unscannable entities in exception area.":"Veuillez mettre les entités non scannables dans la zone d'exception","Please put oversized entities in exception area.":"Veuillez mettre les entités surdimensionnées dans la zone d'exception","Take the Items out from the Slot":"Retirer les éléments de la Fente","Pptl press not expected.":"PPTL appuyé non attendu","Scan not expected.":"Scan non attendu","Wrong scan.Expecting item scan.":"Scan incorrect. En attente de scan d'élément.","Wrong scan.Expecting container scan.":"Scan incorrect. En attente de scan de conteneur.","Wrong scan.Expecting location scan.":"Scan incorrect. En attente de scan d'emplacement.","Scan Excess Entity Quantity":"Scan de la Quantité d'Entité Excédentaire","Entity already scanned.Confirm exception":"Entité déjà scannée. Confirmer exception","Exception":"Exception","Logout":"Déconnexion","Utility":"Fonctionnalité","EXCEPTION":"EXCEPTION","Good Quantity":"Bonne Quantité","Missing Quantity":"Quantité Manquante","Unscannable Quantity":"Quantité non Scannable","Remove Item":"Enlever Élément","Item Missing/Bad Barcode":"Elément manquant / mauvais code barre","Sum of missing and good quantity should be equal to {0}":"La Somme des quantités manquante et bonnes doit être égale à {0}","Login":"Connexion","Enter Username":"Entrer Nom d'Utilisateur","Enter Password":"Entrer Mot de Passe","Invalid credentials":"Identifiants invalides","Login not allowed. You're already logged in":"Connexion non autorisée. Vous êtes déjà connecté","Place Item in slot and scan more":"Placer l'élément dans la fente et scanner davantage","PPTL":"PPTL","Scan Slot Barcode":"Scan du Code-barre à Fente","Unexpected Item":"Élément Imprévu","Stage Bin or Scan Item":"Organiser la Corbeille et Vérifier l'Élément","Scan & Confirm":"Scanner et Confirmer","Scan Item From Bin":"Scanner l'Élément Depuis la corbeille","Scan Tote":"Scanner le Sac","Scan MSU Barcode":"Scanner Code-barre MSU","Scan Items":"Scanner les Éléments","Status":"Statut","Could not connect to PPS.Please try again.":"N'a pas pu se connecter à PPS. Veuillez réessayer","product_sku":"produit_ugs","type":"type","quantity":"quantité","item":"élément","box":"boîte","SKU not present in Database.Put in exception area":"UGS non présent dans la Base de Données. Mettre dans la zone d'exception. ","Please put extra entities in exception area.":"Veuillez mettre les entités supplémentaires dans la zone d'exception","Space Available For":"Espace Disponible ","Tote Details":"Informations du Sac","Close current tote first":"Fermer d'abord le sac actuel","CURRENT BIN":"CORBEILLE ACTUELLE","Bad Barcode Quantity":"Quantité du Code-barre Mauvaise","Enter Scanner Id":"Entrer l'identifiant du Scanner","Back seat not supported for this mode":"Siège arrière non pris en charge pour ce mode","Bad Data":"Mauvaises Données","Peripheral already added":"Périphérique déjà ajouté","Scan Bin Barcode":"Scanner Code-barre de la Corbeille","Update":"Mettre à jour","Japanese":"Japonais","English":"Anglais","Exception Finished":"Exception Terminée","PPS Mode":"Mode PPS","Seat Type":"Type de Siège","Good Quantity Cannot be Equal to the Total Quantity":"La bonne quantité ne peut pas être égale à la quantité totale","Undock Roll Cage if no items remaining":"","Gently push roll cage away from the frame":"","Scan tote and place it in the slot":"","Scan slot to confirm":"","Release MTU":"","Tote scan successful.":"","Slot barcode scan successful":"","Tote already scanned":"","Tote scanned is not idle":"","Tote scanned is not opened":"","Scan Tote first and then scan rack":"","Invalid Slot scanned":"","Tote already associated with slot.Scan empty slot":"","Please Scan tote which has excess item":"","Tote scan cancelled.":"","Exception finished":"","Unexpected entity scanned":"","Enter excess item quantity":""," items":"","Wrong ppsbin button pressed":"","Total ":"","Place the tote back in bin {0} and press pptl":"","Take out the tote from bin {0} and scan entity":"","Scan tote first and then scan item":"","Scan excess item":"","Scan tote which has excess item":"","Invalid tote scanned":"","Exception entry successful":"","Are you sure you want to exit from {0} invoice and stage all bins":"","Invoice number: {0}":"","Scan or Enter {0} number":"","Please scan or enter {0} number":"","STN scan successful":"","Exit {0}":"","{0} number :":"","Are you sure you want to exit from {0} {1} and stage all bins":"","Scan or Enter the tote barcode to reprint":"","Place container in MSU slot and confirm":"","Place {0} boxes with {1} items from bin {2}":"","Place {0} boxes from bin {2}":"","Place":"","Remove Tote from bin {0} & Press PPTL to confirm no Items Remaining":"","Press PPTL to confirm no Items Remaining in Bin {0}":"","Entities cannot be accommodated! Remove all entities from bin and press PPTL.":"","Entities cannot be accommodated!":"","Take {0} Printout and Press PPTL":"Prendre {0} impression et appuyez sur PPTL","PPS is Closed":"","Place box in MSU slot and confirm":"","Wrong Undock":"","Dock roll cage back to proceed the operation":"","Excess quantity":"","Entity Damaged":"Entité endommagée","Issues with entity":"","Validate and Confirm":"","Wrong Scan. IRT bin scan expected":"","Scan IRT Bin":"","Please put damaged entities in IRT bin and scan the bin":"","Please put damaged entities in exception area":"","Please put extra entities in IRT bin and scan the bin":"","Please put extra entities in exception area":"","Please put unscannable entities in IRT bin and scan the bin":"","Please put unscannable entities in exception area":"","Please put oversized entities in IRT bin and scan the bin":"","Please put oversized entities in exception area":"","Warehouse Full Remove all entities from bin & press PPTL":"","Enter Quantity":"","Are you sure you want to cancel the exception?":"","All scan and print will be cancelled. Confirm to cancel?":"","Yes":"","No":"","Exception with entity reported":"","Please put entities with issues, in exception area":"","Please put entities in IRT and Scan IRT Bin":"","Wrong Scan. Unrecognized barcode.":"","PPS is closed":"","NEST MAX":"","STACK MAX":"","DO NOT STACK":"","FRAGILE":"","Length of {0} should not be greater than {1}":"","Scan {0} packs":"","Scan {0} sub packs":"","Press PPTL":"","Pack Scan Successful":"","Scan {0} more packs and place in bin {1}":"","Scan {0} more sub packs and place in bin {1}":"","Put pack list in trolley and press PPTL to confirm":"","Scan damaged entity":"","Damaged Quantity":"","Wrong Scan. Entity not present in Database":"","Sum of good, missing and damaged should be equal to {0}":"","Last item scan will be cancelled. Do you want to continue?":"","Continue":"","Bin full":"","Please put entities which have issues in exception area":"","Unscannable":"","Invalid Event.Expecting PPTL button press":"","Remove Tote from bin & Press PPTL to confirm no Items Remaining":"","Wrong entity scan.Please scan the correct entity":"","Physically Damaged entity reported.":"","Entity entry successful":"","Bin scan successful":"","Physically Damaged Reported should equal Scanned Quantity":"","SKU not present in Database.":"","Extra entity scan found.":"","Container Already Scanned.":"","Invalid Entity Scanned.":"","Quantity of Physically damaged entities scanned is less.":"","Error":"","Waiting for Bins to be Cleared at Pick Front":"","Processing Next Pick from Rack ":"","Scan Damaged Entity":"","Warehouse Full":"","Scan a packing box and keep in bin {0}":"","Pick box from MSU and press PPTL on Bin {0}":"","Extra details entered are incorrect.Please enter correct details":"","Packing box scan failed":"","Wrong entity Scanned. Bin Scan Expected.":"","Bin Already Scanned":"","Issue with Pack":"","Issue with Sub pack":"","Issue with MPU":"","Space not available":"","Bad barcode on pack":"","Bad barcode on sub pack":"","Unexpected pack":"","Pack missing":"","Sub pack missing":"","Damaged sub pack":"","Good pack":"","Good sub pack":"","Scan not Allowed. PPS close/force close or profile change requested.":"","Pack scan successfully":"","Sub-Pack scan successfully":"","Scan MPU":"","Scan {0} or {1}":"","Continue scanning {0} and {1}":"","Enter Quantity of Unscannable {0}":"","Wait for MPU":"","No Sub-Packs to reconcile":"","Pack Unscannable":"","Sub-Pack Unscannable":"","Damage Barcode":"","Packs":"","Sub-Packs":"","Scan Small Box":"","Scan {0} Box and Place in Bin {1}":"","Scan {0} Small Box and Place in Bin {1}":"","Put Pack list in trolley and press PPTL to confirm":"","Done":"","No more entities to be scanned":"","Type":"","Serial Number":"","Quantity":"","Wrong Bin Scanned. Scan Expected for Roll Cage ready for undocking.":"","Issues with {0}":"","Scan {0} damaged entities":"","Scan {0} {1}":"","Scan {0} {1} and place in Bin {2}":"","Enter Unscannable Tote Quantity":"","Enter items that can fit in the bin":"","{0} scan successfully":"","Place Tote in Bin {0} and Press PPTL":"","Tote in use at front seat":"","Waiting for Tote to be associated from back":"","{0} scan successful":"","Waiting for put_away to complete from front":"","Tote cannot be associated with bin of another seat":"","Waiting for put away to complete from front":"","Scan checklist items to proceed":"","Unexpected Entity In {0}":"","Scan a {0}":"","Scan a {0} or Press PPTL":"","Press PPTL to clear the Bin":"","Place {0} in Bin and scan the Bin barcode":"","Waiting for order to be completed from front":"","Waiting for {0} to be associated from back":"","{0} scan successful.":"","Excess Entity in {0} recorded.":"","{0} unexpected. {0} in use in another location":"","{0} unexpected. Service request not present in {0}.":"","Invalid resource.":"","{0} unexpected. Service request not in correct state.":"","{0} unexpected. Empty {0} scanned.":"","{0} unexpected. Scanned {0} does not exist.":"","{0} unexpected. Service Request does not exist.":"","Wrong scan. Please Scan item or {0}":"","{0} unexpected. {0} is not empty.":"","Bin barcode of other PPS scanned":"","Scan {0}":"","Scan {0} which has excess item":"","Scan {0} first and then scan item":"","Invalid {0} scanned":"","{0} Close Cancelled":"","{0} docked successfully":"","Are You Sure You Want to Close {0}?":"","Scan {0} or Stage PPS Bin":"","Enter Unscannable {0} Quantity":"","Place {0} in Bin {1} and Press PPTL":"","{0} already opened. Scan some other {1}":"","{0} already closed. Scan some other {1}":"","Close current {0} first":"","Wrong entity scanned. Please scan {0}":"","{0} excess entities found in {0}. Please put entities in exception area and confirm":"","Entity not expected in {0}. Please put entity in exception area and confirm":"","Expecting {0} closure.":"","{0} not present in database.":"","{0} matched .":"","Place the {0} back in bin {1} and press PPTL":"","Take out the {0} from bin {1} and scan entity":"","Remove {0} from bin {1} & Press PPTL to confirm no Items Remaining":"","Press PPTL or Scan a {0}":"","Select Bin which does not require {0}":"","Select Bin to disassociate {0}":"","{0} close successful.":"","{0} not closed.":"","Excess item in {0} recorded. Now press PPTL":"","Cancelled excess entity in {0}":"","Cancelled invalid entity in {0}":"","Invalid entity in {0} recorded":"","Scan {0} to associate with Bin":"","Press PpsBin Button Or Scan a {0}":"","{0} is already scanned.Expecting pptl scan.":"","{0} are not required.Please don't scan {1} barcode":"","Please scan the {0} first and then scan pptl barcode":"","{0} scanned.Expecting pptl scan.":"","Pptl scan not allowed. {0} are not required":"","{0} didn't get associated":"","After scannning {0} barcode, please scan pptl barcode":"","No {0} associated. Pease keep {0} in the Bin and then scan":"","No {0} scanned":"","{0} cancelled":"","{0} already associated with ppsbin":"","Please press ppsbin button which does not have any {0} associated":"","{0} assigned successfully to ppsbin {0}":"","{0} are not required":"","{0} could not be reserved as already reserved":"","Exception invalid as {0} are not required with this PPS":"","Override {0} not possible":"","Barcode didn't match with current {0} barcode":"","Incorrect {0} barcode scanned. Please try again":"","System not configured for {0}":"","{0} association required":"","{0} association failed. Repeat scan operation":"","{0} are anyway not required.Please proceed further":"","{0} already associated with bin {0}":"","{0} in use at front seat":"","{0} cannot be associated with bin of another seat":"","{0} assigned successfully to bin":"","{0} disassociated from Bin":"","{0} associated with another bin":"","Please scan the {0} first and then scan PPTL barcode":"","Override {0} Exception cannot be raised for bins with {1} associated":"","PPTL scan not allowed. System not configured for {0}":"","Scan pptl barcode after scannning {0} barcode":"","{0} scanned is not opened":"","{0} already scanned":"","Wrong entity Scanned. {0} Scan Expected.":"","Disassociate {0}":"","Override {0} Required":"","Scan slot":"","Scan or Enter the {0} barcode to reprint":"","{0} scan cancelled.":"","{0} scanned is not idle":"","Scan {0} first and then scan rack":"","{0} already associated with slot.Scan empty slot":"","Invalid {0} scan":"","{0} close successful":"","Scan new {0}":"","Scan item or {0}":"","Additional Information":"","Selected UOM: ":"","Close":"","Select Value":"","{0} already associated with bin":"","Previous Pick Details":"","Previous Put Details":"","Dock {0}":"","Scan {1} or Dock {0}":"","Undock {0}":"","Scan a Tote":"","Scan {0} location":"","Pick complete. Waiting for next pick.":"","Missing barcode scanned. Waiting for confirmation.":"","{0} cannot be associated with inactive bin":"","{0} cleared":"","Scan load unit and gently push it away":"","Box Type":"","Location":"","Place Box":"","Scan":"","Checklist":"","Scan {0} Serial":"","Scan {0} Serial to Open":"","Scan carrying unit and gently push it away":"","Pick all items from slot {0} and scan slot":"","{0} undocked successfully":"","Pick all items from slot and scan slot":"","NO ITEM FOUND":"","Item details":"","Item Search":"","Event":"","Expectation Id":"","Item Location":"","UOM Details":"","Excess Quantity":"","Total: ":"","Scan excess entities":"","Dis-associate":"","Data capture failed":"","No entities to reconcile":"","LOGIN":"S'IDENTIFIER","Language":"La langue","Username":"Nom d'utilisateur","Login to Butler System":"","Login to":"Se connecter à","Enter username":"Saisissez votre nom d'utilisateur","Enter password":"Entrer le mot de passe","Scan ID card to login.":"Scannez la carte d'identité pour vous connecter.","{0} Unscannable":"{0} Non scannable","Scan entities":"Entités à analyser","Waiting for {0} to be docked":"","Put Pack list in {0} and press PPTL to confirm":"","Please scan PPTL which has excess item":"","Please put unscannable tote in exception area":"","Sum of good and exception quantity should be equal to {0}":"","{0} Unscannable entities recorded. WMS notified":"","Scan item or enter barcode details":"","{0} unexpected. Service request not present in {1}.":"","MSU Sent":"","This put request is not supported in current flow":"","Service request not in correct state":"","Multiple Service request found":"","Unknown error":"","Scan item":"","Item unexpected. No service request found for this item":"","Scan entity":"","Put entity in slot and scan slot to confirm":"","Excess detected, remove '{0}' items and confirm again":"","Invalid {0}":"","{0} closed":"","Unknown barcode":"","Unexpected entity":"","Excess quantity detected, remove '{0}' quantity and confirm again":"","Call for Help":"","Tote Unscannable":"","{0} unexpected. Scanned {1} does not exist.":"","HEAVY":"","Scan tote":"","Items In Bin":"","Scan tote location":"","Send MSU":"","Put and confirm":"","Close Cart":"","Dock Cart":"","Are you sure that all the items in the cart were scanned?":"","The following {0} items were found missing":"","OUTER":"","INNER":"","Wrong scan. Please Scan tote":""};module.exports=obj

},{}],252:[function(require,module,exports){
var obj={"Scan item / Stage PPS Bin":"Artikel scannen/Öffnen des PPS Behälter","Scan Tote to associate with Bin":"Tasche scannen, um mit dem Behälter zu verknüpfen.","Press PpsBin Button Or Scan a Tote":"Drücken Sie PPS Behälter-Taste oder scannen Sie eine Tasche.","User Name":"Benutzername","Password":"Passwort","Are you sure you want to close Tote":"Sind Sie sicher, dass Sie diese Tasche schließen möchten?","Details":"Angaben","Scan {0} items":"{0} Artikel gescannt","Scan box barcode":"Strichcode scannen","Press PpsBin {0} to remove items":"PPS Behälter drücken, um {0} Artikel zu entfernen","Tote is already scanned.Expecting pptl scan.":"Tasche ist bereits gescannt. Erwarte PPTL Scan.","Totes are not required.Please don't scan tote barcode":"Taschen sind nicht erforderlich.Nicht den Strichcode der Tasche scannen","Wrong PPS bin scanned":"Falscher PPS-Behälter gescannt","Please scan the tote first and then scan pptl barcode":"Scannen Sie bitte zuerst die Tasche und danach den PPTL-Strichcode","Tote scanned.Expecting pptl scan.":"Tasche ist gescannt. Erwarte PPTL Scan.","Pptl scan not allowed. Totes are not required":"PPTL scannen ist nicht erlaubt. Tasche ist nicht erforderlich","Tote didn't get associated":"Tasche wurde nicht verknüpft.","After scannning tote barcode, please scan pptl barcode":"Nach dem Scannen des Strichcodes der Tasche, bitte PPTL Strichcode scannen","Wrong Ppsbin button pressed.Please press those buttons having color blue":"Falscher PPS-Behälter-Taste gedrückt. Drücken Sie bitte diese Tasten mit der Farbe blau","Please complete pickback for pending bin and then proceed":"Bitte füllen Sie den Abholvorgang für ausstehenden Behälter aus und fahren Sie dann fort","No totes associated. Pease keep totes in the Bin and then scan":"Keine Taschen verknüpft. Bitte halten Sie die Tasche im Behälter und scannen Sie dann ein.","Documents printed Successfully":"Dokumente wurden erfolgreich gedruck.","No tote scanned":"Keine Tasche gescannt.","Tote cancelled":"Tasche ist storniert.","Tote already associated with ppsbin":"Tasche ist bereits mit PPS-Behälter verknüpft.","Incorrect tote barcode scanned. Please try again":"Falscher Taschen-Strichcode gescannt. Bitte versuchen Sie es erneut.","Please press PPTL button which does not have any totes associated":"Drücken Sie bitte die PPTL-Taste, die keine verknüpften Taschen enthält.","Tote assigned successfully to ppsbin {0}":"Tasche wurde erfolgreich dem PPS-Behälter {0} zugewiesen.","Bin {0} items removed successfully":"{0}-Artikel im Behälter wurden erfolgreich entfernt.","Totes are not required":"Taschen sind nicht erforderlich. Bitte fortfahren.","Wrong Barcode scanned":"Falscher Strichcode gescannt.","Tote could not be reserved as already reserved":"Tasche konnte nicht reserviert werden, da sie bereits reserviert ist.","Exception invalid as totes are not required with this PPS":"Ausnahme ist ungültig, da Taschen mit diesem PPS nicht erforderlich sind.","Override tote not possible":"Überschreiben der Tasche ist nicht möglich.","Scanning pptl barcode not allowed":"Scannen des PPTL Strichcodes ist nicht erlaubt.","Please press those buttons having color blink_blue":"Drücken Sie bitte diese Tasten mit der blinkenden_blauen Farbe.","Unhandled event ocurred":"Unbearbeitetes Ereignis.","Barcode didn't match with current tote barcode":"Strichcode stimmt nicht mit dem aktuellen Taschen-Strichcode überein.","Testing configuration {0} and {1}":"Prüfung der Konfiguration {0} und {1}.","Processing. Please wait and scan later":"In Bearbeitung. Bitte warten und später scannen.","Waiting for rack":"Auf das Regal warten.","Current PPS mode does not support back seat. Please logout.":"Der aktuelle PPS-Modus unterstützt keinen Rücksitz. Bitte abmelden.","Scan items and place in bin {0}":"Artikel scannen und in den Behälter legen {0}","Stage Bin or Scan Entity":"Behälter öffnen oder die Einheit scannen","Place Entity in Bin and Press PPTL":"Einheit in den Behälter legen und auf PPTL drücken.","Are You Sure You Want to Close Tote?":"Sind Sie sicher, dass Sie diese Tasche schließen möchten?","Scan Tote or Stage PPS Bin":"Artikel scannen/Öffnen des PPS Behälters.","Item Not Expected in Tote":"Artikel wird nicht in der Tasche erwartet.","Tote already opened. Scan some other tote":"Tasche ist bereits geöffnet. Scannen Sie eine andere Tasche.","Tote already closed. Scan some other tote":"Tasche ist bereits geschlossen. Scannen Sie eine andere Tasche.","No matching tote found":"Keine passende Tasche gefunden.","Wrong entity scanned. Please scan tote":"Falsche Einheit gescannt. Bitte die Tasche scannen.","No entities added yet. Scan entities and then press PPTL":"Noch keine Einheiten hinzugefügt. Einheiten scannen und dann PPTL drücken.","Wrong entity scanned. Please scan Container/Item.":"Falsche Einheit gescannt. Bitte den Container/Artikel scannen.","Cannot cancel scan. No scanned box found":"Kann den Scan nicht abbrechen. Keine gescannte Box gefunden.","Entity scan not expected. Waiting for PPTL press":"Scan der Einheit wird nicht erwartet. Warte, dass PPTL gedrückt wird.","Bin selected for put. Cannot be staged":"Behälter zum Ablegen gewählt. Kann nicht bereitgestellt werden.","SKU not present in database. Put into IRT bin.":"Artikelnummer ist nicht in der Datenbank. In den IRT Behälter legen.","No free bins. Please scan later":"Keine leeren Behälter. Bitte später scannen.","Wrong PPTL pressed. Please try another":"Falsche PPTL gedrückt. Bitte versuchen Sie es erneut.","Please put entities in exception area and confirm":"Legen Sie bitte die Einheiten in den Ausnahmebereich und bestätigen.","Wrong bin chosen.Try selecting another bin":"Falscher Behälter gewählt. Wählen Sie einen anderen Behälter aus.","Please scan same SKU to complete this exception":"Bitte scannen Sie die gleiche Artikelnummer, um diese Ausnahme zu vervollständigen.","Entity scan not expected.":"Scan der Einheit wird nicht erwartet.","Tote not present in database.":"Tasche ist nicht in der Datenbank.","Tote has been opened.Scan all items in tote and then scan tote again to close it":"Tasche wurde geöffnet. Scannen Sie alle Artikel in der Tasche und dann die Tasche noch einmal scannen, um sie zu schließen.","PPS is in paused mode. Cannot process new entity. Try after some time":"PPS ist im Pausenmodus. Kann keine neue Einheit verarbeiten. Versuchen Sie es nach einiger Zeit noch einmal.","Cancel scan successful.":"Scan erfolgreich abgebrochen.","Tote close successful.":"Tasche erfolgreich geschlossen.","Tote not closed.":"Tasche ist nicht geschlossen.","Entity scan successful.":"Einheit erfolgreich gescannt.","PPTL press successful":"PPTL erfolgreich gedrückt.","Data capture valid":"Datenerfassung gültig.","Excess item in tote recorded. Now press PPTL":"Überschüssiger Artikel in der Tasche ist notiert. Jetzt PPTL drücken.","Excess item in tote recorded.":"Überschüssiger Artikel in der Tasche ist notiert.","{0} unscannable entities recorded. WMS notified":"{0} nicht scanbare Einheiten wurden aufgezeichnet. WMS benachrichtigt.","{0} extra entities recorded in bin. WMS notified":"{0} extra Einheiten wurden im Behälter aufgezeichnet. WMS benachrichtigt.","{0} oversized entities recorded.WMS notified":"{0} übergroße Einheiten wurden aufgezeichnet. WMS benachrichtigt.","{0} Physically damaged entity recorded.WMS notified":"{0} äußerlich beschädigte Einheit gemeldet. WMS benachrichtigt","Exception cancelled":"Ausnahme storniert.","Box with same serial number already exists in the warehouse":"Im Lager ist bereits eine Box mit derselben Seriennummer vorhanden.","Entity already scanned.Waiting for PPTL press":"Einheit ist bereits gescannt. Warten auf PPTL drücken.drücken","No bins available to stage":"Es stehen keine Behälter zum Inszenieren zu Verfügung.","Bin already staged. Ignoring event":"Behälter.","Bin empty. Cannot be staged":"Behälter ist leer. Kann nicht inszeniert werdenBehälter ist leer. Kann nicht inszeniert werden.","Scan Box/Items from Slot":"Schachtel scannen/Artikel vom Einschub.","Scan Remaining Item In Box":"Restposten in der Schachtel scannen.","Last Box Scan Completed! Scan Remaining Box/Items":"Letzter Scan der Schachtel ist abgeschlossen! Verbleibende Schachteln/Artikel scannen","Status To Reconcile":"Status zum Abgleich.","This box belongs to some other SKU in the slot.Put it back.Scan next box.":"Diese Schachtel gehört zu einer anderen Artikelnummer im Einschub. Legen Sie es zurück. Nächste Schachtel scannen.","This box does not belong to this slot. Remove the box and put in exception area.":"Diese Schachtel gehört nicht in diesen Einschub. Entfernen Sie diese Schachtel und legen sie in den Ausnahmebereich.","Waiting for MSU":"Warten auf MSU","Wrong Barcode":"Falscher Strichcode gescannt","Box Scan successful":"Schachtel Scan erfolgreich.","Item Scan successful":"Artikel Scan erfolgreich.","Item scan successful":"Artikel erfolgreich gescannt.","Data capture failed at item {0}":"Datenerfassung an Artikel {0} fehlgeschlagen.","Bin {0} selected":"Behälter {0} ausgewählt.","Bin {0} unselected":"Behälter {0} nicht ausgewählt.","Connection is closed. Connecting...":"Verbindung ist geschlossen. Verbinden …","Extra item found please put back item in Exception bin":"Ein extra Artikel wurde gefunden, bitte legen Sie den Artikel in den Ausnahmebereich zurück.","Enter Unscannable Entity Quantity":"Geben Sie die nicht scanbare Menge der Einheit ein.","Scan Oversized Entity Quantity":"Überdimensionierte Menge der Einheit scannen.","Please Select The Bin With Excess Entity":"Wählen Sie bitte den Behälter mit der überzähligen Einheit.","Enter Quantity of Excess Entities":"Die Menge der überzähligen Einheiten eingeben.","Place Entity in Slot and Scan More":"Die Einheit in den Einschub geben und weiter scannen.","Scan Slot to Confirm":"Einschub zur Bestätigung scannen.","Wait for MSU":"Warten auf MSU.","Scan Entity From Bin {0}":"Scannen der Einheit aus Behälter {0}.","Enter Good Quantity to be Put into Slot":"Geben Sie die Stückzahl ein, die in den Einschub gelegt wird.","Put Back Entities in the PPS Bin":"Legen Sie Einheiten in den PPS Behälter zurück.","Confirm MSU Release":"MSU Freigabe bestätigen.","Scan Slot":"Einschub scannen.","Scan {0} Items":"{0} Artikel scannen.","Cancel audit successful.Audit Restarted":"Audit erfolgreich abgebrochen. Audit neu gestartet.","Scan Box":"Schachtel scannen.","Scan {0} Items and Place in Bin {0}":"Artikel {0} scannen und in den Behälter legen {0}","Press PPTL to confirm":"PPTL drücken, um zu bestätigen.","Scan Tote to Associate with Bin":"Tasche scannen, um mit dem Behälter zu assoziieren.","Press PPTL or Scan a Tote":"Drücken Sie PPTL oder scannen Sie eine Tasche.","Press bin PPTL to remove entities":"Bitte Behältnis PPTL drücken um Einträge zu löschen","Press bin PPTL":"Drücken Sie Behälter PPTL.","Press PPTL for bin {0} to confirm":"Drücken Sie PPTL für den Behälter {0} zur Bestätigung.","Press print button to proceed":"Drücken Sie der Druckertaste, um fortzufahren.","Select Bin to skip print":"Wählen Sie einen Behälter, um den Druck zu überspringen.","Select Bin which does not require tote":"Wählen Sie einen Behälter, der keine Tasche benötigt.","Select Bin to disassociate tote":"Wählen Sie Bin, um die Tasche zu trennen.","Pick complete. Waiting for next rack.":"Auwahl beenden. Auf das nächste Regal warten.","Location scan successful":"Standort-Scan erfolgreich.","Box scan successful":"Schachtel Scan erfolgreich.","Cancel scan successful":"Scan erfolgreich abgebrochen.","Expecting MSU release confirmation from GUI, got invalid event.":"Bestätigung der MSU Freigabe von GUI erwartet, ungültiges Ereignis angezeigt.","Data capture failed at item":"Datenerfassung an Artikel fehlgeschlagen.","Wrong slot location scanned. Please try again":"Falscher Einschubstandort gescannt. Bitte versuchen Sie es erneut.","Wrong box scanned. Please try again":"Falsche Schachtel gescannt. Bitte versuchen Sie es erneut.","Scan a box first":"Zuerst nur eine Schachtel scannen.","Wrong PPTL pressed. Please press correct PPTL":"Falsche PPTL gedrückt. Drücken Sie bitte die korrekte PPTL.","Picked quantity more than expected. Put extra items back in MSU":"Ausgewählte Menge ist größer als erwartet. Legen Sie die zusätzlichen Artikel wieder in MSU.","Wrong item quantity update":"Falsche Artikelmengenaktualisierung.","Wrong item scanned. Please scan correct item":"Falsche Artikel gescannt. Bitte den korrekten Artikel scannen.","Waiting for MSU. Please wait and scan later":"Warten auf MSU. Bitte warten und später scannen.","System Error. Scanned entity details not available at this time":"Systemfehler. Gescannte Einheitendetails sind zur Zeit nicht verfügbar.","No PPS bins empty. Please empty them from Pickback":"Keine PPS Behälter sind leer. Leeren Sie bitte die Retouren.","PPS mode change requested:scan not allowed":"PPS-Modusänderung angefordert: Scan ist nicht erlaubt.","PPS mode change requested:auto staging all bins":"PPS-Modusänderung angefordert: automatische Inszenierung aller Behälter.","PPTL press not expected":"PPTL drücken wird nicht erwartet.","Scan not expected":"Scan wird nicht erwartet.Scan wird nicht erwartet.Scan wird nicht erwartet.Scan wird nicht erwartet.","Barcode didn't match the current tote barcode":"Strichcode stimmt nicht mit dem aktuellen Taschen-Strichcode überein.","System not configured for totes":"System ist nicht für Taschen konfiguriert.","Invalid Exception for this configuration":"Ungültige Ausnahme für diese Konfiguration.","No tote associated. Please keep a tote in bin and scan":"Keine Tasche assoziiert. Behalten Sie bitte eine Tasche im Behälter und scannen.","Wrong PPTL pressed":"Falsche PPTL gedrückt. Bitte versuchen Sie es erneut.","Totes are anyway not required.Please proceed further":"Taschen sind nicht erforderlich. Bitte fortfahren.","Tote scan cancelled":"Taschenscan ist storniert.","Documents printed successfully":"Dokumente wurden erfolgreich gedruckt.","Order removed successfully from bin {0}":"Auftrag wurde erfolgreich aus dem Behälter entfernt {0}.","Tote assigned successfully to bin":"Tasche wurde erfolgreich dem Behälter zugewiesen.","Tote association failed. Repeat scan operation":"Zuordnung der Tasche ist fehlgeschlagen Wiederholen Sie den Scanvorgang.","Tote associated with another bin":"Tasche wurde einem anderen Behälter zugewiesen.","Please scan PPTL barcode":"Bitte den PPTL Strichcode scannen.","Tote disassociated from Bin":"Tasche ist vom Behälter getrennt.","Please complete process for pending bin and then proceed":"Vervollständigen Sie bitte den Vorgang für ausstehende Behälter und fahren dann fort.","Tote already reserved":"Tasche ist bereits reserviertTasche ist bereits reserviert.","Wrong barcode scanned":"Falscher Strichcode gescannt.","Please scan the tote first and then scan PPTL barcode":"Scannen Sie bitte zuerst die Tasche und dann den PPTL-Strichcode.","Override Tote Exception cannot be raised for bins with totes associated":"Taschenausnahme überschreiben kann nicht für Behälter, die mit Taschen verbunden sind, durchgeführt werden.","PPTL scan not allowed. System not configured for tote":"PPTL scannen ist nicht erlaubt. System ist nicht für Taschen konfiguriert.","PPTL scan not allowed":"PPTL scannen ist nicht erlaubt.","Tote scan expected":"Taschenscan wird erwartet","Entity scanned is not from bin {0}. Replace and scan from bin {1}":"Die gescannte Einheit ist nicht von Behälter {0}. Ersetzen und von Behälter {1} scannen.","Wrong entity scanned":"Falsche Einheit gescannt. Erwarte Scan von Behälter {0}Falsche Einheit gescannt. Erwarte Scan von Behälter {0}Falsche Einheit gescannt. Erwarte Scan von Behälter {0}Falsche Einheit gescannt. Erwarte Scan von Behälter {0}Falsche Einheit gescannt. Erwarte Scan von Behälter {0}Falsche Einheit gescannt. Erwarte Scan von Behälter {0}Falsche Einheit gescannt. Erwarte Scan von Behälter {0}Falsche Einheit gescannt. Erwarte Scan von Behälter {0}Falsche Einheit gescannt. Erwarte Scan von Behälter {0}Falsche Einheit gescannt. Erwarte Scan von Behälter {0}Falsche Einheit gescannt. Erwarte Scan von Behälter {0}","Waiting for MSU scan. Please scan entity later.":"Warten auf MSU Scan. Die Einheit bitte später scannen.","Expected quantity exceeded.":"Die erwartete Menge ist überschritten.","Wrong scan! Entity scan expected but slot barcode scanned.":"Falscher Scan! Scan der Einheit erwartet, aber der Strichcode des Einschubs ist gescannt.","Actual put quantity not equal to the sum of Good and Expection quantity.":"Tatsächliche Menge entspricht nicht der Summe der Gut- und Prüfmenge.","Actual put quantity less than than revised quantity.":"Tatsächliche Menge ist weniger als die überarbeitete Menge.","Wrong slot scanned":"Falscher Einschub gescannt.","Entity scan successful":"Einheit erfolgreich scannen.","Slot scan successful":"Einschub erfolgreich scannen.","Damaged and missing entity recorded.":"Beschädigte und fehlende Einheit aufgezeichnet.","Space unavailable recorded.":"Nicht verfügbarer Platz aufgezeichnet.","Please put entity in exception area and confirm":"Legen Sie bitte die Einheit in den Ausnahmebereich und bestätigen Sie diese.","Entity not expected in tote. Please put entity in exception area and confirm":"Einheit nicht in der Tasche erwartet. Legen Sie bitte die Einheit in den Ausnahmebereich und bestätigen Sie diese.","{0} excess entities found in tote. Please put entities in exception area and confirm":"{0} überzählige Einheiten in der Tasche gefunden. Legen Sie bitte die Einheiten in den Ausnahmebereich und bestätigen Sie diese.","Cancelled excess entity in tote":"Überzählige Einheiten in der Tasche storniert.","Cancelled invalid entity in tote":"Ungültige Einheit in der Tasche storniert.","Invalid entity in tote recorded":"Ungültige Einheit in der Tasche wurde aufgezeichnet.","Wrong enitity scanned. Expecting scan from bin {0}":"Falsche Einheit gescannt. Erwarte Scan von Behälter {0}.","PPTL Management":"PPTL-Verwaltung.","Scanner Management":"Scannerverwaltung.","Entity Oversized":"Überdimensionierte Einheit.","Entity Unscannable":"Einheit nicht scanbar.","Extra Entities in Bin":"Extra Einheiten im Behälter.","Entity Missing / Unscannable":"Fehlende Einheiten/nicht scanbar.","Space Not Available":"Platz ist nicht verfügbar.","Mising Box":"Fehlende Schachtel.","Disassociate Tote":"Tasche trennen.","Overide Tote Required":"Tasche überschreiben ist erforderlich.","Reprint":"Nachdrucken.","Skip Print":"Drucken überspringen.","Peripheral added successfully":"Peripherie erfolgreich hinzugefügt.","Peripheral not added":"Peripherie nicht hinzugefügt.","Scan Box or Items":"Schachtel oder Artikel scannen.","Check Count":"Anzahl prüfen.","You cannot enter value more than 9999":"Sie können keinen Wert höher als 9999 eingeben.","Please enter a quantity greater than 0":"Bitte eine Menge eingeben, die größer als 0 ist","Place extra entity in Exception area.":"Legen Sie die extra Einheit in dem Ausnahmebereich ab.","Sum of missing, good and damaged should be equal to {0}":"Summe der Fehlenden, Guten und Beschädigten sollte gleich {0} .","Scan excess item quantity":"Überschusspostenmenge einscannen","Quantity should be less than or equal to {0}":"Die Menge sollte kleiner oder gleich {0} sein.","You are not allowed to keyed in the quantity from the numpad. Force Scan is required.":"Sie dürfen die Menge nicht über den Nummernblock eingeben. Ein forcierter Scan ist erforderlich.","Waiting for Bins to be Cleared at Pick Back":"Warten auf Behälter, die bei der Retoure gelöscht werden.","Peripheral deleted successfully":"Peripherie erfolgreich gelöscht.","Peripheral not deleted successfully":"Peripherie nicht erfolgreich gelöscht.","Cancel Exception":"Ausnahme stornieren.","Cancel Scan":"Scan stornieren.","Finish":"Fertig.","Back":"Zurück.","OK":"OK.","FINISH":"FERTIG.","Print":"Drucken.","Skip Printing":"Drucken überspringen.","Override":"Überschreiben.","Add Scanner":"Scanner hinzufügen.","Edit Details":"Details bearbeiten.","NEXT":"WEITER.","CONFIRM":"BESTÄTIGEN.","Stage":"Inszenieren.","Stage All":"Alle inszenieren.","BACK":"ZURÜCK.","CLOSE":"SCHLIESSEN.","Cancel":"Abbrechen.","Confirm":"Bestätigen.","TOTE":"TASCHE.","Clear All":"Alles löschen.","Submit":"Einreichen.","Exceptions":"Ausnahmen.","Next":"Weiter","Bin":"Behälter.","Selected":"Ausgewählt.","Unselected":"Nicht ausgewählt.","System is Idle":"Das System ist im Leerlauf.","CURRENT SLOT":"AKTUELLER EINSCHUB.","Box Serial Numbers":"Seriennummer der Schachtel.","No Items To Reconcile":"Keine Artikel zum Abgleichen.","List Of Items To Reconcile":"Liste der Artikel zum Abgleichen.","View More":"Mehr anzeigen.","Please put exception entities in exception area":"Ausnahmeeinheiten bitte in einem Ausnahmebereich ablegen","Please put exception entities in IRT bin and scan the bin":"Ausnahmeeinheiten bitte in einem IRT-Behälter ablegen und den Behälter einscannen","Product Information":"Produktinformation.","Bin Info":"Behälterinformation.","Associate tote with bin":"Tasche mit Behälter verbinden.","Extra Entity Found":"Extra Einheit gefunden.","Perform Action":"Aktion ausführen.","Input Extra Details":"Zusätzliche Details eingeben.","Expected":"Erwartet.","Actual":"Aktuell.","Bin ID":"Behälter ID.","Barcode":"Strichcode.","Peripheral ID":"Peripherie ID.","Actions":"Aktionen.","Scanner ID":"Scanner ID.","Delete":"Löschen.","Product SKU":"Löschen.","Expected Quantity":"Erwartete Menge.","Actual Quantity":"Tatsächliche Menge.","Missing":"Fehlend.","Extra":"Zusätzlich/Extra.","Barcode Damage":"Beschädigter Strichcode.","Item in Box Serial Numbers":"Artikel mit Seriennummer.","Loose Items":"Lose Artikel.","Loose Items Serial Numbers":"Seriennummer der losen Artikel.","Product Details":"Produktangaben.","Product Name":"Produktname.","Product Desc":"Produktbeschreibung.","Product Type":"Produkttyp.","Tote already associated with bin {0}":"Tasche ist bereits mit dem Behälter {0} assoziiert.","Entity Scan not expected. Press PPTL":"Einheit Scan wird nicht erwartet. Drücken Sie PPTL.","Item Missing/Unscannable":"Fehlender Artikel/nicht scanbar.","Missing Box":"Fehlende Schachtel.","Override Tote Required":"Tasche überschreiben ist erforderlich.","Items In Box Unscannable":"Artikel in der Schachtel sind nicht scanbar.","Box Unscannable":"Schachtel ist nicht scanbar.","Loose Items Unscannable":"Lose Artikel sind nicht scanbar.","Please put unscannable entities in exception area.":"Legen Sie bitte nicht scanbare Einheiten in dem Ausnahmebereich ab.","Please put oversized entities in exception area.":"Legen Sie bitte überdimensionierte Einheiten in dem Ausnahmebereich ab.","Take the Items out from the Slot":"Nehmen Sie die Artikel aus dem Einschub.","Pptl press not expected.":"PPTL drücken wird nicht erwartet.","Scan not expected.":"Scan wird nicht erwartet.","Wrong scan.Expecting item scan.":"Falscher Scan. Erwarte Scannen des Artikels.","Wrong scan.Expecting container scan.":"Falscher Scan. Erwarte Scannen des Containers.","Wrong scan.Expecting location scan.":"Falscher Scan. Erwarte Scannen des Standorts.","Scan Excess Entity Quantity":"Überzählige Menge der Einheit scannen.","Entity already scanned.Confirm exception":"Einheit ist bereits gescannt. Ausnahme bestätigen","Exception":"Ausnahme.","Logout":"Ausloggen.","Utility":"Dienstprogramm.","EXCEPTION":"AUSNAHME.","Good Quantity":"Gutmenge.","Missing Quantity":"Fehlende Menge.","Unscannable Quantity":"Nicht scanbare Menge.","Remove Item":"Artikel entfernen.","Item Missing/Bad Barcode":"Fehlender Artikel/Fehlerhafter Strichcode.","Sum of missing and good quantity should be equal to {0}":"Summe der fehlenden Menge und Gutmenge sollte gleich {0} sein.","Login":"Einloggen.","Enter Username":"Benutzername eingeben.","Enter Password":"Passwort eingeben.","Invalid credentials":"Ungültige Anmeldeinformationen.","Login not allowed. You're already logged in":"Einloggen nicht erlaubt. Sie sind bereits eingeloggt.","Place Item in slot and scan more":"Die Einheit in den Einschub geben und weiter scannen.","PPTL":"PPTL.","Scan Slot Barcode":"Strichcode des Einschubs scannen.","Unexpected Item":"Unerwarteter Artikel.","Stage Bin or Scan Item":"Behälter inszenieren oder die Einheit scannen.","Scan & Confirm":"Scannen und bestätigen.","Scan Item From Bin":"Scannen des Artikels im Behälter.","Scan Tote":"Tasche scannen.","Scan MSU Barcode":"MSU Strichcode scannen.","Scan Items":"Artikel scannen.","Status":"Status.","Could not connect to PPS.Please try again.":"Konnte nicht mit PPS verbinden. Versuchen Sie es bitte erneut.","product_sku":"produkt_artikelnummer","type":"Typ","quantity":"Menge.","item":"Artikel.","box":"Schachtel.","SKU not present in Database.Put in exception area":"Artikelnummer ist nicht in der Datenbank. In den Ausnahmebereich legen.","Please put extra entities in exception area.":"Legen Sie bitte extra Einheiten in dem Ausnahmebereich ab.","Space Available For":"Platz verfügbar für...","Tote Details":"Taschendetails.","Close current tote first":"Zuerst die aktuelle Tasche schließen","CURRENT BIN":"AKTUELLER BEHÄLTER.","Bad Barcode Quantity":"Menge der schlechten Strichcodes.","Enter Scanner Id":"Scanner ID eingeben.","Back seat not supported for this mode":"In diesem Modus wird Back Seat nicht unterstützt.","Bad Data":"Fehlerhafte Angaben.","Peripheral already added":"Peripherie bereits hinzugefügt.","Scan Bin Barcode":"Behälter-Strichcode scannen","Update":"Aktualisieren","Japanese":"Japanisch","English":"Englisch","Exception Finished":"Ausnahme beendet","PPS Mode":"PPS Modus","Seat Type":"Sitztyp","Good Quantity Cannot be Equal to the Total Quantity":"Gutmenge kann nicht gleich der Gesamtmenge sein","Undock Roll Cage if no items remaining":"Überrollvorrichtung abkoppeln, wenn keine Posten verbleiben","Gently push roll cage away from the frame":"Vorsichtig die Überrollvorrichtung vom Rahmen abnehmen","Scan tote and place it in the slot":"Palettenbox einscannen und auf dem Lagerplatz ablegen","Scan slot to confirm":"Zur Bestätigung Lagerplatz einscannen","Release MTU":"MTU freigeben","Tote scan successful.":"Palettenbox erfolgreich eingescannt.","Slot barcode scan successful":"Lagerplatz-Barcode erfolgreich eingescannt","Tote already scanned":"Palettenbox bereits eingescannt","Tote scanned is not idle":"Die eingescannte Palettenbox ist nicht leer","Tote scanned is not opened":"Die eingescannte Palettenbox ist nicht geöffnet","Scan Tote first and then scan rack":"Erst Palettenbox und dann Regal einscannen","Invalid Slot scanned":"Ungültiger Lagerplatz eingescannt.","Tote already associated with slot.Scan empty slot":"Die Palettenbox ist bereits einem Lagerplatz zugeordnet. Leeren Lagerplatz einscannen","Please Scan tote which has excess item":"Bitte die Palettenbox mit Überschussposten einscannen","Tote scan cancelled.":"Palettenbox storniert.","Exception finished":"Ausnahme abgeschlossen","Unexpected entity scanned":"Unerwartete Einheit eingescannt","Enter excess item quantity":"Überschusspostenmenge eingeben"," items":" Posten","Wrong ppsbin button pressed":"Falsche PPS-Behälter Taste betätigt","Total ":"Gesamt ","Place the tote back in bin {0} and press pptl":"Palettenbox im Behälter {0} ablegen und PPTL-Taste betätigen","Take out the tote from bin {0} and scan entity":"Palettenbox aus dem Behälter {0} herausnehmen und Einheit einscannen","Scan tote first and then scan item":"Erst Palettenbox und dann Posten einscannen","Scan excess item":"Überschussposten einscannen","Scan tote which has excess item":"Palettenbox mit Überschussposten einscannen","Invalid tote scanned":"Ungültige Palettenbox eingescannt.","Exception entry successful":"Ausnahme erfolgreich eingetragen","Are you sure you want to exit from {0} invoice and stage all bins":"Möchten Sie die Rechnung {0} wirklich schließen und alle Behälter aufführen?","Invoice number: {0}":"Rechnungsnummer: {0}","Scan or Enter {0} number":"Zahl {0} einscannen oder eingeben","Please scan or enter {0} number":"Bitte einscannen oder die Zahl {0} eingeben","STN scan successful":"STN erfolgreich eingescannt","Exit {0}":"{0} beenden","{0} number :":"{0}-Nummer:","Are you sure you want to exit from {0} {1} and stage all bins":"Möchten Sie die {0} {1} wirklich schließen und alle Behälter aufführen?","Scan or Enter the tote barcode to reprint":"Zum erneuten Drucken Barcode der Palettenbox einscannen oder eingeben","Place container in MSU slot and confirm":"Container im MSU-Lagerplatz ablegen und bestätigen","Place {0} boxes with {1} items from bin {2}":"{0} Boxen mit {1} Posten aus dem Behälter {2} ablegen","Place {0} boxes from bin {2}":"{0} Boxen aus dem Behälter {2} ablegen","Place":"Ablegen","Remove Tote from bin {0} & Press PPTL to confirm no Items Remaining":"Palettenbox aus dem Behälter {0} entfernen und PPTL-Taste betätigen um zu bestätigen, dass es keine verbleibenden Posten gibt","Press PPTL to confirm no Items Remaining in Bin {0}":"PPTL-Taste betätigen um zu bestätigen, dass sich keine Posten mehr im Behälter {0} befinden","Entities cannot be accommodated! Remove all entities from bin and press PPTL.":"Die Einheiten können nicht untergebracht werden! Alle Einheiten aus dem Behälter entfernen und PPTL-Taste betätigen.","Entities cannot be accommodated!":"Die Einheiten können nicht untergebracht werden!","Take {0} Printout and Press PPTL":"Nehmen Sie {0} Ausdruck und drücken Sie PPTL","PPS is Closed":"PPS ist geschlossen","Place box in MSU slot and confirm":"Box im MSU-Lagerplatz ablegen und bestätigen","Wrong Undock":"Falsche Abkopplung","Dock roll cage back to proceed the operation":"Überrollvorrichtung wieder ankoppeln, um mit dem Vorgang fortzufahren","Excess quantity":"Überschussmenge","Entity Damaged":"Einheit beschädigt","Issues with entity":"Probleme mit Einheit","Validate and Confirm":"Überprüfen und bestätigen","Wrong Scan. IRT bin scan expected":"Falscher Scann. IRT-Behälter muss eingescannt werden","Scan IRT Bin":"IRT-Behälter einscannen","Please put damaged entities in IRT bin and scan the bin":"Beschädigte Einheiten bitte in einem IRT-Behälter ablegen und den Behälter einscannen","Please put damaged entities in exception area":"Beschädigte Einheiten bitte in einem Ausnahmebereich ablegen","Please put extra entities in IRT bin and scan the bin":"Zusätzliche Einheiten bitte in einem IRT-Behälter ablegen und den Behälter einscannen","Please put extra entities in exception area":"Zusätzliche Einheiten bitte in einem Ausnahmebereich ablegen","Please put unscannable entities in IRT bin and scan the bin":"Nicht einscannbare Einheiten bitte in einem IRT-Behälter ablegen und den Behälter einscannen","Please put unscannable entities in exception area":"Nicht einscannbare Einheiten bitte in einem Ausnahmebereich ablegen","Please put oversized entities in IRT bin and scan the bin":"Übergroße Einheiten bitte in einem IRT-Behälter ablegen und den Behälter einscannen","Please put oversized entities in exception area":"Übergroße Einheiten bitte in einem Ausnahmebereich ablegen","Warehouse Full Remove all entities from bin & press PPTL":"Lager voll. Alle Einheiten aus dem Behälter entfernen und PPTL-Taste betätigen","Enter Quantity":"Menge eingeben","Are you sure you want to cancel the exception?":"Möchten Sie die Ausnahme wirklich abbrechen?","All scan and print will be cancelled. Confirm to cancel?":"Alle Scann- und Druckarbeiten werden abgebrochen. Abbruch bestätigen?","Yes":"Ja","No":"Nein","Exception with entity reported":"Ausnahme mit Einheit gemeldet","Please put entities with issues, in exception area":"Einheiten mit Problemen bitte in einem Ausnahmebereich ablegen","Please put entities in IRT and Scan IRT Bin":"Einheiten bitte in einem IRT-Behälter ablegen und den IRT-Behälter einscannen","Wrong Scan. Unrecognized barcode.":"Falscher Scann. Nicht erkannter Barcode.","PPS is closed":"PPS ist geschlossen","NEST MAX":"MAX FÜLLHÖHE","STACK MAX":"MAX STAPELHÖHE","DO NOT STACK":"NICHT STAPELN","FRAGILE":"ZERBRECHLICH","Length of {0} should not be greater than {1}":"Die Länge von {0} darf {1} nicht überschreiten","Scan {0} packs":"{0} Packungen einscannen","Scan {0} sub packs":"{0} Stückpackungen einscannen","Press PPTL":"PPTL-Taste betätigen","Pack Scan Successful":"Packung erfolgreich eingescannt","Scan {0} more packs and place in bin {1}":"{0} weitere Packungen einscannen und im Behälter {1} ablegen","Scan {0} more sub packs and place in bin {1}":"{0} weitere Stückpackungen einscannen und im Behälter {1} ablegen","Put pack list in trolley and press PPTL to confirm":"Stückliste im Rollwagen ablegen und zur Bestätigung die PPTL-Taste betätigen","Scan damaged entity":"Beschädigte Einheit einscannen","Damaged Quantity":"Beschädigte Menge","Wrong Scan. Entity not present in Database":"Falscher Scann. Einheit nicht in der Datenbank vorhanden","Sum of good, missing and damaged should be equal to {0}":"Summe der unbeschädigten, fehlenden und beschädigten Einheiten muss gleich {0} sein","Last item scan will be cancelled. Do you want to continue?":"Der letzte Posten wird storniert. Möchten Sie fortfahren?","Continue":"Weiter","Bin full":"Behälter voll","Please put entities which have issues in exception area":"Einheiten mit Problemen bitte in einem Ausnahmebereich ablegen","Unscannable":"Nicht einscannbar","Invalid Event.Expecting PPTL button press":"Ungültiges Ereignis. Bitte PPTL-Taste betätigen","Remove Tote from bin & Press PPTL to confirm no Items Remaining":"Palettenbox aus dem Behälter entfernen und PPTL-Taste betätigen um zu bestätigen, dass es keine verbleibenden Posten gibt","Wrong entity scan.Please scan the correct entity":"Falsche Einheit eingescannt. Bitte die richtige Einheit einscannen","Physically Damaged entity reported.":"Äußerlich beschädigte Einheit gemeldet.","Entity entry successful":"Einheit erfolgreich eingetragen","Bin scan successful":"Behälter erfolgreich eingescannt","Physically Damaged Reported should equal Scanned Quantity":"Als äußerlich beschädigte gemeldete Einheiten müssen der eingescannten Menge entsprechen","SKU not present in Database.":"SKU nicht in der Datenbank vorhanden.","Extra entity scan found.":"Scann einer zusätzlichen Einheit gefunden.","Container Already Scanned.":"Container bereits eingescannt.","Invalid Entity Scanned.":"Ungültige Einheit eingescannt.","Quantity of Physically damaged entities scanned is less.":"Eingescannte Menge der äußerlich beschädigten Einheiten ist geringer.","Error":"Fehler","Waiting for Bins to be Cleared at Pick Front":"Warten auf zu löschende Behälter an der Aufnahmeseite","Processing Next Pick from Rack ":"Bearbeitung der nächsten Auswahl vom Regal ","Scan Damaged Entity":"Beschädigte Einheit einscannen","Warehouse Full":"Lager voll","Scan a packing box and keep in bin {0}":"Eine Verpackungsbox einscannen und im Behälter {0} behalten","Pick box from MSU and press PPTL on Bin {0}":"Box aus MSU auswählen und PPTL-Taste auf Behälter {0} betätigen","Extra details entered are incorrect.Please enter correct details":"Die eingegebenen zusätzlichen Angaben sind fehlerhaft. Bitte die richtigen Angaben eingeben","Packing box scan failed":"Einscannen der Verpackungsbox fehlgeschlagen","Wrong entity Scanned. Bin Scan Expected.":"Falsche Einheit eingescannt. Behälter muss eingescannt werden.","Bin Already Scanned":"Behälter bereits eingescannt","Issue with Pack":"Probleme mit Packung","Issue with Sub pack":"Probleme mit Stückpackung","Issue with MPU":"Probleme mit MPU","Space not available":"Platz nicht verfügbar","Bad barcode on pack":"Fehlerhafter Barcode auf der Packung","Bad barcode on sub pack":"Fehlerhafter Barcode auf der Stückpackung","Unexpected pack":"Erwartete Packung","Pack missing":"Packung fehlt","Sub pack missing":"Stückpackung fehlt","Damaged sub pack":"Beschädigte Stückpackung","Good pack":"Unbeschädigte Verpackung","Good sub pack":"Unbeschädigte Stückpackung","Scan not Allowed. PPS close/force close or profile change requested.":"Einscannen unzulässig. Schließen / Abschalten des PPS oder Profiländerung erforderlich.","Pack scan successfully":"Packung erfolgreich eingescannt","Sub-Pack scan successfully":"Stückpackung erfolgreich eingescannt","Scan MPU":"MPU einscannen","Scan {0} or {1}":"","Continue scanning {0} and {1}":"","Enter Quantity of Unscannable {0}":"","Wait for MPU":"Warten auf MPU","No Sub-Packs to reconcile":"Keine Stückpackungen zum Abstimmen","Pack Unscannable":"Packung kann nicht eingescannt werden","Sub-Pack Unscannable":"Stückpackung kann nicht eingescannt werden","Damage Barcode":"Beschädigungs-Barcode","Packs":"Packungen","Sub-Packs":"Stückpackungen","Scan Small Box":"Kleine Box einscannen","Scan {0} Box and Place in Bin {1}":"{0} Box einscannen und im Behälter {1} ablegen","Scan {0} Small Box and Place in Bin {1}":"{0} Kleine Box einscannen und im Behälter {1} ablegen","Put Pack list in trolley and press PPTL to confirm":"Stückliste im Rollwagen ablegen und zur Bestätigung die PPTL-Taste betätigen","Done":"Erledigt","No more entities to be scanned":"","Type":"","Serial Number":"","Quantity":"","Wrong Bin Scanned. Scan Expected for Roll Cage ready for undocking.":"","Issues with {0}":"","Scan {0} damaged entities":"","Scan {0} {1}":"","Scan {0} {1} and place in Bin {2}":"","Enter Unscannable Tote Quantity":"","Enter items that can fit in the bin":"","{0} scan successfully":"","Place Tote in Bin {0} and Press PPTL":"","Tote in use at front seat":"","Waiting for Tote to be associated from back":"","{0} scan successful":"","Waiting for put_away to complete from front":"","Tote cannot be associated with bin of another seat":"","Waiting for put away to complete from front":"","Scan checklist items to proceed":"","Unexpected Entity In {0}":"","Scan a {0}":"","Scan a {0} or Press PPTL":"","Press PPTL to clear the Bin":"","Place {0} in Bin and scan the Bin barcode":"","Waiting for order to be completed from front":"","Waiting for {0} to be associated from back":"","{0} scan successful.":"","Excess Entity in {0} recorded.":"","{0} unexpected. {0} in use in another location":"","{0} unexpected. Service request not present in {0}.":"","Invalid resource.":"","{0} unexpected. Service request not in correct state.":"","{0} unexpected. Empty {0} scanned.":"","{0} unexpected. Scanned {0} does not exist.":"","{0} unexpected. Service Request does not exist.":"","Wrong scan. Please Scan item or {0}":"","{0} unexpected. {0} is not empty.":"","Bin barcode of other PPS scanned":"","Scan {0}":"","Scan {0} which has excess item":"","Scan {0} first and then scan item":"","Invalid {0} scanned":"","{0} Close Cancelled":"","{0} docked successfully":"","Are You Sure You Want to Close {0}?":"","Scan {0} or Stage PPS Bin":"","Enter Unscannable {0} Quantity":"","Place {0} in Bin {1} and Press PPTL":"","{0} already opened. Scan some other {1}":"","{0} already closed. Scan some other {1}":"","Close current {0} first":"","Wrong entity scanned. Please scan {0}":"","{0} excess entities found in {0}. Please put entities in exception area and confirm":"","Entity not expected in {0}. Please put entity in exception area and confirm":"","Expecting {0} closure.":"","{0} not present in database.":"","{0} matched .":"","Place the {0} back in bin {1} and press PPTL":"","Take out the {0} from bin {1} and scan entity":"","Remove {0} from bin {1} & Press PPTL to confirm no Items Remaining":"","Press PPTL or Scan a {0}":"","Select Bin which does not require {0}":"","Select Bin to disassociate {0}":"","{0} close successful.":"","{0} not closed.":"","Excess item in {0} recorded. Now press PPTL":"","Cancelled excess entity in {0}":"","Cancelled invalid entity in {0}":"","Invalid entity in {0} recorded":"","Scan {0} to associate with Bin":"","Press PpsBin Button Or Scan a {0}":"","{0} is already scanned.Expecting pptl scan.":"","{0} are not required.Please don't scan {1} barcode":"","Please scan the {0} first and then scan pptl barcode":"","{0} scanned.Expecting pptl scan.":"","Pptl scan not allowed. {0} are not required":"","{0} didn't get associated":"","After scannning {0} barcode, please scan pptl barcode":"","No {0} associated. Pease keep {0} in the Bin and then scan":"","No {0} scanned":"","{0} cancelled":"","{0} already associated with ppsbin":"","Please press ppsbin button which does not have any {0} associated":"","{0} assigned successfully to ppsbin {0}":"","{0} are not required":"","{0} could not be reserved as already reserved":"","Exception invalid as {0} are not required with this PPS":"","Override {0} not possible":"","Barcode didn't match with current {0} barcode":"","Incorrect {0} barcode scanned. Please try again":"","System not configured for {0}":"","{0} association required":"","{0} association failed. Repeat scan operation":"","{0} are anyway not required.Please proceed further":"","{0} already associated with bin {0}":"","{0} in use at front seat":"","{0} cannot be associated with bin of another seat":"","{0} assigned successfully to bin":"","{0} disassociated from Bin":"","{0} associated with another bin":"","Please scan the {0} first and then scan PPTL barcode":"","Override {0} Exception cannot be raised for bins with {1} associated":"","PPTL scan not allowed. System not configured for {0}":"","Scan pptl barcode after scannning {0} barcode":"","{0} scanned is not opened":"","{0} already scanned":"","Wrong entity Scanned. {0} Scan Expected.":"","Disassociate {0}":"","Override {0} Required":"","Scan slot":"","Scan or Enter the {0} barcode to reprint":"","{0} scan cancelled.":"","{0} scanned is not idle":"","Scan {0} first and then scan rack":"","{0} already associated with slot.Scan empty slot":"","Invalid {0} scan":"","{0} close successful":"","Scan new {0}":"","Scan item or {0}":"","Additional Information":"","Selected UOM: ":"","Close":"","Select Value":"","{0} already associated with bin":"","Previous Pick Details":"","Previous Put Details":"","Dock {0}":"","Scan {1} or Dock {0}":"","Undock {0}":"","Scan a Tote":"","Scan {0} location":"","Pick complete. Waiting for next pick.":"","Missing barcode scanned. Waiting for confirmation.":"","{0} cannot be associated with inactive bin":"","{0} cleared":"","Scan load unit and gently push it away":"","Box Type":"","Location":"","Place Box":"","Scan":"","Checklist":"","Scan {0} Serial":"","Scan {0} Serial to Open":"","Scan carrying unit and gently push it away":"","Pick all items from slot {0} and scan slot":"","{0} undocked successfully":"","Pick all items from slot and scan slot":"","NO ITEM FOUND":"","Item details":"","Item Search":"","Event":"","Expectation Id":"","Item Location":"","UOM Details":"","Excess Quantity":"","Total: ":"","Scan excess entities":"","Dis-associate":"","Data capture failed":"","No entities to reconcile":"","LOGIN":"ANMELDUNG","Language":"Sprache","Username":"Nutzername","Login to Butler System":"","Login to":"Einloggen in","Enter username":"Benutzername eingeben","Enter password":"Passwort eingeben","Scan ID card to login.":"Scannen Sie die ID-Karte, um sich anzumelden.","{0} Unscannable":"{0} Nicht absehbar","Scan entities":"Objekte scannen","Waiting for {0} to be docked":"","Put Pack list in {0} and press PPTL to confirm":"","Please scan PPTL which has excess item":"","Please put unscannable tote in exception area":"","Sum of good and exception quantity should be equal to {0}":"","{0} Unscannable entities recorded. WMS notified":"","Scan item or enter barcode details":"","{0} unexpected. Service request not present in {1}.":"","MSU Sent":"","This put request is not supported in current flow":"","Service request not in correct state":"","Multiple Service request found":"","Unknown error":"","Scan item":"","Item unexpected. No service request found for this item":"","Scan entity":"","Put entity in slot and scan slot to confirm":"","Excess detected, remove '{0}' items and confirm again":"","Invalid {0}":"","{0} closed":"","Unknown barcode":"","Unexpected entity":"","Excess quantity detected, remove '{0}' quantity and confirm again":"","Call for Help":"","Tote Unscannable":"","{0} unexpected. Scanned {1} does not exist.":"","HEAVY":"","Scan tote":"","Items In Bin":"","Scan tote location":"","Send MSU":"","Put and confirm":"","Close Cart":"","Dock Cart":"","Are you sure that all the items in the cart were scanned?":"","The following {0} items were found missing":"","OUTER":"","INNER":"","Wrong scan. Please Scan tote":""};module.exports=obj

},{}],253:[function(require,module,exports){
var obj={"Scan item / Stage PPS Bin":"סרוק פריט / טען לתוך תא","Scan Tote to associate with Bin":"סרוק ברקוד ניטור כדי לשייך לתא","Press PpsBin Button Or Scan a Tote":"לחץ על נורת תא או סרוק ברקוד ניטור","User Name":"שם משתמש","Password":"סיסמה","Are you sure you want to close Tote":"האם אתה בטוח שאתה רוצה לסגור ברקוד ניטור?","Details":"פרטים","Scan {0} items":"סרוק פריטים {0}","Scan box barcode":"סרוק ברקוד קופסא","Press PpsBin {0} to remove items":"לחץ על נורת תא {0} כדי להסיר פריטים","Tote is already scanned.Expecting pptl scan.":"ברקוד ניטור כבר נסרק.  המערכת ממתינה לסריקת ברקוד תא","Totes are not required.Please don't scan tote barcode":"אין צורך ביחידות ניתור.  נא לא לסרוק ברקוד יחידות ניטור","Wrong PPS bin scanned":"שגיאה בסריקת תא","Please scan the tote first and then scan pptl barcode":"נא לסרוק קודם כל את ברקוד הניטור, ולאחר מכן לסרוק את ברקוד התא","Tote scanned.Expecting pptl scan.":"ברקוד ניטור נסרק.  המערכת ממתינה לסריקת תא","Pptl scan not allowed. Totes are not required":"אין לסרוק נורת תא.  אין צורך ביחידות ניטור","Tote didn't get associated":"יחידת ניטור לא משוייכת","After scannning tote barcode, please scan pptl barcode":"סרוק ברקוד ניטור, ולאחר מכן סרוק ברקוד תא","Wrong Ppsbin button pressed.Please press those buttons having color blue":"לחצת על נורת תא לא נכונה.  נא ללחוץ על נורת תא המאירה באור כחול","Please complete pickback for pending bin and then proceed":"עבור תא זה יש לסיים פעילות באזור האחורי ואז להמשיך","No totes associated. Pease keep totes in the Bin and then scan":"איך שיוך ליחידת ניטור.  נא להשאיר את יחידות הניטור בתאים ואז לסרוק","Documents printed Successfully":"המסמכים הודפסו בהצלחה.  ","No tote scanned":"לא נסרקו יחידות ניטור","Tote cancelled":"יחידת ניטור בוטלה","Tote already associated with ppsbin":"יחידת ניטור כבר משויכת לתא","Incorrect tote barcode scanned. Please try again":"ברקוד ניטור שגוי נסרק, נא לסרוק שוב","Please press PPTL button which does not have any totes associated":"נא לסרוק נורת תא שאינה משויכת ליחידת ניטור","Tote assigned successfully to ppsbin {0}":"הקצאת יחידת ניטור לתא בוצעה בהצלחה","Bin {0} items removed successfully":"תא {0} פריטים הוסרו בהצלחה","Totes are not required":"אין צורך ביחידות ניטור","Wrong Barcode scanned":"נסרק ברקוד שגוי","Tote could not be reserved as already reserved":"לא ניתן להשתמש ביחידת הניטור בגלל שהיא כבר משוייכת","Exception invalid as totes are not required with this PPS":"יחידות ניטור אינן נדרשות לעמדה זו","Override tote not possible":"א ניתן לבצע מעקף עבור יחידת ניטור","Scanning pptl barcode not allowed":"אין אישור לסרוק ברקוד תא","Please press those buttons having color blink_blue":"לחץ על הנורה בצבע כחול","Unhandled event ocurred":"תקלה ","Barcode didn't match with current tote barcode":"הברקוד שנסרק אינו מתאים לברקוד יחידת הניטור","Testing configuration {0} and {1}":"המערכת בודקת קונפיגורציה {0} ו {1}","Processing. Please wait and scan later":"המערכת מבצעת בדיקה.  יש להמתין ולסרוק מאוחר יותר","Waiting for rack":"המתן לשידה","Current PPS mode does not support back seat. Please logout.":"התצורה של העמדה אינה תומכת בעמדה אחורית.  יש להתנתק.","Scan items and place in bin {0}":"סרוק פריטים והניח בתא {0}","Stage Bin or Scan Entity":"טען תא או סרוק פריט","Place Entity in Bin and Press PPTL":"טען פריט לתוך תא ולחץ על נורה","Are You Sure You Want to Close Tote?":"האם אתה בטוח שאתה רוצה לסיים את העבודה עם יחידת הניטור הזו?","Scan Tote or Stage PPS Bin":"סרוק יחידת ניטור או טען תא","Item Not Expected in Tote":"פריט לא צפוי עבור יחידת ניטור זו","Tote already opened. Scan some other tote":"יחידת ניטור זו כבר נמצאת בשימוש.  יש לסרוק יחידת ניטור אחרת","Tote already closed. Scan some other tote":"יחידת ניטור זו כבר לא בשימוש.  יש לסרוק יחידת ניטור אחרת","No matching tote found":"נמצאה יחידת ניטור לא מתאימה","Wrong entity scanned. Please scan tote":"סרקת פריט שגוי, סרוק יחידת ניטור","No entities added yet. Scan entities and then press PPTL":"לא הוספו פריטים.  סרוק פריטים ואז לחץ על נורת תא.","Wrong entity scanned. Please scan Container/Item.":"נסרק פריט שגוי.  סרוק פריט שוב","Cannot cancel scan. No scanned box found":"לא ניתן לבטל סריקה.  לא נמצאה קופסא שנסרקה","Entity scan not expected. Waiting for PPTL press":"אין צפי לסריקה של פריט זה.  המערכת ממתינה ללחיצה על נורת תא","Bin selected for put. Cannot be staged":"התא נבחר למשימת פיזור.  לא ניתן להפעיל","SKU not present in database. Put into IRT bin.":"המק\"ט אינו קיים במערכת.  הכנס לתא IRT","No free bins. Please scan later":"אין תאים פנויים.  נא לסרוק במועד מאוחר יותר","Wrong PPTL pressed. Please try another":"לחצת על נורת תא שגויה.  נא לנסות נורה אחרת.  ","Please put entities in exception area and confirm":"יש להניח פריטים באזור חריגים ולאשר","Wrong bin chosen.Try selecting another bin":"נבחר תא שגוי.  נא לבחור תא אחר","Please scan same SKU to complete this exception":"נא לסרוק את אותו המק\"ט כדי להשלים את החריגה הזו","Entity scan not expected.":"אין צפי לפריט הזה.","Tote not present in database.":"יחידת ניטור אינה קיימת במערכת","Tote has been opened.Scan all items in tote and then scan tote again to close it":"יחידת ניטור נפתחה.  יש לסרוק את כל הפריטים ביחידת הניטור שוב ואז לסגור אותה.","PPS is in paused mode. Cannot process new entity. Try after some time":"עמדה במצב המתנה.  לא ניתן לבצע עבודות נוספות.  יש לנסות שוב מאוחר יותר","Cancel scan successful.":"ביטול סריקה בוצע בהצלחה","Tote close successful.":"יחידת ניטור נסגרה בהצלחה","Tote not closed.":"יחידת ניטור לא סגורה","Entity scan successful.":"סריקה התבצעה בהצלחה","PPTL press successful":"לחיצה על נורת תא בוצעה בהצלחה","Data capture valid":"המידע שנאסף נכון","Excess item in tote recorded. Now press PPTL":"המערכת תיעדה פריט נוסף ביחידת הניטור.  לחץ על נורת תא עכשיו","Excess item in tote recorded.":"המערכת תיעדה פריט נוסף ביחידת הניטור","{0} unscannable entities recorded. WMS notified":"תועדו {0} פריטים שאינם ניתנים לסריקה.  WMS עודכנה","{0} extra entities recorded in bin. WMS notified":"תועדו {0} פרטים נוספים בתא.  WMS עודכנה","{0} oversized entities recorded.WMS notified":"תועדו {0} פריטים גדולים מדי.  WMS עודכנה","{0} Physically damaged entity recorded.WMS notified":"תועדו {0} פריטים פגומים פיזית.  WMS עודכנה","Exception cancelled":"חריג בוטל","Box with same serial number already exists in the warehouse":"קופסא עם אותו מספר סריאלי כבר קיימת במחסן","Entity already scanned.Waiting for PPTL press":"הפריט כבר נסרק.  המערכת ממתינה ללחיצה על נורת תא.","No bins available to stage":"אין תאים פנויים לטעינת יחידות ניטור","Bin already staged. Ignoring event":"התא כבר טעון. המערכת מתעלמת מהפעולה","Bin empty. Cannot be staged":"תא ריק,.  לא ניתן לטעון","Scan Box/Items from Slot":"סרוק קופסא/פריט מתוך סלוט","Scan Remaining Item In Box":"סרוק את הפריט שנותר בקופסא","Last Box Scan Completed! Scan Remaining Box/Items":"קופסה אחרונה נסרקה!  יש לסרוק את הקופסאות/פריטים שנותרו","Status To Reconcile":"","This box belongs to some other SKU in the slot.Put it back.Scan next box.":"הקופסא הזו שייכת למק\"ט אחר באותו סלוט.  הנח אותה בחזרה במקום, וסרוק את הקופסא הבאה. ","This box does not belong to this slot. Remove the box and put in exception area.":"הקופסא הזו אינה שייכת לסלוט הזה.  הוצא אותה מהסלוט והנח באזור חריגים.","Waiting for MSU":"המערכת ממתינה ל MSU","Wrong Barcode":"ברקוד שגוי","Box Scan successful":"סריקת קופסה בוצעה בהצלחה","Item Scan successful":"סריקת הפריטים הצליחה","Item scan successful":"סריקת הפריט בוצעה בהצלחה","Data capture failed at item {0}":"לכידת מידע נכשלה בפריט {0}","Bin {0} selected":"תא {0} נבחר","Bin {0} unselected":"בחירת תא {0} בוטלה","Connection is closed. Connecting...":"החיבור הסתיים.  מבצע חיבור מחדש...","Extra item found please put back item in Exception bin":"פריט מיותר נמצא, נא להניח בתא חריגים","Enter Unscannable Entity Quantity":"הקלד כמות פרטים שאינם ניתנים לסריקה","Scan Oversized Entity Quantity":"סרוק כמות פריטים גדולים חריגים","Please Select The Bin With Excess Entity":"נא לבחור את התא עם הכמות החריגה","Enter Quantity of Excess Entities":"נא להקליד כמות של פריטים חריגים ","Place Entity in Slot and Scan More":"הנח את הפריט בסלוט וסרוק עוד פריט","Scan Slot to Confirm":"סרוק סלוט לאישור","Wait for MSU":"המתן לMSU","Scan Entity From Bin {0}":"סרוק פריט מתא {0}","Enter Good Quantity to be Put into Slot":"הקלד כמות תקינה לפיזור לסלוט","Put Back Entities in the PPS Bin":"נא להניח פריטים בחזרה בתא ","Confirm MSU Release":"אשר שחרור MSU","Scan Slot":"סרוק סלוט","Scan {0} Items":"סרוק {0} פריטים","Cancel audit successful.Audit Restarted":"ספירה מוצלחת בוטלה.  ספירה מתחילה מחדש","Scan Box":"סרוק קופסא","Scan {0} Items and Place in Bin {0}":"סרוק {0} פריטים וטען אותם לתא {0}","Press PPTL to confirm":"לחץ על נורה כדי לאשר","Scan Tote to Associate with Bin":"סרוק יחידת ניטור כדי לקשר לתא","Press PPTL or Scan a Tote":"לחץ על נורת תא או סרוק יחידת ניטור","Press bin PPTL to remove entities":"לחץ על נורת תא כדי להסיר פריטים","Press bin PPTL":"לחץ על נורת תא","Press PPTL for bin {0} to confirm":"לחץ על נורת תא {0} כדי לאשר","Press print button to proceed":"לחץ על כפתור הדפסה כדי להמשיך","Select Bin to skip print":"בחר בתא כדי לדלג על הדפסה","Select Bin which does not require tote":"בחר בתא שאינו מצריך יחידת ניטור","Select Bin to disassociate tote":"בחר בתא כדי לנתק אותו מיחידת ניטור","Pick complete. Waiting for next rack.":"ליקוט הושלם.  המערכת ממתינה למדף הבא","Location scan successful":"סריקת מיקום בוצעה בהצלחה","Box scan successful":"סריקת קופסא בוצעה בהצלחה","Cancel scan successful":"ביטול סריקה בוצעה בהצלחה","Expecting MSU release confirmation from GUI, got invalid event.":"המערכת ממתינה לקבל אישור לשחרר MSU מהמסך.  התקבלה פקודה לא תקינה","Data capture failed at item":"המערכת לא הצליחה ללכוד את המידע עבור פריט ","Wrong slot location scanned. Please try again":"נסרק סלוט שגוי.  נא לנסות שוב","Wrong box scanned. Please try again":"נסרקה קופסא שגויה.  נא לנסות שוב","Scan a box first":"יש לסרוק קודם כל את הקופסא","Wrong PPTL pressed. Please press correct PPTL":"נורת תא שגויה נלחצה.  נא ללחוץ על נורת התא הנכונה.","Picked quantity more than expected. Put extra items back in MSU":"לוקטו יותר מדי פריטים.  נא להניח את הפריטים העודפים בחזרה ב MSU","Wrong item quantity update":"עודכנה כמות פריטים שגויים","Wrong item scanned. Please scan correct item":"נסרק פריט שגוי.  נא לסרוק את הפריט הנכון","Waiting for MSU. Please wait and scan later":"המערכת ממתינה ל MSU.  נא להמתין ולסרוק מאוחר יותר","System Error. Scanned entity details not available at this time":"תקלת מערכת.  נתוני פריט שנסרק לא זמינים כעת","No PPS bins empty. Please empty them from Pickback":"אין תאים ריקים.  נא לרוקן אותם מעמדה אחורית.","PPS mode change requested:scan not allowed":"התקבלה בקשה לשנות ייעוד עמדה.  לא ניתן לסרוק","PPS mode change requested:auto staging all bins":"התקבלה בקשה לשנות ייעוד עמדה:  כל התאים טעונים אוטומטית.  ","PPTL press not expected":"המערכת לא מצפה ללחיצה על נורת תא","Scan not expected":"המערכת לא מצפה שתתבצע סריקה","Barcode didn't match the current tote barcode":"ברקוד אינו מתאים לברקוד יחידת הניטור הזו","System not configured for totes":"המערכת לא מתאימה לארקליות","Invalid Exception for this configuration":"חריגה לא חוקית עבור התקנה זו","No tote associated. Please keep a tote in bin and scan":"אין שיוך ליחידת ניטור.  נא להשאיר את יחידת הניטור בתא ולסרוק","Wrong PPTL pressed":"נורת תא שגויה נלחצה","Totes are anyway not required.Please proceed further":"אין צורך ביחידות ניטור.  נא להמשיך הלאה","Tote scan cancelled":"בוטלה סריקת יחידת ניטור","Documents printed successfully":"המסמכים הודפסו בהצלחה","Order removed successfully from bin {0}":"ההזמנה הוסרה בהצלחה מתא {0}","Tote assigned successfully to bin":"בוצעה התאמה של יחידת ניטור לתא","Tote association failed. Repeat scan operation":"התאמה של יחידת ניטור נכשלה.  נא לסרוק שוב","Tote associated with another bin":"יחידת ניטור מותאמת לתא אחר","Please scan PPTL barcode":"נא לסרוק ברקוד של נורת תא","Tote disassociated from Bin":"התאמה של יחידת ניטור לתא בוטלה","Please complete process for pending bin and then proceed":"נא להשלים את התהליך עבור התא הממתין ואז יהיה ניתן להמשיך","Tote already reserved":"יחידת ניטור כבר שמורה","Wrong barcode scanned":"נסרק ברקוד שגוי","Please scan the tote first and then scan PPTL barcode":"נא לסרוק קודם כל את יחידת הניטור, ולאחר מכן לסרוק את ברקוד נורת התא","Override Tote Exception cannot be raised for bins with totes associated":"לא ניתן לדווח שיחידת הניטור חריגה.  הסיבה היא בגלל שיחידת הניטור משויכת לתא.  ","PPTL scan not allowed. System not configured for tote":"אי אפשר לסרוק נורת תא.  המערכת אינה ערוכה לארקליות","PPTL scan not allowed":"אין לסרוק נורת תא","Tote scan expected":"המערכת מצפה לסריקה של יחידת ניטור","Entity scanned is not from bin {0}. Replace and scan from bin {1}":"הפריט שנסרק אינו מתא {0}.  החלף וסרוק מתא {1}","Wrong entity scanned":"נסרק פריט שגוי","Waiting for MSU scan. Please scan entity later.":"המערכת ממתינה לסריקת MSU.  נא לסרוק פריט מאוחר יותר","Expected quantity exceeded.":"התקבלה כמות גדולה מהצפוי","Wrong scan! Entity scan expected but slot barcode scanned.":"סריקה שגויה.  המערכת מצפה לסריקת פירט, אך במקום זאת בוצעה סריקה של סלוט","Actual put quantity not equal to the sum of Good and Expection quantity.":"הכמות שפוזרה בפועל אינה שווה לכמות הפריטים התקינים והחריגים.","Actual put quantity less than than revised quantity.":"המערכת שיתבצע פיזור של כמות גדולה יותר של פריטים","Wrong slot scanned":"נסרק סלוט שגוי","Entity scan successful":"סריקת פריט בוצעה בהצלחה","Slot scan successful":"סריקת סלוט בוצעה בהצלחה","Damaged and missing entity recorded.":"המערכת תיעדה את הדיווח על פריטים חסרים ופגומים.","Space unavailable recorded.":"המערכת תיעדה את הדיווח על כך שאין מספיק מקום","Please put entity in exception area and confirm":"נא להניח פריט באזור חריגים ולאשר","Entity not expected in tote. Please put entity in exception area and confirm":"פריט אינו צפוי ביחידת הניטור.  נא להניח את הפריט באזור חריגים ולאשר.","{0} excess entities found in tote. Please put entities in exception area and confirm":"{0} פריטים חריגים התגלו ביחידת הניטור.  נא להניחא את הפריטים באזור חריגים ולאשר.","Cancelled excess entity in tote":" פריט עודף ביחידת ניטור בוטל","Cancelled invalid entity in tote":"פריט לא מתאים ביחידת ניטור בוטל","Invalid entity in tote recorded":"המערכת תיעדה פריט לא מתאים ביחידת ניטור","Wrong enitity scanned. Expecting scan from bin {0}":"נסרק פריט שגוי.  המערכת ממתינה לסריקה מתא {0}","PPTL Management":"ניהול נורות תא","Scanner Management":"ניהול סורקים","Entity Oversized":"פריט בגודל חריג","Entity Unscannable":"לא ניתן לסרוק פריט","Extra Entities in Bin":"עודף פריטים בתא","Entity Missing / Unscannable":"פריט חריג/לא ניתן לסריקה","Space Not Available":"אין מקום פנוי","Mising Box":"חסרה קופסא","Disassociate Tote":"ביטול התאמה של יחידת ניטור","Overide Tote Required":"יש צורך לבצע עקיפה של יחידת ניטור","Reprint":"הדפסה מחדש","Skip Print":"דילוג על הדפסה","Peripheral added successfully":"המערכת השלימה את ההוספה של הציוד. ","Peripheral not added":"המערכת לא הוסיפה את הציוד.","Scan Box or Items":"סרוק קופסא או פריט","Check Count":"בדוק ספירה","You cannot enter value more than 9999":"לא ניתן להקליד ערך מעל 9999","Please enter a quantity greater than 0":"יש להקליד ערך גבוה מ 0","Place extra entity in Exception area.":"יש להניח פריטים עודפים באזור חריגים","Sum of missing, good and damaged should be equal to {0}":"סה\"כ חוסרים, תקינים ופגומים צריך להיות שווה ל 0","Scan excess item quantity":"יש לסרוק כמות פריטים עודפת","Quantity should be less than or equal to {0}":"כמות צריכה להיות פחות או שווה ל {0}","You are not allowed to keyed in the quantity from the numpad. Force Scan is required.":"אין לך הרשאה להקליד כמות באמצעות המקלדת.  יש לסרוק כל פריט","Waiting for Bins to be Cleared at Pick Back":"המערכת ממתינה לפינוי תכולת תאים מעמדה אחורית","Peripheral deleted successfully":"המערכת מחקה את הציוד בהצלחה.","Peripheral not deleted successfully":"המחיקה של הציוד נכשלה.","Cancel Exception":"בטל חריג","Cancel Scan":"בטל סריקה","Finish":"סיום","Back":"אחורה","OK":"בסדר","FINISH":"סיום","Print":"הדפסה","Skip Printing":"דלג על הדפסה","Override":"עקיפה","Add Scanner":"הוסף סורק","Edit Details":"ערוך נתונים","NEXT":"הבא","CONFIRM":"אשר","Stage":"טען","Stage All":"טען הכל","BACK":"אחורה","CLOSE":"סגור","Cancel":"בטל","Confirm":"אשר","TOTE":"יחידת ניטור","Clear All":"נקה הכל","Submit":"אשר","Exceptions":"חריגים","Next":"הבא","Bin":"תא","Selected":"נבחר","Unselected":"בחירה שבוטלה","System is Idle":"המערכת מוכנה","CURRENT SLOT":"סלוט נוכחי","Box Serial Numbers":"סריאלים של קופסא","No Items To Reconcile":"אין צורך לבצע שינוי בכמות הפריטים","List Of Items To Reconcile":"רשימה של פריטים שצריך לבצע עבורם שינוי","View More":"הצג עוד","Please put exception entities in exception area":"נא להניח פריטים חריגים באזור חריגים","Please put exception entities in IRT bin and scan the bin":"נא הניח פריטים חריגים ב IRT ולסרוק את התא","Product Information":"פרטי מוצר","Bin Info":"פרטי תא","Associate tote with bin":"שייך יחידת ניטור לתא","Extra Entity Found":"נמצא פריט עודף","Perform Action":"בצע פעולה","Input Extra Details":"הוספת נתונים","Expected":"צפוי","Actual":"בפועל","Bin ID":"זהות תא","Barcode":"ברקוד","Peripheral ID":"מזהה של ציוד","Actions":"פעולות","Scanner ID":"זהות סורק","Delete":"מחק","Product SKU":"מק\"ט מוצר","Expected Quantity":"כמות צפויה","Actual Quantity":"כמות בפועל","Missing":"חסרים","Extra":"עודף","Barcode Damage":"ברקוד פגום","Item in Box Serial Numbers":"פריטים סריאלים בקופסא","Loose Items":"פריטים בתפזורת","Loose Items Serial Numbers":"פריטים בתפזורת עם סריאלים","Product Details":"פרטי מוצר","Product Name":"שם מוצר","Product Desc":"תיאור מוצר","Product Type":"סוג מוצר","Tote already associated with bin {0}":"יחידת ניטור כבר משוייכת לתא {0}","Entity Scan not expected. Press PPTL":"המערכת לא מצפה לסריקה של פריט.  יש ללחוץ על נורת תא.","Item Missing/Unscannable":"פריט חסר/לא ניתן לסריקה","Missing Box":"קופסא חסרה","Override Tote Required":"יש לבצע מעקף של יחידת ניטור","Items In Box Unscannable":"הפריט שבקופסא אינו ניתן לסריקה","Box Unscannable":"הקופסא איננה ניתנת לסריקה","Loose Items Unscannable":"הפריטים שבתפזורת אינם ניתנים לסריקה","Please put unscannable entities in exception area.":"נא להניח פריטים שאינם ניתנים לסריקה באזור חריגים","Please put oversized entities in exception area.":"נא להניח פריטים בגודל חריג באזור חריגים","Take the Items out from the Slot":"יש לקחת את הפריטים מהסלוט","Pptl press not expected.":"המערכת לא מצפה ללחיצה על נורת תא","Scan not expected.":"המערכת לא מצפה לסריקה","Wrong scan.Expecting item scan.":"סריקה שגויה.  המערכת מצפה לסריקה של פריט","Wrong scan.Expecting container scan.":"סריקה שגויה.  המערכת מצפה לסריקה של מיכל","Wrong scan.Expecting location scan.":"סריקה שגויה.  המערכת מצפה לסריקה של מיקום","Scan Excess Entity Quantity":"נא לסרוק כמות חריגה של פריטים","Entity already scanned.Confirm exception":"פריט כבר נסרק.  יש לאשר חריג","Exception":"חריג","Logout":"התנתק","Utility":"שונות","EXCEPTION":"חריג","Good Quantity":"כמות פריטים תקינים","Missing Quantity":"כמות פריטים חסרים","Unscannable Quantity":"כמות לא ניתנת לסריקה","Remove Item":"הסר פריט","Item Missing/Bad Barcode":"פריט חסר/ברקוד פגום","Sum of missing and good quantity should be equal to {0}":"סכום הפריטים החסרים והתקינים צריך להיות שווה ל {0}","Login":"התחברות  ","Enter Username":"הקלד שם משתמש","Enter Password":"הקלד סיסמה","Invalid credentials":"פרטי התחברות שגויים","Login not allowed. You're already logged in":"אין אישור להתנתק.  אתה כבר מחובר למערכת","Place Item in slot and scan more":"מקם פריט בסלוט והמשך לסרוק","PPTL":"נורת תא","Scan Slot Barcode":"סרוק ברקוד סלוט","Unexpected Item":"פריט לא צפוי","Stage Bin or Scan Item":"טען תא או סרוק פריט","Scan & Confirm":"סרוק ואשר","Scan Item From Bin":"סרוק פריט מתוך תא","Scan Tote":"סרוק יחידת ניטור","Scan MSU Barcode":"סרוק ברקוד MSU","Scan Items":"סרוק פריטים","Status":"סטאטוס","Could not connect to PPS.Please try again.":"החיבור לעמדה נכשל.  נא לנסות שוב","product_sku":"מק\"ט_מוצר","type":"סוג","quantity":"כמות","item":"פריט","box":"קופסא","SKU not present in Database.Put in exception area":"מק\"ט לא קיים במערכת.  נא להעביר לאזור חריגים","Please put extra entities in exception area.":"נא להעביר פריטים עודפים לאזור חריגים","Space Available For":"שטח פנוי עבור","Tote Details":"פרטי יחידת ניטור","Close current tote first":"סגור יחידת ניטור נוכחית קודם","CURRENT BIN":"תא נוכחי","Bad Barcode Quantity":"כמות הפריטים עם ברקוד שאינו תקין","Enter Scanner Id":"הקלד זהות סורק","Back seat not supported for this mode":"עמדה אחורית אינה נתמכת בתצורה זו","Bad Data":"נתונים שגויים","Peripheral already added":"ציוד כבר התווסף למערכת","Scan Bin Barcode":"סרוק ברקוד של תא","Update":"עדכן","Japanese":"יפנית","English":"אנגלית","Exception Finished":"המערכת תיעדה את הדיווח על חריג.","PPS Mode":"תצורת עמדה","Seat Type":"צד עמדה:  קדמי/אחורי","Good Quantity Cannot be Equal to the Total Quantity":"כמות פריטים תקינים אינה יכולה להיות שווה לסה\"כ הכמות","Undock Roll Cage if no items remaining":"נתק עגלה אם לא נותרו פריטים","Gently push roll cage away from the frame":"בעדינות הרחק עגלה מהמסגרת","Scan tote and place it in the slot":"סרוק יחידת ניטור והנח בסלוט","Scan slot to confirm":"סרוק סלוט לאישור","Release MTU":"שחרר MSU","Tote scan successful.":"סריקת יחידת ניטור בוצעה בהצלחה","Slot barcode scan successful":"סריקת ברקוד בוצעה בהצלחה","Tote already scanned":"יחידת ניטור כבר נסרקה","Tote scanned is not idle":"יחידת הניטור שנסרקה אינה מוכנה לשימוש.","Tote scanned is not opened":"יחידת הניטור שנסרקה אינה פתוחה.","Scan Tote first and then scan rack":"קודם יש לסרוק יחידת ניטור, ורק לאחר מכן את המדף","Invalid Slot scanned":"נסרק סלוט שגוי","Tote already associated with slot.Scan empty slot":"יחידת ניטור כבר משוייכת לסלוט, סרוק סלוט ריק.","Please Scan tote which has excess item":"נא לסרוק יחידת ניטור שבה קיים פריט עודף","Tote scan cancelled.":"סריקת יחידת ניטור בוטלה","Exception finished":"חריג הסתיים","Unexpected entity scanned":"נסרק פריט לא צפוי","Enter excess item quantity":"יש להקליד כמות פריטים עודפים"," items":" פריטים","Wrong ppsbin button pressed":"נלחצה נורת תא שגויה","Total ":"סה\"כ","Place the tote back in bin {0} and press pptl":"יש להניח בחזרה את יחידת הניטור בתא {0} ולאחר מכן ללחוץ על הנורה","Take out the tote from bin {0} and scan entity":"יש להוציא את יחידת הניטור מתא {0} ואז לסרוק פריט","Scan tote first and then scan item":"קודם יש לסרוק יחידת ניטור, ורק לאחר מכן לסרוק פריט","Scan excess item":"סרוק פריט עודף","Scan tote which has excess item":"סרוק יחידת ניטור שבה קיים פריט עודף","Invalid tote scanned":"נסרקה יחידת ניטור שגויה","Exception entry successful":"טעינת חריג בוצעה בהצלחה","Are you sure you want to exit from {0} invoice and stage all bins":"האם אתה בטוח שאתה רוצה לצאת מ{0} להפיק חשבונית ולטעון את כל התאים?","Invoice number: {0}":"מספר חשבונית {0}","Scan or Enter {0} number":"סרוק או הקלד {0} מספר","Please scan or enter {0} number":"נא לסרוק את להקליד {0} מספר ","STN scan successful":"ברקוד נסרק בהצלחה","Exit {0}":"יציאה {0}","{0} number :":"{0} מספר:","Are you sure you want to exit from {0} {1} and stage all bins":"האם אתה בטוח שאתה רוצה לצאת מ {0} {1} ולטעון את כל התאים?","Scan or Enter the tote barcode to reprint":"סרוק או הקלד ברקוד יחידת ניטור להדפסה מחדש","Place container in MSU slot and confirm":"מקם מיכל בסלוט MSU ואשר","Place {0} boxes with {1} items from bin {2}":"מקם {0} קופסאות עם {1} פריטים מתוך תא {2}","Place {0} boxes from bin {2}":"מקם {0} קופסאות מתא {2}","Place":"יש למקם","Remove Tote from bin {0} & Press PPTL to confirm no Items Remaining":"הסר יחידת ניטור מתא {0} ולחץ על נורת תא כדי לאשר שלא נותרו שם פריטים","Press PPTL to confirm no Items Remaining in Bin {0}":"יש ללחוץ על נורת תא כדי לאשר שלא נותרו פרטים בתא {0}","Entities cannot be accommodated! Remove all entities from bin and press PPTL.":"לא ניתן לצבור פריטים!  יש להסיר את כל הפריטים מהתא וללחוץ על נורת תא","Entities cannot be accommodated!":"השטח אינו מספיק עבור הפריטים!","Take {0} Printout and Press PPTL":"יש לקחת {0} פלטי הדפסה וללחוץ על נורת תא","PPS is Closed":"עמדה סגורה","Place box in MSU slot and confirm":"הצב קופסא בסלוט MSU ואשר","Wrong Undock":"תהליך הניתוק שגוי","Dock roll cage back to proceed the operation":"Dock roll cage back to proceed the operation","Excess quantity":"כמות גדולה מהצפוי","Entity Damaged":"פריט פגום","Issues with entity":"בעיה עם הפריט","Validate and Confirm":"בדוק ואשר","Wrong Scan. IRT bin scan expected":"סריקה שגויה.  יש לסרוק IRT","Scan IRT Bin":"סרוק IRT","Please put damaged entities in IRT bin and scan the bin":"יש להניח פריטים פגומים ב IRT ולסרוק את התא","Please put damaged entities in exception area":"יש להניח פריטים פגומים באזור חריגים","Please put extra entities in IRT bin and scan the bin":"יש להניח פריטים עודפים בIRT ולסרוק את התא","Please put extra entities in exception area":"יש להניח פריטים עודפים באזור חריגים","Please put unscannable entities in IRT bin and scan the bin":"יש להניח פריטים שאינם ניתנים לסריקה ב IRT ולסרוק את התא","Please put unscannable entities in exception area":"יש להניח פריטים שאינם ניתנים לסריקה באזור חריגים","Please put oversized entities in IRT bin and scan the bin":"יש להניח פריטים בגודל חריג ב IRT ולסרוק את התא","Please put oversized entities in exception area":"יש להניח פריטים בגודל חריג באזור חריגים","Warehouse Full Remove all entities from bin & press PPTL":"מחסן מלא.  יש להסיר את כל הפריטים מהתא וללחוץ על הנורה","Enter Quantity":"הקלד כמות ","Are you sure you want to cancel the exception?":"האם אתה בטוח שאתה רוצה לבטל את החריג?","All scan and print will be cancelled. Confirm to cancel?":"כל הסריקות וההדפסות יבוטלו.  האם יש אישור לבטל?","Yes":"כן","No":"כל","Exception with entity reported":"המערכת תיעדה את החריג","Please put entities with issues, in exception area":"יש להניח פריטים עם בעיות באזור חריגים","Please put entities in IRT and Scan IRT Bin":"נא להניח פריטים בIRT ולסרוק IRT","Wrong Scan. Unrecognized barcode.":"סריקה שגויה, ברקוד לא מזוהה","PPS is closed":"העמדה סגורה","NEST MAX":"קן מקס","STACK MAX":"","DO NOT STACK":"אין לערום","FRAGILE":"זהירות שביר","Length of {0} should not be greater than {1}":"אורך של {0} אינו יכול להיות יותר מ {1}","Scan {0} packs":"סרוק {0} אריזות","Scan {0} sub packs":"סרוק {0} אריזות משנה","Press PPTL":"לחץ על נורה","Pack Scan Successful":"סריקת אריזה בוצעה בהצלחה","Scan {0} more packs and place in bin {1}":"סרוק עוד {0} אריזות והנח בתא {1}","Scan {0} more sub packs and place in bin {1}":"סרוק  עוד {0} אריזות משנה והנח בתא {1}","Put pack list in trolley and press PPTL to confirm":"יש להניח רשימה בעגלה וללחוץ על הנורה לאישור.","Scan damaged entity":"סרוק פריט פגום","Damaged Quantity":"כמות פגומה","Wrong Scan. Entity not present in Database":"סריקה שגויה.  פריט לא קיים במערכת","Sum of good, missing and damaged should be equal to {0}":"סה\"כ פריטים תקינים, חסרים ופגומים צריך להיות שווה ל{0}","Last item scan will be cancelled. Do you want to continue?":"הסריקה של הפריט האחרון תבוטל.  האם להמשיך?","Continue":"המשך","Bin full":"תא מלא","Please put entities which have issues in exception area":"נא להניח פריטים שיש עמם בעיות באזור החריגים","Unscannable":"לא ניתן לסרוק","Invalid Event.Expecting PPTL button press":"פעולה לא תקינה.  המערכת מצפה ללחיצה על נורה","Remove Tote from bin & Press PPTL to confirm no Items Remaining":"יש להסיר יחידת ניטור מהתא וללחוץ על הנורה כדי לאשר שלא נותרו עוד פריטים","Wrong entity scan.Please scan the correct entity":"נסרק פריט שגוי.  יש לסרוק את הפריט הנכון","Physically Damaged entity reported.":"פריט פגום פיזית דווח.","Entity entry successful":"הפריט הוכנס בהצלחה.","Bin scan successful":"התא נסרק בהצלחה.","Physically Damaged Reported should equal Scanned Quantity":"כמות הפריטים הפגומים שמדווחת צריכה להיות שווה לכמות שנסרקה","SKU not present in Database.":"המק\"ט אינו קיים במערת","Extra entity scan found.":"המערכת מצאה פריט עודף שנסרק","Container Already Scanned.":"מיכל כבר נסרק","Invalid Entity Scanned.":"פריט שנסרק אינו קיים","Quantity of Physically damaged entities scanned is less.":"נסרקה כמות קטנה יותר של פריטים פגומים פיזית.","Error":"תקלה","Waiting for Bins to be Cleared at Pick Front":"המערכת ממתינה לפינוי של תאים בעמדה הקדמית","Processing Next Pick from Rack ":"המערכת מעבדת את הליקוט הבא מהמדף","Scan Damaged Entity":"סרוק פריט פגום","Warehouse Full":"מחסן מלא","Scan a packing box and keep in bin {0}":"סרוק קופסא ושמור בתא {0}","Pick box from MSU and press PPTL on Bin {0}":"לקט קופסא משידה וסרוק את הנורה של תא{0}","Extra details entered are incorrect.Please enter correct details":"הנתונים הנוספים שהוקלדו אינם נכונים.  יש להקליד נתונים נכונים","Packing box scan failed":"סריקת קופסא נכשלה","Wrong entity Scanned. Bin Scan Expected.":"נסרק פריט שגוי.  פג תוקף הסריקה של התא","Bin Already Scanned":"התא כבר נסרק.","Issue with Pack":"בעיה עם אריזה.","Issue with Sub pack":"בעיה עם אריזהת משנה","Issue with MPU":"המערכת זיהתה בעיה עם מערכת נשיאת המשטח","Space not available":"אין מקום פנוי","Bad barcode on pack":"ברקוד פגום על אריזה","Bad barcode on sub pack":"ברקוד פגום על אריזת משנה ","Unexpected pack":"אריזה לא צפויה","Pack missing":"אריזה חסרה","Sub pack missing":"אריזת משנה חסרה","Damaged sub pack":"אריזת משנה פגומה","Good pack":"אריזה במצב תקין","Good sub pack":"אריזת משנה במצב תקין","Scan not Allowed. PPS close/force close or profile change requested.":"הסריקה לא מאושרת.  העמדה סגורה, או שנדרש שינוי פרופיל","Pack scan successfully":"סריקת אריזה בוצעה בהצלחה","Sub-Pack scan successfully":"סריקת אריזת משנה בוצעה בהצלחה","Scan MPU":"סרוק יחידת משטח","Scan {0} or {1}":"סרוק {0} או {1}","Continue scanning {0} and {1}":"המשך לסרוק {0} או {1}","Enter Quantity of Unscannable {0}":"הקלד כמות של פריטים שאינם ניתנים לסריקה {0}","Wait for MPU":"המתן ליחידת משטח","No Sub-Packs to reconcile":"אין אריזות משנה לאישור","Pack Unscannable":"אריזה בלתי ניתנת לסריקה","Sub-Pack Unscannable":"אריזת משנה אינה ניתנת לסריקה","Damage Barcode":"ברקוד פגום","Packs":"אריזות","Sub-Packs":"אריזות משנה","Scan Small Box":"קופסא קטנה","Scan {0} Box and Place in Bin {1}":"סרוק {0} קופסא והנח בתא {1}","Scan {0} Small Box and Place in Bin {1}":"סרוק {0} קופסא קטנה והנח בתא {1}","Put Pack list in trolley and press PPTL to confirm":"הנח רשימה בעגלה ולחץ על נורה כדי לאשר","Done":"סיום","No more entities to be scanned":"לא נותרו פריטים לסריקה","Type":"סוג","Serial Number":"מספר סריאלי","Quantity":"כמות","Wrong Bin Scanned. Scan Expected for Roll Cage ready for undocking.":"נסרק תא שגוי.  המערכת מצפה לסריקה של עגלה המוכנה לניתוק","Issues with {0}":"בעיה עם {0}","Scan {0} damaged entities":"סרוק {0} פריטים שגויים","Scan {0} {1}":"סרוק {0} {1}","Scan {0} {1} and place in Bin {2}":"סרוק {0} {1} ומקם בתא {2}","Enter Unscannable Tote Quantity":"הקלד כמות יחידות ניטור שאינן ניתנות לסריקה","Enter items that can fit in the bin":"הקלד כמות פריטים שניתן להכניס לתוך התא","{0} scan successfully":"{0} סריקה בוצעה בהצלחה","Place Tote in Bin {0} and Press PPTL":"טען יחידת ניטור לתא {0} ולחץ על נורה","Tote in use at front seat":"יחידת ניטור בשימוש במושב הקדמי","Waiting for Tote to be associated from back":"המערכת ממתינה ליחידת ניטור מתאימה מעמדה אחורית","{0} scan successful":"{0} סריקה בוצעה בהצלחה","Waiting for put_away to complete from front":"המערכת ממתינה שהפיזור יושלם מהעמדה הקדמית","Tote cannot be associated with bin of another seat":"יחידת ניטור אינה יכולה להשתייך לתא ממושב אחר","Waiting for put away to complete from front":"המערכת ממתינה להשלמת הפיזור בעמדה הקדמית","Scan checklist items to proceed":"יש לסרוק רשימת פריטים כדי להמשיך","Unexpected Entity In {0}":"פריט לא צפוי ב{0}","Scan a {0}":"סרוק {0}","Scan a {0} or Press PPTL":"סרוק {0} או לחץ על נורה","Press PPTL to clear the Bin":"לחץ על נורה כדי לנקות את התא","Place {0} in Bin and scan the Bin barcode":"מקם {0} בתא וסרוק את ברקוד התא","Waiting for order to be completed from front":"המערכת ממתינה להשלמת ההזמנה מהעמדה הקדמית","Waiting for {0} to be associated from back":"המערכת ממתינה ל{0} השייכת לעמדה האחורית","{0} scan successful.":"{0} נסרק בהצלחה","Excess Entity in {0} recorded.":"המערכת תיעדה כמות עודפת של פריטים ב {0} ","{0} unexpected. {0} in use in another location":"{0} בלתי צפוי.  {0} נמצא בשימוש במיקום אחר.","{0} unexpected. Service request not present in {0}.":"{0} לא צפוי.  לא קיימת בקשה לשירות ל{0}","Invalid resource.":"משאב לא קיים","{0} unexpected. Service request not in correct state.":"{0} לא צפוי.  בקשה לשירות לא במצב תקין","{0} unexpected. Empty {0} scanned.":"{0} בלתי צפוי.  {0} ריק נסרק.","{0} unexpected. Scanned {0} does not exist.":"{0} בלתי צפוי.  נסרק {0} שאינו קיים.","{0} unexpected. Service Request does not exist.":"{0} לא צפוי.  לא קימת בקשה לשירות.","Wrong scan. Please Scan item or {0}":"סריקה שגויה.  נא לסרוק פריט או {0}","{0} unexpected. {0} is not empty.":"{0} לא צפוי.  {0} אינו ריק.","Bin barcode of other PPS scanned":"ברקוד תא של עמדה אחרת נסרק","Scan {0}":"סרוק {0}","Scan {0} which has excess item":"סרוק {0} שבו יש פריט עודף","Scan {0} first and then scan item":"סרוק קודם כל  {0} ואח\"כ סרוק את הפריט ","Invalid {0} scanned":"נסרק {0} לא מתאים","{0} Close Cancelled":"סגירת {0} בוטלה","{0} docked successfully":"{0} ננעל בהצלחה","Are You Sure You Want to Close {0}?":"האם אתה בטוח שאתה רוצה לסגור {0}","Scan {0} or Stage PPS Bin":"סרוק {0} או טען תא עמדה","Enter Unscannable {0} Quantity":"יש להקליד כמות {0} שאינה ניתנת לסריקה","Place {0} in Bin {1} and Press PPTL":"מקם {0} בתא {1} ולחץ על נורה","{0} already opened. Scan some other {1}":"{0} כבר פתוח.  יש לסרוק {1} אחר","{0} already closed. Scan some other {1}":"{0} כבר סגור.  יש לסרוק {1} אחר.","Close current {0} first":"יש לסגור קודם כל {0}","Wrong entity scanned. Please scan {0}":"פריט שגוי נסרק.  נא לסרוק {0}","{0} excess entities found in {0}. Please put entities in exception area and confirm":"נמצאו {0} מיותרים ב {0}.  יש להעביר את הפריטים הללו באזור חריגים ולאשר.","Entity not expected in {0}. Please put entity in exception area and confirm":"הפריט אינו צפוי ב {0}.  יש להניח פריט באזור חריגים ולאשר","Expecting {0} closure.":"המערכת מצפה לסגירה של {0}","{0} not present in database.":"{0} אינו קיים במערכת.","{0} matched .":" {0} הותאם","Place the {0} back in bin {1} and press PPTL":"מקם {0} בחזרה בתא {1} ואז ללחוץ על נורה","Take out the {0} from bin {1} and scan entity":"יש להוציא את {0} מתא {1} ואז לסרוק פריט","Remove {0} from bin {1} & Press PPTL to confirm no Items Remaining":"יש להסיר את {0} מתא {1} ואז ללחוץ על נורה כדי לאשר שלא נותרו שם עוד פריטים","Press PPTL or Scan a {0}":"לחץ על נורה או סרוק {0}","Select Bin which does not require {0}":"יש לסרוק תא שאינו מצריך {0}","Select Bin to disassociate {0}":"בחר תא כדי לנתק {0}","{0} close successful.":"{0} נסגר בהצלחה.","{0} not closed.":"{0} לא סגור","Excess item in {0} recorded. Now press PPTL":"המערכת תיעדה פריט עודף ב{0} יש ללחוץ על נורה","Cancelled excess entity in {0}":"בוטל פריט עודף ב {0}","Cancelled invalid entity in {0}":"בוטל פריט לא תקין ב {0}","Invalid entity in {0} recorded":"פריט לא תקין ב{0} תועד","Scan {0} to associate with Bin":"סרוק {0} כדי לשייך לתא","Press PpsBin Button Or Scan a {0}":"יש ללחוץ על נורה או לסרוק {0}","{0} is already scanned.Expecting pptl scan.":"{0} כבר נסרק.  המערכת מצפה לסריקה של נורה.","{0} are not required.Please don't scan {1} barcode":"{0} אינו נחוץ.  נא לא לסרוק ברקוד {1}","Please scan the {0} first and then scan pptl barcode":"יש לסרוק קודם כל את {0} ואז לסרוק את הנורה","{0} scanned.Expecting pptl scan.":"{0} נסרק.  המערכת ממתינה לסריקה של נורה","Pptl scan not allowed. {0} are not required":"אין אישור לסרוק נורה.  {0} אינם נחוצים","{0} didn't get associated":"{0} לא שויך","After scannning {0} barcode, please scan pptl barcode":"אחרי סריקה של ברקוד {0}, יש לסרוק ברקוד נורה","No {0} associated. Pease keep {0} in the Bin and then scan":"{0} לא משויך.  יש להשאיר את {0} בתוך התא ואז לסרוק","No {0} scanned":"אין {0} שנסרקו","{0} cancelled":"{0} בוטל","{0} already associated with ppsbin":"{0} כבר משוייך לתא","Please press ppsbin button which does not have any {0} associated":"יש ללחוץ על נורה שאינה משויכת ל {0}","{0} assigned successfully to ppsbin {0}":"{0} שויך בהצלחה לתא {0}","{0} are not required":"{0} אינם נחוצים","{0} could not be reserved as already reserved":"{0} לא ניתן לשייך בגלל שכבר נמצא בשימוש","Exception invalid as {0} are not required with this PPS":"חריגים אינם מתאימים בגלל ש{0} אינו מתאים לעמדה זו.","Override {0} not possible":"לא ניתן לבצע עקיפה של {0}","Barcode didn't match with current {0} barcode":"הברקוד אינו מתאים לברקוד {0} הקיים","Incorrect {0} barcode scanned. Please try again":"ברקוד {0} שגוי נסרק.  נא לנסות שוב.","System not configured for {0}":"המערכת אינה מותאמת ל {0}","{0} association required":"נדרש לבצע שיוך ל {0}","{0} association failed. Repeat scan operation":"שיוך של {0} נכשל.  יש לחזור על הפעולה.","{0} are anyway not required.Please proceed further":"אין צורך ב {0}.  יש להמשיך הלאה.","{0} already associated with bin {0}":"{0} כבר משויך לתא {0}","{0} in use at front seat":"{0} בשימוש בעמדה קדמית","{0} cannot be associated with bin of another seat":"לא ניתן לשייך {0} עם תא של עמדה אחרת","{0} assigned successfully to bin":"{0} שויך בהצלחה לתא","{0} disassociated from Bin":"{0} נותק בהצלחה מתא","{0} associated with another bin":"{0} משויך לתא אחר","Please scan the {0} first and then scan PPTL barcode":"יש לסרוק קודם כל את ה {0} ולאחר מכן לסרוק את הנורה","Override {0} Exception cannot be raised for bins with {1} associated":"המערכת לא יכולה לאשר את החריג, בגלל שכבר קיים שיוך עבור {1} לתאים.  ","PPTL scan not allowed. System not configured for {0}":"אין אישור לסרוק נורה.  המערכת אינה מותאמת ל {0}","Scan pptl barcode after scannning {0} barcode":"יש לסרוק נורה רק לאחר סריקת ברקוד של {0}","{0} scanned is not opened":"ה {0} שנסרק אינו פתוח","{0} already scanned":"ה{0} כבר נסרק","Wrong entity Scanned. {0} Scan Expected.":"פריט שגוי נסרק.  סריקה של {0} צפויה","Disassociate {0}":"נתק {0}","Override {0} Required":"יש צורך לבצע מעקף עבור {0}","Scan slot":"סרוק סלוט","Scan or Enter the {0} barcode to reprint":"סרוק או הקלד את הברקוד של {0} כדי להדפיס מחדש","{0} scan cancelled.":"סריקת {0} בוטלה","{0} scanned is not idle":"הסריקה של {0} אינה מוכנה","Scan {0} first and then scan rack":"קודם כל יש לסרוק את {0} ורק לאחר מכן את המדף","{0} already associated with slot.Scan empty slot":"ה{0} כבר משויך לסלוט.  יש לסרוק את ה סלוט הריק","Invalid {0} scan":"הסריקה של {0} אינה תקינה","{0} close successful":"ה {0} נסגר בהצלחה","Scan new {0}":"יש לסרוק {0} חדש","Scan item or {0}":"יש לסרוק פריט או {0}","Additional Information":"מידע נוסף","Selected UOM: ":"יחידת מידה שנבחרה","Close":"סגור","Select Value":"בחר ערך","{0} already associated with bin":"ה {0} כבר משוייך לתא","Previous Pick Details":"פרטי הליקוט הקודם","Previous Put Details":"פריט הפיזור הקודם","Dock {0}":"הצב {0}","Scan {1} or Dock {0}":"סרוק {1} או הצב {0}","Undock {0}":"בטל הצבת {0}","Scan a Tote":"סרוק יחידת ניטור","Scan {0} location":"סרוק מיקום {0} ","Pick complete. Waiting for next pick.":"הליקוט הושלם.  המערכת ממתינה לליקוט הבא","Missing barcode scanned. Waiting for confirmation.":"ברקוד חסר נסרק.  המערכת ממתינה לאישור","{0} cannot be associated with inactive bin":"המערכת אינה יכולה לשייך {0} עם תא שאינו מופעל","{0} cleared":"ה{0} התרוקן","Scan load unit and gently push it away":"סרוק יחידה לטעינה ולאט דחוף אותה","Box Type":"סוג קופסא","Location":"מיקום","Place Box":"הנח קופסא","Scan":"סרוק","Checklist":"רשימה","Scan {0} Serial":"סרוק סריאלי של {0}","Scan {0} Serial to Open":"סרוק סריאלי של {0} כדי לפתוח","Scan carrying unit and gently push it away":"סרוק יחידת ניטור ולאט דחוף אותה","Pick all items from slot {0} and scan slot":"יש ללקט את כל הפריטים מהסלוט עד ריקון סופי שלו","{0} undocked successfully":"ה {0} נותק בהצלחה","Pick all items from slot and scan slot":"יש ללקט את כל הפריטים מהסלוט ולסרוק את הסלוט","NO ITEM FOUND":"פריט לא נמצא","Item details":"נתוני פריט","Item Search":"חיפוש פריט","Event":"אירוע","Expectation Id":"זהות צפי","Item Location":"מיקום פריט","UOM Details":"פרטי יחידות מידה","Excess Quantity":"כמות מעבר לצפי","Total: ":"סה\"כ","Scan excess entities":"סרוק כמות שמעבר לצפי","Dis-associate":"נתק","Data capture failed":"המערכת לא הצליח לטעון את הנתונים","No entities to reconcile":"אין פריטים שמצריכים שינוי","LOGIN":"התחברות","Language":"שפה","Username":"שם משתמש   ","Login to Butler System":"התחברות למערכת באטלר","Login to":"התחבר ל-","Enter username":"הקלד שם משתמש","Enter password":"הקלד סיסמה","Scan ID card to login.":"Scan ID card to login.","{0} Unscannable":"{0} לא ניתן לסריקה","Scan entities":"סרוק פריטים","Waiting for {0} to be docked":"המערכת ממתינה להעמדת {0}","Put Pack list in {0} and press PPTL to confirm":"יש להניח רשימה ב {0} ואז ללחוץ על נורה כדי לאשר","Please scan PPTL which has excess item":"יש לסרוק את הנורה שבה קיים פריט עודף","Please put unscannable tote in exception area":"יש להניח יחידת ניטור שאינה ניתנת לסריקה באזור החריגים","Sum of good and exception quantity should be equal to {0}":"סה\"כ הכמות של פריטים תקינים וחריגים צריכה להיות שווה ל {0}","{0} Unscannable entities recorded. WMS notified":"המערכת זיהתה {0} פריטים שאינם ניתנים לסריקה.  WMS עודכנה","Scan item or enter barcode details":"יש לסרוק פריט או להקליד ברקוד","{0} unexpected. Service request not present in {1}.":"ה{0} אינו צפוי.  לא קיימת בקשה לשירות ב {1}","MSU Sent":"MSU נשלח","This put request is not supported in current flow":"לא ניתן לבצע פיזור ","Service request not in correct state":"שירות לא תקין","Multiple Service request found":"נמצאו מספר פניות שירות","Unknown error":"תקלה לא ידועה","Scan item":"סרוק פריט","Item unexpected. No service request found for this item":"פריט לא צפוי, לא קיימת בקשת שירות לפריט זה","Scan entity":"סרוק פריט","Put entity in slot and scan slot to confirm":"הנח  פריט בסלוט וסרוק סלוט לאישור","Excess detected, remove '{0}' items and confirm again":"המערכת מזהה עודף, הסר {0} פריטים ואשר שוב","Invalid {0}":"שגוי{0}","{0} closed":"{0} סגור","Unknown barcode":"ברקוד לא קיים","Unexpected entity":"אין צפי לפריט","Excess quantity detected, remove '{0}' quantity and confirm again":"המערכת מזהה עודף כמות, הסר {0} פריטים ואשר","Call for Help":"קריאה לעזרה","Tote Unscannable":"Tote לא ניתן לסריקה","{0} unexpected. Scanned {1} does not exist.":"{0} לא צפוי. סרוק {1} אינו קיים.","HEAVY":"קשה","Scan tote":"סריקת תיק","Items In Bin":"פריטים בפח","Scan tote location":"סרוק את מיקום המסך","Send MSU":"שלח MSU","Put and confirm":"שים ואשר","Close Cart":"סגור עגלה","Dock Cart":"עגלת עגינה","Are you sure that all the items in the cart were scanned?":"האם אתה בטוח שכל הפריטים בעגלה נסרקו?","The following {0} items were found missing":"הפריטים הבאים {0} נמצאו חסרים","OUTER":"חיצוני","INNER":"פנימי","Wrong scan. Please Scan tote":"סריקה לא נכונה. בבקשה סרוק את המסך"};module.exports=obj

},{}],254:[function(require,module,exports){
var obj={"Scan item / Stage PPS Bin":"商品をスキャンしてビンに置く","Scan Tote to associate with Bin":"トートをスキャンしてビンに紐付け","Press PpsBin Button Or Scan a Tote":"ビンのボタンを押すか、トートをスキャン","User Name":"ユーザー名","Password":"パスワード","Are you sure you want to close Tote":"トートをクローズしてもよろしいですか？","Details":"商品詳細","Scan {0} items":"商品を {0} 個スキャン","Scan box barcode":"ボックスをスキャン","Press PpsBin {0} to remove items":"ビン {0} のボタンを押して商品を取り出す","Tote is already scanned.Expecting pptl scan.":"トートはスキャン済みです","Totes are not required.Please don't scan tote barcode":"トートのスキャンは不要です","Wrong PPS bin scanned":"誤ったビンがスキャンされました","Please scan the tote first and then scan pptl barcode":"トートの後にビンをスキャン","Tote scanned.Expecting pptl scan.":"トートはスキャン済みです。ビンをスキャン","Pptl scan not allowed. Totes are not required":"ビンのスキャンは許可されていません。トートをスキャン","Tote didn't get associated":"トートが紐付けされていません","After scannning tote barcode, please scan pptl barcode":"トートをスキャンして、ビンをスキャン","Wrong Ppsbin button pressed.Please press those buttons having color blue":"ビン違い。青色のビンのボタンを押す","Please complete pickback for pending bin and then proceed":"ピックバック未完了のビンを確定","No totes associated. Pease keep totes in the Bin and then scan":"トートが紐づけされていません。ビンのトートをスキャン","Documents printed Successfully":"印刷完了","No tote scanned":"トートがスキャンされていません","Tote cancelled":"トートがキャンセルされました","Tote already associated with ppsbin":"トートは既にビンに紐付け済み","Incorrect tote barcode scanned. Please try again":"誤ったトートがスキャンされました","Please press PPTL button which does not have any totes associated":"トートに紐づけされていないPPTLボタンを押す","Tote assigned successfully to ppsbin {0}":"ビン {0} にトートを紐付け","Bin {0} items removed successfully":"ビン {0} の商品の取り出し完了","Totes are not required":"トートは必要ありません","Wrong Barcode scanned":"スキャン違い","Tote could not be reserved as already reserved":"トートは使用済み","Exception invalid as totes are not required with this PPS":"このステーションで利用されているトートではありません","Override tote not possible":"トートの上書きはできません","Scanning pptl barcode not allowed":"ビンのスキャンはできません","Please press those buttons having color blink_blue":"青色点滅のPPTLボタンを押す","Unhandled event ocurred":"エラーが発生しました","Barcode didn't match with current tote barcode":"バーコードが現在のトートバーコードと不一致","Testing configuration {0} and {1}":"設定テスト中 {0} と {1}","Processing. Please wait and scan later":"処理中。しばらく待ってスキャンを行ってください","Waiting for rack":"棚を呼んでいます","Current PPS mode does not support back seat. Please logout.":"現在のステーションモードはバックシート使用不可。ログアウトしてください","Scan items and place in bin {0}":"商品をスキャンしビン {0} に置く","Stage Bin or Scan Entity":"商品をスキャンしてビンに置く","Place Entity in Bin and Press PPTL":"商品をビンに置いてボタンを押す","Are You Sure You Want to Close Tote?":"トートを終了してよろしいですか？","Scan Tote or Stage PPS Bin":"トートをスキャンするかビンに置く","Item Not Expected in Tote":"トートにない商品です","Tote already opened. Scan some other tote":"トートは既に使われています。他のトートを使用","Tote already closed. Scan some other tote":"トートは既に終了されています。他のトートを使用","No matching tote found":"トート違い","Wrong entity scanned. Please scan tote":"スキャン違い。トートをスキャン","No entities added yet. Scan entities and then press PPTL":"商品が追加されていません。商品スキャンしPPTLボタンを押す","Wrong entity scanned. Please scan Container/Item.":"スキャン違い。コンテナか商品をスキャン","Cannot cancel scan. No scanned box found":"スキャンをキャンセルできません","Entity scan not expected. Waiting for PPTL press":"スキャン違い。PPTLボタンを押す","Bin selected for put. Cannot be staged":"ビンは入荷で使用されています。確定はできません","SKU not present in database. Put into IRT bin.":"未登録商品です。商品を取出し商品登録を確認してください。","No free bins. Please scan later":"空きビンがありません。後でスキャンしなおしてください","Wrong PPTL pressed. Please try another":"ビンが違います。正しいPPTLボタンを押す","Please put entities in exception area and confirm":"商品を例外エリアに置いて確認","Wrong bin chosen.Try selecting another bin":"ビン違い。他のビンを選択してください","Please scan same SKU to complete this exception":"同じ商品をスキャンして例外登録を完了してください","Entity scan not expected.":"スキャンが違います","Tote not present in database.":"このトートはシステム未登録です","Tote has been opened.Scan all items in tote and then scan tote again to close it":"トートは使用中。全商品を再スキャンしトートと紐付け","PPS is in paused mode. Cannot process new entity. Try after some time":"PPSが中断モードです。しばらく待って再度実施してください","Cancel scan successful.":"スキャンのキャンセル完了","Tote close successful.":"トートのクローズ完了","Tote not closed.":"トートはクローズしていません","Entity scan successful.":"商品スキャンが完了","PPTL press successful":"PPTLボタンが押されました","Data capture valid":"正しい情報が取得","Excess item in tote recorded. Now press PPTL":"トートの商品が数量オーバー。PPTLボタンを押す","Excess item in tote recorded.":"トートの過剰な商品が記録されました","{0} unscannable entities recorded. WMS notified":"スキャン不可商品 {0} 個","{0} extra entities recorded in bin. WMS notified":"超過商品 {0} 個","{0} oversized entities recorded.WMS notified":"サイズオーバー商品 {0} 個","{0} Physically damaged entity recorded.WMS notified":"{0}物理的に故障されたエンティティが記録されました.WMSが通知されました","Exception cancelled":"例外登録がキャンセルされました","Box with same serial number already exists in the warehouse":"同じシリアル番号のボックスが、既に倉庫内に存在","Entity already scanned.Waiting for PPTL press":"商品スキャン済。PPTLボタンを押す","No bins available to stage":"確定可能なビンがありません","Bin already staged. Ignoring event":"ビンは確定済みです。操作を無視しました","Bin empty. Cannot be staged":"ビンが空です。確定できません","Scan Box/Items from Slot":"スロットの商品またはボックスをスキャン","Scan Remaining Item In Box":"ボックスの残り商品をスキャン","Last Box Scan Completed! Scan Remaining Box/Items":"ボックススキャン完了！残りの商品またはボックスをスキャン","Status To Reconcile":"調整中","This box belongs to some other SKU in the slot.Put it back.Scan next box.":"このボックスは使用中。スロットに戻して他のボックスをスキャン","This box does not belong to this slot. Remove the box and put in exception area.":"このボックスは別スロットで使用中。ボックスを例外エリアに置く","Waiting for MSU":"MSU移動中","Wrong Barcode":"スキャン間違い","Box Scan successful":"ボックススキャン完了","Item Scan successful":"商品スキャン完了","Item scan successful":"商品スキャン完了","Data capture failed at item {0}":"商品 {0} の情報がありません","Bin {0} selected":"ビン {0} が選択されました","Bin {0} unselected":"ビン {0} が選択されていません","Connection is closed. Connecting...":"ネットワークが切断されました。再接続中・・・","Extra item found please put back item in Exception bin":"数量オーバー。商品を戻す","Enter Unscannable Entity Quantity":"スキャン不可商品の数量を入力","Scan Oversized Entity Quantity":"特大品をスキャンして数を入力","Please Select The Bin With Excess Entity":"過剰商品のビンを選択","Enter Quantity of Excess Entities":"数量オーバーの商品数入力","Place Entity in Slot and Scan More":"商品をスキャンしてスロットに置く","Scan Slot to Confirm":"スロットをスキャン","Wait for MSU":"MSU移動中","Scan Entity From Bin {0}":"ビン {0} の商品をスキャン","Enter Good Quantity to be Put into Slot":"良品数入力","Put Back Entities in the PPS Bin":"ビンに商品を戻す","Confirm MSU Release":"MSUのリリースを確認","Scan Slot":"スロットをスキャン","Scan {0} Items":"商品を {0} 個スキャン","Cancel audit successful.Audit Restarted":"棚卸キャンセル完了。棚卸を再実施","Scan Box":"ボックスをスキャン","Scan {0} Items and Place in Bin {0}":"項目をスキャン{0}してビン{0}に置いてください","Press PPTL to confirm":"PPTLボタンを押す","Scan Tote to Associate with Bin":"トートスキャンしてビンに紐付け","Press PPTL or Scan a Tote":"PPTLボタンを押すか、トートスキャン","Press bin PPTL to remove entities":"商品を取出して、PPTLボタンを押す","Press bin PPTL":"PPTLボタンを押す","Press PPTL for bin {0} to confirm":"ビン {0} のPPTLボタンを押す","Press print button to proceed":"印刷ボタンを押す","Select Bin to skip print":"印刷をスキップするビンを選択","Select Bin which does not require tote":"トート不要なビンを選択","Select Bin to disassociate tote":"トートの紐づけをやめるビンを選択","Pick complete. Waiting for next rack.":"ピック完了。MSU移動中","Location scan successful":"ロケーションのスキャン完了","Box scan successful":"ボックススキャン完了","Cancel scan successful":"スキャンのキャンセル完了","Expecting MSU release confirmation from GUI, got invalid event.":"誤った操作です。MSUの開放を画面で確認","Data capture failed at item":"商品の情報取得失敗","Wrong slot location scanned. Please try again":"スロット違い。正しいスロットをスキャン","Wrong box scanned. Please try again":"ボックス違い。正しいボックスをスキャン","Scan a box first":"最初にボックスをスキャン","Wrong PPTL pressed. Please press correct PPTL":"PPTLボタンが違います。正しいPPTLボタンを押す","Picked quantity more than expected. Put extra items back in MSU":"ピック数オーバー。過剰分をMSUに戻す","Wrong item quantity update":"数量違い","Wrong item scanned. Please scan correct item":"商品が違います。正しい商品をスキャン","Waiting for MSU. Please wait and scan later":"MSU移動中。しばらく待ってスキャン","System Error. Scanned entity details not available at this time":"システムエラー。現在、商品詳細は参照できません","No PPS bins empty. Please empty them from Pickback":"空きビンがありません。ピックバック作業を実施してください","PPS mode change requested:scan not allowed":"ステーションモードが変更されました。スキャンできません","PPS mode change requested:auto staging all bins":"ステーションモードが変更されました。全てのビンを確定します","PPTL press not expected":"PPTLボタンは押す必要がありません","Scan not expected":"スキャンは不要です","Barcode didn't match the current tote barcode":"トートのバーコードが違います","System not configured for totes":"トートがシステムに未登録","Invalid Exception for this configuration":"設定時に不正な例外が発生","No tote associated. Please keep a tote in bin and scan":"トートが紐づけされていません。トートをビンに置いてスキャン","Wrong PPTL pressed":"PPTLボタンが違います","Totes are anyway not required.Please proceed further":"トートのスキャンは不要。作業を継続","Tote scan cancelled":"トートのスキャンがキャンセルされました","Documents printed successfully":"印刷完了","Order removed successfully from bin {0}":"ビン {0} から商品の取り出しが完了","Tote assigned successfully to bin":"トートとビンの紐づけ完了","Tote association failed. Repeat scan operation":"トートの紐づけ失敗。再度スキャンしてください","Tote associated with another bin":"トートは他のビンに紐づけ済み","Please scan PPTL barcode":"ビンをスキャン","Tote disassociated from Bin":"トートとビンの紐づけを解除しました","Please complete process for pending bin and then proceed":"保留中のビンを完了させてください","Tote already reserved":"トートは既に使用中","Wrong barcode scanned":"スキャンが誤っています","Please scan the tote first and then scan PPTL barcode":"トートをスキャンして、ビンをスキャンしてください","Override Tote Exception cannot be raised for bins with totes associated":"トートが紐づいたビンでは「トート更新例外」は発生しません","PPTL scan not allowed. System not configured for tote":"ビンスキャンは許可されていません。トートが未登録","PPTL scan not allowed":"ビンのスキャンは許可されていません","Tote scan expected":"トートをスキャン","Entity scanned is not from bin {0}. Replace and scan from bin {1}":"ビン {0} の商品ではありません。ビン {1} の商品をスキャン","Wrong entity scanned":"スキャンが誤っています。正しい商品をスキャン","Waiting for MSU scan. Please scan entity later.":"過剰スキャンです。商品を確認してください。","Expected quantity exceeded.":"有効な数値を入力してください","Wrong scan! Entity scan expected but slot barcode scanned.":"スロットではなく商品をスキャン","Actual put quantity not equal to the sum of Good and Expection quantity.":"良品と不良品の合計数が入荷数と異なります","Actual put quantity less than than revised quantity.":"入荷数が変更数量と一致していません","Wrong slot scanned":"違うスロットがスキャンされています","Entity scan successful":"商品スキャンが完了","Slot scan successful":"スロットスキャン完了","Damaged and missing entity recorded.":"不良品・不足商品が記録されました","Space unavailable recorded.":"格納不可商品が記録されました","Please put entity in exception area and confirm":"商品を例外エリアに置いて確認","Entity not expected in tote. Please put entity in exception area and confirm":"トートに存在しない商品です。商品を例外エリアに置いて確認","{0} excess entities found in tote. Please put entities in exception area and confirm":"トートに数量オーバー商品が {0} 個あります。例外エリアに置いて確認","Cancelled excess entity in tote":"トートの過剰商品をキャンセル","Cancelled invalid entity in tote":"トートの例外商品をキャンセル","Invalid entity in tote recorded":"商品違い","Wrong enitity scanned. Expecting scan from bin {0}":"誤った商品がスキャンされました。ビン {0} の商品をスキャン","PPTL Management":"ビン設定","Scanner Management":"スキャナ設定","Entity Oversized":"特大品","Entity Unscannable":"スキャン不可商品","Extra Entities in Bin":"過剰品","Entity Missing / Unscannable":"不足 / スキャン不可商品","Space Not Available":"スロット内格納不可","Mising Box":"紛失ボックス","Disassociate Tote":"紐づけされていないトート","Overide Tote Required":"トートの更新が必要です","Reprint":"再印刷","Skip Print":"印刷スキップ","Peripheral added successfully":"周辺機器追加完了","Peripheral not added":"周辺機器追加失敗","Scan Box or Items":"ボックスか商品をスキャン","Check Count":"数量確認","You cannot enter value more than 9999":"9999 以上は入力不可","Please enter a quantity greater than 0":"0以上の数量を入力してください","Place extra entity in Exception area.":"過剰商品を例外エリアに置く","Sum of missing, good and damaged should be equal to {0}":"良品、不足、不良品の合計は {0} でなければなりません。","Scan excess item quantity":"過剰品をスキャンする","Quantity should be less than or equal to {0}":"数量は {0} 以下でなければなりません","You are not allowed to keyed in the quantity from the numpad. Force Scan is required.":"キーパッドでの数字入力が許可されていません。商品をスキャン","Waiting for Bins to be Cleared at Pick Back":"ビン出し作業を行ってください","Peripheral deleted successfully":"周辺機器削除完了","Peripheral not deleted successfully":"周辺機器削除失敗","Cancel Exception":"例外登録をキャンセル","Cancel Scan":"商品スキャンのキャンセル","Finish":"完了","Back":"戻る","OK":"OK","FINISH":"完了","Print":"印刷","Skip Printing":"印刷スキップ","Override":"更新","Add Scanner":"スキャナ追加","Edit Details":"詳細編集","NEXT":"次へ","CONFIRM":"確認","Stage":"ステージ","Stage All":"全てステージ","BACK":"戻る","CLOSE":"終了","Cancel":"キャンセル","Confirm":"確認","TOTE":"トート","Clear All":"全てクリア","Submit":"確定","Exceptions":"例外","Next":"次","Bin":"ビン","Selected":"選択済","Unselected":"未選択","System is Idle":"待機中","CURRENT SLOT":"現在のスロット","Box Serial Numbers":"ボックスシリアル番号","No Items To Reconcile":"調整が必要な商品はありません","List Of Items To Reconcile":"調整が必要な商品リスト","View More":"詳細確認","Please put exception entities in exception area":"例外エンティティを例外領域に入れてください","Please put exception entities in IRT bin and scan the bin":"例外エンティティをIRTビンに入れ、ビンをスキャンしてください","Product Information":"商品情報","Bin Info":"ビン情報","Associate tote with bin":"トートをビンに紐づけ","Extra Entity Found":"過剰な商品","Perform Action":"実施","Input Extra Details":"追加情報を入力","Expected":"予定","Actual":"実数","Bin ID":"ビンID","Barcode":"バーコード","Peripheral ID":"機器ID","Actions":"アクション","Scanner ID":"スキャナID","Delete":"削除","Product SKU":"商品","Expected Quantity":"予定数","Actual Quantity":"実数","Missing":"不足","Extra":"過剰","Barcode Damage":"バーコード不良","Item in Box Serial Numbers":"シリアル番号管理の商品","Loose Items":"未梱包商品","Loose Items Serial Numbers":"未梱包商品のシリアル番号","Product Details":"商品詳細","Product Name":"商品名","Product Desc":"商品説明","Product Type":"商品タイプ","Tote already associated with bin {0}":"トートはビン {0} に紐付け済み","Entity Scan not expected. Press PPTL":"スキャン違い。PPTLボタンを押す","Item Missing/Unscannable":"不足またはスキャン不可商品","Missing Box":"不足ボックス","Override Tote Required":"トートの更新が必要","Items In Box Unscannable":"スキャン不可商品","Box Unscannable":"スキャン不可ボックス","Loose Items Unscannable":"スキャン不可未梱包商品","Please put unscannable entities in exception area.":"スキャン不可商品を例外エリアに置く","Please put oversized entities in exception area.":"特大品を例外エリアに置く","Take the Items out from the Slot":"ビンに商品を戻してください","Pptl press not expected.":"PPTLボタンは押す必要がありません","Scan not expected.":"スキャンは不要です","Wrong scan.Expecting item scan.":"スキャンが誤っています。商品をスキャン","Wrong scan.Expecting container scan.":"スキャンが誤っています。コンテナをスキャン","Wrong scan.Expecting location scan.":"スキャンが誤っています。ロケーションをスキャン","Scan Excess Entity Quantity":"過剰商品をスキャン","Entity already scanned.Confirm exception":"既にスキャンされた商品です。例外登録を確認してください","Exception":"例外登録","Logout":"ログアウト","Utility":"環境設定","EXCEPTION":"例外登録","Good Quantity":"良品数","Missing Quantity":"不足数","Unscannable Quantity":"スキャン不可数","Remove Item":"商品取り出し","Item Missing/Bad Barcode":"不足/バーコード不良商品","Sum of missing and good quantity should be equal to {0}":"不足数と良品数の合計は {0} である必要があります","Login":"ログイン","Enter Username":"ユーザー名を入力","Enter Password":"パスワードを入力","Invalid credentials":"無効な認証情報","Login not allowed. You're already logged in":"ログインできません。既にログインしています","Place Item in slot and scan more":"スロットに置き商品スキャン","PPTL":"PPTLボタン","Scan Slot Barcode":"スロットをスキャン","Unexpected Item":"商品違い","Stage Bin or Scan Item":"ステージか商品スキャン","Scan & Confirm":"スキャン＆確認","Scan Item From Bin":"商品スキャン","Scan Tote":"トートスキャン","Scan MSU Barcode":"スロットスキャン","Scan Items":"商品スキャン","Status":"ステータス","Could not connect to PPS.Please try again.":"PPSに接続できません。もう一度やり直してください","product_sku":"商品コード","type":"種類","quantity":"数量","item":"商品","box":"ボックス","SKU not present in Database.Put in exception area":"未登録商品です。商品を取出し商品登録を確認してください。","Please put extra entities in exception area.":"過剰商品を例外エリアに置く","Space Available For":"スロット格納可能数","Tote Details":"トート詳細","Close current tote first":"処理中のトートを、まず閉じて下さい","CURRENT BIN":"処理中ビン","Bad Barcode Quantity":"スキャン不可数","Enter Scanner Id":"スキャナID入力","Back seat not supported for this mode":"現在のステーションモードはバックシート使用不可","Bad Data":"環境設定エラー","Peripheral already added":"周辺機器は既に登録済","Scan Bin Barcode":"ビンをスキャン","Update":"更新","Japanese":"日本語","English":"英語","Exception Finished":"例外処理完了","PPS Mode":"PPSモード","Seat Type":"シートタイプ","Good Quantity Cannot be Equal to the Total Quantity":"良品数と合計数は同じにできません","Undock Roll Cage if no items remaining":"項目が残っていない場合はロールケージをアンドックしてください","Gently push roll cage away from the frame":"ロールケージをフレームから離れて押してください","Scan tote and place it in the slot":"トートをスキャンしてスロットに置いてください","Scan slot to confirm":"確認するためにスロットをスキャンしてください","Release MTU":"MTUを解放してください","Tote scan successful.":"トートスキャンが成功しました。","Slot barcode scan successful":"スロットのバーコードスキャンが成功しました","Tote already scanned":"トートはすでにスキャンされました","Tote scanned is not idle":"スキャンされたトートはアイドル状態ではありません","Tote scanned is not opened":"スキャンされたトートは開放していません","Scan Tote first and then scan rack":"最初にトートをスキャンして、そのあと、ラックをスキャンしてください","Invalid Slot scanned":"無効なスロットがスキャンされました","Tote already associated with slot.Scan empty slot":"トートはすでにスロットと関連されています。空のスロットをスキャンしてください。","Please Scan tote which has excess item":"余分な項目があるトートをスキャンしてください","Tote scan cancelled.":"トートスキャンがキャンセルされました。","Exception finished":"例外が終了しました","Unexpected entity scanned":"予定外の商品がスキャンされました","Enter excess item quantity":"過剰数量を入力してください"," items":" 項目","Wrong ppsbin button pressed":"間違ったPPTLボタンが押されました","Total ":"合計","Place the tote back in bin {0} and press pptl":"トートをビン{0}に戻してPPTLボタンを押してください","Take out the tote from bin {0} and scan entity":"ビン {0} からトートを取り出して商品をスキャンしてください","Scan tote first and then scan item":"最初にトートをスキャンして、そのあと、項目をスキャンしてください","Scan excess item":"余分な項目をスキャンしてください","Scan tote which has excess item":"余分な項目を持っているトートをスキャンしてください","Invalid tote scanned":"無効なトートがスキャンされました","Exception entry successful":"例外入力が成功しました","Are you sure you want to exit from {0} invoice and stage all bins":" {0} 納品書と全てのビンステージングを終了しますか","Invoice number: {0}":"請求書番号: {0}","Scan or Enter {0} number":"スキャンまたは{0}の数字を入力してください","Please scan or enter {0} number":"シートタイプ","STN scan successful":"STNのスキャンが成功しました","Exit {0}":"終了{0}","{0} number :":"{0}番号: :","Are you sure you want to exit from {0} {1} and stage all bins":" {0} {1} と全てのビンステージングを終了しますか","Scan or Enter the tote barcode to reprint":"再版するためにスキャンまたはトートバーコードを入力してください","Place container in MSU slot and confirm":"MSUスロットにコンテナを置いて確認してください","Place {0} boxes with {1} items from bin {2}":"ビン{2}から{1}の項目を{0}のボックスと置いてください","Place {0} boxes from bin {2}":"ビン{2}から{0}ボックスを置いてください","Place":"置いてください","Remove Tote from bin {0} & Press PPTL to confirm no Items Remaining":"残っている項目を確認するためにビン{0}からトートを外してPPTLを押してください。","Press PPTL to confirm no Items Remaining in Bin {0}":"ビン {0} に商品が残ってないことを確認しPPTLボタンを押す","Entities cannot be accommodated! Remove all entities from bin and press PPTL.":"格納できません！全ての商品を取出しPPTLボタンを押してください","Entities cannot be accommodated!":"エンティティが収容できません!","Take {0} Printout and Press PPTL":"{0}印字をとり、PPTLを押す","PPS is Closed":"PPSが閉じられています","Place box in MSU slot and confirm":"MSUスロットにボックスを置いて確認してください","Wrong Undock":"間違ったアンドック","Dock roll cage back to proceed the operation":"操作を進めるためにドックロールケージを戻してください","Excess quantity":"過剰数量","Entity Damaged":"ダメージ商品","Issues with entity":"商品に問題","Validate and Confirm":"確定","Wrong Scan. IRT bin scan expected":"間違ったスキャン.IRTビンのスキャンが予想されています","Scan IRT Bin":"IRTビンをスキャンしてください","Please put damaged entities in IRT bin and scan the bin":"故障されたエンティティをIRTビンに入れてビンをスキャンしてください","Please put damaged entities in exception area":"故障されたエンティティを例外領域に入れてください","Please put extra entities in IRT bin and scan the bin":"余分なエンティティをIRTビンに入れてビンをスキャンしてください","Please put extra entities in exception area":"余分なエンティティを例外領域に入れてください","Please put unscannable entities in IRT bin and scan the bin":"スキャンできないエンティティをIRTビンに入れてビンをスキャンしてください","Please put unscannable entities in exception area":"スキャンできないエンティティを例外領域に入れてください","Please put oversized entities in IRT bin and scan the bin":"大型のエンティティをIRTビンに入れてビンをスキャンしてください","Please put oversized entities in exception area":"大型のエンティティを例外領域に入れてください","Warehouse Full Remove all entities from bin & press PPTL":"ウェアハウスがいっぱいです。ビンからすべてのエンティティを取り除いてPPTLを押してください","Enter Quantity":"数量入力","Are you sure you want to cancel the exception?":"例外処理をキャンセルしますか？","All scan and print will be cancelled. Confirm to cancel?":"すべてのスキャンと印刷がキャンセルされます。キャンセルすることを確認しますか？","Yes":"はい","No":"いいえ","Exception with entity reported":"例外商品を登録しました。","Please put entities with issues, in exception area":"該当商品を例外商品用エリアに保管してください。","Please put entities in IRT and Scan IRT Bin":"エンティティをIRTビンに入れてビンをスキャンしてください","Wrong Scan. Unrecognized barcode.":"間違ったスキャン。認識されないバーコード。","PPS is closed":"PPSが閉じられています","NEST MAX":"ネストマックス","STACK MAX":"スタックマックス","DO NOT STACK":"スタックしてはいけません","FRAGILE":"割れ物注意","Length of {0} should not be greater than {1}":"{0}の長さは{1}より大きくてはいけません","Scan {0} packs":"{0}個のパックをスキャンする","Scan {0} sub packs":"{0}個のサブパックをスキャンする","Press PPTL":"プレスPPTL","Pack Scan Successful":"パックスキャン成功","Scan {0} more packs and place in bin {1}":"より多くのパックをスキャンして{1}ビンに置く","Scan {0} more sub packs and place in bin {1}":"{0}個のサブパックをスキャンしてビン{1}に置く","Put pack list in trolley and press PPTL to confirm":"パックのリストをトロリーに入れ、PPTLを押して確認する","Scan damaged entity":"ダメージ商品をスキャンする","Damaged Quantity":"ダメージ数","Wrong Scan. Entity not present in Database":"マスタに存在しない商品です","Sum of good, missing and damaged should be equal to {0}":"良品、不足品、不良品の合計は {0} でなければなりません。","Last item scan will be cancelled. Do you want to continue?":"最後の商品スキャンをキャンセルします。継続しますか？","Continue":"継続","Bin full":"ビン満杯","Please put entities which have issues in exception area":"該当商品を例外商品用エリアに保管してください。","Unscannable":"スキャン不可","Invalid Event.Expecting PPTL button press":"過剰スキャンです。商品を確認してください。","Remove Tote from bin & Press PPTL to confirm no Items Remaining":"ビンからトートを取り出し、PPTLを押して残りのアイテムを確認します","Wrong entity scan.Please scan the correct entity":"間違った商品スキャン。正しい商品をスキャンしてください。","Physically Damaged entity reported.":"ダメージ商品を登録しました","Entity entry successful":"商品登録をしました。","Bin scan successful":"ビンスキャンが成功","Physically Damaged Reported should equal Scanned Quantity":"ダメージ報告数はスキャンされた数量に一致する必要があります","SKU not present in Database.":"未登録SKU","Extra entity scan found.":"ビンスキャン成功","Container Already Scanned.":"既にスキャンされたコンテナ。","Invalid Entity Scanned.":"異なる商品がスキャンされました。","Quantity of Physically damaged entities scanned is less.":"スキャンしたダメージ商品の数が少ないです。","Error":"エラー","Waiting for Bins to be Cleared at Pick Front":"ビンが一杯です。作業を完了しビンを開放してください。","Processing Next Pick from Rack ":"ラックから次のピッキングを処理する","Scan Damaged Entity":"損傷したエンティティをスキャンする","Warehouse Full":"格納できません","Scan a packing box and keep in bin {0}":"パッキングボックスをスキャンしてビン{0}に保管してください","Pick box from MSU and press PPTL on Bin {0}":"MSUからボックスを選択して、Bin {0}のPPTLを押してください","Extra details entered are incorrect.Please enter correct details":"入力された詳細が間違っています。正しい詳細を入力してください","Packing box scan failed":"パッキングボックスのスキャンが失敗しました","Wrong entity Scanned. Bin Scan Expected.":"間違ったエンティティがスキャンされました.ビンのスキャンが予想されています.","Bin Already Scanned":"ビンが既にスキャンされました","Issue with Pack":"パックに関する問題","Issue with Sub pack":"サブパックの問題","Issue with MPU":"MPUの問題","Space not available":"スペースは利用できません","Bad barcode on pack":"パックのバーコードが間違っています","Bad barcode on sub pack":"サブパックのバーコードが正しくありません","Unexpected pack":"予期せぬパック","Pack missing":"パックがありません","Sub pack missing":"サブパックがありません","Damaged sub pack":"破損したサブパック","Good pack":"良いパック","Good sub pack":"良いサブパック","Scan not Allowed. PPS close/force close or profile change requested.":"スキャンは許可されません。 PPSのクローズ/強制クローズまたはプロファイルの変更が要求されました。","Pack scan successfully":"パックを正常にスキャン","Sub-Pack scan successfully":"サブパックスキャンに成功","Scan MPU":"スキャンMPU","Scan {0} or {1}":"{0}または{1}をスキャンする","Continue scanning {0} and {1}":"{0}と{1}のスキャンを続行する","Enter Quantity of Unscannable {0}":"スキャン不能な数量{0}を入力する","Wait for MPU":"MPUを待つ","No Sub-Packs to reconcile":"調整するサブパックはありません","Pack Unscannable":"スキャン不能なパック","Sub-Pack Unscannable":"スキャン不能なサブパック","Damage Barcode":"ダメージバーコード","Packs":"パック","Sub-Packs":"サブパック","Scan Small Box":"小さな箱をスキャンする","Scan {0} Box and Place in Bin {1}":"{0}箱をスキャンして箱に入れる{1}","Scan {0} Small Box and Place in Bin {1}":"{0}小箱をスキャンして箱に入れる{1}","Put Pack list in trolley and press PPTL to confirm":"パッキングリストをトロリーに入れ、PPTLを押して確定する","Done":"完了","No more entities to be scanned":"スキャン対象のエンティティがこれ以上ない","Type":"タイプ","Serial Number":"シリアルナンバー","Quantity":"数量","Wrong Bin Scanned. Scan Expected for Roll Cage ready for undocking.":"間違いのビンがスキャンされました。アンドッキングの為の準備が出来ているロールケージに対してスキャンが必要となります。","Issues with {0}":"{0}との問題","Scan {0} damaged entities":"破損したエンティティをスキャン{0}する","Scan {0} {1}":"スキャン{0} {1}","Scan {0} {1} and place in Bin {2}":"{0} {1}をスキャンしてBin {2}に配置します","Enter Unscannable Tote Quantity":"スキャン不能なトート数量を入力","Enter items that can fit in the bin":"ビンに収まるアイテムを入力する","{0} scan successfully":"{0}スキャンが完了しました","Place Tote in Bin {0} and Press PPTL":"トートをビン{0}に置き、PPTLを押します","Tote in use at front seat":"フロントシートーで使用中のトート","Waiting for Tote to be associated from back":"後ろから関連付けるトートをお待ちしています","{0} scan successful":"{0} スキャン完了","Waiting for put_away to complete from front":"put_awayがフロントから完了するのを待っています","Tote cannot be associated with bin of another seat":"トートは別のシートのビンに紐づけるのが出来ません","Waiting for put away to complete from front":"put_awayがフロントから完了するのを待っています","Scan checklist items to proceed":"チェックリスト商品をスキャンして続行して下さい","Unexpected Entity In {0}":"{0}の予期しないエンティティ","Scan a {0}":"{0}をスキャンして下さい","Scan a {0} or Press PPTL":"{0}をスキャンして下さい、又は　PPTLを押してください","Press PPTL to clear the Bin":"PPTLを押してビンをクリアして下さい","Place {0} in Bin and scan the Bin barcode":"ビンに{0}を置き、ビンバーコードをスキャンして下さい","Waiting for order to be completed from front":"注文がフロントから完了するのを待っています","Waiting for {0} to be associated from back":"{0}がバックから紐づけられるのを待っています","{0} scan successful.":"{0}スキャンが完了しました。","Excess Entity in {0} recorded.":"{0}の余分エンティティが記録されました。","{0} unexpected. {0} in use in another location":"予期しない{0}。 他の場所で使用中の{0}","{0} unexpected. Service request not present in {0}.":"予期しない{0}。 {0}にサービス要求がありません。","Invalid resource.":"無効なリソース","{0} unexpected. Service request not in correct state.":"予期しない{0} 。サービス要求が正しい状態ではありません。","{0} unexpected. Empty {0} scanned.":"予期しない{0}。 空の{0}がスキャンされました。","{0} unexpected. Scanned {0} does not exist.":"予期しない{0} 。スキャンした{0}は存在しません。","{0} unexpected. Service Request does not exist.":"予期しない{0}。 サービス要求が存在しません。","Wrong scan. Please Scan item or {0}":"間違ったスキャン。 アイテム又は{0}をスキャンしてください","{0} unexpected. {0} is not empty.":"予期しない{0}。 {0}は空ではありません。","Bin barcode of other PPS scanned":"スキャンした他のPPSのビンバーコード","Scan {0}":"スキャン{0}","Scan {0} which has excess item":"余分な商品がある{0}をスキャンしてください","Scan {0} first and then scan item":"最初に{0}をスキャンして商品をスキャンしてください","Invalid {0} scanned":"無効な{0}がスキャンされました","{0} Close Cancelled":"{0}クローズキャンセルされました","{0} docked successfully":"{0}ドッキングは完了しました","Are You Sure You Want to Close {0}?":"{0}を閉めしてもよろしいですか？","Scan {0} or Stage PPS Bin":"スキャン{0}又はステージPPSビン","Enter Unscannable {0} Quantity":"スキャン不能な数量{0}を入力する","Place {0} in Bin {1} and Press PPTL":"Bin {1}に{0}を置いてPPTLを押す","{0} already opened. Scan some other {1}":"{0}は既に開かれています。 他の{1}をスキャンする","{0} already closed. Scan some other {1}":"{0} は既にクローズされています。他の{1}をスキャンする","Close current {0} first":"現在の{0}を最初に閉じる","Wrong entity scanned. Please scan {0}":"間違ったエンティティをスキャンしました。 {0}をスキャンしてください","{0} excess entities found in {0}. Please put entities in exception area and confirm":"{0}に有る余分なエンティティ{0}。 エンティティを例外エリアに配置して確認してください","Entity not expected in {0}. Please put entity in exception area and confirm":"{0}でエンティティが期待されていません。 エンティティを例外エリアに入れて確認してください","Expecting {0} closure.":"{0}閉鎖を期待しています。","{0} not present in database.":"{0}はデータベースに存在しません。","{0} matched .":"{0}が一致しました。","Place the {0} back in bin {1} and press PPTL":"{0}をビン{1}に戻してPPTLを押して下さい","Take out the {0} from bin {1} and scan entity":"ビン {1}から{0}を取り出してエンティティをスキャンして下さい","Remove {0} from bin {1} & Press PPTL to confirm no Items Remaining":"ビン {1}から{0}を削除し、PPTLを押して残りの商品を確認して下さい","Press PPTL or Scan a {0}":"PPTLを押すか、{0}をスキャンする","Select Bin which does not require {0}":"{0}が不要なビンを選択してください","Select Bin to disassociate {0}":"{0}の紐づけをやめるビンを選択","{0} close successful.":"{0}クローズ完了しました。","{0} not closed.":"{0} はクローズしていません","Excess item in {0} recorded. Now press PPTL":"{0}の余分商品が記録されました。今PPTLを押す","Cancelled excess entity in {0}":"{0}の余分なエンティティをキャンセルしました","Cancelled invalid entity in {0}":"{0}の無効なエンティティをキャンセルしました","Invalid entity in {0} recorded":"{0}の無効なエンティティが記録されました","Scan {0} to associate with Bin":"{0}をスキャンしてビンに紐付け","Press PpsBin Button Or Scan a {0}":"PpsBinボタンを押すか、{0}をスキャンする","{0} is already scanned.Expecting pptl scan.":"{0}は既にスキャンされています.pptlスキャンを期待する。","{0} are not required.Please don't scan {1} barcode":"{0}は不要です。{1}バーコードをスキャンしないでください","Please scan the {0} first and then scan pptl barcode":"最初に{0}をスキャンしてpptlバーコードをスキャンしてください","{0} scanned.Expecting pptl scan.":"{0}がスキャンされました。pptlスキャンを期待する。","Pptl scan not allowed. {0} are not required":"Pptlスキャンは許可されません。 {0}は不要です。","{0} didn't get associated":"{0} が紐付けされていません","After scannning {0} barcode, please scan pptl barcode":"{0}バーコードをスキャンした後、pptlバーコードをスキャンしてください","No {0} associated. Pease keep {0} in the Bin and then scan":"{0}が紐づけされていません。 {0}をビンに入れてスキャンしてください","No {0} scanned":"スキャンされた{0}はありません","{0} cancelled":"{0}がキャンセルされました","{0} already associated with ppsbin":"{0}は既にppsbinに紐付け済み","Please press ppsbin button which does not have any {0} associated":"{0}に紐づけされていないppsbinボタンを押して下さい","{0} assigned successfully to ppsbin {0}":"{0}とppsbin {0}の紐づけが完了しました","{0} are not required":"{0}は不要です","{0} could not be reserved as already reserved":"{0}は既に予約済みですので予約できませんでした","Exception invalid as {0} are not required with this PPS":"このPPSで{0}は不要ですので例外が無効です。","Override {0} not possible":"上書き{0}は不可能です","Barcode didn't match with current {0} barcode":"バーコードが現在の{0}バーコードと一致しませんでした","Incorrect {0} barcode scanned. Please try again":"誤った{0}バーコードがスキャンされました。もう一度お試しください","System not configured for {0}":"システムが{0}に設定されていません","{0} association required":"{0}の紐づけ必要です","{0} association failed. Repeat scan operation":"{0}の紐づけが失敗しました。 再度スキャンしてください","{0} are anyway not required.Please proceed further":"{0}は不要です。作業を継続してください","{0} already associated with bin {0}":"{0}はビン {0} に紐付け済みです","{0} in use at front seat":"フロントシートーで使用中の{0} ","{0} cannot be associated with bin of another seat":"{0}は別のシートのビンに紐づけるのが出来ません","{0} assigned successfully to bin":"{0}とビンの紐づけは完了です","{0} disassociated from Bin":"{0}とビンからの紐づけを解除しました","{0} associated with another bin":"{0}は他のビンに紐づけ済みです","Please scan the {0} first and then scan PPTL barcode":"最初に{0}をスキャンしてPPTLバーコードをスキャンしてください","Override {0} Exception cannot be raised for bins with {1} associated":"{1}が紐づいたビンに対して上書き{0}例外は発生する事が出来ません。","PPTL scan not allowed. System not configured for {0}":"PPTLスキャンは許可されません。 システムは{0}に設定されていません","Scan pptl barcode after scannning {0} barcode":"{0}バーコードをスキャンした後にpptlバーコードをスキャンする","{0} scanned is not opened":"スキャンされた{0}は開いていません","{0} already scanned":"{0}は既にスキャンされました","Wrong entity Scanned. {0} Scan Expected.":"間違ったエンティティがスキャンされました。{0}のスキャンは期待しています。","Disassociate {0}":"{0}の紐づけを解除する","Override {0} Required":"上書き{0}は必要です","Scan slot":"スロットをスキャンする","Scan or Enter the {0} barcode to reprint":"{0}バーコードをスキャンするか、入力して再印刷してください","{0} scan cancelled.":"{0}スキャンがキャンセルされました。","{0} scanned is not idle":"スキャンされた{0}はアイドル状態ではありません","Scan {0} first and then scan rack":"最初に{0}をスキャンしてラックをスキャンしてください","{0} already associated with slot.Scan empty slot":"{0}は既にスロットと関連されています。空のスロットをスキャンしてください。","Invalid {0} scan":"無効な{0}スキャン","{0} close successful":"{0}クローズ完了","Scan new {0}":"新しい{0}をスキャンする","Scan item or {0}":"スキャン商品又は{0}","Additional Information":"追加情報","Selected UOM: ":"選択されたUOM:","Close":"クローズ","Select Value":"値を選択して下さい","{0} already associated with bin":"","Previous Pick Details":"","Previous Put Details":"","Dock {0}":"ドック{0}","Scan {1} or Dock {0}":"スキャン {1}又はドック{0}","Undock {0}":"アンドック{0}","Scan a Tote":"トートをスキャン","Scan {0} location":"スキャン{0}ロケーション","Pick complete. Waiting for next pick.":"ピック完了。次のピックを待っています。","Missing barcode scanned. Waiting for confirmation.":"バーコードがスキャンされていません。 確認を待ちます。","{0} cannot be associated with inactive bin":"{0}を非アクティブなビンに紐づけることはできません","{0} cleared":"{0}をクリアしました","Scan load unit and gently push it away":"ロードユニットをスキャンして静かに押して下さい","Box Type":"ボックス種類","Location":"ロケーション","Place Box":"ボックスを置いて下さい","Scan":"スキャン","Checklist":"チェックリスト","Scan {0} Serial":"スキャン{0}シリアル","Scan {0} Serial to Open":"スキャン{0}シリアルからオープン","Scan carrying unit and gently push it away":"","Pick all items from slot {0} and scan slot":"","{0} undocked successfully":"","Pick all items from slot and scan slot":"","NO ITEM FOUND":"","Item details":"","Item Search":"","Event":"","Expectation Id":"","Item Location":"","UOM Details":"","Excess Quantity":"","Total: ":"","Scan excess entities":"","Dis-associate":"","Data capture failed":"","No entities to reconcile":"","LOGIN":"ログイン","Language":"言語","Username":"ユーザー名","Login to Butler System":"","Login to":"にログイン","Enter username":"ユーザーネームを入力してください","Enter password":"パスワードを入力する","Scan ID card to login.":"IDカードをスキャンしてログインします。","{0} Unscannable":"{0}スキャン不能","Scan entities":"エンティティをスキャン","Waiting for {0} to be docked":"","Put Pack list in {0} and press PPTL to confirm":"","Please scan PPTL which has excess item":"","Please put unscannable tote in exception area":"","Sum of good and exception quantity should be equal to {0}":"","{0} Unscannable entities recorded. WMS notified":"","Scan item or enter barcode details":"","{0} unexpected. Service request not present in {1}.":"","MSU Sent":"","This put request is not supported in current flow":"","Service request not in correct state":"","Multiple Service request found":"","Unknown error":"","Scan item":"","Item unexpected. No service request found for this item":"","Scan entity":"","Put entity in slot and scan slot to confirm":"","Excess detected, remove '{0}' items and confirm again":"","Invalid {0}":"","{0} closed":"","Unknown barcode":"","Unexpected entity":"","Excess quantity detected, remove '{0}' quantity and confirm again":"","Call for Help":"","Tote Unscannable":"","{0} unexpected. Scanned {1} does not exist.":"","HEAVY":"","Scan tote":"","Items In Bin":"","Scan tote location":"","Send MSU":"","Put and confirm":"","Close Cart":"","Dock Cart":"","Are you sure that all the items in the cart were scanned?":"","The following {0} items were found missing":"","OUTER":"","INNER":"","Wrong scan. Please Scan tote":""};module.exports=obj

},{}],255:[function(require,module,exports){
var serverMessages = {
    "CLIENTCODE_001": "Bin {0} selected",
    "CLIENTCODE_002": "Bin {0} unselected",
    "CLIENTCODE_003": "Connection is closed. Connecting...",
    "CLIENTCODE_409": "Back seat not supported for this mode",
    "CLIENTCODE_412": "Login not allowed. You're already logged in",
    "CLIENTCODE_503": "Could not connect to PPS . Please try again",
    "CLIENTCODE_403": "PPS is Closed",
    "CLIENTCODE_401": "Username/Password is unauthorized. Please try again.",
    "CLIENTCODE_004": "PPTL Management",
    "CLIENTCODE_005": "Scanner Management",
    "CLIENTCODE_006": "Peripheral added successfully",
    "CLIENTCODE_007": "Peripheral not added",
    "CLIENTCODE_008": "You cannot enter value more than 9999",
    "CLIENTCODE_009": "Please enter a quantity greater than 0",
    "CLIENTCODE_010": "Sum of good and exception quantity should be equal to {0}",
    "CLIENTCODE_011": "Sum of missing and good quantity should be equal to {0}",
    "CLIENTCODE_012": "Quantity should be less than or equal to {0}",
    "CLIENTCODE_013": "You are not allowed to keyed in the quantity from the numpad. Force Scan is required.",
    "CLIENTCODE_014": "Place extra entity in Exception area.",
    "CLIENTCODE_015": "Peripheral deleted successfully",
    "CLIENTCODE_016": "Peripheral not deleted successfully",
    "CLIENTCODE_017": "Good Quantity Cannot be Equal to the Total Quantity",
    "CLIENTCODE_018": "Sum of good, missing and damaged should be equal to {0}",
    "CLIENTCODE_409_PERIPHERAL": "Peripheral already added",
    "CLIENTCODE_400": "Bad Data",
    "CLIENTCODE_400_PERIPHERAL": "Bad Data",
    "SDS.E.000": "Wait for MTU",
    "SDS.E.002": "Select MTU point",
    "RET.E.002": "Remove all Totes from the MTU",
    "STS.H.001": "Scan empty tote",
    "STS.H.002": "Put tote in MTU and scan slot",
    "Mtu.E.005": "Select MTU to proceed",
    //"ExApp.I.004": "Tote scan successful",
    //"ExApp.E.009": "Service integration-service returned a status code of 500. Try last action again.",
    "error": "Error during WebSocket handshake"
};


module.exports = serverMessages;

},{}],256:[function(require,module,exports){
var obj={"Scan item / Stage PPS Bin":"Escanear el artículo / Organice el Bin PPS","Scan Tote to associate with Bin":"Escanear el contenedor para asociarlo al Bin","Press PpsBin Button Or Scan a Tote":"Pulse el PPTL o Escanear el contenedor","User Name":"Nombre de usuario","Password":"Contraseña","Are you sure you want to close Tote":"Está seguro que desea cerrar el contenedor","Details":"Detalles","Scan {0} items":"Escanear {0} artículos","Scan box barcode":"Escanear el código de barras de la caja","Press PpsBin {0} to remove items":"Pulsar PPTL {0} para eliminar los artículos","Tote is already scanned.Expecting pptl scan.":"La bolsa ya está escaneada. Esperando escaneo PPTL","Totes are not required.Please don't scan tote barcode":"No se requieren contenedores. Por favor no escanear el código de barras del contenedor","Wrong PPS bin scanned":"Se ha escaneado el recipiente PPS equivocado","Please scan the tote first and then scan pptl barcode":"Por favor, primero escanear el contenedor y luego escanee el código de barras PPTL","Tote scanned.Expecting pptl scan.":"El contenedor ya está escaneado. Esperando escaneo PPTL","Pptl scan not allowed. Totes are not required":"El escaneo PPTL no está permitido. Las contenedores no son necesarios","Tote didn't get associated":"El contenedor no fue asociado","After scannning tote barcode, please scan pptl barcode":"Después de escanear el código de barras del contenedor, por favor, escanear el código de barras PPTL","Wrong Ppsbin button pressed.Please press those buttons having color blue":"Se ha pulsado el botón PPTL equivocado. Por favor pulse los botones con color azul","Please complete pickback for pending bin and then proceed":"Por favor complete pickback para el recipiente pendiente y luego proceda","No totes associated. Pease keep totes in the Bin and then scan":"No hay bolsas asociadas. Por favor, mantenga las bolsas en el Recipiente y luego escanear","Documents printed Successfully":"Los documentos se imprimieron Exitosamente","No tote scanned":"No se escaneo ningún contenedor","Tote cancelled":"Contenedor cancelado","Tote already associated with ppsbin":"El contenedor ya ha sido asociado al PPTL","Incorrect tote barcode scanned. Please try again":"Se escaneo un código de barra de contenedor incorrecto. Por favor, inténtelo nuevamente","Please press PPTL button which does not have any totes associated":"Por favor, pulse el botón PPTL que no tiene ningún contenedor asociado","Tote assigned successfully to ppsbin {0}":"Contenedor asignado exitosamente al PPTL {0} ","Bin {0} items removed successfully":"Del recipiente {0} se han quitado los artículos exitosamente","Totes are not required":"Los contenedores no son requeridos","Wrong Barcode scanned":"Se ha escaneado el código de barras equivocado","Tote could not be reserved as already reserved":"El contenedor no pudo ser reservado en modo ya reservado","Exception invalid as totes are not required with this PPS":"Excepción no válida, ya que las contenedores no son necesarios con este PPS","Override tote not possible":"No es posible invalidar la bolsa","Scanning pptl barcode not allowed":"No está permitido escanear el código de barras","Please press those buttons having color blink_blue":"Por favor, pulse los botones que parpadeen en azul","Unhandled event ocurred":"Ocurrió un evento no controlado","Barcode didn't match with current tote barcode":"El Código de barras no coincide con el código de barras actual del contenedor","Testing configuration {0} and {1}":"Prueba de configuración {0} y {1}","Processing. Please wait and scan later":"Procesando. Por favor, esperar y escanear más adelante","Waiting for rack":"A la espera de estante","Current PPS mode does not support back seat. Please logout.":"El modo actual del PPS no dispone de asiento trasero. Por favor, cierre de sesión.","Scan items and place in bin {0}":"Analice los elementos y coloquelos en el recipiente {0}","Stage Bin or Scan Entity":"Organice el Recipiente o Escanee el artículo","Place Entity in Bin and Press PPTL":"Ubique el Artículo en el Recipiente y Pulse  PPTL ","Are You Sure You Want to Close Tote?":"¿Está seguro que desea cerrar el contenedor?","Scan Tote or Stage PPS Bin":"Escanear el contenedor y organice el recipiente PPS","Item Not Expected in Tote":"El articulo del contenedor no es el esperado","Tote already opened. Scan some other tote":"El contenedor ya se encuentra abierto. Escanear otro contenedor","Tote already closed. Scan some other tote":"El contenedor ya ha sido cerrado. Escanear otro contenedor","No matching tote found":"No se que encontró el contenedor correspondiente","Wrong entity scanned. Please scan tote":"Se escaneo el articulo equivocado. Por favor, escanear el contenedor","No entities added yet. Scan entities and then press PPTL":"No hay artículos añadidos aún. Escanee los artículos y luego pulse PPTL","Wrong entity scanned. Please scan Container/Item.":"Se escaneo el artículo equivocado. Por favor, escanear el Recipiente/Artículo.","Cannot cancel scan. No scanned box found":"No es posible cancelar el escaneo. No se ha encontrado caja escaneada","Entity scan not expected. Waiting for PPTL press":"No se esperaba el escaneo del artículo. Esperando que pulse PPTL","Bin selected for put. Cannot be staged":"Recipiente seleccionado para colocar. No se puede organizar","SKU not present in database. Put into IRT bin.":"SKU no está presente en la base de datos. Poner en el recipiente IRT.","No free bins. Please scan later":"No hay recipientes libres. Por favor, escanee después","Wrong PPTL pressed. Please try another":"Se ha presionado el PPTL equivocado. Por favor, intente con otro","Please put entities in exception area and confirm":"Por favor, ponga los artículos en el área de excepción y confirme","Wrong bin chosen.Try selecting another bin":"Se ha escogido la papelera equivocada. Pruebe seleccionando otro recipiente","Please scan same SKU to complete this exception":"Por favor, escanee el mismo SKU para completar esta excepción","Entity scan not expected.":"No se esperaba el escaneo del artículo.","Tote not present in database.":"La bolsa no está presente en la base de datos.","Tote has been opened.Scan all items in tote and then scan tote again to close it":"La bolsa se ha abierto. Escanee todos los artículos en la bolsa y luego escanee la bolsa nuevamente para cerrarla","PPS is in paused mode. Cannot process new entity. Try after some time":"PPS está en modo de pausa. No se puede procesar el nuevo artículo. Pruebe después de un tiempo","Cancel scan successful.":"Escaneo de cancelación exitoso.","Tote close successful.":"Cierre de bolsa exitoso.","Tote not closed.":"La Bolsa no ha sido cerrada.","Entity scan successful.":"Escaneo de artículo exitoso.","PPTL press successful":"Presionado de PPTL exitoso","Data capture valid":"Captura de datos válidos","Excess item in tote recorded. Now press PPTL":"Artículo sobrante registrado en la bolsa. Ahora pulse PPTL","Excess item in tote recorded.":"Artículo sobrante registrado en la bolsa.","{0} unscannable entities recorded. WMS notified":"{0} artículos no escaneables registrados. WMS notificado","{0} extra entities recorded in bin. WMS notified":"{0} artículos sobrantes registrados en el recipiente. WMS notificado","{0} oversized entities recorded.WMS notified":"{0} artículos extra grandes registrados. WMS notificado","{0} Physically damaged entity recorded.WMS notified":"{0} Entidad físicamente dañada registrada. WMS notificado","Exception cancelled":"Excepción cancelada","Box with same serial number already exists in the warehouse":"Una caja con el mismo número de serie ya existe en el almacén","Entity already scanned.Waiting for PPTL press":"Artículo ya escaneado. A la espera de prensionar PPTL","No bins available to stage":"No hay recipientes disponibles para organizar","Bin already staged. Ignoring event":"El recipiente ya ha sido organizado. Haciendo caso omiso del evento","Bin empty. Cannot be staged":"Recipiente vacío. No se puede organizar","Scan Box/Items from Slot":"Escanear Caja/ Artículos del Hueco","Scan Remaining Item In Box":"Escanee el Resto de los Artículos en la Caja","Last Box Scan Completed! Scan Remaining Box/Items":"¡Último Escaneo de Caja Terminada! Escanee las Cajas Restantes/Artículos","Status To Reconcile":"Estado Para Conciliar","This box belongs to some other SKU in the slot.Put it back.Scan next box.":"Este cuadro pertenece a algunos otros SKU en el hueco. Devuélvalo. Escanee la caja siguiente.","This box does not belong to this slot. Remove the box and put in exception area.":"Esta caja no pertenece a este hueco. Retire la caja y póngala en a zona de excepción.","Waiting for MSU":"A la espera de MSU","Wrong Barcode":"Código de barras Equivocado","Box Scan successful":"Escaneo de caja exitoso","Item Scan successful":"Escaneo de artículo exitoso","Item scan successful":"Escaneo de artículo exitoso","Data capture failed at item {0}":"La captura de datos falló en el artículo {0}","Bin {0} selected":"Recipiente {0} seleccionado ","Bin {0} unselected":"Recipiente {0} no seleccionado","Connection is closed. Connecting...":"La conexión está cerrada. Conectandose...","Extra item found please put back item in Exception bin":"Artículo adicional encontrado, por favor, deuelválo al recipiente de excepción","Enter Unscannable Entity Quantity":"Especifique la Cantidad de Artículos no Escaneables","Scan Oversized Entity Quantity":"Cantidad de Artículos Extra Grandes Escaneados","Please Select The Bin With Excess Entity":"Por favor, Seleccione el Recipiente con Artículos Sobrantes","Enter Quantity of Excess Entities":"Especificarla Cantidad de Artículos Sobrantes","Place Entity in Slot and Scan More":"Ubique el Artículo en la Vacante y Escanee Más","Scan Slot to Confirm":"Confirme para Escanear Vacante","Wait for MSU":"Espere por MSU","Scan Entity From Bin {0}":"Escanee Artículo del Recipiente {0}","Enter Good Quantity to be Put into Slot":"Entre una Cantidad Correcta Para Ubicar en la Vacante","Put Back Entities in the PPS Bin":"Devuelva los Artículos al Recipiente PPS","Confirm MSU Release":"Confirme la Liberación de MSU","Scan Slot":"Escanee la Vacante","Scan {0} Items":"Escanee {0} Artículos","Cancel audit successful.Audit Restarted":"Cancelación de la auditoría exitosa. La Auditoría se ha Reiniciado","Scan Box":"Escanee la Caja","Scan {0} Items and Place in Bin {0}":"Escanee {0} Artículos y ubiquelos en el Recipiente {0}","Press PPTL to confirm":"Prensione PPTL para confirmar","Scan Tote to Associate with Bin":"Escaneee la Bolsa para Asociarla al Recipiente","Press PPTL or Scan a Tote":"Pulse PPTL o Escanee la Bolsa","Press bin PPTL to remove entities":"Pulse contenedor PPTL  para eliminar entidades","Press bin PPTL":"Pulse Recipiente PPTL","Press PPTL for bin {0} to confirm":"Pulse PPTL para confirmar el recipiente {0}","Press print button to proceed":"Pulse el botón Imprimir para proceder","Select Bin to skip print":"Seleccione Recipiente para omitir impresión","Select Bin which does not require tote":"Seleccione Recipiente que no requiera de bolsa","Select Bin to disassociate tote":"Seleccione Recipiente para desvincular la bolsa","Pick complete. Waiting for next rack.":"Selección completa. A la espera del próximo estante.","Location scan successful":"Escaneo de localización exitoso","Box scan successful":"Escaneo de caja exitoso","Cancel scan successful":"Escaneo de cancelación exitoso","Expecting MSU release confirmation from GUI, got invalid event.":"Esperando la confirmación de liberación MSU de GUI, tiene evento no válido.","Data capture failed at item":"La captura de datos falló en el artículo","Wrong slot location scanned. Please try again":"Ubicación de vacante mal escaneada. Por favor, inténtelo de nuevo","Wrong box scanned. Please try again":"Se escaneo la caja equivocada. Por favor, inténtelo de nuevo","Scan a box first":"Escanee la caja primero","Wrong PPTL pressed. Please press correct PPTL":"Se ha presionado el PPTL equivocado. Por favo,r presione PPTL correcto","Picked quantity more than expected. Put extra items back in MSU":"Seleccionó una cantidad mayor de la esperada. Devuelva los elementos sobrantes al MSU","Wrong item quantity update":"Actualización equivocada de la cantidad de objetos","Wrong item scanned. Please scan correct item":"Se escaneo el artículo equivocado. Por favor, escanee el artículo correcto","Waiting for MSU. Please wait and scan later":"A la espera de MSU. Por favor, espere y escanee más adelante","System Error. Scanned entity details not available at this time":"Error del Sistema. La información del artículo escaneado no está disponible en este momento","No PPS bins empty. Please empty them from Pickback":"No hay recipientes PPS vacíos. Por favor, vacíelos desde Pickback","PPS mode change requested:scan not allowed":"Solicitó cambio de modo PPS: escaneo no permitido","PPS mode change requested:auto staging all bins":"Cambio de modo PPS solicitado: auto organizando todos los recipientes","PPTL press not expected":"Pulsado de PPTL no esperado","Scan not expected":"Escaneo no esperado","Barcode didn't match the current tote barcode":"El Código de barras no coincidió con el código de barras actual de la bolsa","System not configured for totes":"Sistema no configurado para bolsas","Invalid Exception for this configuration":"Excepción no válida para esta configuración","No tote associated. Please keep a tote in bin and scan":"No hay bolsas asociadas. Por favor, mantenga una bolsa en el recipiente y escanee","Wrong PPTL pressed":"Se ha pulsado el PPTL equivocado","Totes are anyway not required.Please proceed further":"Las bolsas de todas formas no son necesarias. Por favor, siga adelante","Tote scan cancelled":"Escaneo de la bolsa cancelado","Documents printed successfully":"Los documentos se imprimieron exitosamente","Order removed successfully from bin {0}":"Orden retirada con éxito del recipiente {0}","Tote assigned successfully to bin":"Bolsa asignada con éxito al recipiente","Tote association failed. Repeat scan operation":"Ha fallado la asociación de la bolsa. Repita la operación de escaneo","Tote associated with another bin":"Bolsa asociada con otro recipiente","Please scan PPTL barcode":"Por favor, escanee el código de barras PPTL","Tote disassociated from Bin":"La Bolsa está desvinculada del Recipiente","Please complete process for pending bin and then proceed":"Por favor, complete el procesopara el recipiente pendiente y luego proceda","Tote already reserved":"Bolsa ya reservada","Wrong barcode scanned":"Se ha escaneado el código de barras equivocado","Please scan the tote first and then scan PPTL barcode":"Por favor, primero escanee la bolsa y luego escanee el código de barras PPTL","Override Tote Exception cannot be raised for bins with totes associated":"La Excepción de la Bolsa Anulada no se puede llevar a los recipientes con bolsas asociadas","PPTL scan not allowed. System not configured for tote":"El escaneo PPTL no está permitido. Sistema no configurado para bolsas","PPTL scan not allowed":"El escaneo PPTL no está permitido.","Tote scan expected":"Escaneo de la bolsa esperado","Entity scanned is not from bin {0}. Replace and scan from bin {1}":"El artículo escaneado no es del recipiente {0}. Reemplace y escanee desde el recipiente {1}","Wrong entity scanned":"Se escaneo el artículo equivocado","Waiting for MSU scan. Please scan entity later.":"A la espera del escaneo MSU. Por favor, escanee el artículo después.","Expected quantity exceeded.":"Cantidad esperada excedida.","Wrong scan! Entity scan expected but slot barcode scanned.":"¡Escaneo equivocado! Escaneo del artículo esperado pero se ha escaneado el código de barras de la ranura.","Actual put quantity not equal to the sum of Good and Expection quantity.":"La cantidad real ubicada no es igual a la suma de la cantidad Correcta y Esperada.","Actual put quantity less than than revised quantity.":"La cantidad real ubicada es menor que la cantidad revisada.","Wrong slot scanned":"Se ha escaneado la vacante equivocada","Entity scan successful":"Escaneo de artículo exitoso.","Slot scan successful":"Escaneo de la vacante exitoso","Damaged and missing entity recorded.":"Artículos dañados y faltantes registrados.","Space unavailable recorded.":"Espacio no disponible registrado.","Please put entity in exception area and confirm":"Por favor, ubique los artículos en el área de excepción y confirme","Entity not expected in tote. Please put entity in exception area and confirm":"El Artículo no se espera en la bolsa Por favor, ubique los artículos en el área de excepción y confirme","{0} excess entities found in tote. Please put entities in exception area and confirm":"{0} Artículos sobrantes encontrados en la bolsa. Por favor, ponga los artículos en el área de excepción y confirme","Cancelled excess entity in tote":"Artículos sobrantes cancelados en la bolsa","Cancelled invalid entity in tote":"Artículo no válido cancelado en la bolsa","Invalid entity in tote recorded":"Artículo no válido registrado en la bolsa.","Wrong enitity scanned. Expecting scan from bin {0}":"Artículo equivocado escaneado. Esperando el escaneo desde el recipiente {0}","PPTL Management":"Gestión PPTL","Scanner Management":"Gestión de Escáner","Entity Oversized":"Artículo Extra Grande","Entity Unscannable":"Artículo no escaneable","Extra Entities in Bin":"Artículos Extra en Recipiente","Entity Missing / Unscannable":"Artículo Faltante / No Escaneable","Space Not Available":"Espacio No Disponible","Mising Box":"Caja Faltante","Disassociate Tote":"Bolsa Desvinculada","Overide Tote Required":"Bolsa Inválida Requerida","Reprint":"Reimpresión","Skip Print":"Omitir Impresión","Peripheral added successfully":"Se ha agregado el Periférico correctamente","Peripheral not added":"El Periférico no se ha agregado","Scan Box or Items":"Escanee Caja o Artículos","Check Count":"Verificar la Cuenta","You cannot enter value more than 9999":"Usted no puede entrar un valor mayor de 9999","Please enter a quantity greater than 0":"Por favor entre una cantidad más de 0","Place extra entity in Exception area.":"Ubique los artículos extra en la zona de Excepción.","Sum of missing, good and damaged should be equal to {0}":"La suma de faltantes, buenos y dañado deben ser iguales a {0}","Scan excess item quantity":"Escanear la cantidad excedida de artículos","Quantity should be less than or equal to {0}":"La cantidad debe ser menor o igual a {0}","You are not allowed to keyed in the quantity from the numpad. Force Scan is required.":"No se le permite ingresar la cantidad desde el teclado numérico. El Escaneo Forzado es necesario.","Waiting for Bins to be Cleared at Pick Back":"A la espera de que los Recipientes sean Despejados para Elegir de Nuevo","Peripheral deleted successfully":"Se ha borraddo el Periférico correctamente","Peripheral not deleted successfully":"Periférico no eliminado con éxito","Cancel Exception":"Excepción Cancelada","Cancel Scan":"Escaneo Cancelado","Finish":"Terminar","Back":"Atrás","OK":"DE ACUERDO","FINISH":"TERMINAR","Print":"Imprimir","Skip Printing":"Omitir Impresión","Override":"Reemplazar","Add Scanner":"Agregar el Escáner","Edit Details":"Edite los Detalles","NEXT":"SIGUIENTE","CONFIRM":"CONFIRMAR","Stage":"Organizar","Stage All":"Organizar Todo","BACK":"ATRÁS","CLOSE":"CERRAR","Cancel":"Cancelar","Confirm":"Confirmar","TOTE":"CONTENEDOR","Clear All":"Borrar Todo","Submit":"Enviar","Exceptions":"Excepciones","Next":"Siguiente","Bin":"Recipiente","Selected":"Seleccionado","Unselected":"No seleccionado","System is Idle":"El sistema está inactivo","CURRENT SLOT":"RANURA ACTUAL","Box Serial Numbers":"Números de Serie de la Caja","No Items To Reconcile":"No Hay Artículos Por Acomodar","List Of Items To Reconcile":"Lista de los Artículos Por Acomodar","View More":"Ver Más","Please put exception entities in exception area":"Por favor, depositar las entidades de excepción en la zona de excepción","Please put exception entities in IRT bin and scan the bin":"Por favor, depositar las entidades de excepción en el contenedor IRT y escanee el contenedor","Product Information":"Información del Producto","Bin Info":"Información del Recipiente","Associate tote with bin":"Asociar la bolsa con el recipiente","Extra Entity Found":"Artículo Extra Encontrado","Perform Action":"Realizar la Acción","Input Extra Details":"Detalles Adicionales de Entrada","Expected":"Esperado","Actual":"Real","Bin ID":"Identificación del recipiente","Barcode":"Código de barras","Peripheral ID":"Identificación del periférico","Actions":"Acciones","Scanner ID":"Identificación por escáner","Delete":"Eliminar","Product SKU":"SKU del Producto ","Expected Quantity":"Cantidad Esperada","Actual Quantity":"Cantidad Real","Missing":"Faltante","Extra":"Extra","Barcode Damage":"Código de barras obsoleto","Item in Box Serial Numbers":" Números de Serie del Artículo en la Caja","Loose Items":"Artículos Faltantes","Loose Items Serial Numbers":"Números de Serie de los Artículos faltante","Product Details":"Detalles del Producto","Product Name":"Nombre de Producto","Product Desc":"Descripción del Producto","Product Type":"Tipo de Producto","Tote already associated with bin {0}":"El contenedor ya ha sido asociado al recipiente {0}","Entity Scan not expected. Press PPTL":"No se esperaba el escaneo del artículo. Pulse PPTL","Item Missing/Unscannable":"Artículo faltante/No escaneable","Missing Box":"Caja Faltante","Override Tote Required":"Contenedor requerido invalido","Items In Box Unscannable":"Artículos en la Caja no Escaneables","Box Unscannable":"Caja no Escaneable","Loose Items Unscannable":"Artículos faltantes no Escaneables","Please put unscannable entities in exception area.":"Por favor, poner los artículos no escaneables en la zona de excepción.","Please put oversized entities in exception area.":"Por favor, poner los artículos extra grandes en la zona de excepción.","Take the Items out from the Slot":"Saque los artículos del Slot","Pptl press not expected.":"Pulsado de PPTL no esperado.","Scan not expected.":"Escaneo no esperado.","Wrong scan.Expecting item scan.":"Escaneo equivocado. Esperando el el escaneo del artículo.","Wrong scan.Expecting container scan.":"Escaneo equivocado. Esperando el el escaneo del recipiente.","Wrong scan.Expecting location scan.":"Escaneo equivocado. Esperando el el escaneo del lugar.","Scan Excess Entity Quantity":"Cantidad de Artículos Sobrantes Escaneados","Entity already scanned.Confirm exception":"El artículo ya ha sido escaneado. Confirme la excepción","Exception":"Excepción","Logout":"Cierre de sesión","Utility":"Utilidad","EXCEPTION":"EXCEPCIÓN","Good Quantity":"Cantidad Correcta","Missing Quantity":"Cantidad Faltante","Unscannable Quantity":"Cantidad no Escaneable","Remove Item":"Eliminar Artículo","Item Missing/Bad Barcode":"Artículo Faltante/Código de Barra Equivocado","Sum of missing and good quantity should be equal to {0}":"La suma de la cantidad faltante y de la cantidad correcta deben ser iguales a {0}","Login":"Inicio de sesión","Enter Username":"Ingresar el Nombre de Usuario","Enter Password":"Escribir la Contraseña","Invalid credentials":"Credenciales Inválidas","Login not allowed. You're already logged in":"El Inicio de sesión no es permitido. Usted ya ha iniciado sesión","Place Item in slot and scan more":"Ubicar el artículo en la ranura y escanee más","PPTL":"PPTL","Scan Slot Barcode":"Escanear el Código de Barras de la ranura","Unexpected Item":"Artículo Inesperado","Stage Bin or Scan Item":"Organizar el Recipiente o Escanear el Artículo","Scan & Confirm":"Escanear y Confirmar","Scan Item From Bin":"Escanear el Artículo Desde el Recipiente","Scan Tote":"Escanear el Contenedor","Scan MSU Barcode":"Escanear el Código de Barras del MSU","Scan Items":"Escanear los Artículos","Status":"Estado","Could not connect to PPS.Please try again.":"No se pudo conectar a PPS. Por favor, inténtelo de nuevo.","product_sku":"product_sku","type":"tipo","quantity":"cantidad","item":"artículo","box":"caja","SKU not present in Database.Put in exception area":"SKU no está presente en la Base de Datos. Ubicar en la zona de excepción","Please put extra entities in exception area.":"Por favor, poner los artículos no escaneables en la zona de excepción.","Space Available For":"Espacio Disponible Para","Tote Details":"Detalles del Contenedor","Close current tote first":"Cerrar primero el contenedor actual","CURRENT BIN":"RECIPIENTE ACTUAL","Bad Barcode Quantity":"Cantidad de Código de Barras Incorrecta","Enter Scanner Id":"Introducir la Identificación del Escáner","Back seat not supported for this mode":"El puesto de trabajo posterior no es compatible con este modo","Bad Data":"Datos Equivocados","Peripheral already added":"El Periférico ya se ha agregado","Scan Bin Barcode":"Escanear el Código de Barras del Recipiente","Update":"Actualización","Japanese":"Japonés","English":"Inglés","Exception Finished":"Excepción Terminada","PPS Mode":"Modo de PPS","Seat Type":"Tipo de Puesto de Trabajo","Good Quantity Cannot be Equal to the Total Quantity":"La Cantidad Correcta no Puede ser Igual a la Cantidad Total","Undock Roll Cage if no items remaining":"Desacoplar la jaula de seguridad si no queda ningún artículo","Gently push roll cage away from the frame":"Mover la jaula de seguridad cuidadosamente lejos del marco","Scan tote and place it in the slot":"Escanear el contenedor y colocarlo en la ranura","Scan slot to confirm":"Escanear vacante para confirmar","Release MTU":"Suelte MTU","Tote scan successful.":"El escaneo del contenedor fue exitoso","Slot barcode scan successful":"Código de barra del slot escaneado exitoso","Tote already scanned":"El Contenedor ya ha sido escaneado","Tote scanned is not idle":"El escaneo del contenedor no está ocupado","Tote scanned is not opened":"El escaneo del contenedor no está abierto","Scan Tote first and then scan rack":"Escanee el contenedor primero y luego escanee el estante","Invalid Slot scanned":"El slot que ha sido escaneado no es válido","Tote already associated with slot.Scan empty slot":"El contenedor ya ha sido asociado con el slot. Escanee un slot vacía","Please Scan tote which has excess item":"Por favor escanee el contenedor que haya sobrepasado el límite de artículos","Tote scan cancelled.":"El escaneo del contenedor ha sido anulado","Exception finished":"La excepción ha sido terminada","Unexpected entity scanned":"Una Entidad inesperada ha sido escaneada","Enter excess item quantity":"Ingrese la cantidad de artículos excedentes"," items":"Artículos","Wrong ppsbin button pressed":"Un botón PPTL ha sido pulsado incorrectamente","Total ":"Total","Place the tote back in bin {0} and press pptl":"Coloque el contenedor nuevamente en el recipiente  {0} y pulse PPTL","Take out the tote from bin {0} and scan entity":"Saque el contenedor del recipiente {0} y escanee entidad","Scan tote first and then scan item":"Escanee primero el contenedor y luego escanee artículo","Scan excess item":"Escanee articulo excedente","Scan tote which has excess item":"Escanee el bolso que haya sobrepasado el límite de artículos","Invalid tote scanned":"Un contenedor no válido ha sido escaneado","Exception entry successful":"La ingreso de la excepción ha sido exitosa","Are you sure you want to exit from {0} invoice and stage all bins":"Está seguro de que quiere salir de {0} la factura y procesar todos los contenedores","Invoice number: {0}":"Número de la factura : {0}","Scan or Enter {0} number":"Escanear o Ingresar {0} numero","Please scan or enter {0} number":"Por favor escanear o ingresar {0} número","STN scan successful":"STN escaneado con éxito’","Exit {0}":"Salir {0}","{0} number :":"{0} numero  :","Are you sure you want to exit from {0} {1} and stage all bins":"Está seguro de que querer salir de {0} {1} y procesar todos los contenedores","Scan or Enter the tote barcode to reprint":"Escanear o Ingresar código de barras del contenedor para reimprimir","Place container in MSU slot and confirm":"Colocar el contenedor en la ranura de  MSU y confirmar","Place {0} boxes with {1} items from bin {2}":"Colocar {0} cajas con {1} artículos del contenedor {2}","Place {0} boxes from bin {2}":"Colocar {0} cajas del contenedor {2}","Place":"Colocar","Remove Tote from bin {0} & Press PPTL to confirm no Items Remaining":"Eliminar contenedor del recipiente  {0} y pulse PPTL para confirmar que no queda ningún artículo","Press PPTL to confirm no Items Remaining in Bin {0}":"Pulsar PPTL para confirmar que ningún artículo se quede en Contenedor {0}","Entities cannot be accommodated! Remove all entities from bin and press PPTL.":"Las entidades no se pueden ser ingresadas!  Eliminar todas las entidades del contenedor y pulse PPTL.","Entities cannot be accommodated!":"¡Las entidades no pueden ser ingresadas!","Take {0} Printout and Press PPTL":"Imprimir {0} y Presionar PPTL","PPS is Closed":"PPS ha sido Cerrado","Place box in MSU slot and confirm":"Colocar la caja en la ranura MSU y confirmar","Wrong Undock":"Undock equivocado","Dock roll cage back to proceed the operation":"Retirar la jaula de rodillos para continuar la operación","Excess quantity":"Cantidad excesiva","Entity Damaged":"Entidad dañada","Issues with entity":"Problemas con entidad","Validate and Confirm":"Validar y Confirmar","Wrong Scan. IRT bin scan expected":"Escaneo incorrecto. Escaneo de contenedor IRT en espera","Scan IRT Bin":"Escanear Contenedor IRT","Please put damaged entities in IRT bin and scan the bin":"Por favor, depositar las entidades dañadas en el contenedor IRT y escanee el contenedor","Please put damaged entities in exception area":"Por favor, depositar las entidades dañadas en la zona de excepción","Please put extra entities in IRT bin and scan the bin":"Por favor, depositar las entidades adicionales en el contenedor IRT y escanee el contenedor","Please put extra entities in exception area":"Por favor, depositar las entidades adicionales en la zona de excepción","Please put unscannable entities in IRT bin and scan the bin":"Por favor, deposite las entidades no escaneables en el contenedor IRT y escanee el contenedor","Please put unscannable entities in exception area":"Por favor, depositar las entidades no escaneables en la zona de excepción","Please put oversized entities in IRT bin and scan the bin":"Por favor, depositar las entidades extra grandes en el contenedor IRT y escanee el contenedor","Please put oversized entities in exception area":"Por favor, depositar las entidades extra grandes en la zona de excepción","Warehouse Full Remove all entities from bin & press PPTL":"Depósito Lleno. Eliminar todas las entidades del contenedor y pulsar PPTL","Enter Quantity":"Introducir cantidad","Are you sure you want to cancel the exception?":"¿Está seguro de querer cancelar la excepción?","All scan and print will be cancelled. Confirm to cancel?":"Se cancelarán todos los escaneos e impresiones. ¿Confirmar para cancelar?","Yes":"Sí","No":"No","Exception with entity reported":"Excepción con entidad reportada","Please put entities with issues, in exception area":"Por favor, deposite las entidades con problemas en la zona de excepción","Please put entities in IRT and Scan IRT Bin":"Por favor, deposite las entidades dañadas en IRT y escanee el Contenedor IRT","Wrong Scan. Unrecognized barcode.":"Escaneo incorrecto. Código de barras no reconocido.","PPS is closed":"PPS está cerrado","NEST MAX":"SET MAX","STACK MAX":"APILAMIENTO MAX","DO NOT STACK":"NO APILAR","FRAGILE":"FRÁGIL","Length of {0} should not be greater than {1}":"La longitud de {0} no debería ser mayor a {1}","Scan {0} packs":"Escanear {0} paquetes","Scan {0} sub packs":"Escanear {0} paquetes secundarios","Press PPTL":"Presione PPTL","Pack Scan Successful":"Escaneo del paquete realizado correctamente","Scan {0} more packs and place in bin {1}":"Escanear {0} más paquetes y colocarlos en el contenedor {1}","Scan {0} more sub packs and place in bin {1}":"Escanear {0} más paquetes secundarios y colocarlos en el contenedor {1}","Put pack list in trolley and press PPTL to confirm":"Coloque la lista de paquetes en el carro y presione PPTL para confirmar","Scan damaged entity":"Escanear entidad dañada","Damaged Quantity":"Cantidad dañada","Wrong Scan. Entity not present in Database":"Escaneo incorrecto. Entidad no presente en la Base de Datos","Sum of good, missing and damaged should be equal to {0}":"La suma de artículos, perdidos y dañados debe ser igual a {0}","Last item scan will be cancelled. Do you want to continue?":"El último escaneo de artículo será cancelado. ¿Desea continuar?","Continue":"Continuar","Bin full":"Contenedor lleno","Please put entities which have issues in exception area":"Coloque las entidades que tienen problemas en el área de excepción","Unscannable":"No escaneable","Invalid Event.Expecting PPTL button press":"Proceso inválido. Esperando pulsar tecla PPTL","Remove Tote from bin & Press PPTL to confirm no Items Remaining":"Eliminar el Totalizador del contenedor y Pulsar PPTL para confirmar que no hay Elementos Restantes","Wrong entity scan.Please scan the correct entity":"Escaneo de entidad incorrecto. Por favor, escanee la entidad correctamente","Physically Damaged entity reported.":"Daño físico de la entidad reportada.","Entity entry successful":"Ingreso de entidad realizada con éxito","Bin scan successful":"Escaneo de contenedor realizado con éxito","Physically Damaged Reported should equal Scanned Quantity":"El daño físico reportado debería ser equivalente a la cantidad escaneada","SKU not present in Database.":"SKU no está presente en la Base de Datos.","Extra entity scan found.":"Escaneo de entidad adicional encontrada.","Container Already Scanned.":"Contenedor ya escaneado.","Invalid Entity Scanned.":"Entidad  Escaneada Inválida.","Quantity of Physically damaged entities scanned is less.":"La cantidad escaneada de las entidades dañadas físicamente es menor","Error":"Error","Waiting for Bins to be Cleared at Pick Front":"Esperando Contenedores para despejar la Parte Delantera","Processing Next Pick from Rack ":"Procesando la Selección del Siguiente Estante","Scan Damaged Entity":"Escanear Entidad Dañada","Warehouse Full":"Depósito lleno","Scan a packing box and keep in bin {0}":"Escanear una caja de embalaje y mantenerla en el contenedor {0}","Pick box from MSU and press PPTL on Bin {0}":"Seleccione la caja desde el MSU y presione PPTL en el contenedor {0}","Extra details entered are incorrect.Please enter correct details":"Los detalles adicionales introducidos son incorrectos. Por favor, introduzca los detalles correctos.","Packing box scan failed":"Error al escanear la caja de embalaje","Wrong entity Scanned. Bin Scan Expected.":"Entidad scaneada incorrecta. Se espera el escaneo del contenedor.","Bin Already Scanned":"Contenedor ya escaneado","Issue with Pack":"Problema con el paquete","Issue with Sub pack":"Problema con el paquete secundario","Issue with MPU":"Problema con la MPU","Space not available":"Espacio no disponible","Bad barcode on pack":"Código de barras incorrecto en el paquete","Bad barcode on sub pack":"Código de barras incorrecto en el paquete secundario","Unexpected pack":"Paquete inesperado","Pack missing":"Paquete faltante","Sub pack missing":"Paquete secundario ","Damaged sub pack":"Paquete secundario dañado","Good pack":"Paquete en buen estado","Good sub pack":"Paquete secundario en buen estado","Scan not Allowed. PPS close/force close or profile change requested.":"Escaneo no permitido. Cerrar/forzar PPS o cambio de perfil solicitado.","Pack scan successfully":"Escaneo del paquete realizado correctamente","Sub-Pack scan successfully":"Escaneo del paquete secundario realizado correctamente","Scan MPU":"Escanear MPU","Scan {0} or {1}":"Escaneo {0} o {1}","Continue scanning {0} and {1}":"Continúe con el scaneo {0} y {1}","Enter Quantity of Unscannable {0}":"Ingrese la cantidad no escaneable  {1}","Wait for MPU":"Espere a MPU","No Sub-Packs to reconcile":"Sin paquetes secundarios por acomodar","Pack Unscannable":"No es posible escanear el paquete","Sub-Pack Unscannable":"No es posible escanear el paquete secundario","Damage Barcode":"Código de barras dañado","Packs":"Paquetes","Sub-Packs":"Paquetes secundarios","Scan Small Box":"Escanear una caja pequeña","Scan {0} Box and Place in Bin {1}":"Escanear {0} una caja y colocarla en el contenedor {1}","Scan {0} Small Box and Place in Bin {1}":"Escanear {0} una caja pequeña y colocarla en el contenedor {1}","Put Pack list in trolley and press PPTL to confirm":"Coloque la lista de paquetes en el carro y presione PPTL para confirmar","Done":"Hecho","No more entities to be scanned":"Ninguna entidad a ser escaneada","Type":"Tipo","Serial Number":"Número Serial","Quantity":"Cantidad","Wrong Bin Scanned. Scan Expected for Roll Cage ready for undocking.":"Contenedor  escaneado erróneo. Scaneo esperado  para la jaula de antivuelco listo para desacoplar","Issues with {0}":"Problemas con {0}","Scan {0} damaged entities":"Escanear {0} las entidades dañadas","Scan {0} {1}":"Escanear {0} {1}","Scan {0} {1} and place in Bin {2}":"Escanear  {0} {1} y colocar en el contenedor {2}","Enter Unscannable Tote Quantity":"Ingresar la cantidad del contenedor que no fue posible escanear","Enter items that can fit in the bin":"Ingresar los artículos que caben en el recipiente","{0} scan successfully":"{0} Escaneo Exitoso","Place Tote in Bin {0} and Press PPTL":"Colocar el contenedor en el recipiente {0} y Presionar PPTL ","Tote in use at front seat":"Contenedor frontal en uso ","Waiting for Tote to be associated from back":"Esperando que el contenedor sea asociado","{0} scan successful":"{0} Escaneo exitoso","Waiting for put_away to complete from front":"Esperando a que termine de completarse.","Tote cannot be associated with bin of another seat":"El contenedor no puede ser asociado con el recipiente ubicado en otro lugar.","Waiting for put away to complete from front":"Esperando a que termine de completarse.","Scan checklist items to proceed":"","Unexpected Entity In {0}":"","Scan a {0}":"","Scan a {0} or Press PPTL":"","Press PPTL to clear the Bin":"","Place {0} in Bin and scan the Bin barcode":"","Waiting for order to be completed from front":"","Waiting for {0} to be associated from back":"","{0} scan successful.":"","Excess Entity in {0} recorded.":"","{0} unexpected. {0} in use in another location":"","{0} unexpected. Service request not present in {0}.":"","Invalid resource.":"","{0} unexpected. Service request not in correct state.":"","{0} unexpected. Empty {0} scanned.":"","{0} unexpected. Scanned {0} does not exist.":"","{0} unexpected. Service Request does not exist.":"","Wrong scan. Please Scan item or {0}":"","{0} unexpected. {0} is not empty.":"","Bin barcode of other PPS scanned":"","Scan {0}":"","Scan {0} which has excess item":"","Scan {0} first and then scan item":"","Invalid {0} scanned":"","{0} Close Cancelled":"","{0} docked successfully":"","Are You Sure You Want to Close {0}?":"","Scan {0} or Stage PPS Bin":"","Enter Unscannable {0} Quantity":"","Place {0} in Bin {1} and Press PPTL":"","{0} already opened. Scan some other {1}":"","{0} already closed. Scan some other {1}":"","Close current {0} first":"","Wrong entity scanned. Please scan {0}":"","{0} excess entities found in {0}. Please put entities in exception area and confirm":"","Entity not expected in {0}. Please put entity in exception area and confirm":"","Expecting {0} closure.":"","{0} not present in database.":"","{0} matched .":"","Place the {0} back in bin {1} and press PPTL":"","Take out the {0} from bin {1} and scan entity":"","Remove {0} from bin {1} & Press PPTL to confirm no Items Remaining":"","Press PPTL or Scan a {0}":"","Select Bin which does not require {0}":"","Select Bin to disassociate {0}":"","{0} close successful.":"","{0} not closed.":"","Excess item in {0} recorded. Now press PPTL":"","Cancelled excess entity in {0}":"","Cancelled invalid entity in {0}":"","Invalid entity in {0} recorded":"","Scan {0} to associate with Bin":"","Press PpsBin Button Or Scan a {0}":"","{0} is already scanned.Expecting pptl scan.":"","{0} are not required.Please don't scan {1} barcode":"","Please scan the {0} first and then scan pptl barcode":"","{0} scanned.Expecting pptl scan.":"","Pptl scan not allowed. {0} are not required":"","{0} didn't get associated":"","After scannning {0} barcode, please scan pptl barcode":"","No {0} associated. Pease keep {0} in the Bin and then scan":"","No {0} scanned":"","{0} cancelled":"","{0} already associated with ppsbin":"","Please press ppsbin button which does not have any {0} associated":"","{0} assigned successfully to ppsbin {0}":"","{0} are not required":"","{0} could not be reserved as already reserved":"","Exception invalid as {0} are not required with this PPS":"","Override {0} not possible":"","Barcode didn't match with current {0} barcode":"","Incorrect {0} barcode scanned. Please try again":"","System not configured for {0}":"","{0} association required":"","{0} association failed. Repeat scan operation":"","{0} are anyway not required.Please proceed further":"","{0} already associated with bin {0}":"","{0} in use at front seat":"","{0} cannot be associated with bin of another seat":"","{0} assigned successfully to bin":"","{0} disassociated from Bin":"","{0} associated with another bin":"","Please scan the {0} first and then scan PPTL barcode":"","Override {0} Exception cannot be raised for bins with {1} associated":"","PPTL scan not allowed. System not configured for {0}":"","Scan pptl barcode after scannning {0} barcode":"","{0} scanned is not opened":"","{0} already scanned":"","Wrong entity Scanned. {0} Scan Expected.":"","Disassociate {0}":"","Override {0} Required":"","Scan slot":"","Scan or Enter the {0} barcode to reprint":"","{0} scan cancelled.":"","{0} scanned is not idle":"","Scan {0} first and then scan rack":"","{0} already associated with slot.Scan empty slot":"","Invalid {0} scan":"","{0} close successful":"","Scan new {0}":"","Scan item or {0}":"","Additional Information":"","Selected UOM: ":"","Close":"","Select Value":"","{0} already associated with bin":"","Previous Pick Details":"","Previous Put Details":"","Dock {0}":"","Scan {1} or Dock {0}":"","Undock {0}":"","Scan a Tote":"","Scan {0} location":"","Pick complete. Waiting for next pick.":"","Missing barcode scanned. Waiting for confirmation.":"","{0} cannot be associated with inactive bin":"","{0} cleared":"","Scan load unit and gently push it away":"","Box Type":"","Location":"","Place Box":"","Scan":"","Checklist":"","Scan {0} Serial":"","Scan {0} Serial to Open":"","Scan carrying unit and gently push it away":"","Pick all items from slot {0} and scan slot":"","{0} undocked successfully":"","Pick all items from slot and scan slot":"","NO ITEM FOUND":"","Item details":"","Item Search":"","Event":"","Expectation Id":"","Item Location":"","UOM Details":"","Excess Quantity":"","Total: ":"","Scan excess entities":"","Dis-associate":"","Data capture failed":"","No entities to reconcile":"","LOGIN":"INICIAR SESIÓN","Language":"Idioma","Username":"Nombre de usuario","Login to Butler System":"","Login to":"Iniciar sesión en","Enter username":"Introduzca su nombre de usuario","Enter password":"Introducir la contraseña","Scan ID card to login.":"Escanear la tarjeta de identificación para iniciar sesión.","{0} Unscannable":"{0} No se puede escanear","Scan entities":"Entidades de escaneo","Waiting for {0} to be docked":"Esperando a que {0} se acople","Put Pack list in {0} and press PPTL to confirm":"","Please scan PPTL which has excess item":"","Please put unscannable tote in exception area":"Por favor, coloque la bolsa no escaneable en el área de excepción","Sum of good and exception quantity should be equal to {0}":"La suma del bien y la cantidad de excepción debe ser igual a {0}","{0} Unscannable entities recorded. WMS notified":"","Scan item or enter barcode details":"Escanee el artículo o ingrese los detalles del código de barras","{0} unexpected. Service request not present in {1}.":"","MSU Sent":"","This put request is not supported in current flow":"","Service request not in correct state":"","Multiple Service request found":"","Unknown error":"","Scan item":"","Item unexpected. No service request found for this item":"","Scan entity":"","Put entity in slot and scan slot to confirm":"","Excess detected, remove '{0}' items and confirm again":"","Invalid {0}":"","{0} closed":"","Unknown barcode":"","Unexpected entity":"","Excess quantity detected, remove '{0}' quantity and confirm again":"","Call for Help":"","Tote Unscannable":"","{0} unexpected. Scanned {1} does not exist.":"","HEAVY":"","Scan tote":"","Items In Bin":"","Scan tote location":"","Send MSU":"","Put and confirm":"","Close Cart":"","Dock Cart":"","Are you sure that all the items in the cart were scanned?":"","The following {0} items were found missing":"","OUTER":"","INNER":"","Wrong scan. Please Scan tote":""};module.exports=obj

},{}],257:[function(require,module,exports){
var AppDispatcher = require('../dispatchers/AppDispatcher');
var AppConstants = require('../constants/appConstants');
var EventEmitter = require('events').EventEmitter;
var assign = require('object-assign');
var ActionTypes = AppConstants;
var CHANGE_EVENT = 'change';
var navConfig = require('../config/navConfig');
var utils = require('../utils/utils');

var _PickFrontData, _NavData, _NotificationData,_serverNavData;


var PickFrontStore = assign({}, EventEmitter.prototype, {

    emitChange: function() {
        this.emit(CHANGE_EVENT);
    },

    addChangeListener: function(callback) {
        this.on(CHANGE_EVENT, callback);
    },

    removeChangeListener: function(callback) {
        this.removeListener(CHANGE_EVENT, callback);
    },

    getNavData: function() {
        if (_PickFrontData.screen_id === AppConstants.PICK_FRONT_WAITING_FOR_MSU) {
            _NavData = navConfig.pickFront[0];
            _NavData[0].type = 'active';
        }
        
        else {
            _NavData = navConfig.pickFront[1];
            _NavData.map(function(data, index) {
                if(data.screen_id instanceof Array){
                    if( data.screen_id.indexOf(_PickFrontData.screen_id) != -1 ){
                         _NavData[index].type = 'active';
                    }else{
                        _NavData[index].type = 'passive';
                    }
                }
                else if (_PickFrontData.screen_id === data.screen_id) {
                    _NavData[index].type = 'active';
                } else {
                    _NavData[index].type = 'passive';
                }
            });
        }
        return _NavData;
    },
    getNotificationData: function() {
        if (_PickFrontData["notification_list"] != undefined)
            return _PickFrontData.notification_list[0];
        else
            return null;
    },
    setPickFrontData: function(data) {
        _PickFrontData = data;
        console.log("%c  ===> PIckFrontStore.js => setPickFrontData ()", "color:red" + data)
    },

    getStateData: function() {
        return _PickFrontData;
    },

    getScreenId: function() {
        if (_PickFrontData["screen_id"] != undefined)
            return _PickFrontData.screen_id;
        else
            return null;
    },
    getServerNavData : function(){ 
        if(_PickFrontData.header_msge_list.length > 0){
            _serverNavData = _PickFrontData.header_msge_list[0];
            return _serverNavData;
        }
        else{
            return null;   
        } 
    },
    getBinData: function() {
        var binData = {};
        binData["structure"] = _PickFrontData["structure"];
        binData["ppsbin_list"] = _PickFrontData["ppsbin_list"];
        return binData;
    },

    scanDetails: function() {
        console.log(_PickFrontData);
        _scanDetails = _PickFrontData.scan_details;
        return _scanDetails;
    },
    productDetails: function() {
        console.log(_PickFrontData);
        _prodDetails = _PickFrontData.product_info;
        return _prodDetails;
    },

    getRackDetails: function() {
        return _PickFrontData.rack_details;
    },

    getBoxDetails: function() {
        return _PickFrontData.box_serials;
    },

     getChecklistDetails:function(){
        if(_PickFrontData.hasOwnProperty('checklist_details')){ 
            console.log(_PickFrontData.checklist_details.pick_checklist.length + "jindal");
            if(_PickFrontData.checklist_details.pick_checklist.length > 0){
                return _PickFrontData.checklist_details.pick_checklist;
            }
            else{
                return [];
            }     
            
        }else{
            return [];
        }
    },
    getChecklistIndex:function(){
        if(_PickFrontData.hasOwnProperty('checklist_details')){ 
            if(_PickFrontData.checklist_details.checklist_index!= null){
                return _PickFrontData.checklist_details.checklist_index;
            } 
            else{
                return null;
            }    
            
        }else{
            return null;
        }
    },
    getChecklistOverlayStatus:function(){
        if(_PickFrontData.hasOwnProperty('checklist_details')){ 
            return _PickFrontData.checklist_details.display_checklist_overlay;
          }else{
            return null;
        }
    },

    getCurrentSelectedBin: function() {
        if (_PickFrontData["ppsbin_list"] != undefined) {
            var binData = {};
            binData["structure"] = [1, 1];
            binData["ppsbin_list"] = [];
            _PickFrontData.ppsbin_list.map(function(value, index) {
                if (value.selected_state == true){
                    binData["ppsbin_list"].push(value);
                }
            });
            binData["ppsbin_list"]["coordinate"] = [1,1];
            return binData;
        } else
            return null;
    },
    getItemUid : function(){
        return _PickFrontData.item_uid;
    },
    getCurrentSlot : function(){        
        if(_PickFrontData.hasOwnProperty('rack_details')){       
            return _PickFrontData.rack_details.slot_barcodes;
        }else{
            return null;
        }
    }

});

PickFrontStore.dispatchToken = AppDispatcher.register(function(action) {
    switch (action.action.actionType) {
        case ActionTypes.SET_PICK_FRONT_DATA:
        PickFrontStore.setPickFrontData(action.action.data);
        PickFrontStore.emitChange();
            break;
        default:
            return true;
    }
});

module.exports = PickFrontStore;

},{"../config/navConfig":241,"../constants/appConstants":242,"../dispatchers/AppDispatcher":246,"../utils/utils":260,"events":14,"object-assign":20}],258:[function(require,module,exports){
var AppDispatcher = require('../dispatchers/AppDispatcher');
var configConstants = require('../constants/configConstants');
var appConstants = require('../constants/appConstants');
var objectAssign = require('react/lib/Object.assign');
var EventEmitter = require('events').EventEmitter;
var utils  = require('../utils/utils.js');


var CHANGE_EVENT = 'change';
var flag = false;
var currentSeat = [];
var currentLang = '';
var _errMsg = null;

function getParameterByName(){
    console.log("=====> loginStore.js => getParameterByName ()" );
    var l = document.createElement("a");
    l.href = window.location.href;
    var url_exist = window.location.href.split('=');
    if(url_exist[1] == undefined){
      listPpsSeat(null);
    }else{
      currentSeat.push(url_exist[1]);
      loginstore.emit(CHANGE_EVENT);
    }
}
var retrieved_token = sessionStorage.getItem('store_data');
if(retrieved_token != null){
  var xhrConfig = function(xhr) {
          var authentication_token = JSON.parse(retrieved_token)["auth_token"];
          xhr.setRequestHeader("Authentication-Token", authentication_token)
  }
}

function getCurrentLang(){
  var localeStr = window.sessionStorage.getItem("localeData"),
  localeObj =  (localeStr) ? JSON.parse(localeStr) : {},
  localeLang = (localeObj && localeObj.data) ? localeObj.data.locale : null;
  return localeLang
}


function listPpsSeat(seat){
  console.log("=====> %c  get list of station ids", "color:red" );
    if(seat === null){
      currentSeat.length = 0; 
      $.ajax({
        type: 'GET',
        url:  configConstants.PLATFORM_IP + "/api-gateway/extraction-service/wms-extraction/extraction-app/pps-extraction-stns",
        dataType : "json",
        beforeSend : xhrConfig 
        }).done(function(response) {
          currentSeat = response;
          loginstore.emit(CHANGE_EVENT); 
        }).fail(function(jqXhr) {
        }).success(function(data){
          console.log("list of station ids successful====>");
        });
    }else{
      loginstore.emit(CHANGE_EVENT); 
    }
}

var showBox = function(index){
  flag = true;
}

var loginstore = objectAssign({}, EventEmitter.prototype, {
  emitChange: function() {
    this.emit(CHANGE_EVENT);
  },
  addChangeListener: function(cb){
    this.on(CHANGE_EVENT, cb);
  },
  removeChangeListener: function(cb){
    this.removeListener(CHANGE_EVENT, cb);
  },
  getFlag : function(){ 
    return flag;
  },
  setFlag:function(val){
    flag = val;
  },
  stationList : function(){ 
    return currentSeat;
  },
  getLang : function(){            //get language
    return currentLang;
  },
  getAuthToken : function(data){
    utils.getAuthToken(data);
  },
  sessionLogout: function(data){
    utils.sessionLogout(data);
  },
  getErrorMessage: function(){    
   return _errMsg; 
  },
  showErrorMessage : function(data){
    _errMsg = data;
  },
  getCurrentLang : function(){
    return getCurrentLang();
  }
});


AppDispatcher.register(function(payload){
  var action = payload.action;
  switch(action.actionType){

    case appConstants.LIST_SEATS:
      getParameterByName();
      break;
    case appConstants.SET_LANGUAGE:             // Register callback for SET_LANGUAGE action
      checkLang();
      break;
    case appConstants.LOGIN:
      loginstore.getAuthToken(action.data);
      loginstore.emit(CHANGE_EVENT);
      break;
    case appConstants.LOGOUT_SESSION:
      loginstore.sessionLogout(action.data);
      loginstore.emit(CHANGE_EVENT);
      break;
    case appConstants.OPERATOR_SEAT: 
      showBox(action.data);
      loginstore.emit(CHANGE_EVENT);
      break;
    case appConstants.LOGIN_SEAT: 
      loginstore.setFlag(action.data);
      loginstore.emit(CHANGE_EVENT);
      break;
    case appConstants.SHOW_ERROR_MESSAGE:
      loginstore.showErrorMessage(action.data);
      loginstore.emitChange(); 
      break; 
    default:
      return true;
  }
});

module.exports = loginstore;

},{"../constants/appConstants":242,"../constants/configConstants":243,"../dispatchers/AppDispatcher":246,"../utils/utils.js":260,"events":14,"react/lib/Object.assign":45}],259:[function(require,module,exports){
var AppDispatcher = require("../dispatchers/AppDispatcher")
var appConstants = require("../constants/appConstants")
var objectAssign = require("react/lib/Object.assign")
var SVGConstants = require("../constants/svgConstants")
var EventEmitter = require("events").EventEmitter
var utils = require("../utils/utils")
var serverMessages = require("../serverMessages/server_messages")
var chinese = require("../serverMessages/chinese")
var english = require("../serverMessages/english")
var hebrew = require("../serverMessages/hebrew")
var japanese = require("../serverMessages/japanese")
var german = require("../serverMessages/german")
var french = require("../serverMessages/french")
var spanish = require("../serverMessages/spanish")
var dutch = require("../serverMessages/dutch")
var navConfig = require("../config/navConfig")
var resourceConstants = require("../constants/resourceConstants")
var CommonActions = require("../actions/CommonActions")
var CHANGE_EVENT = "change"
var _seatData,
  _currentSeat,
  _currentStationId,
  _peripheralScreen = false,
  _seatMode,
  _username,
  _seatType,
  _seatName,
  _utility,
  _pptlEvent,
  _binId,
  _cancelEvent,
  _messageJson,
  _screenId,
  _itemUid,
  _exceptionType,
  _action,
  _KQQty = 0,
  _logoutStatus,
  _activeException = null,
  _enableException = false,
  _enableSearch = false,
  popupVisible = false,
  _showSpinner = true,
  _goodQuantity = 0,
  _damagedQuantity = 0,
  _putFrontExceptionScreen = "good",
  _pickFrontExceptionScreen = "good",
  _missingQuantity = 0,
  _unscannableQuantity = 0,
  showModal = false,
  _scanAllowed = true,
  _clearNotification = false,
  _enableButton = true,
  _putBackExceptionScreen,
  _finishAuditFlag = true
_errorPopupDisabled = false
_cancelButtonClicked = false
_auditModalStatus = false
_boiConfig = null
_itemSearchEnabled = false
_scannerLoginEnabled = false
_unitConversionAllowed = false
_uomConversionFactor = 1
_uomDisplayUnit = ""

var modalContent = {
  data: "",
  type: ""
}

/*
 * This function enables the logout due to inactivity feature - Krishna.
 */
var idleLogout = (function() {
  var t
  window.addEventListener("load", resetTimer, false)
  window.addEventListener("mousemove", resetTimer, false)
  window.addEventListener("mousedown", resetTimer, false)
  window.addEventListener("onclick", resetTimer, false)
  window.addEventListener("scroll", resetTimer, false)
  window.addEventListener("keypress", resetTimer, false)

  function logout() {
    if (mainstore.getLogoutState()) {
      console.log(
        "Logging out since user has been idle past the time threshold"
      )
      CommonActions.logoutSession(true)
    }
  }

  function resetTimer() {
    clearTimeout(t)
    t = setTimeout(logout, appConstants.IDLE_LOGOUT_TIME)
    // time is in milliseconds
  }
})()

function setPopUpVisible(status) {
  popupVisible = status
  mainstore.emit(CHANGE_EVENT)
}
var mainstore = objectAssign({}, EventEmitter.prototype, {
  emitChange: function() {
    this.emit(CHANGE_EVENT)
  },
  addChangeListener: function(cb) {
    this.on(CHANGE_EVENT, cb)
  },
  removeChangeListener: function(cb) {
    this.removeListener(CHANGE_EVENT, cb)
  },
  getPopUpVisible: function(data) {
    return popupVisible
  },
  showSpinner: function() {
    _showSpinner = true
  },
  setLogoutState: function() {
    _logoutStatus = _seatData.logout_allowed
  },
  getSpinnerState: function() {
    return _showSpinner
  },

  getLogoutState: function() {
    if (_seatData && _seatData.hasOwnProperty("logout_allowed"))
      return _seatData.logout_allowed
  },
  getScanAllowedStatus: function() {
    if (_seatData.hasOwnProperty("scan_allowed")) {
      _scanAllowed = _seatData.scan_allowed
      return _scanAllowed
    } else {
      _scanAllowed = true
      return _scanAllowed
    }
  },

  toggleBinSelection: function(bin_id) {
    var flag = false
    _seatData["ppsbin_list"].map(function(value, index) {
      if (value.ppsbin_id == bin_id) {
        if (value["selected_for_staging"] != undefined) {
          flag = !value["selected_for_staging"]
          value["selected_for_staging"] = !value["selected_for_staging"]
          _enableButton = !_enableButton
        } else {
          value["selected_for_staging"] = true
          flag = true
          _enableButton = false
        }
      } else if (value["selected_for_staging"] != undefined) {
        value["selected_for_staging"] = false
      }
    })
    if (_seatData.notification_list.length != 0) {
      _seatData.notification_list[0].code = flag
        ? resourceConstants.CLIENTCODE_001
        : resourceConstants.CLIENTCODE_002
      _seatData.notification_list[0].type = appConstants.CLIENT_NOTIFICATION
      if (flag == true) {
        _enableButton = false
      } else {
        _enableButton = true
      }
      _seatData.notification_list[0].details[0] = bin_id
      _seatData.notification_list[0].level = "info"
      _seatData.notification_list[0].type = appConstants.CLIENT_NOTIFICATION
      //_seatData.notification_list[0].description = (flag) ? resourceConstants.BIN + ' ' + bin_id + ' ' + resourceConstants.SELECTED : resourceConstants.BIN + ' ' + bin_id + ' ' + resourceConstants.UNSELECTED;
    } else {
      var notification_list = {
        code: flag
          ? resourceConstants.CLIENTCODE_001
          : resourceConstants.CLIENTCODE_002,
        level: "info",
        details: [bin_id],
        description: "",
        type: appConstants.CLIENT_NOTIFICATION
      }
      _seatData.notification_list[0] = notification_list
    }
  },

  getEnableButton: function() {
    return _enableButton
  },

  setEnableButtonIntialState: function() {
    _enableButton = true
  },

  enableButton: function() {
    var currentState = this.getEnableButton()
    this.setEnableButtonIntialState()
    return currentState
  },

  getScreenEvent: function() {
    return _seatData.event
  },

  IsCrossDockEnabled: function() {
    if (_seatData && _seatData.hasOwnProperty("is_ud_without_staging"))
      return _seatData.is_ud_without_staging
  },

  getBoxBarcode: function() {
    let BoxBarcode = {}
    if (
      _seatData.exception_details &&
      _seatData.exception_details.current_packing_box
    ) {
      BoxBarcode.CurrentBoxBarcode =
        _seatData.exception_details.current_packing_box
    }
    if (
      _seatData.exception_details &&
      _seatData.exception_details.new_packing_box
    ) {
      BoxBarcode.NewBoxBarcode = _seatData.exception_details.new_packing_box
    }
    return BoxBarcode
  },

  getConfirmState: function() {
    return _seatData.exception_details
      ? _seatData.exception_details.confirm_enabled
      : false
  },

  getStageActiveStatus: function() {
    if (_seatData.hasOwnProperty("ppsbin_list")) {
      var flag = false
      _seatData["ppsbin_list"].map(function(value, index) {
        if (
          value["selected_for_staging"] != undefined &&
          value["selected_for_staging"] == true
        )
          flag = true
      })
      return flag
    }
  },

  getStageAllActiveStatus: function() {
    if (_seatData.hasOwnProperty("ppsbin_list")) {
      var flag = false
      _seatData["ppsbin_list"].map(function(value, index) {
        if (value.ppsbin_count > 0 && value.ppsbin_state != "staged")
          flag = true
      })
      return flag
    }
  },

  getPutQuantity: function() {
    if (_seatData.hasOwnProperty("put_quantity")) return _seatData.put_quantity
  },
  getGoodQuantity: function() {
    if (_seatData.hasOwnProperty("good_quantity")) {
      _goodQuantity = _seatData.good_quantity
      return _goodQuantity
    }
  },

  getErrorPopupDisabledStatus: function() {
    if (_seatData.hasOwnProperty("error_popup_disabled")) {
      _errorPopupDisabled = _seatData.error_popup_disabled
    }
    return _errorPopupDisabled
  },

  setShowModal: function(data) {
    showModal = false
  },
  getNavData: function() {
    /* dynamic header navigation implementation */
    if (_seatData.header_steps) {
      var headerSteps = _seatData.header_steps
      navConfig.header = []
      for (var i = 0; i < headerSteps.length; i++) {
        navConfig.header.push({
          screen_id: serverMessages[headerSteps[i]]["screen_id"],
          code: null,
          message: serverMessages[headerSteps[i]]["textToDisplay"],
          showImage: true,
          level: null,
          type: "passive"
        })
      }
      _NavData = navConfig.header
      _NavData.map(function(data, index) {
        if (data.screen_id.constructor === Array && data.screen_id.length > 0) {
          if (data.screen_id.indexOf(_seatData.screen_id) != -1) {
            _NavData[index].type = "active"
          } else {
            _NavData[index].type = "passive"
          }
        } else if (_seatData.screen_id == data.screen_id) {
          _NavData[index].type = "active"
        } else {
          _NavData[index].type = "passive"
        }
        /* condition to NOT show indexing when there is one active item in header_steps */
        if (headerSteps.length > 1) {
          _NavData[index].level = index + 1 //appending level no. at run time
        }
      })
      return _NavData
    } else {
      switch (_currentSeat) {
        case appConstants.PICK_FRONT:
          if (
            _seatData.screen_id === appConstants.PICK_FRONT_WAITING_FOR_MSU ||
            _seatData.screen_id === appConstants.PICK_FRONT_ONE_STEP_SCAN ||
            _seatData.screen_id === appConstants.WAIT_FOR_MTU ||
            _seatData.screen_id === appConstants.SELECT_MTU_POINT ||
            _seatData.screen_id === appConstants.REMOVE_ALL_TOTES ||
            _seatData.screen_id === appConstants.SCAN_EMPTY_TOTE ||
            _seatData.screen_id === appConstants.SCAN_EMPTY_SLOT ||
            _seatData.screen_id === appConstants.PICK_FRONT_DOCK_TOTE ||
            _seatData.screen_id === appConstants.PICK_FRONT_UNDOCK_TOTE ||
            _seatData.screen_id === appConstants.PICK_FRONT_SLOT_SCAN
          ){
            _NavData = navConfig.pickFront[0]
          } else{
             _NavData = navConfig.pickFront[1]
          }
          break
        default:
        //return true;
      }
      _NavData.map(function(data, index) {
        if (data.screen_id instanceof Array) {
          if (data.screen_id.indexOf(_seatData.screen_id) != -1) {
            _NavData[index].type = "active"
          } else {
            _NavData[index].type = "passive"
          }
        } else if (_seatData.screen_id == data.screen_id) {
          _NavData[index].type = "active"
        } else {
          _NavData[index].type = "passive"
        }
      })
      return _NavData
    }
  },

  getModalStatus: function() {
    var data = {}
    data["showModal"] = ""
    data["message"] = ""
    if (
      _seatData.screen_id != appConstants.AUDIT_RECONCILE &&
      showModal &&
      _seatData["Current_box_details"].length > 0 &&
      _seatData["Current_box_details"][0]["Box_serial"] == null &&
      _seatData["Current_box_details"][0]["Actual_qty"] >
        _seatData["Current_box_details"][0]["Expected_qty"]
    ) {
      showModal = false
      return {
        showModal: true,
        message: _("Place extra entity in Exception area.")
      }
    } else if (
      _seatData.screen_id != appConstants.AUDIT_RECONCILE &&
      showModal &&
      _seatData.k_deep_audit &&
      _seatData["Current_box_details"][0]["Box_Actual_Qty"] >
        _seatData["Current_box_details"][0]["Box_Expected_Qty"]
    ) {
      showModal = false
      return {
        showModal: true,
        message: _("Place extra entity in Exception area.")
      }
    } else if (
      _seatData.screen_id != appConstants.AUDIT_RECONCILE &&
      showModal &&
      _seatData["last_finished_box"].length > 0 &&
      _seatData["last_finished_box"][0]["Actual_qty"] >
        _seatData["last_finished_box"][0]["Expected_qty"]
    ) {
      showModal = false
      console.log(
        _seatData.last_finished_box[0]["Actual_qty"] -
          _seatData.last_finished_box[0]["Expected_qty"]
      )
      return {
        showModal: true,
        message: _("Place extra entity in Exception area.")
      }
    } else {
      return data
    }
  },

  getBoxSerialData: function() {
    var data = {}
    data["header"] = []
    data["tableRows"] = []
    var self = this
    if (!_seatData.k_deep_audit) {
      data["header"].push(
        new this.tableCol(
          _("Box Serial Numbers"),
          "header",
          false,
          "small",
          false,
          true,
          true,
          false
        )
      )
      if (
        _seatData["show_expected_qty"] != undefined &&
        _seatData["show_expected_qty"] == true
      )
        data["header"].push(
          new this.tableCol(
            _("Expected"),
            "header",
            false,
            "small",
            false,
            false,
            true,
            false,
            true
          )
        )
      data["header"].push(
        new this.tableCol(
          _("Actual"),
          "header",
          false,
          "small",
          false,
          false,
          true,
          false,
          true
        )
      )
      data["header"].push(
        new this.tableCol(
          _("Actions"),
          "header",
          false,
          "small",
          false,
          false,
          true,
          false,
          true
        )
      )
      _finishAuditFlag = true
      var d = []

      _seatData.Box_qty_list.map(function(value, index) {
        d = []
        if (value.Scan_status != "close") {
          d.push(
            new self.tableCol(
              value.Box_serial,
              "enabled",
              false,
              "large",
              false,
              true,
              false,
              false
            )
          )
          if (
            _seatData["show_expected_qty"] != undefined &&
            _seatData["show_expected_qty"] == true
          )
            d.push(
              new self.tableCol(
                value.Expected_qty,
                "enabled",
                false,
                "large",
                true,
                false,
                false,
                false,
                true
              )
            )
          d.push(
            new self.tableCol(
              value.Actual_qty,
              "enabled",
              value.Scan_status == "open",
              "large",
              true,
              false,
              false,
              false,
              true
            )
          )
          d.push(
            new self.tableCol(
              "0",
              "enabled",
              false,
              "large",
              true,
              false,
              false,
              false,
              true,
              "button",
              "action",
              value.Scan_status == "open"
            )
          )
          data["tableRows"].push(d)
        } else {
          d.push(
            new self.tableCol(
              value.Box_serial,
              "complete",
              false,
              "large",
              false,
              true,
              false,
              false
            )
          )
          if (
            _seatData["show_expected_qty"] != undefined &&
            _seatData["show_expected_qty"] == true
          )
            d.push(
              new self.tableCol(
                value.Expected_qty,
                "complete",
                false,
                "large",
                true,
                false,
                false,
                false,
                true
              )
            )
          d.push(
            new self.tableCol(
              value.Actual_qty,
              "complete",
              false,
              "large",
              true,
              false,
              false,
              false,
              true
            )
          )
          d.push(
            new self.tableCol(
              "0",
              "complete",
              false,
              "large",
              true,
              false,
              false,
              false,
              true,
              "button",
              "action",
              value.Scan_status == "open"
            )
          )
          data["tableRows"].push(d)
        }

        if (value.Scan_status == "open") {
          _finishAuditFlag = false
        }
      })

      _seatData.Extra_box_list.map(function(value, index) {
        d = []
        d.push(
          new self.tableCol(
            value.Box_serial,
            "extra",
            false,
            "large",
            false,
            true,
            false,
            false
          )
        )
        if (
          _seatData["show_expected_qty"] != undefined &&
          _seatData["show_expected_qty"] == true
        )
          // d.push(new self.tableCol(value.Expected_qty, "enabled", false, "large", true, false, false, false, true));
          d.push(
            new self.tableCol(
              value.Actual_qty,
              "enabled",
              value.Scan_status == "open",
              "large",
              true,
              false,
              false,
              false,
              true
            )
          )
        d.push(
          new self.tableCol(
            "0",
            "enabled",
            false,
            "large",
            true,
            false,
            false,
            false,
            true,
            "button",
            "action",
            value.Scan_status == "open"
          )
        )
        data["tableRows"].push(d)
        if (value.Scan_status == "open") {
          _finishAuditFlag = false
        }
      })
    }
    return data
  },

  //SR pack-subpack
  getPackData: function() {
    var data = {}
    data["header"] = []
    data["tableRows"] = []
    var self = this
    data["header"].push(
      new this.tableCol(
        _(_seatData.Possible_Container_Names.container_level_2),
        "header",
        false,
        "small",
        false,
        true,
        true,
        false
      )
    )
    if (
      _seatData["show_expected_qty"] != undefined &&
      _seatData["show_expected_qty"] == true
    ) {
      data["header"].push(
        new this.tableCol(
          _("Expected"),
          "header",
          false,
          "small",
          false,
          false,
          true,
          false,
          true
        )
      )
    }
    data["header"].push(
      new this.tableCol(
        _("Actual"),
        "header",
        false,
        "small",
        false,
        false,
        true,
        false,
        true
      )
    )
    var d = []
    _seatData.Box_qty_list.map(function(value, index) {
      d = []
      if (value.Type === appConstants.OUTER_PACK) {
        d.push(
          new self.tableCol(
            value.Box_serial,
            "complete",
            false,
            "large",
            false,
            true,
            false,
            false
          )
        )
        if (
          _seatData["show_expected_qty"] != undefined &&
          _seatData["show_expected_qty"] == true
        )
          d.push(
            new self.tableCol(
              value.Box_Expected_Qty,
              "complete",
              false,
              "large",
              true,
              false,
              false,
              false,
              true
            )
          )
        d.push(
          new self.tableCol(
            value.Box_Actual_Qty,
            "complete",
            _seatData.Current_box_details.length > 0
              ? _seatData.Current_box_details[0]["Box_serial"] ==
                value.Box_serial
              : false,
            "large",
            true,
            false,
            false,
            false,
            true
          )
        )
        data["tableRows"].push(d)
      }
    })
    _seatData.Extra_box_list.map(function(value, index) {
      d = []
      if (value.Type === appConstants.OUTER_PACK) {
        d.push(
          new self.tableCol(
            value.Box_serial,
            "extraqt",
            false,
            "large",
            false,
            true,
            false,
            false
          )
        )
        if (
          _seatData["show_expected_qty"] != undefined &&
          _seatData["show_expected_qty"] == true
        )
          d.push(
            new self.tableCol(
              value.Box_Expected_Qty,
              "extraqt",
              false,
              "large",
              true,
              false,
              false,
              false,
              true
            )
          )
        d.push(
          new self.tableCol(
            value.Box_Actual_Qty,
            "extraqt",
            _seatData.Current_box_details.length > 0
              ? _seatData.Current_box_details[0]["Box_serial"] ==
                value.Box_serial
              : false,
            "large",
            true,
            false,
            false,
            false,
            true
          )
        )
        data["tableRows"].push(d)
      }
    })

    return data
  },

  getSubPackData: function() {
    var data = {}
    data["header"] = []
    data["tableRows"] = []
    var self = this

    data["header"].push(
      new this.tableCol(
        _(_seatData.Possible_Container_Names.container_level_1),
        "header",
        false,
        "small",
        false,
        true,
        true,
        false
      )
    )
    if (
      _seatData["show_expected_qty"] != undefined &&
      _seatData["show_expected_qty"] == true
    ) {
      data["header"].push(
        new this.tableCol(
          _("Expected"),
          "header",
          false,
          "small",
          false,
          false,
          true,
          false,
          true
        )
      )
    }
    data["header"].push(
      new this.tableCol(
        _("Actual"),
        "header",
        false,
        "small",
        false,
        false,
        true,
        false,
        true
      )
    )

    var d = []
    _seatData.Box_qty_list.map(function(value, index) {
      d = []
      if (value.Type === appConstants.INNER_SUBPACK) {
        d.push(
          new self.tableCol(
            value.Box_serial,
            "complete",
            false,
            "large",
            false,
            true,
            false,
            false
          )
        )
        if (
          _seatData["show_expected_qty"] != undefined &&
          _seatData["show_expected_qty"] == true
        )
          d.push(
            new self.tableCol(
              value.Box_Expected_Qty,
              "complete",
              false,
              "large",
              true,
              false,
              false,
              false,
              true
            )
          )
        d.push(
          new self.tableCol(
            value.Box_Actual_Qty,
            "complete",
            _seatData.Current_box_details.length > 0
              ? _seatData.Current_box_details[0]["Box_serial"] ==
                value.Box_serial
              : false,
            "large",
            true,
            false,
            false,
            false,
            true
          )
        )
        data["tableRows"].push(d)
      }
    })
    _seatData.Extra_box_list.map(function(value, index) {
      d = []
      if (value.Type === appConstants.INNER_SUBPACK) {
        d.push(
          new self.tableCol(
            value.Box_serial,
            "extraqt",
            false,
            "large",
            false,
            true,
            false,
            false
          )
        )
        if (
          _seatData["show_expected_qty"] != undefined &&
          _seatData["show_expected_qty"] == true
        )
          d.push(
            new self.tableCol(
              value.Box_Expected_Qty,
              "extraqt",
              false,
              "large",
              true,
              false,
              false,
              false,
              true
            )
          )
        d.push(
          new self.tableCol(
            value.Box_Actual_Qty,
            "extraqt",
            _seatData.Current_box_details.length > 0
              ? _seatData.Current_box_details[0]["Box_serial"] ==
                value.Box_serial
              : false,
            "large",
            true,
            false,
            false,
            false,
            true
          )
        )
        data["tableRows"].push(d)
      }
    })

    return data
  },

  getBoxDetails: function() {
    if (_seatData.hasOwnProperty("box_serials")) return _seatData.box_serials
  },
  getIRTScanStatus: function() {
    if (_seatData.hasOwnProperty("irt_scan_enabled"))
      return _seatData.irt_scan_enabled
  },
  getExceptionType: function() {
    if (_seatData.hasOwnProperty("exception_type")) p
    return _seatData.exception_type
  },
  getToteDeatils: function() {
    if (_seatData.hasOwnProperty("tote_details"))
      return _seatData.tote_details.tote_barcode
  },
  getPrinterInfo: function() {
    if (_seatData.hasOwnProperty("printer_info")) return _seatData.printer_info
  },
  getPrinterVisibility: function() {
    if (_seatData.hasOwnProperty("printer_info")) {
      if (_seatData.printer_info.hasOwnProperty("printer_visible")) {
        return _seatData.printer_info.printer_visible
      } else {
        return false
      }
    }
  },
  getOrderDetails: function() {
    var orderDetailsinOrder = {}
    var orderDetails = _seatData["order_details"]
    /*Performing this action to reorder the object*/
    if (orderDetails) {
      if (orderDetails.order_id) {
        orderDetailsinOrder.order_id = orderDetails.order_id
      }
      if (orderDetails.rem_qty) {
        orderDetailsinOrder.rem_qty = orderDetails.rem_qty
      }
      if (orderDetails.volume) {
        orderDetailsinOrder.volume = orderDetails.volume
      }
      if (orderDetails.vol_unit) {
        orderDetailsinOrder.vol_unit = orderDetails.vol_unit
      }
    }
    return orderDetailsinOrder
  },
  getOrderID: function() {
    if (_seatData.hasOwnProperty("order_details"))
      return {
        order_id: _seatData.order_details.order_id || ""
      }
  },

  getChecklistDetails: function() {
    if (_seatData.hasOwnProperty("checklist_details")) {
      if (_seatData.checklist_details.pick_checklist.length > 0) {
        return _seatData.checklist_details.pick_checklist
      } else {
        return []
      }
    } else {
      return []
    }
  },

  getChecklistCompleteDetails: function() {
    if (_seatData.hasOwnProperty("checklist_details")) {
      return _seatData.checklist_details
    }
  },

  getChecklistIndex: function() {
    if (_seatData.hasOwnProperty("checklist_details")) {
      if (_seatData.checklist_details.checklist_index != null) {
        return _seatData.checklist_details.checklist_index
      } else {
        return null
      }
    } else {
      return null
    }
  },

  getChecklistOverlayStatus: function() {
    if (_seatData.hasOwnProperty("checklist_details")) {
      return _seatData.checklist_details.display_checklist_overlay
    } else {
      return null
    }
  },

  getServerNavData: function() {
    if (_seatData.header_msge_list.length > 0) {
      _serverNavData = _seatData.header_msge_list[0]
      return _serverNavData
    } else {
      return null
    }
  },

  getChecklistData: function() {
    if (
      Array.isArray(_seatData.checklist_data) &&
      _seatData.hasOwnProperty("checklist_data")
    ) {
      return _seatData.checklist_data
    } else {
      console.log("Empty CheckList")
      return []
    }
  },

  getChecklistIdx: function() {
    if (_seatData.hasOwnProperty("checklist_index")) {
      return _seatData.checklist_index
    }
  },

  getPackingBoxType: function() {
    return _seatData.packing_box_type || null
  },
  getChecklistDockData: function() {
    if (_seatData.hasOwnProperty("dock_actions")) {
      var dockActionsArray = []
      Array.isArray(_seatData.dock_actions) &&
        _seatData.dock_actions.map(function(value, key) {
          var dataToReplace = value.details
          var data = serverMessages[value.code]
          data = data.replace(/{\w+}/g, function(everyPlaceholder) {
            var placeHolder = everyPlaceholder.match(/\d+/g)
            return dataToReplace[placeHolder]
          })

          var eachData = { action_results: { value: data, key: " " } }
          dockActionsArray.push(eachData)
        })
      return dockActionsArray
    }
  },

  getChecklistDockIdx: function() {
    if (_seatData.hasOwnProperty("dock_index")) {
      return _seatData.dock_index
    }
  },
  manipulateMessage: function(value) {
    var dataToReplace = value.details
    var data = serverMessages[value.code]
    data = data.replace(/{\w+}/g, function(everyPlaceholder) {
      var placeHolder = everyPlaceholder.match(/\d+/g)
      return dataToReplace[placeHolder]
    })
    var eachData = { action_results: { value: data, key: " " } }
    return eachData
  },

  getChecklistDockUndockData: function(arg) {
    if (arg === "dock_actions" && _seatData.hasOwnProperty("dock_actions")) {
      var dockActionsArray = []
      Array.isArray(_seatData.dock_actions) &&
        _seatData.dock_actions.map(function(value, key) {
          messageData = mainstore.manipulateMessage(value)
          dockActionsArray.push(messageData)
        })
      return dockActionsArray
    } else if (
      arg === "undock_actions" &&
      _seatData.hasOwnProperty("undock_actions")
    ) {
      var undockActionsArray = []
      Array.isArray(_seatData.undock_actions) &&
        _seatData.undock_actions.map(function(value, key) {
          messageData = mainstore.manipulateMessage(value)
          undockActionsArray.push(messageData)
        })
      return undockActionsArray
    }
  },

  getDockHeader: function() {
    if (_seatData.hasOwnProperty("dock_header")) {
      messageData = mainstore.manipulateMessage(_seatData.dock_header)
      return messageData.action_results.value
    } else {
      return null
    }
  },

  getUnDockHeader: function() {
    if (_seatData.hasOwnProperty("undock_header")) {
      messageData = mainstore.manipulateMessage(_seatData.undock_header)
      return messageData.action_results.value
    } else {
      return null
    }
  },

  getChecklistDockUndockIndex: function(arg) {
    if (arg === "dock_index" && _seatData.hasOwnProperty("dock_index")) {
      return _seatData.dock_index
    } else if (
      arg === "undock_index" &&
      _seatData.hasOwnProperty("undock_index")
    ) {
      return _seatData.undock_index
    }
  },

  getNotificationData: function() {
    if (
      _clearNotification == true &&
      _seatData.hasOwnProperty("notification_list")
    ) {
      var notification_list = [
        {
          details: [],
          code: null,
          description: "",
          level: "info"
        }
      ]
      _seatData.notification_list = notification_list
      _clearNotification = false
    }
    return _seatData.notification_list[0]
  },
  getLocationButtonStatus: function() {
    return _seatData.button_press_allowed
  },

  getButtonStatus: function() {
    if (
      _seatData.button_press_id === "dock_tote" ||
      _seatData.button_press_id === "skip_bin"
    ) {
      return _seatData.button_press_allowed
    } else {
      return null
    }
  },

  clearNotifications: function() {
    _clearNotification = true
  },
  getBinData: function() {
    var binData = {}
    binData["structure"] = _seatData.structure
    binData["ppsbin_list"] = _seatData.ppsbin_list
    return binData
  },
  getPickFrontButtonType: function() {
    return _seatData.button_press_id || null
  },
  getPickFrontButtonStatus: function() {
    return _seatData.button_press_allowed
  },
  getPickFrontPackingCancelStatus: function() {
    return _seatData.cancel_scan_allowed
  },

  stageOneBin: function() {
    if (_seatData.hasOwnProperty("ppsbin_list")) {
      var data = {}
      _seatData.ppsbin_list.map(function(value, index) {
        if (
          value["selected_for_staging"] != undefined &&
          value["selected_for_staging"] == true
        ) {
          data["event_name"] = "stage_ppsbin"
          data["event_data"] = {}
          data["event_data"]["ppsbin_id"] = value.ppsbin_id
          data["source"] = "ui"
        }
      })

      utils.postDataToInterface(data, _seatData.seat_name)
    }
  },

  getSelectedBin: function() {
    if (_seatData.hasOwnProperty("ppsbin_list")) {
      var data = null
      _seatData.ppsbin_list.map(function(value, index) {
        if (
          value["selected_for_staging"] != undefined &&
          value["selected_for_staging"] == true
        ) {
          data = value.ppsbin_id
        }
      })

      return data
    } else return null
  },

  getDataToDisAssociateTote: function() {
    if (_seatData.hasOwnProperty("tote_disassociation_data")) {
      return _seatData["tote_disassociation_data"]
    } else return null
  },

  getCurrentState: function() {
    if (_seatData.hasOwnProperty("ppsbin_list")) {
      var data = null
      _seatData.ppsbin_list.map(function(value, index) {
        if (
          value["selected_for_staging"] != undefined &&
          value["selected_for_staging"] == true
        ) {
          data = value.ppsbin_state
        }
      })

      return data
    } else return null
  },

  stageAllBin: function() {
    var data = {}
    data["event_name"] = "stage_all"
    data["event_data"] = ""
    data["source"] = "ui"
    utils.postDataToInterface(data, _seatData.seat_name)
  },

  getExceptionData: function() {
    var data = {}
    data["activeException"] = this.getActiveException()
    data["list"] = []
    data["header"] = "Exceptions"
    var bSelected = false
    var bDisabled = false
    _seatData.exception_allowed.map(function(value, index) {
      //all exception items should be enabled and unselected first hence putting disabled = false
      bDisabled = false
      bSelected = false
      if (
        (_seatData["exception_type"] != undefined &&
          value.event == _seatData["exception_type"]) ||
        value.exception_name === data["activeException"]
      ) {
        bSelected = true
      }

      if (_seatData["exception_type"] != undefined && !bSelected) {
        bDisabled = true
      }

      data["list"].push({
        text: value.exception_name,
        selected: bSelected,
        exception_id: value.exception_id,
        details: value.details || [],
        disabled: bDisabled,
        event: value["event"] != undefined ? value["event"] : ""
      })
    })
    return data
  },
  getExceptionAllowed: function() {
    return _seatData.exception_allowed
  },
  setOrphanSearchAllowed: function(data) {
    _itemSearchEnabled = data
  },
  setLoginScannerAllowed: function(data) {
    _scannerLoginEnabled = data
  },
  setUnitConversionAllowed: function(data) {
    _unitConversionAllowed = data
  },
  setUOMConversionFactor: function(data) {
    _uomConversionFactor = data
  },
  setUOMDisplayUnit: function(data) {
    _uomDisplayUnit = data
  },
  loginScannerAllowed: function() {
    return _scannerLoginEnabled
  },
  isUnitConversionAllowed: function() {
    return _unitConversionAllowed
  },
  getUOMConversionFactor: function() {
    return _uomConversionFactor
  },
  getUOMDisplayUnit: function() {
    return _uomDisplayUnit
  },
  setBOIConfig: function(data) {
    _boiConfig = data
  },
  orphanSearchAllowed: function() {
    return _itemSearchEnabled
  },
  scanDetails: function() {
    _scanDetails = _seatData.scan_details
    return _scanDetails
  },
  cancelScanDetails: function() {
    return _seatData.cancel_scan_enabled
  },
  isReprintEnabled: function() {
    return _seatData.reprint_button_enabled
  },
  isReprintPopUpEnabled: function() {
    return _seatData.reprint_popup_enabled
  },
  getHeavyItemsFlag: function() {
    return _seatData.is_heavy ? _seatData.is_heavy : false
  },
  productDetails: function() {
    _prodDetails = _seatData.product_info
    return _prodDetails
  },

  getItemUid: function() {
    return _seatData.item_uid
  },

  getRackDetails: function() {
    if (_seatData.hasOwnProperty("rack_details")) {
      return _seatData.rack_details
    }
  },
  getRackType: function() {
    if (_seatData.hasOwnProperty("rack_details")) {
      if (_seatData.rack_details.rack_type === "mpsu") {
        return true
      }
    }
  },
  getDirectionDetails: function() {
    return _seatData.special_handling
  },

  getCurrentSelectedBin: function() {
    var binData = {}
    binData["structure"] = [1, 1]
    binData["ppsbin_list"] = []
    if (_seatData.ppsbin_list) {
      _seatData.ppsbin_list.map(function(value, index) {
        if (value.selected_state == true) binData["ppsbin_list"].push(value)
      })
    }
    return binData
  },
  getPutFrontCurrentBinCount: function() {
    var itemCount = null
    var currBin = null
    if (_seatData.ppsbin_list) {
      _seatData.ppsbin_list.map(function(value, index) {
        if (value.selected_state == true) {
          itemCount = parseInt(value.ppsbin_count || 0)
          currBin = value.ppsbin_id || "--"
          return true
        }
      })
    }
    return {
      count: itemCount,
      currBin: currBin
    }
  },
  tableCol: function(
    text,
    status,
    selected,
    size,
    border,
    grow,
    bold,
    disabled,
    centerAlign,
    type,
    buttonType,
    buttonStatus,
    mode,
    text_decoration,
    color,
    actionButton,
    borderBottom,
    textbox,
    totalWidth,
    id,
    management
  ) {
    this.text = text
    this.status = status
    this.selected = selected
    this.size = size
    this.border = border
    this.grow = grow
    this.bold = bold
    this.disabled = disabled
    this.centerAlign = centerAlign
    this.type = type
    this.buttonType = buttonType
    this.buttonStatus = buttonStatus
    this.borderBottom = borderBottom
    ;(this.mode = mode),
      (this.text_decoration = text_decoration),
      (this.color = color),
      (this.actionButton = actionButton),
      (this.textbox = textbox),
      (this.id = id),
      (this.management = management),
      (this.totalWidth = totalWidth)
  },
  getPptlData: function() {
    if (_seatData.hasOwnProperty("utility")) {
      var data = {}
      data["header"] = []
      if (appConstants.PPTL_MANAGEMENT == _seatData.screen_id) {
        data["header"].push(
          new this.tableCol(
            _("Bin ID"),
            "header",
            false,
            "small",
            false,
            true,
            true,
            false,
            false,
            true,
            true,
            false,
            "peripheral"
          )
        )
        data["header"].push(
          new this.tableCol(
            _("Barcode"),
            "header",
            false,
            "small",
            false,
            true,
            true,
            false,
            false,
            true,
            true,
            false,
            "peripheral"
          )
        )
        data["header"].push(
          new this.tableCol(
            _("Peripheral ID"),
            "header",
            false,
            "small",
            false,
            true,
            true,
            false,
            false,
            true,
            true,
            false,
            "peripheral"
          )
        )
        data["header"].push(
          new this.tableCol(
            _("Actions"),
            "header",
            false,
            "small",
            false,
            true,
            true,
            false,
            true,
            true,
            true,
            false,
            "peripheral"
          )
        )
        data["tableRows"] = []
        var self = this
        _seatData.utility.map(function(value, index) {
          var barcode = ""
          var peripheralId = ""
          if (value.hasOwnProperty("barcode")) {
            barcode = value.barcode
          }
          if (value.hasOwnProperty("peripheral_id")) {
            peripheralId = value.peripheral_id
          }
          var buttonText = _("Update")
          var deletButton = "Delete"
          if (barcode == "" && peripheralId == "") {
            buttonText = _("Add")
            deletButton = ""
          }
          var textBox = false
          if (
            (_action == _("Update") || _action == _("Add")) &&
            _binId == value.pps_bin_id
          ) {
            textBox = true
            buttonText = _("Finish")
          }
          data["tableRows"].push([
            new self.tableCol(
              value.pps_bin_id,
              "enabled",
              false,
              "small",
              false,
              false,
              false,
              false,
              false,
              true,
              true,
              false,
              "peripheral"
            ),
            new self.tableCol(
              barcode,
              "enabled",
              false,
              "small",
              true,
              false,
              false,
              false,
              false,
              "barcodePptl",
              true,
              false,
              "peripheral",
              false,
              null,
              false,
              true,
              textBox,
              true,
              value.pps_bin_id
            ),
            new self.tableCol(
              peripheralId,
              "enabled",
              false,
              "small",
              true,
              false,
              false,
              false,
              false,
              "peripheralId",
              true,
              false,
              "peripheral",
              false,
              null,
              false,
              true,
              textBox,
              true,
              value.pps_bin_id
            ),
            new self.tableCol(
              buttonText,
              "enabled",
              false,
              "small",
              true,
              false,
              false,
              false,
              true,
              true,
              true,
              false,
              "peripheral",
              true,
              "blue",
              true,
              true,
              false,
              true,
              value.pps_bin_id
            )
          ])
        })
      } else {
        data["header"].push(
          new this.tableCol(
            _("Scanner ID"),
            "header",
            false,
            "small",
            false,
            true,
            true,
            false,
            false,
            true,
            true,
            false,
            "peripheral",
            false,
            null,
            false,
            "",
            false,
            null,
            "scanner-id"
          )
        )
        data["header"].push(
          new this.tableCol(
            _("Actions"),
            "header",
            false,
            "small",
            false,
            false,
            true,
            false,
            true,
            true,
            true,
            false,
            "peripheral",
            false,
            null,
            false,
            "",
            false,
            null,
            "scanner-action"
          )
        )
        data["tableRows"] = []
        var self = this
        _seatData.utility.map(function(value, index) {
          data["tableRows"].push([
            new self.tableCol(
              value.peripheral_id,
              "enabled",
              false,
              "small",
              false,
              false,
              false,
              false,
              false,
              true,
              true,
              false,
              "peripheral",
              false,
              null,
              false,
              true,
              false,
              null,
              null,
              "scanner-id"
            ),
            new self.tableCol(
              _("Delete"),
              "enabled",
              false,
              "small",
              true,
              false,
              false,
              false,
              true,
              true,
              true,
              false,
              "peripheral",
              true,
              "blue",
              true,
              true,
              false,
              null,
              value.peripheral_id,
              "scanner-action"
            )
          ])
        })
      }
      return data
    }
  },
  getReconcileData: function() {
    if (_seatData.hasOwnProperty("reconciliation")) {
      var data = {}
      data["header"] = []
      data["header"].push(
        new this.tableCol(
          _("Tote Details"),
          "header",
          false,
          "small",
          false,
          true,
          true,
          false
        )
      )
      data["tableRows"] = []
      var self = this
      data["tableRows"].push([
        new this.tableCol(
          _("Product SKU"),
          "enabled",
          false,
          "small",
          false,
          true,
          true,
          false
        ),
        new this.tableCol(
          _("Expected Quantity"),
          "enabled",
          false,
          "small",
          true,
          false,
          true,
          false,
          true
        ),
        new this.tableCol(
          _("Actual Quantity"),
          "enabled",
          false,
          "small",
          true,
          false,
          true,
          false,
          true
        )
      ])
      _seatData.reconciliation.map(function(value, index) {
        data["tableRows"].push([
          new self.tableCol(
            value.product_sku,
            "enabled",
            false,
            "large",
            false,
            true,
            false,
            false
          ),
          new self.tableCol(
            value.expected_quantity,
            "enabled",
            false,
            "large",
            true,
            false,
            false,
            false,
            true
          ),
          new self.tableCol(
            value.actual_quantity,
            "enabled",
            false,
            "large",
            true,
            false,
            false,
            false,
            true
          )
        ])
      })
      return data
    }
  },

  getCurrentBoxSerialData: function() {
    return _seatData.Current_box_details
  },

  getCancelScanStatus: function() {
    return _seatData.Cancel_scan
  },
  getInfoButtonData: function() {
    return _seatData.info_button_data || null
  },
  getCustomContainerNames: function() {
    return _seatData.Possible_Container_Names || null
  },
  isAddlInfoPresent: function() {
    return _seatData.info_button_data &&
      Object.keys(_seatData.info_button_data).length
      ? true
      : false
  },
  isChangeUOMApplicable: function() {
    return _seatData.change_uom_applicable
  },
  getReconcileBoxSerialData: function() {
    var data = {}
    data["header"] = []
    data["tableRows"] = []
    var self = this
    var noScanMissing = 0
    var missingDamagedBoxSerials = ""
    var extraBoxSerials = ""
    var countMissingDamagedBoxSerials = 0
    if (!_seatData.k_deep_audit) {
      _seatData.Box_qty_list.map(function(value, index) {
        if (value.Scan_status == "no_scan") {
          missingDamagedBoxSerials =
            missingDamagedBoxSerials + value.Box_serial + " , "
          countMissingDamagedBoxSerials =
            value.Box_Expected_Qty -
            value.Box_Actual_Qty -
            value.Box_Damaged_Qty
        }
      })
      countMissingDamagedBoxSerials =
        countMissingDamagedBoxSerials < 0 ? 0 : countMissingDamagedBoxSerials
      missingDamagedBoxSerials = missingDamagedBoxSerials.replace(
        /,([^,]*)$/,
        "$1"
      )
      _seatData.Extra_box_list.map(function(value, index) {
        extraBoxSerials = extraBoxSerials + value.Box_serial + " "
      })
      if (
        missingDamagedBoxSerials != 0 ||
        _seatData.Extra_box_list.length != 0 ||
        _seatData["box_barcode_damage"] > 0
      ) {
        data["header"].push(
          new this.tableCol(
            _("Box Serial Numbers"),
            "header",
            false,
            "small",
            false,
            true,
            true,
            false
          )
        )
        data["header"].push(
          new this.tableCol(
            _("Missing"),
            "header",
            false,
            "small",
            false,
            false,
            true,
            false,
            true
          )
        )
        data["header"].push(
          new this.tableCol(
            _("Extra"),
            "header",
            false,
            "small",
            false,
            false,
            true,
            false,
            true
          )
        )
        data["header"].push(
          new this.tableCol(
            _("Unscannable"),
            "header",
            false,
            "small",
            false,
            false,
            true,
            false,
            true
          )
        )
      }
      if (missingDamagedBoxSerials != 0)
        data["tableRows"].push([
          new self.tableCol(
            missingDamagedBoxSerials,
            "enabled",
            false,
            "large",
            false,
            true,
            false,
            false
          ),
          new self.tableCol(
            Math.max(
              countMissingDamagedBoxSerials - _seatData["box_barcode_damage"],
              0
            ),
            "enabled",
            false,
            "large",
            true,
            false,
            false,
            false,
            true
          ),
          new self.tableCol(
            0,
            "enabled",
            false,
            "large",
            true,
            false,
            false,
            false,
            true
          ),
          new self.tableCol(
            _seatData["box_barcode_damage"],
            "enabled",
            false,
            "large",
            true,
            false,
            false,
            false,
            true
          )
        ])
      else if (
        _seatData["box_barcode_damage"] != undefined &&
        _seatData["box_barcode_damage"] >
          0 /*&& _seatData.Box_qty_list.length == 0*/
      ) {
        data["tableRows"].push([
          new self.tableCol(
            missingDamagedBoxSerials,
            "enabled",
            false,
            "large",
            false,
            true,
            false,
            false
          ),
          new self.tableCol(
            0,
            "enabled",
            false,
            "large",
            true,
            false,
            false,
            false,
            true
          ),
          new self.tableCol(
            0,
            "enabled",
            false,
            "large",
            true,
            false,
            false,
            false,
            true
          ),
          new self.tableCol(
            _seatData["box_barcode_damage"],
            "enabled",
            false,
            "large",
            true,
            false,
            false,
            false,
            true
          )
        ])
      }
      if (_seatData.Extra_box_list.length != 0)
        data["tableRows"].push([
          new self.tableCol(
            extraBoxSerials,
            "enabled",
            false,
            "large",
            false,
            true,
            false,
            false
          ),
          new self.tableCol(
            0,
            "enabled",
            false,
            "large",
            true,
            false,
            false,
            false,
            true
          ),
          new self.tableCol(
            _seatData.Extra_box_list.length,
            "enabled",
            false,
            "large",
            true,
            false,
            false,
            false,
            true
          ),
          new self.tableCol(
            0,
            "enabled",
            false,
            "large",
            true,
            false,
            false,
            false,
            true
          )
        ])
    }
    return data
  },

  getDamageReconcileData: function() {
    var data = {}
    data["header"] = []
    data["tableRows"] = []
    var self = this
    var packBarcodeDamagedQty = 0
    var subPackBarcodeDamagedQty = 0
    var eachBarcodeDamagedQty = 0
    var tableRows = []
    if (_seatData.k_deep_audit) {
      _seatData.box_barcode_damage.map(function(val, ind) {
        if (val.type === appConstants.OUTER_PACK)
          packBarcodeDamagedQty += val.damage_count
        else {
          subPackBarcodeDamagedQty += val.damage_count
        }
      })
      if (_seatData.loose_item_barcode_damage) {
        eachBarcodeDamagedQty = _seatData.loose_item_barcode_damage
      }
      if (
        _seatData.box_barcode_damage.length != 0 ||
        _seatData.loose_item_barcode_damage != 0
      ) {
        tableRows.push(
          new self.tableCol(
            _("Quantity"),
            "enabled",
            false,
            "large",
            false,
            true,
            false,
            false
          )
        )
        if (packBarcodeDamagedQty) {
          tableRows.push(
            new self.tableCol(
              packBarcodeDamagedQty,
              "enabled",
              false,
              "large",
              true,
              false,
              false,
              false,
              true
            )
          )
        }
        if (subPackBarcodeDamagedQty) {
          tableRows.push(
            new self.tableCol(
              subPackBarcodeDamagedQty,
              "enabled",
              false,
              "large",
              true,
              false,
              false,
              false,
              true
            )
          )
        }
        if (eachBarcodeDamagedQty) {
          tableRows.push(
            new self.tableCol(
              eachBarcodeDamagedQty,
              "enabled",
              false,
              "large",
              true,
              false,
              false,
              false,
              true
            )
          )
        }
        data["tableRows"].push(tableRows)
      }
      if (data["tableRows"].length > 0) {
        data["header"].push(
          new this.tableCol(
            _("Damage Barcode"),
            "header",
            false,
            "small",
            false,
            true,
            true,
            false
          )
        )
        if (packBarcodeDamagedQty) {
          data["header"].push(
            new this.tableCol(
              !_seatData.k_deep_audit
                ? _("Packs")
                : _seatData.Possible_Container_Names.container_level_2,
              "header",
              false,
              "small",
              false,
              false,
              true,
              false,
              true
            )
          )
        }
        if (subPackBarcodeDamagedQty) {
          data["header"].push(
            new this.tableCol(
              !_seatData.k_deep_audit
                ? _("Sub-Packs")
                : _seatData.Possible_Container_Names.container_level_1,
              "header",
              false,
              "small",
              false,
              false,
              true,
              false,
              true
            )
          )
        }
        if (eachBarcodeDamagedQty) {
          data["header"].push(
            new this.tableCol(
              !_seatData.k_deep_audit
                ? _("Eaches")
                : _seatData.Possible_Container_Names.container_level_0,
              "header",
              false,
              "small",
              false,
              false,
              true,
              false,
              true
            )
          )
        }
      }
    }
    return data
  },

  getFinalDamageReconcileData: function() {
    var data = {}
    data["header"] = []
    data["tableRows"] = []
    var self = this
    var packBarcodeDamagedQty = 0
    var subPackBarcodeDamagedQty = 0
    var eachBarcodeDamagedQty = 0
    var tableRows = []
    if (_seatData.k_deep_audit) {
      _seatData.final_damaged_boxes.map(function(val, ind) {
        if (val.uom_level === appConstants.OUTER_PACK)
          packBarcodeDamagedQty += val.damaged_qty
        else if (val.uom_level === appConstants.INNER_SUBPACK) {
          subPackBarcodeDamagedQty += val.damaged_qty
        } else {
          eachBarcodeDamagedQty += val.damaged_qty
        }
      })
      if (_seatData.final_damaged_boxes.length != 0) {
        tableRows.push(
          new self.tableCol(
            _("Quantity"),
            "enabled",
            false,
            "large",
            false,
            true,
            false,
            false
          )
        )
        if (packBarcodeDamagedQty) {
          tableRows.push(
            new self.tableCol(
              packBarcodeDamagedQty,
              "enabled",
              false,
              "large",
              true,
              false,
              false,
              false,
              true
            )
          )
        }
        if (subPackBarcodeDamagedQty) {
          tableRows.push(
            new self.tableCol(
              subPackBarcodeDamagedQty,
              "enabled",
              false,
              "large",
              true,
              false,
              false,
              false,
              true
            )
          )
        }
        if (eachBarcodeDamagedQty) {
          tableRows.push(
            new self.tableCol(
              eachBarcodeDamagedQty,
              "enabled",
              false,
              "large",
              true,
              false,
              false,
              false,
              true
            )
          )
        }
        data["tableRows"].push(tableRows)
      }
      if (data["tableRows"].length > 0) {
        data["header"].push(
          new this.tableCol(
            _("Entity Damaged"),
            "header",
            false,
            "small",
            false,
            true,
            true,
            false
          )
        )
        if (packBarcodeDamagedQty) {
          data["header"].push(
            new this.tableCol(
              !_seatData.k_deep_audit
                ? _("Packs")
                : _seatData.Possible_Container_Names.container_level_2,
              "header",
              false,
              "small",
              false,
              false,
              true,
              false,
              true
            )
          )
        }
        if (subPackBarcodeDamagedQty) {
          data["header"].push(
            new this.tableCol(
              !_seatData.k_deep_audit
                ? _("Sub-Packs")
                : _seatData.Possible_Container_Names.container_level_1,
              "header",
              false,
              "small",
              false,
              false,
              true,
              false,
              true
            )
          )
        }
        if (eachBarcodeDamagedQty) {
          data["header"].push(
            new this.tableCol(
              !_seatData.k_deep_audit
                ? _("Eaches")
                : _seatData.Possible_Container_Names.container_level_0,
              "header",
              false,
              "small",
              false,
              false,
              true,
              false,
              true
            )
          )
        }
      }
    }
    return data
  },

  getPackReconcileData: function() {
    var data = {}
    data["header"] = []
    data["tableRows"] = []
    var missingPackSerials = ""
    var extraPackSerials = ""
    var extraPackCounts = 0
    var self = this

    if (_seatData.k_deep_audit) {
      _seatData.Extra_box_list.map(function(value, index) {
        if (value.Type === appConstants.OUTER_PACK) {
          extraPackSerials = extraPackSerials + value.Box_serial + " "
          extraPackCounts = value.Box_Actual_Qty + extraPackCounts
        }
      })

      _seatData.Box_qty_list.map(function(value, index) {
        if (
          Math.max(
            value.Box_Expected_Qty -
              value.Box_Actual_Qty -
              value.Box_Damaged_Qty,
            0
          ) != 0 ||
          Math.max(value.Box_Actual_Qty - value.Box_Expected_Qty, 0) != 0
        ) {
          if (value.Type === appConstants.OUTER_PACK) {
            data["tableRows"].push([
              new self.tableCol(
                value.Type === appConstants.OUTER_PACK ? value.Box_serial : "-",
                "enabled",
                false,
                "large",
                false,
                true,
                false,
                false
              ),
              new self.tableCol(
                value.Type === appConstants.OUTER_PACK
                  ? Math.max(
                      value.Box_Expected_Qty -
                        value.Box_Actual_Qty -
                        value.Box_Damaged_Qty,
                      0
                    )
                  : 0,
                "enabled",
                false,
                "large",
                true,
                false,
                false,
                false,
                true
              ),
              new self.tableCol(
                value.Type === appConstants.OUTER_PACK
                  ? Math.max(value.Box_Actual_Qty - value.Box_Expected_Qty, 0)
                  : 0,
                "enabled",
                false,
                "large",
                true,
                false,
                false,
                false,
                true
              )
            ])
          }
        }
      })
      if (_seatData.Extra_box_list.length != 0)
        if (extraPackSerials != "") {
          data["tableRows"].push([
            new self.tableCol(
              extraPackSerials,
              "enabled",
              false,
              "large",
              false,
              true,
              false,
              false
            ),
            new self.tableCol(
              0,
              "enabled",
              false,
              "large",
              true,
              false,
              false,
              false,
              true
            ),
            new self.tableCol(
              extraPackCounts,
              "enabled",
              false,
              "large",
              true,
              false,
              false,
              false,
              true
            )
          ])
        }

      if (data["tableRows"].length > 0) {
        data["header"].push(
          new this.tableCol(
            _(_seatData.Possible_Container_Names.container_level_2),
            "header",
            false,
            "small",
            false,
            true,
            true,
            false
          )
        )
        data["header"].push(
          new this.tableCol(
            _("Missing"),
            "header",
            false,
            "small",
            false,
            false,
            true,
            false,
            true
          )
        )
        data["header"].push(
          new this.tableCol(
            _("Extra"),
            "header",
            false,
            "small",
            false,
            false,
            true,
            false,
            true
          )
        )
      }
    }
    return data
  },

  getSubPackReconcileData: function() {
    var data = {}
    data["header"] = []
    data["tableRows"] = []
    var missingPackSerials = ""
    var extraSubPackSerials = ""
    var extraSubPackCounts = 0
    var self = this

    if (_seatData.k_deep_audit) {
      _seatData.Extra_box_list.map(function(value, index) {
        if (value.Type === appConstants.INNER_SUBPACK) {
          extraSubPackSerials = extraSubPackSerials + value.Box_serial + " "
          extraSubPackCounts = value.Box_Actual_Qty + extraSubPackCounts
        }
      })

      _seatData.Box_qty_list.map(function(value, index) {
        if (
          Math.max(
            value.Box_Expected_Qty -
              value.Box_Actual_Qty -
              value.Box_Damaged_Qty,
            0
          ) != 0 ||
          Math.max(value.Box_Actual_Qty - value.Box_Expected_Qty, 0) != 0
        )
          if (value.Type === appConstants.INNER_SUBPACK) {
            data["tableRows"].push([
              new self.tableCol(
                value.Type === appConstants.INNER_SUBPACK
                  ? value.Box_serial
                  : "-",
                "enabled",
                false,
                "large",
                false,
                true,
                false,
                false
              ),
              new self.tableCol(
                value.Type === appConstants.INNER_SUBPACK
                  ? Math.max(
                      value.Box_Expected_Qty -
                        value.Box_Actual_Qty -
                        value.Box_Damaged_Qty,
                      0
                    )
                  : 0,
                "enabled",
                false,
                "large",
                true,
                false,
                false,
                false,
                true
              ),
              new self.tableCol(
                value.Type === appConstants.INNER_SUBPACK
                  ? Math.max(value.Box_Actual_Qty - value.Box_Expected_Qty, 0)
                  : 0,
                "enabled",
                false,
                "large",
                true,
                false,
                false,
                false,
                true
              )
            ])
          }
      })

      if (_seatData.Extra_box_list.length != 0)
        if (extraSubPackSerials) {
          data["tableRows"].push([
            new self.tableCol(
              extraSubPackSerials,
              "enabled",
              false,
              "large",
              false,
              true,
              false,
              false
            ),
            new self.tableCol(
              0,
              "enabled",
              false,
              "large",
              true,
              false,
              false,
              false,
              true
            ),
            new self.tableCol(
              extraSubPackCounts,
              "enabled",
              false,
              "large",
              true,
              false,
              false,
              false,
              true
            )
          ])
        }

      if (data["tableRows"].length > 0) {
        data["header"].push(
          new this.tableCol(
            _(_seatData.Possible_Container_Names.container_level_1),
            "header",
            false,
            "small",
            false,
            true,
            true,
            false
          )
        )
        data["header"].push(
          new this.tableCol(
            _("Missing"),
            "header",
            false,
            "small",
            false,
            false,
            true,
            false,
            true
          )
        )
        data["header"].push(
          new this.tableCol(
            _("Extra"),
            "header",
            false,
            "small",
            false,
            false,
            true,
            false,
            true
          )
        )
      }
    }
    return data
  },
  getItemInBoxReconcileData: function() {
    var data = {}
    data["header"] = []
    data["tableRows"] = []
    var self = this
    if (!_seatData.k_deep_audit) {
      _seatData.Box_qty_list.map(function(value, index) {
        if (value.Scan_status == "close") {
          var barcodeDamagedQty = 0
          _seatData.item_in_box_barcode_damage.map(function(val, ind) {
            if (value.Box_serial == val.Box_serial)
              barcodeDamagedQty = val.Damage_qty
          })
          if (
            Math.max(value.Expected_qty - value.Actual_qty, 0) != 0 ||
            Math.max(value.Actual_qty - value.Expected_qty, 0) != 0 ||
            barcodeDamagedQty != 0
          )
            data["tableRows"].push([
              new self.tableCol(
                value.Box_serial,
                "enabled",
                false,
                "large",
                false,
                true,
                false,
                false
              ),
              new self.tableCol(
                Math.max(
                  value.Expected_qty - value.Actual_qty - barcodeDamagedQty,
                  0
                ),
                "enabled",
                false,
                "large",
                true,
                false,
                false,
                false,
                true
              ),
              new self.tableCol(
                Math.max(value.Actual_qty - value.Expected_qty, 0),
                "enabled",
                false,
                "large",
                true,
                false,
                false,
                false,
                true
              ),
              new self.tableCol(
                barcodeDamagedQty,
                "enabled",
                false,
                "large",
                true,
                false,
                false,
                false,
                true
              )
            ])
        }
      })
      if (data["tableRows"].length > 0) {
        data["header"].push(
          new this.tableCol(
            _("Item in Box Serial Numbers"),
            "header",
            false,
            "small",
            false,
            true,
            true,
            false
          )
        )
        data["header"].push(
          new this.tableCol(
            _("Missing"),
            "header",
            false,
            "small",
            false,
            false,
            true,
            false,
            true
          )
        )
        data["header"].push(
          new this.tableCol(
            _("Extra"),
            "header",
            false,
            "small",
            false,
            false,
            true,
            false,
            true
          )
        )
        data["header"].push(
          new this.tableCol(
            _("Barcode Damage"),
            "header",
            false,
            "small",
            false,
            false,
            true,
            false,
            true
          )
        )
      }
    }
    return data
  },

  getLooseItemsData: function() {
    var data = {}
    var disabledStatus
    var containerNames = this.getContainerNames()
    disabledStatus = false
    data["header"] = []

    data["header"].push(
      new this.tableCol(
        !_seatData.k_deep_audit
          ? _("Loose Items")
          : containerNames["container_level_0"],
        "header",
        false,
        "small",
        false,
        true,
        true,
        false
      )
    )

    if (
      _seatData["show_expected_qty"] != undefined &&
      _seatData["show_expected_qty"] == true
    )
      data["header"].push(
        new this.tableCol(
          _("Expected"),
          "header",
          false,
          "small",
          false,
          false,
          true,
          false,
          true
        )
      )
    data["header"].push(
      new this.tableCol(
        _("Actual"),
        "header",
        false,
        "small",
        false,
        false,
        true,
        false,
        true
      )
    )
    data["tableRows"] = []
    var self = this
    var d = []
    if (_seatData.Sku_Item_List) {
      _seatData.Sku_Item_List.map(function(value, index) {
        d = []
        var itemExpectedQty = []
        var itemActualQty = []
        var itemList = value.Item_Qty_List
        if (itemList) {
          for (var i = 0, listLen = itemList.length; i < listLen; i++) {
            itemExpectedQty.push(itemList[i].Expected_qty)
            itemActualQty.push(itemList[i].Actual_Qty)
          }
        }
        d.push(
          new self.tableCol(
            value.Sku,
            "enabled",
            false,
            "large",
            false,
            true,
            false,
            disabledStatus
          )
        )
        if (
          _seatData["show_expected_qty"] != undefined &&
          _seatData["show_expected_qty"] == true
        )
          d.push(
            new self.tableCol(
              itemExpectedQty.toString(),
              "enabled",
              false,
              "large",
              true,
              false,
              false,
              disabledStatus,
              true
            )
          )
        d.push(
          new self.tableCol(
            itemActualQty.toString(),
            "enabled",
            _seatData.Current_box_details.length > 0 &&
            _seatData.Current_box_details[0]["Box_serial"] == null
              ? _seatData.Current_box_details[0]["Sku"] == value.Sku
              : false,
            "large",
            true,
            false,
            false,
            disabledStatus,
            true
          )
        )
        data["tableRows"].push(d)
      })
    }
    _seatData.extra_loose_sku_item_list.map(function(value, index) {
      d = []
      d.push(
        new self.tableCol(
          value.Sku,
          "extra",
          false,
          "large",
          false,
          true,
          false,
          false
        )
      )
      if (
        _seatData["show_expected_qty"] != undefined &&
        _seatData["show_expected_qty"] == true
      )
        d.push(
          new self.tableCol(
            value.Expected_qty,
            "enabled",
            false,
            "large",
            true,
            false,
            false,
            false,
            true
          )
        )
      d.push(
        new self.tableCol(
          value.Actual_qty,
          "actualqty",
          _seatData.Current_box_details.length > 0 &&
          _seatData.Current_box_details[0]["Box_serial"] == null
            ? _seatData.Current_box_details[0]["Sku"] == value.Sku
            : false,
          "large",
          true,
          false,
          false,
          false,
          true
        )
      )
      data["tableRows"].push(d)
    })

    return data
  },

  getFinishAuditFlag: function() {
    return _finishAuditFlag
  },
  getKDeepLooseItemsData: function() {
    return _seatData.Loose_sku_list || null
  },
  getSelectedUOM: function() {
    return _seatData.selected_uom || null
  },

  getReconcileLooseItemsData: function() {
    var data = {}
    data["header"] = []
    data["tableRows"] = []
    var self = this
    var totalLooseItemsMissing = 0
    var extraLooseItemsMissing = 0
    var c = 0
    var looseItemScreenName = _("Loose Items Serial Numbers")

    _seatData.Loose_sku_list.map(function(value, index) {
      if (
        Math.max(
          value.Expected_qty - value.Actual_qty - value.Damaged_qty,
          0
        ) != 0 ||
        Math.max(value.Actual_qty - value.Expected_qty, 0) != 0 ||
        _seatData.loose_item_barcode_damage != 0
      )
        c = c + 1
      if (_seatData.k_deep_audit) {
        looseItemScreenName = _seatData.Possible_Container_Names[value.Type]
      }
    })
    _seatData.extra_loose_sku_item_list.map(function(value, index) {
      if (
        Math.max(value.Expected_qty - value.Actual_qty, 0) != 0 ||
        Math.max(value.Actual_qty - value.Expected_qty, 0) != 0 ||
        _seatData.loose_item_barcode_damage != 0
      )
        c = c + 1
      if (_seatData.k_deep_audit) {
        looseItemScreenName = _seatData.Possible_Container_Names[value.Type]
      }
    })

    _seatData.Loose_sku_list.concat(_seatData.extra_loose_sku_item_list).map(
      function(value, index) {
        if (
          Math.max(
            value.Expected_qty - value.Actual_qty - value.Damaged_qty,
            0
          ) != 0 ||
          Math.max(value.Actual_qty - value.Expected_qty, 0) != 0
        ) {
          var tableRows = [
            new self.tableCol(
              value.Sku,
              "enabled",
              false,
              "large",
              false,
              true,
              false,
              false
            ),
            new self.tableCol(
              Math.max(
                value.Expected_qty - value.Actual_qty - value.Damaged_qty,
                0
              ),
              "enabled",
              false,
              "large",
              true,
              false,
              false,
              false,
              true
            ),
            new self.tableCol(
              Math.max(value.Actual_qty - value.Expected_qty, 0),
              "enabled",
              false,
              "large",
              true,
              false,
              false,
              false,
              true
            )
          ]
          if (!_seatData.k_deep_audit) {
            tableRows.push(
              new self.tableCol(
                index == (c % 2 == 0 ? c / 2 : (c + 1) / 2) - 1
                  ? _seatData.loose_item_barcode_damage
                  : "",
                "enabled",
                false,
                "large",
                true,
                false,
                false,
                false,
                true,
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                false
              )
            )
          }
          data["tableRows"].push(tableRows)
        }
      }
    )

    if (data["tableRows"].length > 0) {
      data["header"].push(
        new this.tableCol(
          looseItemScreenName,
          "header",
          false,
          "small",
          false,
          true,
          true,
          false
        )
      )
      data["header"].push(
        new this.tableCol(
          _("Missing"),
          "header",
          false,
          "small",
          false,
          false,
          true,
          false,
          true
        )
      )
      data["header"].push(
        new this.tableCol(
          _("Extra"),
          "header",
          false,
          "small",
          false,
          false,
          true,
          false,
          true
        )
      )
      if (!_seatData.k_deep_audit) {
        data["header"].push(
          new this.tableCol(
            _("Unscannable"),
            "header",
            false,
            "small",
            false,
            false,
            true,
            false,
            true
          )
        )
      }
    }

    return data
  },

  getToteId: function() {
    if (_seatData.hasOwnProperty("tote_id")) {
      return _seatData.tote_id
    } else {
      return null
    }
  },

  getItemDetailsData: function() {
    var data = {}
    data["header"] = []
    data["header"].push(
      new this.tableCol(
        _("Product Details"),
        "header",
        false,
        "small",
        false,
        true,
        true,
        false
      )
    )
    data["tableRows"] = []
    data["image_url"] = null
    var self = this
    if (
      _seatData.product_info != undefined &&
      Object.keys(_seatData.product_info).length > 0
    ) {
      var product_info_locale = {}
      var language_locale = sessionStorage.getItem("localeData")
      var locale
      if (language_locale == "null" || language_locale == null) {
        locale = "en-US"
      } else {
        locale = JSON.parse(language_locale)["data"]["locale"]
      }
      _seatData.product_info.map(function(value, index) {
        var keyValue

        for (var key in value[0]) {
          if (key != "display_data" && key != "product_local_image_url") {
            keyValue = value[0][key] + " "
          } else if (
            key != "display_data" &&
            key == "product_local_image_url"
          ) {
            data["image_url"] = value[0][key]
          }
        }
        value[0].display_data.map(function(data_locale, index1) {
          if (data_locale.locale == locale) {
            if (data_locale.display_name != "product_local_image_url") {
              product_info_locale[data_locale.display_name] = keyValue
            }
          }
        })
      })
      for (var key in product_info_locale) {
        if (product_info_locale.hasOwnProperty(key)) {
          data["tableRows"].push([
            new self.tableCol(
              key,
              "enabled",
              false,
              "small",
              false,
              true,
              false,
              false
            ),
            new self.tableCol(
              product_info_locale[key],
              "enabled",
              false,
              "small",
              false,
              true,
              false,
              false
            )
          ])
        }
      }
    } else {
      data["tableRows"].push([
        new self.tableCol(
          _("Product Name"),
          "enabled",
          false,
          "small",
          false,
          true,
          false,
          false
        ),
        new self.tableCol(
          "--",
          "enabled",
          false,
          "small",
          false,
          true,
          false,
          false
        )
      ])
      data["tableRows"].push([
        new self.tableCol(
          _("Product Desc"),
          "enabled",
          false,
          "small",
          false,
          true,
          false,
          false
        ),
        new self.tableCol(
          "--",
          "enabled",
          false,
          "small",
          false,
          true,
          false,
          false
        )
      ])
      data["tableRows"].push([
        new self.tableCol(
          _("Product SKU"),
          "enabled",
          false,
          "small",
          false,
          true,
          false,
          false
        ),
        new self.tableCol(
          "--",
          "enabled",
          false,
          "small",
          false,
          true,
          false,
          false
        )
      ])
      data["tableRows"].push([
        new self.tableCol(
          _("Product Type"),
          "enabled",
          false,
          "small",
          false,
          true,
          false,
          false
        ),
        new self.tableCol(
          "--",
          "enabled",
          false,
          "small",
          false,
          true,
          false,
          false
        )
      ])
    }

    return data
  },

  getScanDetails: function() {
    if (_seatData["scan_details"] == undefined) {
      var data = {
        scan_details: {
          current_qty: this.getkQQuanity(),
          total_qty: 0,
          kq_allowed: this.kQstatus()
        }
      }
      return data.scan_details
    } else {
      return _seatData["scan_details"]
    }
  },

  getDamagedBoxDetails: function() {
    if (_seatData["damaged_boxes"] !== undefined) {
      return _seatData["damaged_boxes"]
    }
  },

  setCancelButtonStatus: function(status) {
    _cancelButtonClicked = status
  },
  getCancelButtonStatus: function() {
    return _cancelButtonClicked
  },
  /*setAuditModalStatus: function(status){
        _cancelButtonClicked = status;
    },
    setAuditModalStatus: function(){
        _auditModalStatus = status;
    },*/

  getQuantityDetails: function() {
    var data = {
      scan_details: {
        current_qty: _seatData.per_item_print.print_done,
        kq_allowed: _seatData.enable_kq === true ? true : false,
        total_qty: _seatData.per_item_print.print_required
      }
    }
    return data.scan_details
  },
  kQstatus: function() {
    if (_seatData.hasOwnProperty("enable_kq")) {
      return _seatData.enable_kq
    } else {
      return true
    }
  },
  getGoodScanDetails: function() {
    if (_seatData["scan_details"] == undefined) {
      var data = {
        scan_details: {
          current_qty: _goodQuantity,
          total_qty: 0,
          kq_allowed: _seatData.enable_kq === true ? true : false
        }
      }
      return data.scan_details
    } else {
      return _seatData["scan_details"]
    }
  },

  getMissingScanDetails: function() {
    if (_seatData["scan_details"] == undefined) {
      var data = {
        scan_details: {
          current_qty: _missingQuantity,
          total_qty: 0,
          kq_allowed: _seatData.enable_kq === true ? true : false
        }
      }
      return data.scan_details
    } else {
      return _seatData["scan_details"]
    }
  },

  getDamagedScanDetails: function() {
    if (_seatData["scan_details"] == undefined) {
      var data = {
        scan_details: {
          current_qty: _damagedQuantity,
          total_qty: 0,
          kq_allowed: _seatData.enable_kq === true ? true : false
        }
      }
      return data.scan_details
    } else {
      return _seatData["scan_details"]
    }
  },
  getAuditDamagedCount: function() {
    if (_seatData.hasOwnProperty("damaged_boxes")) {
      return _seatData.damaged_boxes
    } else {
      return null
    }
  },
  getPhysicallyDamagedScanDetails: function() {
    if (_seatData["scan_details"] == undefined) {
      var data = {
        scan_details: {
          current_qty: _seatData["unmarked_container"]
            ? _damagedQuantity
            : _seatData["physically_damaged_items"].length,
          total_qty: 0,
          kq_allowed: _seatData.enable_kq === true ? true : false
        }
      }
      return data.scan_details
    } else {
      return _seatData["scan_details"]
    }
  },
  hideSpinner: function() {
    _showSpinner = false
  },
  setCurrentStationId: function(data){
    _currentStationId = data;
  },
  setCurrentSeat: function(data) {
    _seatData = data
    _currentSeat = "pick_front";
    _screenId = data.screen_id
  },
  getModalContent: function() {
    return modalContent.data
  },
  getSystemIdleState: function() {
    if (_seatData != undefined && _peripheralScreen == false) {
      return _seatData.is_idle
    } else if (_seatData != undefined && _peripheralScreen == true) {
      return false
    } else {
      return null
    }
  },

  getItemUid: function() {
    return _itemUid
  },
  getExceptionType: function() {
    return _exceptionType
  },
  getModalType: function() {
    return modalContent.type
  },
  setModalContent: function(data) {
    modalContent = data
  },

  getPPTLEvent: function() {
    switch (_currentSeat) {
      case appConstants.PUT_BACK:
        _pptlEvent = "secondary_button_press"
        break
      case appConstants.PUT_FRONT:
        _pptlEvent = "primary_button_press"
        break
      case appConstants.PICK_BACK:
        _pptlEvent = "secondary_button_press"
        break
      case appConstants.PICK_FRONT:
        _pptlEvent = "primary_button_press"
        break
      default:
      //return true;
    }
    return _pptlEvent
  },
  getCurrentSeat: function() {
    return _currentSeat
  },
  getCurrentStationId: function() {
    return _currentStationId
  },
  setServerMessages: function(data) {
    _messageJson = serverMessages
  },
  getServerMessages: function() {
    return _messageJson
  },
  changeLanguage: function(data) {
    var locale_data = {
      data: {
        locale: data
      }
    }
    switch (data) {
      case "ja-JP":
        _.setTranslation(japanese)
        break
      case "zh-ZH":
        _.setTranslation(chinese)
        break
      case "en-US":
        _.setTranslation(english)
        break
      case "he-IL":
        _.setTranslation(hebrew)
        break
      case "de-DE":
        _.setTranslation(german)
        break
      case "fr-FR":
        _.setTranslation(french)
        break
      case "es-ES":
        _.setTranslation(spanish)
        break
      case "nl":
        _.setTranslation(dutch)
        break
      default:
        return true
    }
    sessionStorage.setItem("localeData", JSON.stringify(locale_data))
  },
  postDataToInterface: function(data) {
    showModal = false
    //utils.postDataToInterface(data, _seatName)
    utils.postDataToInterface(data, _currentStationId)
  },
  postDataToTower: function(data) {
    showModal = false
    utils.postDataToTower(data, _seatName)
  },
  logError: function(data) {
    utils.logError(data)
  },
  getScreenId: function() {
    return _screenId
  },
  getPpsMode: function() {
    return _seatMode
  },
  getUsername: function() {
    return _username
  },
  getSeatType: function() {
    return _seatType
  },
  getSeatName: function() {
    return _seatName
  },
  enableException: function(data) {
    _KQQty = 0
    _activeException = null
    if (data == true) {
      _seatData["scan_allowed"] = false
    } else {
      _seatData["scan_allowed"] = true
    }

    _enableException = data
  },
  enableSearch: function(data) {
    _enableSearch = data
  },
  getExceptionStatus: function() {
    return _enableException
  },
  getItemSearchWindow: function() {
    return _enableSearch
  },

  setActiveException: function(data) {
    if (!data) {
      _activeException = null
    } else {
      _activeException = data
    }
  },
  getActiveException: function() {
    if (!_activeException) {
      return null
    } else {
      return _activeException
    }
  },
  setKQQuanity: function(data) {
    _KQQty = data
  },
  getDamagedQuantity: function() {
    return _damagedQuantity
  },
  setGoodQuanity: function(data) {
    _goodQuantity = data
  },
  setMissingQuanity: function(data) {
    _missingQuantity = data
  },
  setUnscannableQuanity: function(data) {
    _unscannableQuantity = data
  },
  setDamagedQuanity: function(data) {
    _damagedQuantity = data
  },
  getExeptionQuanity: function() {
    var data =
      _goodQuantity !== 0 ||
      _missingQuantity !== 0 ||
      _damagedQuantity !== 0 ||
      _unscannableQuantity !== 0
        ? false
        : true
    return data
  },
  getkQQuanity: function() {
    if (_seatData.hasOwnProperty("Current_box_details")) {
      if (_seatData.Current_box_details.length > 0) {
        _KQQty = _seatData.Current_box_details[0].Actual_qty
      }
      return _KQQty
    } else {
      return _KQQty
    }
  },

  getToteDetails: function() {
    if (_seatData.hasOwnProperty("tote_details")) {
      return _seatData.tote_details
    } else {
      return null
    }
  },

  setPutFrontExceptionScreen: function(data) {
    _putFrontExceptionScreen = data
    _seatData["notification_list"] = [
      {
        details: [],
        code: null,
        description: "",
        level: "info"
      }
    ]
  },

  setPutBackExceptionScreen: function(data) {
    _seatData.scan_allowed = false
    _putBackExceptionScreen = data
    _seatData["notification_list"] = [
      {
        details: [],
        code: null,
        description: "",
        level: "info"
      }
    ]
  },

  getPutBackExceptionScreen: function(data) {
    return _putBackExceptionScreen
  },
  getUnmarkedContainerFlag: function() {
    return _unmarkedContainer
  },
  setAuditExceptionScreen: function(data) {
    _seatData.scan_allowed = false
    _auditExceptionScreen = data
    _seatData["notification_list"] = [
      {
        details: [],
        code: null,
        description: "",
        level: "info"
      }
    ]
  },

  getAuditExceptionScreen: function(data) {
    return _auditExceptionScreen
  },
  getIRTFlagStatus: function(data) {
    return _seatData.irt_scan_enabled
  },
  getSearchExcessQty: function(data) {
    return _seatData.excess_quantity
  },

  setPickFrontExceptionScreen: function(data) {
    _seatData["notification_list"] = [
      {
        details: [],
        code: null,
        description: "",
        level: "info"
      }
    ]
    if (data == "pick_front_quantity") {
      if (_goodQuantity + _missingQuantity != _seatData["pick_quantity"]) {
        if (_seatData.notification_list.length == 0) {
          var data = {}
          data["code"] = resourceConstants.CLIENTCODE_011
          data["level"] = "error"
          data["type"] = appConstants.CLIENT_NOTIFICATION
          data["details"] = [_seatData["pick_quantity"]]
          _seatData.notification_list[0] = data
        } else {
          _seatData.notification_list[0].code = resourceConstants.CLIENTCODE_011
          _seatData.notification_list[0].details = [_seatData["pick_quantity"]]
          _seatData.notification_list[0].level = "error"
          _seatData.notification_list[0].type = appConstants.CLIENT_NOTIFICATION
        }
        _goodQuantity = 0
        _damagedQuantity = 0
        _missingQuantity = 0

        _pickFrontExceptionScreen = "good"
      } else {
        _pickFrontExceptionScreen = data
      }
    } else if (data == "damaged_or_missing") {
      if (_goodQuantity === _seatData["pick_quantity"]) {
        if (_seatData.notification_list.length == 0) {
          var data = {}
          data["code"] = resourceConstants.CLIENTCODE_017
          data["level"] = "error"
          data["type"] = appConstants.CLIENT_NOTIFICATION
          data["details"] = [_seatData["pick_quantity"]]
          _seatData.notification_list[0] = data
        } else {
          _seatData.notification_list[0].code = resourceConstants.CLIENTCODE_017
          _seatData.notification_list[0].details = [_seatData["pick_quantity"]]
          _seatData.notification_list[0].level = "error"
          _seatData.notification_list[0].type = appConstants.CLIENT_NOTIFICATION
        }
        _goodQuantity = 0
        _damagedQuantity = 0
        _missingQuantity = 0

        _pickFrontExceptionScreen = "good"
      } else if (
        _goodQuantity + _missingQuantity !=
        _seatData["pick_quantity"]
      ) {
        if (_seatData.notification_list.length == 0) {
          var data = {}
          data["code"] = resourceConstants.CLIENTCODE_011
          data["level"] = "error"
          data["type"] = appConstants.CLIENT_NOTIFICATION
          data["details"] = [_seatData["pick_quantity"]]
          _seatData.notification_list[0] = data
        } else {
          _seatData.notification_list[0].code = resourceConstants.CLIENTCODE_011
          _seatData.notification_list[0].details = [_seatData["pick_quantity"]]
          _seatData.notification_list[0].level = "error"
          _seatData.notification_list[0].type = appConstants.CLIENT_NOTIFICATION
        }
        _goodQuantity = 0
        _damagedQuantity = 0
        _missingQuantity = 0

        _pickFrontExceptionScreen = "good"
      } else {
        _pickFrontExceptionScreen = data
      }
    } else {
      _pickFrontExceptionScreen = data
    }
  },

  getPutFrontExceptionScreen: function() {
    return _putFrontExceptionScreen
  },

  getPickFrontExceptionScreen: function() {
    return _pickFrontExceptionScreen
  },

  getSRStatus: function() {
    return _seatData.k_deep_audit
  },
  getCurrentSlot: function() {
    if (_seatData.hasOwnProperty("rack_details")) {
      return _seatData.rack_details.slot_barcodes
    } else {
      return null
    }
  },
  getContainerNames: function() {
    if (_seatData.hasOwnProperty("rack_details")) {
      return _seatData.Possible_Container_Names
    } else {
      return null
    }
  },
  _getBinMapDetails: function() {
    return _seatData ? _seatData.group_info : null
  },
  _getBinMapOrientation: function() {
    return _seatData ? _seatData.operator_orientation || 0 : null
  },

  _getMtuDetails: function() {
    var nSlots, mtuList, currentSlotId, selectedSlotId
    nSlots = 0
    selectedSlotId = 0
    mtuList = []
    if (_seatData && _seatData.group_info) {
      nSlots = Object.keys(_seatData.group_info).length
    }
    if (_seatData && _seatData.active_group) {
      selectedSlotId = _seatData.active_group - 1
    }
    for (currentSlotId = 0; currentSlotId < nSlots; currentSlotId++) {
      mtuList.push(currentSlotId === selectedSlotId ? true : false)
    }
    return mtuList
  },
  _getSplitScreenFlag: function() {
    if (_seatData.hasOwnProperty("group_info")) {
      var navData = _seatData.group_info || {}
      for (var key in navData) {
        if (navData[key] != resourceConstants.BIN_GROUP_CENTER) {
          return true
        }
      }
    }
    return false
  },
  _getMobileFlag: function() {
    var bIsMobile = false
    if (_seatData) {
      bIsMobile =
        _seatData.roll_cage_flow && _currentSeat == appConstants.PUT_FRONT
    }
    return bIsMobile
  },

  _getDockedGroup: function() {
    return _seatData && _seatData.docked ? Object.keys(_seatData.docked) : []
  },
  _getUndockAwaitedGroup: function() {
    return _seatData && _seatData.undock_awaited
      ? Object.keys(_seatData.undock_awaited)
      : []
  },
  _getWrongUndockGroup: function() {
    return _seatData && _seatData.wrong_undock
      ? Object.keys(_seatData.wrong_undock)
      : []
  },
  _getOrigBinUse: function() {
    return _seatData && _seatData.bin_coordinate_plotting ? true : false
  },
  _getReleaseActiveStatus: function() {
    return _seatData && _seatData.release_mtu ? true : false
  },
  _getDamagedItemsData: function() {
    var data = {}
    data["header"] = []
    data["footer"] = []
    data["header"].push(
      new this.tableCol(
        _("Type"),
        "header",
        false,
        "small",
        false,
        true,
        true,
        false
      )
    )
    data["header"].push(
      new this.tableCol(
        _("SKU"),
        "header",
        false,
        "small",
        false,
        true,
        true,
        false
      )
    )
    data["header"].push(
      new this.tableCol(
        _("Serial"),
        "header",
        false,
        "small",
        false,
        true,
        true,
        false
      )
    )
    data["header"].push(
      new this.tableCol(
        _("Quantity"),
        "header",
        false,
        "small",
        false,
        true,
        true,
        false
      )
    )

    data["footer"].push(
      new this.tableCol(
        _(""),
        "header",
        false,
        "small",
        false,
        true,
        true,
        false
      )
    )
    data["tableRows"] = []
    data["image_url"] = null
    var self = this

    if (
      _seatData.physically_damaged_items &&
      _seatData.physically_damaged_items.length > 0
    ) {
      type = _seatData.physically_damaged_items[0].type
      serial = _seatData.physically_damaged_items[0].serial
      if (serial.length === 0) {
        serial = "-"
      } else {
        for (let j = 0; j < serial.length; j++) {
          if (serial[j].length > 10) {
            serial[j] = serial[j].slice(0, 5) + "..." + serial[j].slice(-5)
          }
        }
      }

      var product_details,
        product_sku,
        type,
        serial,
        quantity,
        total_damaged = 0
      _seatData.physically_damaged_items.map(function(value, index) {
        value.product_info.map(function(product_details, index) {
          if (product_details[0].product_sku) {
            product_sku = product_details[0].product_sku
            quantity = value.qty
            total_damaged += quantity
            serial = value.serial
            data["tableRows"].push([
              new self.tableCol(
                type,
                "enabled",
                false,
                "small",
                false,
                true,
                false,
                false
              ),
              new self.tableCol(
                product_sku,
                "enabled",
                false,
                "small",
                false,
                true,
                false,
                false
              ),
              new self.tableCol(
                serial,
                "enabled",
                false,
                "small",
                false,
                true,
                false,
                false
              ),
              new self.tableCol(
                quantity,
                "enabled",
                false,
                "small",
                false,
                true,
                false,
                false
              )
            ])
          }
        })
      })
      data["footer"].push(
        new this.tableCol(
          _("Total: ") + total_damaged + _(" items"),
          "header",
          false,
          "small",
          false,
          true,
          true,
          false
        )
      )
    } else {
      data["tableRows"].push([
        new self.tableCol(
          _("-"),
          "enabled",
          false,
          "small",
          false,
          true,
          false,
          false
        ),
        new self.tableCol(
          "-",
          "enabled",
          false,
          "small",
          false,
          true,
          false,
          false
        ),
        new self.tableCol(
          "-",
          "enabled",
          false,
          "small",
          false,
          true,
          false,
          false
        ),
        new self.tableCol(
          "-",
          "enabled",
          false,
          "small",
          false,
          true,
          false,
          false
        )
      ])
      data["footer"].push(
        new this.tableCol(
          _("Total: "),
          "header",
          false,
          "small",
          false,
          true,
          true,
          false
        )
      )
    }
    return data
  },
  _getExcessItemsData: function() {
    var data = {}
    data["header"] = []
    data["footer"] = []
    data["header"].push(
      new this.tableCol(
        _("Product SKU"),
        "header",
        false,
        "small",
        false,
        true,
        true,
        false
      )
    )
    data["header"].push(
      new this.tableCol(
        _("Excess Quantity"),
        "header",
        false,
        "small",
        false,
        true,
        true,
        false
      )
    )
    data["footer"].push(
      new this.tableCol(
        _(""),
        "header",
        false,
        "small",
        false,
        true,
        true,
        false
      )
    )
    data["tableRows"] = []
    data["image_url"] = null
    var self = this
    if (
      _seatData.excess_items &&
      Object.keys(_seatData.excess_items).length > 0
    ) {
      var product_details,
        product_sku,
        quantity,
        total_excess = 0
      _seatData.excess_items.map(function(value, index) {
        value.product_info.map(function(product_details, index) {
          if (product_details[0].product_sku) {
            product_sku = product_details[0].product_sku
            quantity = value.qty
            total_excess += quantity
            data["tableRows"].push([
              new self.tableCol(
                product_sku,
                "enabled",
                false,
                "small",
                false,
                true,
                false,
                false
              ),
              new self.tableCol(
                quantity,
                "enabled",
                false,
                "small",
                false,
                true,
                false,
                false
              )
            ])
          }
        })
      })
      data["footer"].push(
        new this.tableCol(
          _("Total: ") + total_excess + _(" items"),
          "header",
          false,
          "small",
          false,
          true,
          true,
          false
        )
      )
    } else {
      data["tableRows"].push([
        new self.tableCol(
          _("--"),
          "enabled",
          false,
          "small",
          false,
          true,
          false,
          false
        ),
        new self.tableCol(
          "-",
          "enabled",
          false,
          "small",
          false,
          true,
          false,
          false
        )
      ])
      data["footer"].push(
        new this.tableCol(
          _("Total: "),
          "header",
          false,
          "small",
          false,
          true,
          true,
          false
        )
      )
    }
    return data
  },
  _getDamagedItemsDataForAudit: function() {
    var _damagedQuantity = 0
    var data = {}
    data["header"] = []
    data["footer"] = []
    data["header"].push(
      new this.tableCol(
        _("Type"),
        "header",
        false,
        "small",
        false,
        true,
        true,
        false,
        true
      )
    )
    data["header"].push(
      new this.tableCol(
        _("SKU"),
        "header",
        false,
        "small",
        false,
        true,
        true,
        false,
        true
      )
    )
    data["header"].push(
      new this.tableCol(
        _("Serial"),
        "header",
        false,
        "small",
        false,
        true,
        true,
        false,
        true
      )
    )
    data["header"].push(
      new this.tableCol(
        _("Quantity"),
        "header",
        false,
        "small",
        false,
        true,
        true,
        false,
        true
      )
    )
    data["footer"].push(
      new this.tableCol(
        _(""),
        "header",
        false,
        "small",
        false,
        true,
        true,
        false
      )
    )
    data["footer"].push(
      new this.tableCol(
        _(""),
        "header",
        false,
        "small",
        false,
        true,
        true,
        false
      )
    )
    data["footer"].push(
      new this.tableCol(
        _(""),
        "header",
        false,
        "small",
        false,
        true,
        true,
        false
      )
    )
    data["tableRows"] = []
    data["image_url"] = null
    var self = this
    if (_seatData.damaged_boxes && _seatData.damaged_boxes.length > 0) {
      var isKQEnabled,
        product_details,
        product_sku,
        type,
        serial,
        quantity,
        total_damaged = 0
      _seatData.damaged_boxes.map(function(value, index) {
        type = value.uom_level
        product_sku = value.sku
        serial = value.serial === "undefined" ? "--" : value.serial
        quantity = value.damaged_qty //value.qty;
        isKQEnabled = value.enable_kq_row
        total_damaged = mainstore.getDamagedQuantity()

        data["tableRows"].push([
          new self.tableCol(
            type,
            "enabled",
            false,
            "small",
            false,
            true,
            false,
            false,
            true,
            true,
            "shoshowUOMDropDownwUOM",
            false,
            "verticalAlign"
          ),
          new self.tableCol(
            product_sku,
            "enabled",
            false,
            "small",
            false,
            true,
            false,
            false,
            true,
            true,
            true,
            true,
            "verticalAlign"
          ),
          new self.tableCol(
            serial,
            "enabled",
            false,
            "small",
            false,
            true,
            false,
            false,
            true,
            true,
            true,
            true,
            "verticalAlign"
          ),
          new self.tableCol(
            quantity,
            "enabled",
            false,
            "small",
            false,
            true,
            false,
            false,
            true,
            true,
            "showKQRow",
            isKQEnabled,
            "verticalAlign"
          )
        ])
        //text, status, selected, size, border, grow, bold, disabled, centerAlign, type, buttonType, buttonStatus, mode, text_decoration, color, actionButton, borderBottom, textbox, totalWidth, id, management
      })
      data["footer"].push(
        new this.tableCol(
          _("Total: ") + total_damaged + _(" entities"),
          "header",
          false,
          "small",
          false,
          true,
          true,
          false
        )
      )
    } else {
      var isKQEnabled = false
      data["tableRows"].push([
        new self.tableCol(
          _("--"),
          "enabled",
          false,
          "small",
          false,
          true,
          false,
          false,
          true,
          true,
          "shoshowUOMDropDownwUOM",
          false,
          "verticalAlign"
        ),
        new self.tableCol(
          "--",
          "enabled",
          false,
          "small",
          false,
          true,
          false,
          false,
          true,
          true,
          true,
          true,
          "verticalAlign"
        ),
        new self.tableCol(
          "--",
          "enabled",
          false,
          "small",
          false,
          true,
          false,
          false,
          true,
          true,
          true,
          true,
          "verticalAlign"
        ),
        new self.tableCol(
          "--",
          "enabled",
          false,
          "small",
          false,
          true,
          false,
          false,
          true,
          true,
          "showKQRow",
          isKQEnabled,
          "verticalAlign"
        )
      ])
      data["footer"].push(
        new this.tableCol(
          _("Total: ") + _(" 0 entities"),
          "header",
          false,
          "small",
          false,
          true,
          true,
          false
        )
      )
    }
    return data
  },
  _getExcessExceptionFlag: function() {
    if (
      _seatData.excess_items != undefined &&
      Object.keys(_seatData.excess_items).length > 0
    ) {
      return false
    }
    return true
  },
  _getWareHouseExceptionFlag: function() {
    if (_seatData.exception_type === "warehousefull_exception") {
      return false
    }
    return true
  },
  _getDamagedExceptionFlag: function() {
    if (
      _seatData.physically_damaged_items != undefined &&
      _seatData.physically_damaged_items.length !== 0
    ) {
      return false
    }
    return true
  },
  _getUnmarkedContainerFlag: function() {
    return _seatData.unmarked_container
  },
  _getBinFullStatus: function() {
    return _seatData && _seatData.bin_full_allowed ? true : false
  },
  _getSelectedPpsBin: function() {
    var ppsbin_list =
      _seatData && _seatData.ppsbin_list ? _seatData.ppsbin_list : []
    var bId = null
    ppsbin_list.forEach(function(bin) {
      if (bin["selected_state"]) {
        bId = bin["ppsbin_id"]
      }
    })
    return bId
  },
  getProductSerial: function() {
    var serial_data = _seatData.serial
    return serial_data.length > 0
      ? utils.get3dotTrailedText(serial_data[0], 4, 4, 10)
      : null
  },
  getSelectedBinGroup: function() {
    var ppsbin_list =
      _seatData && _seatData.ppsbin_list ? _seatData.ppsbin_list : []
    var groupId = null
    ppsbin_list.forEach(function(el) {
      if (el["selected_state"]) {
        groupId = el["group_id"]
        return false
      }
    })
    return groupId
  },
  validateAndSendDataToServer: function() {
    var flag = false,
      type = false,
      binFullQty = false
    var details
    if (
      _seatData.screen_id ==
        appConstants.PICK_FRONT_MISSING_DAMAGED_UNSCANNABLE_ENTITY ||
      _seatData.screen_id ==
        appConstants.PICK_FRONT_MISSING_OR_UNSCANNABLE_DAMAGED_PACK ||
      _seatData.screen_id ==
        appConstants.PICK_FRONT_MISSING_OR_UNSCANNABLE_DAMAGED_SUBPACK
    ) {
      if (
        _goodQuantity === _seatData.pick_quantity &&
        _unscannableQuantity === 0
      ) {
        flag = type = true
      } else {
        flag =
          _goodQuantity + _missingQuantity + _damagedQuantity !=
          _seatData.pick_quantity
        details = _seatData.pick_quantity
      }
    } else if (
      _seatData.screen_id ==
      appConstants.PUT_FRONT_MISSING_DAMAGED_UNSCANNABLE_ENTITY
    ) {
      if (_goodQuantity == _seatData.put_quantity) {
        flag = type = true
      } else {
        flag =
          _goodQuantity +
            _missingQuantity +
            _damagedQuantity +
            _unscannableQuantity !=
          _seatData.put_quantity
        details = _seatData.put_quantity
      }
    } else if (
      _seatData.screen_id == appConstants.PICK_FRONT_MORE_ITEM_SCAN ||
      _seatData.screen_id == appConstants.PICK_FRONT_PPTL_PRESS ||
      _seatData.screen_id == appConstants.PICK_FRONT_PACKING_ITEM_SCAN
    ) {
      if (_KQQty > _seatData.scan_details.total_qty) {
        flag = binFullQty = true
        details = _seatData.scan_details.total_qty
      }
    } else {
      flag =
        _goodQuantity + _missingQuantity + _damagedQuantity !=
        _seatData.put_quantity
      details = _seatData.put_quantity
    }
    if (flag) {
      if (_seatData.notification_list.length == 0) {
        var data = {}
        data["code"] = binFullQty
          ? resourceConstants.CLIENTCODE_012
          : type
          ? resourceConstants.CLIENTCODE_017
          : _seatData.screen_id ===
            appConstants.PICK_FRONT_MISSING_DAMAGED_UNSCANNABLE_ENTITY
          ? resourceConstants.CLIENTCODE_018
          : resourceConstants.CLIENTCODE_010
        data["level"] = "error"
        data["type"] = appConstants.CLIENT_NOTIFICATION
        data["details"] = [details]
        _seatData.notification_list[0] = data
      } else {
        _seatData.notification_list[0].code = binFullQty
          ? resourceConstants.CLIENTCODE_012
          : type
          ? resourceConstants.CLIENTCODE_017
          : _seatData.screen_id ===
            appConstants.PICK_FRONT_MISSING_DAMAGED_UNSCANNABLE_ENTITY
          ? resourceConstants.CLIENTCODE_018
          : resourceConstants.CLIENTCODE_010
        _seatData.notification_list[0].details = [details]
        _seatData.notification_list[0].level = "error"
        _seatData.notification_list[0].type = appConstants.CLIENT_NOTIFICATION
        _seatData.notification_list[0].saltParams = {
          module: binFullQty ? appConstants.BIN_FULL : _seatData.screen_id
        }
      }
      if (
        _seatData.screen_id !=
          appConstants.PICK_FRONT_MISSING_DAMAGED_UNSCANNABLE_ENTITY &&
        _seatData.screen_id !=
          appConstants.PUT_FRONT_MISSING_DAMAGED_UNSCANNABLE_ENTITY &&
        _seatData.screen_id !=
          appConstants.PICK_FRONT_MISSING_OR_UNSCANNABLE_DAMAGED_PACK &&
        _seatData.screen_id !=
          appConstants.PICK_FRONT_MISSING_OR_UNSCANNABLE_DAMAGED_SUBPACK
      ) {
        _putFrontExceptionScreen = "good"
        _damagedQuantity = 0
        _missingQuantity = 0
      }
    } else {
      var data = {}
      if (
        _seatData.screen_id ==
          appConstants.PICK_FRONT_MISSING_DAMAGED_UNSCANNABLE_ENTITY ||
        _seatData.screen_id ==
          appConstants.PUT_FRONT_MISSING_DAMAGED_UNSCANNABLE_ENTITY ||
        _seatData.screen_id ==
          appConstants.PICK_FRONT_MISSING_OR_UNSCANNABLE_DAMAGED_PACK ||
        _seatData.screen_id ==
          appConstants.PICK_FRONT_MISSING_OR_UNSCANNABLE_DAMAGED_SUBPACK
      ) {
        data["event_name"] =
          _seatData.screen_id ===
            appConstants.PICK_FRONT_MISSING_DAMAGED_UNSCANNABLE_ENTITY ||
          _seatData.screen_id ===
            appConstants.PICK_FRONT_MISSING_OR_UNSCANNABLE_DAMAGED_PACK ||
          _seatData.screen_id ===
            appConstants.PICK_FRONT_MISSING_OR_UNSCANNABLE_DAMAGED_SUBPACK
            ? "pick_front_exception"
            : "put_front_exception"
        data["event_data"] = {}
        data["event_data"]["action"] = "confirm_quantity_update"
        data["event_data"]["event"] = _seatData.exception_type
        data["event_data"]["quantity"] = {}
        data["event_data"]["quantity"]["good"] = _goodQuantity
        data["event_data"]["quantity"]["unscannable"] = _unscannableQuantity
        data["event_data"]["quantity"]["missing"] = _missingQuantity
        data["event_data"]["quantity"]["damaged"] = _damagedQuantity
        data["source"] = "ui"
        _damagedQuantity = 0
        _missingQuantity = 0
        _unscannableQuantity = 0
        this.showSpinner()
        utils.postDataToInterface(data, _seatData.seat_name)
      } else {
        data["event_name"] = appConstants.CONFIRM_BIN_FULL_REQUEST
        data["event_data"] = {}
        data["event_data"]["quantity"] = mainstore.getkQQuanity()
        data["source"] = "ui"
        utils.postDataToInterface(data, _seatData.seat_name)
      }
    }
  },

  validateAndSendSpaceUnavailableDataToServer: function() {
    var _allowedQuantity
    _allowedQuantity =
      _seatData.put_quantity > 0 ? _seatData.put_quantity - 1 : 0
    if (_KQQty === _seatData.put_quantity) {
      var data = {}
      data["code"] = resourceConstants.CLIENTCODE_012
      data["level"] = "error"
      data["type"] = appConstants.CLIENT_NOTIFICATION
      data["details"] = [_allowedQuantity]
      _seatData.notification_list[0] = data
    } else if (_KQQty > _allowedQuantity) {
      if (_seatData.notification_list.length == 0) {
        var data = {}
        data["code"] = resourceConstants.SERVERMSGCODE_007
        data["level"] = "error"
        data["type"] = appConstants.CLIENT_NOTIFICATION
        data["details"] = [_allowedQuantity]
        _seatData.notification_list[0] = data
      } else {
        _seatData.notification_list[0].code =
          resourceConstants.SERVERMSGCODE_007
        _seatData.notification_list[0].details = [_allowedQuantity]
        _seatData.notification_list[0].level = "error"
        _seatData.notification_list[0].type = appConstants.CLIENT_NOTIFICATION
      }
      _goodQuantity = 0
    } else {
      var data = {}
      data["event_name"] = "put_front_exception"
      data["event_data"] = {}
      data["event_data"]["action"] = "confirm_quantity_update"
      data["event_data"]["event"] = _seatData.exception_type
      data["event_data"]["quantity"] = _KQQty
      data["source"] = "ui"
      this.showSpinner()
      utils.postDataToInterface(data, _seatData.seat_name)
    }
  },
  validateUnmarkedDamagedData: function() {
    var _allowedQuantity
    _allowedQuantity = _seatData.put_quantity ? _seatData.put_quantity : 0
    if (_damagedQuantity > _allowedQuantity) {
      if (_seatData.notification_list.length == 0) {
        var data = {}
        data["code"] = resourceConstants.CLIENTCODE_012
        data["level"] = "error"
        data["type"] = appConstants.CLIENT_NOTIFICATION
        data["details"] = [_allowedQuantity]
        _seatData.notification_list[0] = data
      } else {
        _seatData.notification_list[0].code = resourceConstants.CLIENTCODE_012
        _seatData.notification_list[0].details = [_allowedQuantity]
        _seatData.notification_list[0].level = "error"
        _seatData.notification_list[0].type = appConstants.CLIENT_NOTIFICATION
      }
      _damagedQuantity = 0
    } else {
      var data = {}
      if (_seatData.unmarked_container) {
        data["event_name"] = "put_front_exception"
        data["event_data"] = {}
        data["event_data"]["action"] = "confirm_quantity_update"
        data["event_data"]["event"] = _seatData.exception_type
        data["event_data"]["quantity"] = _damagedQuantity
        data["source"] = "ui"
      } else {
        data["event_name"] = "put_front_exception"
        data["event_data"] = {}
        data["event_data"]["action"] = "finish_exception"
        data["event_data"]["event"] = _seatData.exception_type
        data["source"] = "ui"
      }

      this.showSpinner()
      utils.postDataToInterface(data, _seatData.seat_name)
    }
  },

  getToteException: function() {
    if (_seatData.hasOwnProperty("exception_msg")) {
      return _seatData.exception_msg[0]
    } else {
      return null
    }
  },
  getDrawerFlag: function() {
    if (_seatData.rack_details) {
      return _seatData.rack_details.slot_type === "drawer" ? true : false
    }
  },
  getSRKQQuantity: function() {
    if (_seatData["scan_details"] == undefined) {
      var data = {
        scan_details: {
          current_qty: _seatData.Current_box_details[0]
            ? _seatData.Current_box_details[0].Box_Actual_Qty
            : 0,
          total_qty: 0,
          kq_allowed:
            _seatData.enable_kq === true ? true : false /* BSS-10640 */
        }
      }
      return data.scan_details
    } else {
      return _seatData["scan_details"]
    }
  },
  getSlotType: function() {
    if (_seatData.rack_details) {
      return _seatData.rack_details.slot_type
        ? _seatData.rack_details.slot_type
        : "none"
    }
  },
  getPeripheralData: function(data) {
    _seatData.scan_allowed = false
    utils.getPeripheralData(data, _seatData.seat_name)
  },
  getOrphanItemData: function(data) {
    _seatData.scan_allowed = true
    utils.getOrphanItemData(data, _seatData.seat_name)
  },
  getBOIConfigData: function(data) {
    utils.getBOIConfig()
  },
  getItemData: function() {
    if (_seatData.utility) return _seatData.utility
  },
  getLoaderStatus: function() {
    if (_seatData.loader) return _seatData.loader
  },
  getDynamicColumnWidth: function() {
    var rowconfig = []
    if (_seatData.utility.length) {
      var noOfCol = Object.keys(_seatData.utility[_seatData.utility.length - 1])

      if (noOfCol.length == 5)
        rowconfig = [
          { width: "10%" },
          { width: "25%" },
          { width: "15%" },
          {
            width: "40%",
            "justify-content": "flex-start",
            "padding-left": "50px"
          },
          { width: "10%" }
        ]
      else
        rowconfig = [
          { width: "15%" },
          { width: "25%" },
          { width: "15%" },
          {
            width: "45%",
            "justify-content": "flex-start",
            "padding-left": "50px"
          }
        ]
    }
    return rowconfig
  },
  updateSeatData: function(data, type, status, method) {
    var dataNotification = {}

    if (type === "pptl") {
      _seatData["screen_id"] = appConstants.PPTL_MANAGEMENT
      if (_seatData["header_steps"]) {
        _seatData["header_steps"] = undefined
      }
      _peripheralScreen = true
    } else if (type === "barcode_scanner") {
      _seatData["screen_id"] = appConstants.SCANNER_MANAGEMENT
      if (_seatData["header_steps"]) {
        _seatData["header_steps"] = undefined
      }
      _peripheralScreen = true
    } else if (type === "orphanSearch" || type === "orphanSearchStart") {
      _seatData["screen_id"] = appConstants.ITEM_SEARCH_RESULT
      _peripheralScreen = true
    } else if (type === "BOI_CONFIG") {
      if (data.enable_conversion) {
        this.setUnitConversionAllowed(data.enable_conversion)
        this.setUOMConversionFactor(data.dims_conversion_factor)
        this.setUOMDisplayUnit(data.dims_display_uom)
      }
      this.setBOIConfig(data || null)
      this.updateSeatData(
        (data && data.item_search_enabled) || false,
        "ITEM_SEARCH_CONFIG"
      )
      this.updateSeatData(
        (data && data.login_scanner_enabled) || false,
        "LOGIN_SCANNER_CONFIG"
      )
      this.updateSeatData(
        (data && data.enable_conversion) || false,
        "ENABLE_UNIT_CONVERSION"
      )
    } else if (type === "ITEM_SEARCH_CONFIG") {
      this.setOrphanSearchAllowed(data)
    } else if (type === "LOGIN_SCANNER_CONFIG") {
      this.setLoginScannerAllowed(data)
    } else if (type == "itemSearch") {
      _seatData["screen_id"] = appConstants.ITEM_SEARCH
      _peripheralScreen = true
    }

    if (status == "success") {
      if (method == "POST")
        dataNotification["code"] = resourceConstants.CLIENTCODE_006
      else dataNotification["code"] = resourceConstants.CLIENTCODE_015
      dataNotification["level"] = "info"
      this.generateNotification(dataNotification)
    } else if (status == "fail") {
      if (method == "POST")
        dataNotification["code"] = resourceConstants.CLIENTCODE_007
      else dataNotification["code"] = resourceConstants.CLIENTCODE_016
      dataNotification["level"] = "error"
      this.generateNotification(dataNotification)
    } else if (status == "409") {
      dataNotification["code"] = resourceConstants.CLIENTCODE_409_PERIPHERAL
      dataNotification["level"] = "error"
      this.generateNotification(dataNotification)
    } else if (status == "400") {
      dataNotification["code"] = resourceConstants.CLIENTCODE_400
      dataNotification["level"] = "error"
      this.generateNotification(dataNotification)
    } else {
      if (_seatData && _seatData.notification_list.length > 0) {
        _seatData.notification_list[0]["code"] = null
        _seatData.notification_list[0].description = ""
      }
    }
    if (_seatData) {
      _seatData["utility"] = data
      _seatData["loader"] = data === true ? true : false
      this.setCurrentSeat(_seatData)
    }
    console.log(_seatData)
  },

  getUtility: function() {
    return _utility
  },
  convert_textbox: function(action, index) {
    _action = action
    _binId = index
  },
  update_peripheral: function(data, method, index) {
    utils.updatePeripherals(data, method, _seatName)
  },
  generateNotification: function(data) {
    if (_seatData.notification_list.length > 0) {
      _seatData.notification_list[0]["code"] = data.code
      _seatData.notification_list[0].level = data.level
      _seatData.notification_list[0].type = appConstants.CLIENT_NOTIFICATION
    } else {
      var notification_list = {
        code: data.code,
        level: data.level,
        details: [],
        description: "",
        type: appConstants.CLIENT_NOTIFICATION
      }
      _seatData.notification_list[0] = notification_list
    }
  },
  getHeaderMessg: function(data) {
    if (_seatData && _seatData.header_msge_list) {
      return _seatData.header_msge_list[0]
    }
  },

  getInvoiceStatus: function(data) {
    if (_seatData.invoice_required) {
      var invoiceData = { invoiceFlag: true, invoiceId: _seatData.invoice_id }
      return invoiceData
    } else {
      return null
    }
  },

  getInvoiceType: function(data) {
    if (_seatData.invoice_type) {
      return _seatData.invoice_type
    }
  },

  getKQQuantity: function() {
    if (_seatData["scan_details"] == undefined) {
      var data = {
        scan_details: {
          current_qty: _seatData.Current_box_details[0]
            ? _seatData.Current_box_details[0].Actual_qty
            : 0,
          total_qty: 0,
          kq_allowed: _seatData.enable_kq === true ? true : false
        }
      }
      return data.scan_details
    } else {
      return _seatData["scan_details"]
    }
  },
  getBinCoordinatePlotting: function() {
    if (_seatData.hasOwnProperty("bin_coordinate_plotting"))
      return _seatData.bin_coordinate_plotting
  },

  getCurrentMtu: function(){
    if (_seatData.hasOwnProperty("selected_dock_station_label"))
      return _seatData.selected_dock_station_label
  },

  isToteFlowEnabled: function(){
    if (_seatData.hasOwnProperty("is_flow_scan_totes"))
      return _seatData.is_flow_scan_totes
  },

  getStageButtonHideStatus: function() {
    if (_seatData.hasOwnProperty("auto_stage")) return _seatData.auto_stage
  },
  getUDPMapDetails: function() {
    var ppsBinIds = {}
    var ppsBinIdColors = {}
    var leftBins = []
    var rightBins = []
    var centerBins = []
    if (_seatData["ppsbin_list"]) {
      _seatData["ppsbin_list"].forEach(function(bin) {
        if (bin["direction"] === "left") {
          leftBins.push(bin)
        } else if (bin["direction"] === "right") {
          rightBins.push(bin)
        } else if (bin["direction"] === "center") {
          centerBins.push(bin)
        }
      })
      leftBins.sort(function(a, b) {
        return (
          (a["orig_coordinate"] || a["coordinate"])[1] -
          (b["orig_coordinate"] || b["coordinate"])[1]
        )
      })
      rightBins.sort(function(a, b) {
        return (
          (a["orig_coordinate"] || a["coordinate"])[1] -
          (b["orig_coordinate"] || b["coordinate"])[1]
        )
      })
      centerBins.sort(function(a, b) {
        return (
          (a["orig_coordinate"] || a["coordinate"])[1] -
          (b["orig_coordinate"] || b["coordinate"])[1]
        )
      })

      leftBins = leftBins.concat(rightBins, centerBins)
      leftBins.forEach(function(bin) {
        ppsBinIds[bin["ppsbin_id"]] = bin["direction"]
      })
      leftBins.forEach(function(bin) {
        ppsBinIdColors[bin["ppsbin_id"]] = bin["ppsbin_light_color"]
      })
    }
    return {
      ppsBinIds: ppsBinIds,
      ppsBinIdColors: ppsBinIdColors
    }
  },

  getDockStationList: function() {
    var ppsBinIds = {}
    var ppsBinIdColors = {}
    var leftBins = []
    var rightBins = []
    var centerBins = []
    var centerTopBins = []
    if (_seatData["dock_station_list"]) {
      _seatData["dock_station_list"].forEach(function(bin) {
        if (bin["direction"] === "left") {
          leftBins.push(bin)
        } else if (bin["direction"] === "right") {
          rightBins.push(bin)
        } else if (bin["direction"] === "center") {
          centerBins.push(bin)
        } else if (bin["direction"] === "top") {
          centerTopBins.push(bin)
        }
      })
      leftBins = leftBins.concat(rightBins, centerBins, centerTopBins)
      leftBins.forEach(function(bin) {
        ppsBinIds[bin["dock_station_label"]] = bin["direction"]
      })
      leftBins.forEach(function(bin) {
        ppsBinIdColors[bin["dock_station_label"]] = bin["ppsbin_light_color"]
      })
    }
    return {
      ppsBinIds: ppsBinIds,
      ppsBinIdColors: ppsBinIdColors
    }
  },

  getDockedList: function() {
    var dockedGroup = []
    if (_seatData["dock_station_list"]) {
      _seatData["dock_station_list"].forEach(function(bin) {
        if (bin["status"] === "docked") {
          dockedGroup.push(bin["dock_station_label"])
        }
      })
    }
    return dockedGroup
  },
  getUndockAwaitedList: function() {
    var undockAwaited = []
    if (_seatData["dock_station_list"]) {
      _seatData["dock_station_list"].forEach(function(bin) {
        if (bin["status"] === "undock_awaited") {
          undockAwaited.push(bin["dock_station_label"])
        }
      })
    }
    return undockAwaited
  },

  getPrintReadyList: function() {
    var printReady = []
    if (_seatData["dock_station_list"]) {
      _seatData["dock_station_list"].forEach(function(bin) {
        if (bin["status"] === "print_ready") {
          printReady.push(bin["dock_station_label"])
        }
      })
    }
    return printReady
  },

  getWrongUndockList: function() {
    var wrongUndockList = []
    if (_seatData["dock_station_list"]) {
      _seatData["dock_station_list"].forEach(function(bin) {
        if (bin["status"] === "wrong_undock") {
          wrongUndockList.push(bin["dock_station_label"])
        }
      })
    }
    return wrongUndockList
  },

  getMissingItemList: function() {
    return _seatData["missing_items"] || []
  },
  getPreviousPutDetails: function() {
    return _seatData.previous_put_details || []
  },
  getPreviousPickDetails: function() {
    return _seatData.previous_pick_details
  },
  getSelectedTotes: function() {
    var selectedTotes = []
    if (_seatData["ppsbin_list"]) {
      _seatData["ppsbin_list"].forEach(function(bin) {
        if (bin.totes_associated === "true") {
          selectedTotes.push(bin["ppsbin_id"])
        }
      })
    }
    return selectedTotes
  },
  _getSelectedBinID: function() {
    var selectedBin = []
    if (_seatData["ppsbin_list"]) {
      _seatData["ppsbin_list"].forEach(function(bin) {
        if (bin.selected_state) {
          selectedBin.push(bin["ppsbin_id"])
        }
      })
    }
    return selectedBin
  },

  _getRollCageStatus: function() {
    var rollCageStatus = false
    if (_seatData) {
      rollCageStatus =
        _seatData.roll_cage_flow && _currentSeat == appConstants.PICK_FRONT
    }
    return rollCageStatus
  },

  getScreenData: function() {
    var data = {}

    //since OrigBinUse Flag is needed in all the screens.
    data["OrigBinUse"] = this._getOrigBinUse()
    data["SeatType"] = this.getSeatType()
    data["ppsMode"] = this.getPpsMode()
    data["username"] = this.getUsername()

    switch (_screenId) {
      case appConstants.PICK_FRONT_WAITING_FOR_MSU:
        data["PickFrontNavData"] = this.getNavData()
        data["PickFrontServerNavData"] = this.getServerNavData()
        data["PickFrontScreenId"] = this.getScreenId()
        data["PickFrontExceptionData"] = this.getExceptionData()
        data["PickFrontNotification"] = this.getNotificationData()
        data["PickFrontExceptionStatus"] = this.getExceptionStatus()
        data[
          "PickFrontChecklistOverlayStatus"
        ] = this.getChecklistOverlayStatus()
        data["PreviousDetails"] = this.getPreviousPickDetails()
        data["rollCageStatus"] = this._getRollCageStatus()
        data["groupOrientation"] = this._getBinMapOrientation()
        data["BinMapDetails"] = this._getBinMapDetails()
        data["UndockAwaited"] = this._getUndockAwaitedGroup()
        data["DockedGroup"] = this._getDockedGroup()
        break

      case appConstants.PICK_FRONT_SKIP_TOTE:
      case appConstants.PICK_FRONT_DOCK_TOTE:
        data["PickFrontNavData"] = this.getNavData()
        data["PickFrontServerNavData"] = this.getServerNavData()
        data["PickFrontScreenId"] = this.getScreenId()
        data["PickFrontExceptionData"] = this.getExceptionData()
        data["PickFrontNotification"] = this.getNotificationData()
        data["PickFrontExceptionStatus"] = this.getExceptionStatus()
        ;(data["udpBinMapDetails"] = this.getUDPMapDetails()),
          (data["groupOrientation"] = this._getBinMapOrientation()),
          (data["selectedTotes"] = this.getSelectedTotes())
        data["PickCurrentBin"] = this._getSelectedBinID()
        data["PickFrontChecklistData"] = this.getChecklistDockData()
        data["PickFrontChecklistIndex"] = this.getChecklistDockIdx()
        data["PickFrontCancelScan"] = this.cancelScanDetails()
        data["PickFrontSkipDockingBtnEnable"] = this.getButtonStatus()
        break

      case appConstants.UNIVERSAL_DOCK_UNDOCK:
        data["PickBackNavData"] = this.getNavData()
        data["PickBackNotification"] = this.getNotificationData()
        data["PickBackScreenId"] = this.getScreenId()
        data["PickBackServerNavData"] = this.getServerNavData()
        data["PickBackExceptionStatus"] = this.getExceptionStatus()
        data["PickBackExceptionData"] = this.getExceptionData()
        data["pickBackCancelButtonData"] = this.cancelScanDetails()
        data["SplitScreenFlag"] = this._getSplitScreenFlag()
        data["isPrinterVisible"] = this.getPrinterVisibility()
        data["printerInfo"] = this.getPrinterInfo()
        data["dockHeader"] = this.getDockHeader()
        data["dockChecklistData"] = this.getChecklistDockUndockData(
          "dock_actions"
        )
        data["dockChecklistIndex"] = this.getChecklistDockUndockIndex(
          "dock_index"
        )

        data["undockHeader"] = this.getUnDockHeader()
        data["undockChecklistData"] = this.getChecklistDockUndockData(
          "undock_actions"
        )
        data["undockChecklistIndex"] = this.getChecklistDockUndockIndex(
          "undock_index"
        )

        data["udpBinMapDetails"] = this.getDockStationList()
        data["DockedGroup"] = this.getDockedList()
        data["UndockAwaited"] = this.getUndockAwaitedList()
        data["PrintReady"] = this.getPrintReadyList()
        data["WrongUndock"] = this.getWrongUndockList()
        break

        case appConstants.WAIT_FOR_MTU:
        case appConstants.SELECT_MTU_POINT:
       // data["PickFrontExceptionData"] = this.getExceptionData()
       // data["PickFrontExceptionStatus"] = this.getExceptionStatus()
        data["PickFrontNavData"] = this.getNavData()
        data["PickFrontServerNavData"] = this.getServerNavData()
        data["PickFrontNotification"] = this.getNotificationData()
        data["PickFrontScreenId"] = this.getScreenId()
        //data["groupOrientation"] = this._getBinMapOrientation()

        data["udpBinMapDetails"] = this.getDockStationList()
        // data["DockedGroup"] = this.getDockedList()
        // data["UndockAwaited"] = this.getUndockAwaitedList()
        // data["PrintReady"] = this.getPrintReadyList()
        // data["WrongUndock"] = this.getWrongUndockList()
        // data["selectedTotes"] = this.getSelectedTotes()
        // data["PickCurrentBin"] = this._getSelectedBinID()
        // data["PreviousDetails"] = this.getPreviousPickDetails()
        // data["SlotType"] = this.getSlotType()
        // data["isDrawer"] = this.getDrawerFlag()
        // data["PickFrontRackDetails"] = this.getRackDetails()
        // data["PickFrontProductDetails"] = this.productDetails()
        // data["undockAwaited"] = this._getUndockAwaitedGroup()
        break;
        
      case appConstants.REMOVE_ALL_TOTES:
          data["PickFrontNavData"] = this.getNavData()
          data["PickFrontServerNavData"] = this.getServerNavData()
          data["PickFrontScreenId"] = this.getScreenId()
          data["PickFrontRackDetails"] = this.getRackDetails()
          data["udpBinMapDetails"] = this.getDockStationList()
          data["getCurrentMtu"] = this.getCurrentMtu()
          data["isToteFlowEnabled"]  = this.isToteFlowEnabled()
          // data["PickFrontNotification"] = this.getNotificationData()
          break;

        case appConstants.SCAN_EMPTY_TOTE:
            data["PickFrontNavData"] = this.getNavData()
            data["PickFrontServerNavData"] = this.getServerNavData()
            data["PickFrontScreenId"] = this.getScreenId()
            data["SlotType"] = this.getSlotType()
            data["PickFrontRackDetails"] = this.getRackDetails()
            data["udpBinMapDetails"] = this.getDockStationList()
            data["getCurrentMtu"] = this.getCurrentMtu()
            data["PickFrontNotification"] = this.getNotificationData()
            break;

      case appConstants.SCAN_EMPTY_SLOT:
        data["PickFrontNavData"] = this.getNavData()
        data["PickFrontServerNavData"] = this.getServerNavData()
        data["PickFrontScreenId"] = this.getScreenId()
        data["SlotType"] = this.getSlotType()
        data["PickFrontRackDetails"] = this.getRackDetails()
        data["udpBinMapDetails"] = this.getDockStationList()
        data["getCurrentMtu"] = this.getCurrentMtu()
        data["PickFrontNotification"] = this.getNotificationData()
        break;
        
      case appConstants.PICK_FRONT_SLOT_SCAN:
        data["PickFrontNavData"] = this.getNavData()
        data["PickFrontServerNavData"] = this.getServerNavData()
        data["PickFrontScreenId"] = this.getScreenId()
        data["PickFrontRackDetails"] = this.getRackDetails()
        data["SlotType"] = this.getSlotType()
        data["PickFrontExceptionData"] = this.getExceptionData()
        data["PickFrontNotification"] = this.getNotificationData()
        data["PickFrontExceptionStatus"] = this.getExceptionStatus()
        data["PickFrontCarryingUnitBtnEnable"] = this.getButtonStatus()
        break

      case appConstants.PICK_FRONT_UNDOCK_TOTE:
        data["PickFrontExceptionData"] = this.getExceptionData()
        data["PickFrontExceptionStatus"] = this.getExceptionStatus()
        data["PickFrontNotification"] = this.getNotificationData()
        data["PickFrontNavData"] = this.getNavData()
        data["PickFrontServerNavData"] = this.getServerNavData()
        data["PickFrontScreenId"] = this.getScreenId()
        data["groupOrientation"] = this._getBinMapOrientation()
        data["udpBinMapDetails"] = this.getUDPMapDetails()
        data["selectedTotes"] = this.getSelectedTotes()
        data["PickCurrentBin"] = this._getSelectedBinID()
        data["undockAwaited"] = this._getUndockAwaitedGroup()

        break

      case appConstants.PICK_FRONT_PACKING_CONTAINER_SCAN:
        data["PickFrontBoxOrderDetails"] = this.getOrderDetails()
        data["PickFrontNotification"] = this.getNotificationData()

      case appConstants.PICK_FRONT_CONTAINER_SCAN:
        data["PickFrontNavData"] = this.getNavData()
        data["PickFrontServerNavData"] = this.getServerNavData()
        data["PickFrontScreenId"] = this.getScreenId()
        data["PickFrontBoxDetails"] = this.getBoxDetails()
        data["PickFrontRackDetails"] = this.getRackDetails()
        data["SlotType"] = this.getSlotType()
        data["PickFrontExceptionData"] = this.getExceptionData()
        data["PickFrontNotification"] = this.getNotificationData()
        data["PickFrontExceptionStatus"] = this.getExceptionStatus()
        data[
          "PickFrontChecklistOverlayStatus"
        ] = this.getChecklistOverlayStatus()
        break
      case appConstants.PICK_FRONT_PACKING_ITEM_SCAN:
        data["PickFrontPackingButtonType"] = this.getPickFrontButtonType()
        data["PickFrontPackingButtonDisable"] = this.getPickFrontButtonStatus()
        data[
          "PickFrontPackingCancelStatus"
        ] = this.getPickFrontPackingCancelStatus()
        data["PickFrontBoxOrderDetails"] = this.getOrderID()
        data["PickFrontNotification"] = this.getNotificationData()

      case appConstants.PICK_FRONT_MORE_ITEM_SCAN:
      case appConstants.PICK_FRONT_WORKING_TABLE:
        data["PickFrontNavData"] = this.getNavData()
        data["PickFrontServerNavData"] = this.getServerNavData()
        data["PickFrontScreenId"] = this.getScreenId()
        data["PickFrontScanDetails"] = this.scanDetails()
        data["PickFrontChecklistDetails"] = this.getChecklistDetails()
        data["PickFrontChecklistIndex"] = this.getChecklistIndex()
        data["PickFrontSlotDetails"] = this.getCurrentSlot()
        data["SplitScreenFlag"] = this._getSplitScreenFlag()
        data["printerInfo"] = this.getPrinterInfo()
        data["isPrinterVisible"] = this.getPrinterVisibility()
        data["BinMapDetails"] = this._getBinMapDetails()
        data["BinMapGroupDetails"] = this.getSelectedBinGroup()
        data["PickFrontBinData"] = this.getBinData()
        data["PickFrontScanDetails"] = this.scanDetails()
        data["PickFrontProductDetails"] = this.productDetails()
        data["PickFrontItemUid"] = this.getItemUid()
        data["PickFrontExceptionData"] = this.getExceptionData()
        data["PickFrontNotification"] = this.getNotificationData()
        data["PickFrontExceptionStatus"] = this.getExceptionStatus()
        data[
          "PickFrontChecklistOverlayStatus"
        ] = this.getChecklistOverlayStatus()
        data["SplitScreenFlag"] = this._getSplitScreenFlag()
        data["PickFrontButtonType"] = this.getPickFrontButtonType()
        data["PickFrontButtonStatus"] = this.getPickFrontButtonStatus()
        data["PickFrontCancelScan"] = this.cancelScanDetails()
        data["PickFrontReprintEnabled"] = this.isReprintEnabled()
        data["PickFrontReprintPopUp"] = this.isReprintPopUpEnabled()
        break

      case appConstants.PICK_FRONT_PACKING_BOX:
        data["PickFrontNavData"] = this.getNavData()
        data["PickFrontServerNavData"] = this.getServerNavData()
        data["PickFrontScreenId"] = this.getScreenId()
        data["PickFrontScanDetails"] = this.scanDetails()
        data["PickFrontChecklistDetails"] = this.getChecklistDetails()
        data["PickFrontChecklistIndex"] = this.getChecklistIndex()
        data["PickFrontSlotDetails"] = this.getCurrentSlot()
        data["BinMapDetails"] = this._getBinMapDetails()
        data["BinMapGroupDetails"] = this.getSelectedBinGroup()
        data["PickFrontBinData"] = this.getBinData()
        data["PickFrontScanDetails"] = this.scanDetails()
        data["PickFrontProductDetails"] = this.productDetails()
        data["PickFrontItemUid"] = this.getItemUid()
        data["PickFrontExceptionData"] = this.getExceptionData()
        data["PickFrontNotification"] = this.getNotificationData()
        data["PickFrontExceptionStatus"] = this.getExceptionStatus()
        data[
          "PickFrontChecklistOverlayStatus"
        ] = this.getChecklistOverlayStatus()
        data["SplitScreenFlag"] = this._getSplitScreenFlag()
        data["PickFrontButtonType"] = this.getPickFrontButtonType()
        data["PickFrontButtonStatus"] = this.getPickFrontButtonStatus()
        data["PickFrontCancelScan"] = this.cancelScanDetails()
        data["PickFrontPackingBoxType"] = this.getPackingBoxType()
        break

      case appConstants.PER_ITEM_PRINT:
        data["PickFrontNavData"] = this.getNavData()
        data["PickFrontServerNavData"] = this.getServerNavData()
        data["PickFrontScreenId"] = this.getScreenId()
        data["BinMapDetails"] = this._getBinMapDetails()
        data["PickFrontExceptionData"] = this.getExceptionData()
        data["BinMapGroupDetails"] = this.getSelectedBinGroup()
        data["PrintScanDetails"] = this.getQuantityDetails()
        data["PickCurrentBin"] = this.getCurrentSelectedBin()
        data["SplitScreenFlag"] = this._getSplitScreenFlag()
        data["PrintCancelScan"] = this.cancelScanDetails()
        data["PickFrontExceptionStatus"] = this.getExceptionStatus()
        data["PickFrontNotification"] = this.getNotificationData()
        break

      case appConstants.PICK_FRONT_REPRINT_EXCEPTION:
        data["PickFrontNavData"] = this.getNavData()
        data["PickFrontServerNavData"] = this.getServerNavData()
        data["PickFrontScreenId"] = this.getScreenId()
        data["PickFrontExceptionData"] = this.getExceptionData()
        data["PickFrontNotification"] = this.getNotificationData()
        break

      case appConstants.PICK_FRONT_SCAN_PACKS:
        data["PickFrontNavData"] = this.getNavData()
        data["PickFrontServerNavData"] = this.getServerNavData()
        data["PickFrontScreenId"] = this.getScreenId()
        data["PickFrontExceptionData"] = this.getExceptionData()
        data["PickFrontBoxOrderDetails"] = this.getOrderDetails()
        data["PickFrontBinData"] = this.getBinData()
        data["BinMapDetails"] = this._getBinMapDetails()
        data["BinMapGroupDetails"] = this.getSelectedBinGroup()
        data["PickFrontScanDetails"] = this.scanDetails()
        data["PickFrontProductDetails"] = this.productDetails()
        data["PickFrontItemUid"] = this.getItemUid()
        data["SplitScreenFlag"] = this._getSplitScreenFlag()
        data["PickFrontNotification"] = this.getNotificationData()
        data["PickFrontExceptionStatus"] = this.getExceptionStatus()
        data["PickFrontRackDetails"] = this.getRackDetails()
        data["PickFrontProductDetails"] = this.productDetails()
        data["PickFrontRackTypeMPU"] = this.getRackType()
        break
      case appConstants.PICK_FRONT_PACKING_PPTL_PRESS:
        data["PickFrontPackingButtonType"] = this.getPickFrontButtonType()
        data["PickFrontPackingButtonDisable"] = this.getPickFrontButtonStatus()
        data["PickFrontNotification"] = this.getNotificationData()

      case appConstants.PICK_FRONT_PPTL_PRESS:
        data["PickFrontNavData"] = this.getNavData()
        data["PickFrontServerNavData"] = this.getServerNavData()
        data["PickFrontScreenId"] = this.getScreenId()
        data["PickFrontScanDetails"] = this.scanDetails()
        data["PickFrontProductDetails"] = this.productDetails()
        data["PickFrontCancelScan"] = this.cancelScanDetails()
        data["PickFrontChecklistDetails"] = this.getChecklistDetails()
        data["PickFrontChecklistIndex"] = this.getChecklistIndex()
        data["PickFrontSlotDetails"] = this.getCurrentSlot()
        data["PickFrontBinData"] = this.getBinData()
        data["PickFrontExceptionData"] = this.getExceptionData()
        data["PickFrontNotification"] = this.getNotificationData()
        data["PickFrontExceptionStatus"] = this.getExceptionStatus()
        data["PickFrontSearchStatus"] = this.getItemSearchWindow()
        data[
          "PickFrontChecklistOverlayStatus"
        ] = this.getChecklistOverlayStatus()
        data["BinMapDetails"] = this._getBinMapDetails()
        data["PickFrontButtonType"] = this.getPickFrontButtonType()
        data["PickFrontButtonStatus"] = this.getPickFrontButtonStatus()
        data["SplitScreenFlag"] = this._getSplitScreenFlag()
        data["BinMapGroupDetails"] = this.getSelectedBinGroup()
        data["PickFrontItemUid"] = this.getItemUid()
        data["PickFrontReprintEnabled"] = this.isReprintEnabled()
        data["PickFrontReprintPopUp"] = this.isReprintPopUpEnabled()
        data["printerInfo"] = this.getPrinterInfo()
        data["isPrinterVisible"] = this.getPrinterVisibility()
        break
      case appConstants.ITEM_SEARCH:
        data["PickFrontScreenId"] = this.getScreenId()
        data["PutBackScreenId"] = this.getScreenId()
        data["PutFrontScreenId"] = this.getScreenId()
        data["PickBackScreenId"] = this.getScreenId()
        data["AuditScreenId"] = this.getScreenId()
        data["PrePutScreenId"] = this.getScreenId()

        break
      case appConstants.ITEM_SEARCH_RESULT:
        data["PickFrontScreenId"] = this.getScreenId()
        data["PutBackScreenId"] = this.getScreenId()
        data["PutFrontScreenId"] = this.getScreenId()
        data["PickBackScreenId"] = this.getScreenId()
        data["AuditScreenId"] = this.getScreenId()
        data["PrePutScreenId"] = this.getScreenId()
        data["ItemSearchData"] = this.getItemData()
        data["rowconfig"] = this.getDynamicColumnWidth()
        data["loaderState"] = this.getLoaderStatus()
        break

      default:
    }
    return data
  }
})

AppDispatcher.register(function(payload) {
  var action = payload.action
  switch (action.actionType) {
    case appConstants.OPEN_AUDIT_MODAL:
      mainstore.setAuditModalStatus(action.data)
      break
    case appConstants.SET_CANCEL_BUTTON_STATUS:
      mainstore.setCancelButtonStatus(action.data)
      break
    case appConstants.TOGGLE_BIN_SELECTION:
      mainstore.toggleBinSelection(action.bin_id)
      mainstore.emitChange()
      break
    case appConstants.STAGE_ONE_BIN:
      mainstore.showSpinner()
      mainstore.stageOneBin()
      mainstore.emitChange()
      break

    case appConstants.STAGE_ALL:
      mainstore.showSpinner()
      mainstore.stageAllBin()
      mainstore.emitChange()
      break
    case appConstants.WEBSOCKET_CONNECT:
      utils.connectToWebSocket(action.data)
      mainstore.emit(CHANGE_EVENT)
      break
    case appConstants.SET_CURRENT_SEAT:
      console.log("=======> mainstore.js -> case appConstants.SET_CURRENT_SEAT");
      mainstore.setCurrentSeat(action.data)
      mainstore.emit(CHANGE_EVENT)
      break
    case appConstants.SET_CURRENT_STATION_ID:
      mainstore.setCurrentStationId(action.data)
      mainstore.emit(CHANGE_EVENT)
      break
    case appConstants.POPUP_VISIBLE:
      setPopUpVisible(action.status)
      break
    case appConstants.HIDE_SPINNER:
      mainstore.hideSpinner()
      mainstore.emit(CHANGE_EVENT)
      break
    case appConstants.POST_DATA_TO_TOWER:
      mainstore.postDataToTower(action.data)
      mainstore.emit(CHANGE_EVENT)
      break
    case appConstants.POST_DATA_TO_INTERFACE:
      mainstore.showSpinner()
      mainstore.postDataToInterface(action.data)
      if (
        payload.action.data.event_name === appConstants.BIN_FULL_REQUEST ||
        payload.action.data.event_name === appConstants.BOX_FULL_REQUEST ||
        payload.action.data.event_name === appConstants.BOX_FULL_REQUEST
      )
       mainstore.hideSpinner()
      mainstore.emit(CHANGE_EVENT)
      break
    case appConstants.RESET_NUMPAD:
      mainstore.emit(CHANGE_EVENT)
      break
    case appConstants.LOAD_MODAL:
      mainstore.setModalContent(action.data)
      mainstore.emit(CHANGE_EVENT)
      break
    case appConstants.SET_SERVER_MESSAGES:
      console.log("=======> mainstore.js -> case appConstants.SET_SERVER_MESSAGES");
      mainstore.setServerMessages()
      mainstore.emit(CHANGE_EVENT)
      break
    case appConstants.CHANGE_LANGUAGE:
      mainstore.changeLanguage(action.data)
      mainstore.emit(CHANGE_EVENT)
      break
    case appConstants.SET_LANGUAGE:
      mainstore.emit(CHANGE_EVENT)
      break
    case appConstants.LOG_ERROR:
      mainstore.logError(action.data)
      break
    case appConstants.ENABLE_EXCEPTION:
      mainstore.enableException(action.data)
      mainstore.emitChange()
      break
    case appConstants.ENABLE_SEARCH:
      mainstore.enableSearch(action.data)
      mainstore.emitChange()
      break
    case appConstants.SET_ACTIVE_EXCEPTION:
      mainstore.setActiveException(action.data)
      mainstore.emitChange()
      break
    case appConstants.UPDATE_KQ_QUANTITY:
      mainstore.setKQQuanity(action.data)
      mainstore.emitChange()
      break
    case appConstants.UPDATE_GOOD_QUANTITY:
      mainstore.setGoodQuanity(action.data)
      mainstore.emitChange()
      break
    case appConstants.UPDATE_DAMAGED_QUANTITY:
      mainstore.setDamagedQuanity(action.data)
      mainstore.emitChange()
      break
    case appConstants.UPDATE_MISSING_QUANTITY:
      mainstore.setMissingQuanity(action.data)
      mainstore.emitChange()
      break
    case appConstants.UPDATE_UNSCANNABLE_QUANTITY:
      mainstore.setUnscannableQuanity(action.data)
      mainstore.emitChange()
      break
    case appConstants.CHANGE_PUT_FRONT_EXCEPTION_SCREEN:
      mainstore.setPutFrontExceptionScreen(action.data)
      mainstore.emitChange()
      break
    case appConstants.VALIDATE_UNMARKED_DAMAGED_DATA:
      mainstore.validateUnmarkedDamagedData()
      mainstore.emitChange()
      break
    case appConstants.CHANGE_PUT_BACK_EXCEPTION_SCREEN:
      mainstore.setPutBackExceptionScreen(action.data)
      mainstore.emitChange()
      break
    case appConstants.CHANGE_AUDIT_EXCEPTION_SCREEN:
      mainstore.setAuditExceptionScreen(action.data)
      mainstore.emitChange()
      break
    case appConstants.CHANGE_PICK_FRONT_EXCEPTION_SCREEN:
      mainstore.setPickFrontExceptionScreen(action.data)
      mainstore.emitChange()
      break
    case appConstants.VALIDATE_AND_SEND_DATA_TO_SERVER:
      mainstore.validateAndSendDataToServer()
      mainstore.emitChange()
      break
    case appConstants.VALIDATE_AND_SEND_SPACE_UNAVAILABLE_DATA_TO_SERVER:
      mainstore.validateAndSendSpaceUnavailableDataToServer()
      mainstore.emitChange()
      break
    case appConstants.PERIPHERAL_DATA:
      mainstore.getPeripheralData(action.data)
      mainstore.emitChange()
      break
    case appConstants.ORPHAN_ITEM_DATA:
      mainstore.getOrphanItemData(action.data)
      mainstore.emitChange()
      break
    case appConstants.GET_BOI_CONFIG:
      mainstore.getBOIConfigData()
      mainstore.emitChange()
      break
    case appConstants.UPDATE_SEAT_DATA:
      mainstore.showSpinner()
      mainstore.updateSeatData(
        action.data,
        action.type,
        action.status,
        action.method
      )
      mainstore.emitChange()
      break

    case appConstants.CONVERT_TEXTBOX:
      mainstore.convert_textbox(action.data, action.index)
      mainstore.emitChange()
      break
    case appConstants.UPDATE_PERIPHERAL:
      mainstore.showSpinner()
      mainstore.update_peripheral(action.data, action.method, action.index)
      mainstore.emitChange()
      break
    case appConstants.GENERATE_NOTIFICATION:
      mainstore.generateNotification(action.data)
      mainstore.emitChange()
      break
    case appConstants.CLEAR_NOTIFICATIONS:
      mainstore.clearNotifications()
      mainstore.emitChange()
    default:
      return true
  }
})

module.exports = mainstore

},{"../actions/CommonActions":181,"../config/navConfig":241,"../constants/appConstants":242,"../constants/resourceConstants":244,"../constants/svgConstants":245,"../dispatchers/AppDispatcher":246,"../serverMessages/chinese":248,"../serverMessages/dutch":249,"../serverMessages/english":250,"../serverMessages/french":251,"../serverMessages/german":252,"../serverMessages/hebrew":253,"../serverMessages/japanese":254,"../serverMessages/server_messages":255,"../serverMessages/spanish":256,"../utils/utils":260,"events":14,"react/lib/Object.assign":45}],260:[function(require,module,exports){
var objectAssign = require("react/lib/Object.assign")
var EventEmitter = require("events").EventEmitter
var configConstants = require("../constants/configConstants")
var appConstants = require("../constants/appConstants")
var CommonActions = require("../actions/CommonActions")
var serverMessages = require("../serverMessages/server_messages")
var ws, self

var utils = objectAssign({}, EventEmitter.prototype, {
  enableKeyboard: function() {
    virtualKeyBoard_login = $("#username, #password").keyboard({
      layout: "custom",
      customLayout: {
        default: [
          "! @ # $ % ^ & * + _",
          "1 2 3 4 5 6 7 8 9 0 {b}",
          "q w e r t y u i o p",
          "a s d f g h j k l",
          "{shift} z x c v b n m . {shift}",
          "{space}",
          "{a} {c}"
        ],
        shift: [
          "( ) { } [ ] = ~ ` -",
          "< > | ? / \" : ; , ' {b}",
          "Q W E R T Y U I O P",
          "A S D F G H J K L",
          "{shift} Z X C V B N M . {shift}",
          "{space}",
          "{a} {c}"
        ]
      },
      css: {
        container:
          "ui-widget-content ui-widget ui-corner-all ui-helper-clearfix custom-keypad"
      },
      reposition: true,
      alwaysOpen: false,
      initialFocus: true,
      visible: function(e, keypressed, el) {
        el.value = ""
        //$(".authNotify").css("display","none");
      },

      accepted: function(e, keypressed, el) {
        var usernameValue = document.getElementById("username").value
        var passwordValue = document.getElementById("password").value
        if (
          usernameValue != null &&
          usernameValue != "" &&
          passwordValue != null &&
          passwordValue != ""
        ) {
          $("#loginBtn").prop("disabled", false)
        } else {
          $("#loginBtn").prop("disabled", true)
        }
      }
    })
  },
  

  connectToWebSocket: function(data) {
    var stationId = data;
    sessionStorage.setItem("stationId", stationId);
    console.log("=======> utils.js -> connectToWebSocket()");
    
    var url = configConstants.WEBSOCKET_IP + "/wms-extraction/extraction-app-ws?ppsStn=" + stationId
    console.log(url);
    self = this
    ws = new WebSocket(url);
    if ("WebSocket" in window) {
      ws.onopen = function() {
        $("#username, #password").prop("disabled", false)
        console.log("=====================> websocket connected established...OPENED")
        
        utils.checkSessionStorage()
        clearTimeout(utils.connectToWebSocket)
      }
      ws.onmessage = function(evt) {
        console.log("=====================> onMessage");
        if (
          evt.data == "CLIENTCODE_409" ||
          evt.data == "CLIENTCODE_412" ||
          evt.data == "CLIENTCODE_401" ||
          evt.data == "CLIENTCODE_400" ||
          evt.data == "CLIENTCODE_503" ||
          evt.data == "CLIENTCODE_403"){
              var msgCode = evt.data;

              CommonActions.showErrorMessage(serverMessages[msgCode])
              sessionStorage.setItem("sessionData", null);

              CommonActions.loginSeat(false)
              utils.enableKeyboard()
          }
        // else if (evt.data === resourceConstants.CLIENTCODE_MODE_CHANGED) {
        //   console.log(" else if =====================> sessionLogout");
        //   utils.sessionLogout()
        //   return false
        // } 
        else {
          console.log(" else  =====================> sessionLogout");
          var received_msg = evt.data
          var data
          try {
            data = JSON.parse(evt.data)
            if (data.hasOwnProperty("data")) {
              if (data.data == "disconnect") {
                utils.sessionLogout()
                return false
              }
            }
            readStateData(data)
            CommonActions.setCurrentSeat(data)
            //CommonActions.setCurrentSeat(data.state_data)
          } catch (err) {
            //intentionally left blank
          }

          CommonActions.setServerMessages()
        }
      }
      ws.onclose = function(event) {
        //serverMessages.CLIENTCODE_003;
        /* alert(JSON.stringify(evt));
                 if(evt == "CLIENTCODE_409" || evt == "CLIENTCODE_503"){
                     var msgCode = evt;
                     console.log(serverMessages[msgCode]);
                     CommonActions.showErrorMessage(serverMessages[msgCode]);
                     CommonActions.logoutSession(true);
                 }*/
        //$("#username, #password").prop('disabled', true);
        console.log("Connection is closed...");
        var stationId = sessionStorage.getItem("stationId");
        
        
        setTimeout(utils.connectToWebSocket(stationId), 2000);// try reconnecting post 2 seconds
      }
      ws.onerror = function (event){
        CommonActions.showErrorMessage(serverMessages[event.type]);
      }
    } else {
      alert("WebSocket NOT supported by your Browser!")
    }
  },

  getCurrentLang: function() {
    var localeStr = window.sessionStorage.getItem("localeData"),
      localeObj = localeStr ? JSON.parse(localeStr) : {},
      localeLang = localeObj && localeObj.data ? localeObj.data.locale : null
    return localeLang
  },

  get3dotTrailedText: function(){},
  displayData: function() {},


  checkSessionStorage: function() {
    var sessionData = JSON.parse(sessionStorage.getItem("sessionData"))
    if (sessionData === null) {
    } else {
      var webSocketData = {
        data_type: "auth",
        data: {
          "auth-token": sessionData.data["auth-token"],
          stationId: sessionData.data.stationId,
          userName: sessionData.data.userName
        }
      }
      utils.sendLoginConfirmation(webSocketData);
    }
  },
  
  storeSession: function(data) {
    console.log(" ===>  utils.js ===> storeSession ()");
    // Put the object into storage
    sessionStorage.setItem("sessionData", JSON.stringify(data))
  },

  sendLoginConfirmation: function(data){
    console.log("=== >%c login Confirmation ()", "color:red")
    var stationId = data.data.stationId;
    var username= data.data.userName;
    console.log("station Id is " + data.data.stationId);
    console.log("username is " + data.data.userName);

    $.ajax({
      type: "POST",
      url: "http://192.168.8.193:8080/api-gateway/extraction-service/wms-extraction/extraction-app/login?ppsStn="+stationId,
      data: JSON.stringify({
        userName: username
      }),
     // dataType: "json",
      headers: {
        "content-type": "application/json",
        accept: "application/json"
      }
    })
    .done(function(response) {
      console.log("success ===> from login COnfirmation");
      setTimeout(CommonActions.operatorSeat, 0, true)
    })
    .fail(function(data, jqXHR, textStatus, errorThrown) {
      CommonActions.showErrorMessage(data)
    })
  },

  postDataToWebsockets: function(data) {
    console.log(" ===>  utils.js ===> postDataToWebsockets ()");
    console.log(JSON.stringify(data))

    ws.send(JSON.stringify(data))
    setTimeout(CommonActions.operatorSeat, 0, true)
  },

  getAuthToken: function(data) {
    sessionStorage.setItem("sessionData", null)
      var loginData = {
        username: data.data.username,
        password: data.data.password,
        grant_type: "password",
        role: ["ROLE_PICK"],
        action: "LOGIN",
        context: {
          entity_id: "1",
          app_name: "boi_ui"
        }
      }
      $.ajax({
        type: "POST",
        url: configConstants.INTERFACE_IP + "/api/auth/token",
        //url: "https://192.168.8.193/api/auth/token",
        data: JSON.stringify(loginData),
        dataType: "json",
        headers: {
          "content-type": "application/json",
          accept: "application/json"
        }
      })
      .done(function(response) {
        var webSocketData = {
          data_type: "auth",
          data: {
            "auth-token": response.auth_token,
            userName: data.data.username,
            stationId: data.data.seat_name  //"1"
          }
        }
        utils.storeSession(webSocketData)
        //utils.postDataToWebsockets(webSocketData)
        utils.sendLoginConfirmation(webSocketData);
      })
      .fail(function(data, jqXHR, textStatus, errorThrown) {
        CommonActions.showErrorMessage(data.responseJSON.error)
      })
  },

  sessionLogout: function(data) {
    sessionStorage.setItem("sessionData", null)
    location.reload()
    $.ajax({
      type: "GET",
      url:
        configConstants.INTERFACE_IP +
        appConstants.API +
        appConstants.AUTH +
        appConstants.LOGOUT,
      dataType: "json",
      headers: {
        "content-type": "application/json",
        accept: "application/json",
        "Authentication-Token": JSON.parse(
          sessionStorage.getItem("sessionData")
        )["data"]["auth-token"]
      }
    })
      .done(function(response) {
        sessionStorage.setItem("sessionData", null)
        location.reload()
      })
      .fail(function(data, jqXHR, textStatus, errorThrown) {
        alert("Logout Failed")
      })
  },
  postDataToTower: function(data) {
    var retrieved_token = sessionStorage.getItem("sessionData")
    var authentication_token = JSON.parse(retrieved_token)["data"]["auth-token"]
    $.ajax({
      type: "POST",
      url: configConstants.INTERFACE_IP + "/tower/api/v1/mle/pps-call",
      data: JSON.stringify(data),
      dataType: "json",
      headers: {
        "content-type": "application/json",
        accept: "application/json",
        "Authentication-Token": authentication_token
      }
    })
      .done(function(response) {
        alert("Your call ticket was submitted successfully")
        CommonActions.hideSpinner()
      })
      .fail(function(jqXhr) {
        console.log(jqXhr)
        alert("There was a problem in submitting your call ticket.")
        CommonActions.hideSpinner()
      })
  },

  postDataToInterface: function(data, stationId) {
    console.log(" %c utils.js ===> postDataToInterface()", "color:red");
    console.log("====================> station id" + stationId);
    var retrieved_token = sessionStorage.getItem("sessionData")
    var authentication_token = JSON.parse(retrieved_token)["data"]["auth-token"]
    if(!stationId){
      stationId = sessionStorage.getItem("stationId");
    }
    $.ajax({
      type: "POST",
      url:  configConstants.PLATFORM_IP + "/api-gateway/extraction-service/wms-extraction/extraction-app/ui-event?ppsStn=" + stationId,
      data: JSON.stringify(data),
      dataType: "json",
      headers: {
        "content-type": "application/json",
        accept: "application/json",
        "Authentication-Token": authentication_token
      }
    })
      .done(function(response) {
        CommonActions.hideSpinner()
      })
      .fail(function(jqXhr) {
        console.log(jqXhr)
        CommonActions.hideSpinner()
        if (jqXhr.status == 401 || jqXhr.status == 403) {
          var msgCode =
            jqXhr.status == 401 ? "CLIENTCODE_401" : "CLIENTCODE_403"
          CommonActions.showErrorMessage(serverMessages[msgCode])
          sessionStorage.setItem("sessionData", null)
          CommonActions.loginSeat(false)
          utils.enableKeyboard()
        }
      })
  },
  generateSessionId: function(data) {
    var text = ""
    var possible =
      "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
    for (var i = 0; i < 50; i++)
      text += possible.charAt(Math.floor(Math.random() * possible.length))
    localStorage.setItem("session", text)
    localStorage.setItem("stationId", data.data.seat_name)
  },
  getPeripheralData: function(type, seat_name, status, method) {
    console.log("===== > utils.js ===> getPeripheralData()");
    var retrieved_token = sessionStorage.getItem("sessionData")
    var authentication_token = JSON.parse(retrieved_token)["data"]["auth-token"]
    $.ajax({
      type: "GET",
      url:
        configConstants.INTERFACE_IP +
        appConstants.API +
        appConstants.PPS_SEATS +
        seat_name +
        "/" +
        appConstants.PERIPHERALS +
        "?type=" +
        type,
      dataType: "json",
      headers: {
        "content-type": "application/json",
        accept: "application/json",
        "Authentication-Token": authentication_token
      }
    })
      .done(function(response) {
        CommonActions.updateSeatData(response.data, type, status, method)
      })
      .fail(function(jqXhr) {})
  },
  ///itemsearch
  getOrphanItemData: function(data, seat_name) {
    var dataToSent = "?" + "barcode=" + data + "&" + "ppsId=" + seat_name
    var retrieved_token = sessionStorage.getItem("sessionData")
    var authentication_token = JSON.parse(retrieved_token)["data"]["auth-token"]
    $.ajax({
      type: "GET",
      url:
        configConstants.INTERFACE_IP +
        appConstants.API +
        appConstants.API_GATEWAY +
        appConstants.SR_SERVICE +
        appConstants.PLATFORM_SRMS +
        appConstants.SERVICE_REQUEST +
        appConstants.SEARCH_ITEM +
        dataToSent,
      dataType: "json",
      headers: {
        "content-type": "application/json",
        accept: "application/json",
        "Authentication-Token": authentication_token
      }
    })
      .done(function(response) {
        CommonActions.updateSeatData(response.data, "orphanSearch")
      })
      .fail(function(jqXhr) {
        CommonActions.updateSeatData([], "orphanSearch")
      })
  },
  getBOIConfig: function() {
    $.ajax({
      type: "GET",
      url: configConstants.BOI_CONFIG
    })
      .done(function(response) {
        CommonActions.updateSeatData(response, "BOI_CONFIG")
      })
      .fail(function(jqXhr) {
        CommonActions.updateSeatData(null, "BOI_CONFIG")
      })
  },
  updatePeripherals: function(data, method, seat_name) {
    console.log("===== > utils.js ===> updatePeripherals()");
    var retrieved_token = sessionStorage.getItem("sessionData")
    var authentication_token = JSON.parse(retrieved_token)["data"]["auth-token"]
    var url
    var method = method
    if (method == "POST") {
      url =
        configConstants.INTERFACE_IP +
        appConstants.API +
        appConstants.PPS_SEATS +
        seat_name +
        "/" +
        appConstants.PERIPHERALS +
        appConstants.ADD
    } else {
      url =
        configConstants.INTERFACE_IP +
        appConstants.API +
        appConstants.PPS_SEATS +
        appConstants.PERIPHERALS +
        "/" +
        data.peripheral_type +
        "/" +
        encodeURIComponent(data.peripheral_id) /*.replace(/\//g, "%2F")*/
    }
    $.ajax({
      type: method,
      url: url,
      data: JSON.stringify(data),
      dataType: "json",
      headers: {
        "content-type": "application/json",
        accept: "application/json",
        "Authentication-Token": authentication_token
      }
      /*complete:function(xhr,textStatus) {
                if(xhr.status == 409)
                    utils.getPeripheralData(data.peripheral_type, seat_name , '409', method)

            //utils.getPeripheralData(data.peripheral_type, seat_name , 'success', method)
           // CommonActions.updateSeatData(response.data, data.peripheral_type); 
       }*/
    })
      .done(function(response, statusText, xhr) {
        utils.getPeripheralData(
          data.peripheral_type,
          seat_name,
          "success",
          method
        )
        // CommonActions.updateSeatData(response.data, data.peripheral_type);
      })
      .fail(function(jqXhr) {
        if (jqXhr.status == 409)
          utils.getPeripheralData(
            data.peripheral_type,
            seat_name,
            "409",
            method
          )
        else if (jqXhr.status == 400)
          utils.getPeripheralData(
            data.peripheral_type,
            seat_name,
            "400",
            method
          )
        else
          utils.getPeripheralData(
            data.peripheral_type,
            seat_name,
            "fail",
            method
          )
      })
  },
  createLogData: function(message, type) {
    var data = {}
    data["message"] = message
    data["type"] = type
    data["session"] = localStorage.getItem("session")
    return data
  },

  frntStringTransform: function(messgCode, stringArg, arg) {
    var message_args = []
    if (stringArg.length < 1 || arg === appConstants.INVOICE_REQUIRED) {
      message_args = stringArg ? stringArg : []
    } else {
      message_args = stringArg ? ["STN", 20] : [] // 20 is max length...fixed from backend
    }
    message_args.unshift(
      serverMessages[messgCode] ? serverMessages[messgCode] : ""
    )
    return _.apply(null, message_args)
  },
  logError: function(data) {
    $.ajax({
      type: "POST",
      url: "http://192.168.3.93:300/api/log",
      data: data,
      dataType: "json"
    }).success(function(response) {
      console.log("Error logged Successfully")
      console.log("Log Details :")
      console.log(JSON.stringify(data))
    })
  }
})

var readStateData = function(data) {
  console.log("=======> UTitls.js -> readStateData()");
  console.log(data)
  CommonActions.setPickFrontData(data)
  //CommonActions.setPickFrontData(data.state_data);
}

module.exports = utils

},{"../actions/CommonActions":181,"../constants/appConstants":242,"../constants/configConstants":243,"../serverMessages/server_messages":255,"events":14,"react/lib/Object.assign":45}]},{},[247]);
